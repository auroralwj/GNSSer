<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GeoSolution</name>
    </assembly>
    <members>
        <member name="T:Geo.Algorithm.AdjustmentType">
            <summary>
            平差类型
            </summary>
        </member>
        <member name="F:Geo.Algorithm.AdjustmentType.参数平差">
            <summary>
            参数平差，普通最小二乘法。
            </summary>
        </member>
        <member name="F:Geo.Algorithm.AdjustmentType.卡尔曼滤波">
            <summary>
            卡尔曼滤波
            </summary>
        </member>
        <member name="F:Geo.Algorithm.AdjustmentType.均方根滤波">
            <summary>
            均方根滤波
            </summary>
        </member>
        <member name="F:Geo.Algorithm.AdjustmentType.序贯平差">
            <summary>
            序贯平差
            </summary>
        </member>
        <member name="F:Geo.Algorithm.AdjustmentType.参数加权平差">
            <summary>
            参数加权平差
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.Adjustment">
            <summary>
            平差通用接口。包含观测值，先验值，预测值和估计值。
            </summary>
        </member>
        <member name="T:Geo.IToTabRow">
            <summary>
            为表格而设计
            </summary>
        </member>
        <member name="M:Geo.IToTabRow.GetTabTitles">
            <summary>
            每个元素的标题
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IToTabRow.GetTabValues">
            <summary>
            转换为以Tab为分隔符的字符串，易于粘贴到Excel等表格中。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Adjustment.#ctor">
            <summary>
            平差。构造函数。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Adjustment.Process">
            <summary>
            数据计算
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Adjustment.SetApprox(System.Double[])">
            <summary>
            可选，独立设置。
            </summary>
            <param name="approx"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Adjustment.GetIndexOf(System.String)">
            <summary>
            参数的编号，从 0 开始。失败则返回 -1.
            </summary>
            <param name="paramName">参数名称</param>
            <returns>失败则返回 -1</returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Adjustment.Get(Geo.Algorithm.Adjust.AdjustParamVectorType)">
            <summary>
            返回不同类型的参数加权向量
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Adjustment.GetWeightedVector(System.Collections.Generic.List{System.String},Geo.Algorithm.Adjust.WeightedVector)">
            <summary>
            提取加权向量。此处只提取了方差阵对角线内容。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Adjustment.SolveAmbiFixedResult(Geo.Algorithm.Vector,Geo.Algorithm.Vector)">
            <summary>
            固定模糊度
            改。cy. 2017.8.3
            </summary>
            <param name="fixedAmbiguities"></param>
            <param name="prevFixedAmbiguities"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Adjustment.SolveAmbiFixedResult(Geo.Algorithm.Adjust.WeightedVector,Geo.Algorithm.Vector)">
            <summary>
            求固定解
            </summary>
            <param name="fixedAmbiguities">已经固定的模糊度</param>
            <param name="totalFloat">浮点解平差信息</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Adjustment.SolveAmbiFixedResult(Geo.Algorithm.Adjust.WeightedVector,Geo.Algorithm.Vector,Geo.Algorithm.IMatrix)">
            <summary>
            解算固定解，将固定解当成虚拟观测量,对原浮点解进行约束，条件平差。
            </summary>
            <param name="coeffOfParam">系数阵</param>
            <param name="totalFloat">原浮点解</param>
            <param name="fixedObs">已经固定的参数，固定解当成虚拟观测量</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Adjustment.BQBT(Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix)">
            <summary>
            实用方法，Q为对称阵,速度较慢？摘抄自 宋力杰测量平差程序设计 P11
            </summary>
            <param name="B"></param>
            <param name="Q">可能非对称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Adjustment.ATPA(Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix)">
            <summary>
            快捷计算方法
            </summary>
            <param name="A">系数阵</param>
            <param name="P">对角阵</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Adjustment.GetIndexOfLowerTriangleMatrix(System.Int32,System.Int32)">
            <summary>
            获取以一维数组存储的下三角矩阵的编号
            </summary>
            <param name="rowIndex"></param>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Adjustment.ATPL(Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix)">
            <summary>
            快捷方法
            </summary>
            <param name="A"></param>
            <param name="Q"></param>
            <param name="L"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Adjustment.restrictadjust">
            <summary>
            对坐标进行约束
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Adjustment.PppArmbiResolve(System.Collections.Generic.Dictionary{System.Int32,System.Double},System.Collections.Generic.List{System.Int32})">
            <summary>
            PPP模糊度固定
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Adjustment.sort(System.Double[]@)">
            <summary>
            冒泡排序
            </summary>
            <param name="arr"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Adjustment.erfc(System.Double)">
            <summary>
            erfc
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Adjustment.GetTableRow(Geo.Algorithm.Vector,System.Collections.Generic.List{System.String})">
            <summary>
            用于打印输出和分析。
            </summary>
            <param name="vector"></param>
            <param name="FullParamNames"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Adjustment.GetRmsedTableRow(Geo.Algorithm.Adjust.WeightedVector,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            用于具有多列的对象
            </summary>
            <param name="vector"></param>
            <param name="FullParamNames">列的全部名称</param>
            <param name="keyNames">列关键字</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Adjustment.GetTableRow``1(System.Collections.Generic.Dictionary{System.String,``0},System.Collections.Generic.List{System.String},System.Object,System.Collections.Generic.List{System.String})">
            <summary>
            用于具有多列的对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="keyDic">字典</param>
            <param name="FullParamNames">列的全部名称</param>
            <param name="Placeholder">默认数值</param>
            <param name="keyNames">列关键字</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Adjustment.ParamNames">
            <summary>
            参数顺序和名称。必须设置！！！
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Adjustment.HasApriori">
            <summary>
            是否具有先验参数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Adjustment.HasApprox">
            <summary>
            是否具有近似值。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Adjustment.HasPredict">
            <summary>
            是否具有预测值
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Adjustment.Observation">
            <summary>
            观测值，通常为改正数，即观测值减去近似值。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Adjustment.ObsCount">
            <summary>
            观测值数量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Adjustment.ApproxVector">
            <summary>
            近似值，即所求最终参数的近似值，当先验值不是残差时，近似值可以直接作为先验值。
            近似值为参数近似数值，没有权信息，其估计残差才有权值信息。
            如果不设置近似值，则近似值为 0 。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Adjustment.Apriori">
            <summary>
            先验值，与参数估计值同质，如果采用参数的改正量进行计算时，先验值通常是值为 0 的向量。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Adjustment.Predicted">
            <summary>
            参数估计值及其权倒数、协方差
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Adjustment.Estimated">
            <summary>
            估计值，如果具有残差，则直接存储值为先验值或近似值，通过调用 CorrectedVector 调用改正后的值。
            参数估计值及其权倒数、协方差。规定：向量为先验值，改正数为计算偏移量。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Adjustment.Corrected">
            <summary>
            改正后的数值.如果具有近似值，则 = 估计值 + 近似值，
            否则直接返回估计值。 权逆阵直接为估计值的权逆阵。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Adjustment.CoeffOfParam">
            <summary>
            观测方程中参数的系数阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Adjustment.CovaOfEstimatedParam">
            <summary>
            参数（未知数）的协方差阵。D = Inverse(Normal) * VarianceFactor.
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Adjustment.StdOfEstimatedParam">
            <summary>
            估值向量方差
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Adjustment.InverseWeightOfTransfer">
            <summary>
            参数状态转移的权逆阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Adjustment.Transfer">
            <summary>
            状态转移矩阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Adjustment.VarianceFactor">
            <summary>
            单位权方差 Aposteriori variance factor.验后方差因子。
            方差：随机变量与其数学期望之差的平方的数学期望，称为方差。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Adjustment.StdDev">
            <summary>
              单位权中误差,均方差(Standard deviation )估值。
             方差不可求而中误差可求. 
             中误差：root mean square error; RMSE,也可称为 标准差 或 均方根差？
             单位权中误差： unit weight mean square error.
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Adjustment.Freedom">
             <summary>
            自由度，样本中独立或能自由变化的变量个数,通常为：样本个数 - 被限制的变量个数或条件数，或多余观测数。
             </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Adjustment.ParamCount">
            <summary>
            未知参数数量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Adjustment.PostfitResidual">
            <summary>
            验后残差 V = L - A * X
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.SequentialAdjustment201706">
            <summary>
            序贯平差 
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SequentialAdjustment201706.#ctor(Geo.Algorithm.Adjust.BaseAdjustMatrixBuilder)">
            <summary>
            对应的方法为 Process
            </summary>
            <param name="builder">需要上一历元的平差结果和当前观测结果</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SequentialAdjustment201706.Process">
            <summary>
            计算
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SequentialAdjustment201706.Freedom">
            <summary>
            自由度
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.SequentialAdjustmentOld">
            <summary>
            序贯平差
            
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SequentialAdjustmentOld.#ctor(System.Double[][],System.Double[][],System.Double[][],System.Double[][],System.Double[][],System.Int32)">
            <summary>
            序贯平差构造函数
            </summary>
            <param name="coeffOfParams">参数系数阵</param>
            <param name="obs">观测量</param>
            <param name="inverseWeight_obs">观测量的权逆阵</param>
            <param name="lastEstimatedParam">参数上一次估计值</param>
            <param name="lastInverseWeight_estParam">参数上一次权逆阵</param>
            <param name="lastObsCount">上一次观测数</param>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SequentialAdjustmentOld.ObsError">
            <summary>
            观测值误差 V
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SequentialAdjustmentOld.LastObsCount">
            <summary>
            上一次观测数量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SequentialAdjustmentOld.LastEstimatedParam">
            <summary>
            上一次参数估值
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SequentialAdjustmentOld.LastEstParamInverseWeight">
            <summary>
            上一次权逆阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SequentialAdjustmentOld.WeightOfObs">
            <summary>
            观测量的权阵.Weight=InverseWeight^(-1)
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SequentialAdjustmentOld.InverseWeightOfObs">
            <summary>
            观测值权逆阵。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SequentialAdjustmentOld.InverseWeightOfParam">
            <summary>
            参数的权逆阵（协因数阵） Inverse Weight Matrix（Cofactor Matrix ）of Some Vector。
            协因数阵。InverseWeight=Weight^(-1)
            法方程系数阵的逆阵为未知参数向量的权逆阵。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SequentialAdjustmentOld.EstimatedParam">
            <summary>
            参数阵的值.为计算结果。矩阵。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SequentialAdjustmentOld.ParamVector">
            <summary>
            以一维数据形式返回解算的参数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SequentialAdjustmentOld.CovaOfParams">
            <summary>
            参数（未知数）的协方差阵,权阵*单位权方差。D = Inverse(Normal) * VarianceFactor.
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SequentialAdjustmentOld.VarianceFactor">
            <summary>
            Aposteriori variance factor.验后方差因子（单位权方差）。
            方差：随机变量与其数学期望之差的平方的数学期望，称为方差。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SequentialAdjustmentOld.StdDev">
            <summary>
             单位权中误差，均方差(Standard deviation )估值。
             方差不可求而中误差可求. 
             中误差：root mean square error; RMSE,也可称为 标准差 或 均方根差？
             单位权中误差： unit weight mean square error.
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SequentialAdjustmentOld.ObsCount">
            <summary>
            观测值数量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SequentialAdjustmentOld.ParamsCount">
            <summary>
            未知参数数量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SequentialAdjustmentOld.Freedom">
            <summary>
            自由度，样本中独立或能自由变化的变量个数,通常为：样本个数 - 被限制的变量个数或条件数，或多余观测数。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.SimpleKalmanFilter201706">
            <summary>
            Kalman 滤波计算器，包含预报和估计两部分。
            参见介绍 by Welch, G. and G. Bishop.
            "An Introduction to the Kalman IsSatisfied", at:
            http://www.cs.unc.edu/~welch/kalman/kalmanIntro.html.
            此版本修改自 G. J. Bierman. "Factorization Methods for
            Discrete Sequential Estimation". Mathematics in Science and
            Engineering, Vol. 128. Academic Press, New York, 1977. 
            其具有更好的稳定性。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SimpleKalmanFilter201706.#ctor(Geo.Algorithm.Adjust.BaseAdjustMatrixBuilder)">
            <summary>
            对应的方法为 Process
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SimpleKalmanFilter201706.Process">
            <summary>
            计算
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SimpleKalmanFilter201706.Predict(Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix)">
            <summary>
            预报
            </summary>
            <param name="TransferMatrix"></param>
            <param name="InverseWeightOfTransfer"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SimpleKalmanFilter201706.NewCorrect(Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix)">
            <summary>
             估计，改正。通常采用的方法。From 崔阳、2017.06.22
            </summary>
            <param name="observation"></param>
            <param name="control"></param>
            <param name="covaOfObs"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Geo.Algorithm.Adjust.SimpleKalmanFilter201706.CorrectNormal(Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix)”忽略有格式错误的 XML 注释 -->
        <member name="M:Geo.Algorithm.Adjust.SimpleKalmanFilter201706.CorrectSimple(Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix)">
            <summary>
            估计，改正。一个更健壮的方法。
            </summary>
            <param name="observation">观测值信息</param>
            <param name="control">控制矩阵，有时为非对称阵，如PPP</param>
            <param name="covaOfObs">观测值协方差</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SimpleKalmanFilter201706.ToString">
            <summary>
            显示
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SimpleKalmanFilter201706.GetTransferModelDic">
            <summary>
            将状态转移模型数值填充。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleKalmanFilter201706.PredictParam">
            <summary>
            先验值。  A priori state estimation.
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleKalmanFilter201706.CovaOfPredictParam">
             <summary>
            先验值方差。  A priori error covariance.
             </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleKalmanFilter201706.AprioriParam">
            <summary>
            先验参数矩阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleKalmanFilter201706.CovaOfAprioriParam">
            <summary>
            先验值的协方差矩阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleKalmanFilter201706.InverseWeightOfTransfer">
            <summary>
            参数状态转移的权逆阵
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.SimpleKalmanFilter2016">
            <summary>
            Kalman 滤波计算器，包含预报和估计两部分。
            参见介绍 by Welch, G. and G. Bishop.
            "An Introduction to the Kalman IsSatisfied", at:
            http://www.cs.unc.edu/~welch/kalman/kalmanIntro.html.
            此版本修改自 G. J. Bierman. "Factorization Methods for
            Discrete Sequential Estimation". Mathematics in Science and
            Engineering, Vol. 128. Academic Press, New York, 1977. 
            其具有更好的稳定性。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SimpleKalmanFilter2016.#ctor(Geo.Algorithm.Adjust.BaseAdjustMatrixBuilder)">
            <summary>
            对应的方法为 Process
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SimpleKalmanFilter2016.Process">
            <summary>
            计算
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SimpleKalmanFilter2016.Predict(Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix)">
            <summary>
            预报
            </summary>
            <param name="TransferMatrix"></param>
            <param name="InverseWeightOfTransfer"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SimpleKalmanFilter2016.Correct(Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix)">
            <summary>
            估计，改正。
            </summary>
            <param name="observation"></param>
            <param name="control">有时为非对称阵，如PPP</param>
            <param name="covaOfObs"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SimpleKalmanFilter2016.ToString">
            <summary>
            显示
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SimpleKalmanFilter2016.GetTransferModelDic">
            <summary>
            将状态转移模型数值填充。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleKalmanFilter2016.PredictParam">
            <summary>
            先验值。  A priori state estimation.
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleKalmanFilter2016.CovaOfPredictParam">
             <summary>
            先验值方差。  A priori error covariance.
             </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleKalmanFilter2016.AprioriParam">
            <summary>
            先验参数矩阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleKalmanFilter2016.CovaOfAprioriParam">
            <summary>
            先验值的协方差矩阵
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.SimpleKalmanFilterOld">
            This class computes the solution using a Kalman filter.
            
             
            
             More information about the Kalman filter may be found in the
             excellent and easy introduction by Welch, G. and G. Bishop.
             "An Introduction to the Kalman IsSatisfied", at:
             http://www.cs.unc.edu/~welch/kalman/kalmanIntro.html.
            
             However, be aware that the algorithm used here is the modified
             version presented in G. J. Bierman. "Factorization Methods for
             Discrete Sequential Estimation". Mathematics in Science and
             Engineering, Vol. 128. Academic Press, New York, 1977. This version
             enjoys better numerical stability.
            
        </member>
        <member name="M:Geo.Algorithm.Adjust.SimpleKalmanFilterOld.#ctor(Geo.Algorithm.Adjust.WeightedVector)">
            <summary>
            对应的方法为 Compute
            </summary>
            <param name="apriori"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SimpleKalmanFilterOld.#ctor(Geo.Algorithm.Adjust.BaseAdjustMatrixBuilder)">
            <summary>
            对应的方法为 Process
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SimpleKalmanFilterOld.GetTransferModelDic">
            <summary>
            将状态转移模型数值填充。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleKalmanFilterOld.EstParam">
            <summary>
            验后估值。  A posteriori state estimation. This is usually your target.
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleKalmanFilterOld.CovaOfEstParam">
            <summary>
            验后估值方差。  A posteriori error covariance.
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleKalmanFilterOld.PredictParam">
            <summary>
            先验值。  A priori state estimation.
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleKalmanFilterOld.CovaOfPredictParam">
             <summary>
            先验值方差。  A priori error covariance.
             </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleKalmanFilterOld.AprioriParam">
            <summary>
            先验参数矩阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleKalmanFilterOld.CovaOfAprioriParam">
            <summary>
            先验值的协方差矩阵
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.ProgressiveAdjustmentWithSameParam">
            <summary>
            参数固定的逐次分组平差 (阶段平差) 
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.ProgressiveAdjustmentWithSameParam.#ctor(Geo.Algorithm.Adjust.BaseAdjustMatrixBuilder)">
            <summary>
            对应的方法为 Process
            </summary>
            <param name="builder">需要上一历元的平差结果和当前观测结果</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.ProgressiveAdjustmentWithSameParam.Process">
            <summary>
            计算
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ProgressiveAdjustmentWithSameParam.GroupIndex">
            <summary>
            分组数量从0开始。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.AdjusterFactory">
             <summary>
            平差器构造工厂
             </summary>
        </member>
        <member name="M:Geo.Algorithm.AdjusterFactory.Create(Geo.Algorithm.Adjust.BaseAdjustMatrixBuilder,Geo.Algorithm.AdjustmentType)">
            <summary>
            生产平差器
            </summary>
            <param name="adjustMatrixBuilder"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Algorithm.Adjust.AdjustmentUtil">
            <summary>
            平差通用接口。包含观测值，先验值，预测值和估计值。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.AdjustmentUtil.BQBT(Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix)">
            <summary>
            实用方法，Q为对称阵,速度较慢？摘抄自 宋力杰测量平差程序设计 P11
            </summary>
            <param name="B"></param>
            <param name="Q">可能非对称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.AdjustmentUtil.BqbtOnce(System.Double[],System.Double[][],System.Double[][],System.Int32)">
            <summary>
            计算一次
            </summary>
            <param name="resultArray"></param>
            <param name="dataB"></param>
            <param name="dataQ"></param>
            <param name="rowIndex"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.AdjustmentUtil.BQBT(Geo.Algorithm.DiagonalMatrix,Geo.Algorithm.IMatrix)">
            <summary>
            当B为对角阵时
            </summary>
            <param name="B"></param>
            <param name="Q"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.AdjustmentUtil.BqbtOnce(System.Double[]@,System.Double[],System.Double[][],System.Int32)">
            <summary>
            计算一次
            </summary>
            <param name="resultArray"></param>
            <param name="diagnoalB"></param>
            <param name="qArray"></param>
            <param name="rowIndex"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.AdjustmentUtil.ATPA(Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix)">
            <summary>
            快捷计算方法
            </summary>
            <param name="A">系数阵</param>
            <param name="P">对角阵</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.AdjustmentUtil.AtpaOnce(System.Double[],System.Double[][],System.Double[],System.Int32)">
            <summary>
            计算一次
            </summary>
            <param name="resultArray"></param>
            <param name="aArray"></param>
            <param name="diagonalP"></param>
            <param name="rowIndex"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.AdjustmentUtil.GetIndexOfLowerTriangleMatrix(System.Int32,System.Int32)">
            <summary>
            获取以一维数组存储的下三角矩阵的编号
            </summary>
            <param name="rowIndex"></param>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.AdjustmentUtil.ATPL(Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix)">
            <summary>
            快捷方法
            </summary>
            <param name="A"></param>
            <param name="Q"></param>
            <param name="L"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Algorithm.Adjust.AdjustName">
            <summary>
            平差参数名称
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.CommonFileAdjuster">
            <summary>
            通用平差器
            </summary>
        </member>
        <member name="T:Geo.ICancelAbale">
            <summary>
            具有取消属性的接口
            </summary>
        </member>
        <member name="P:Geo.ICancelAbale.IsCancel">
            <summary>
            指示，是否取消
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.CommonFileAdjuster.Process(System.String)">
            <summary>
            计算
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.CommonFileAdjuster.CreateInitAprioriParam(System.Int32)">
            <summary>
            第一次参数先验值。 创建初始先验参数值和协方差阵。只会执行一次。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.CommonFileAdjuster.Process(Geo.Algorithm.Adjust.ManualAdjustMatrixBuilder)">
            <summary>
            计算
            </summary>
            <param name="matrixBuilder"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.CommonFileAdjuster.OutputResult">
            <summary>
            输出结果。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.CommonFileAdjuster.ProgressNotifier">
            <summary>
            进度条
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.CommonFileAdjuster.OutDirectory">
            <summary>
            输出目录
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.CommonFileAdjuster.AdjustmentType">
            <summary>
            平差器类型
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.CommonFileAdjuster.ResultTables">
            <summary>
            平差结果表格
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.CommonFileAdjuster.CurrentResult">
            <summary>
            当前计算结果。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.CommonFileAdjuster.IsCancel">
            <summary>
            是否取消
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.AioAdjustFileBuilder">
            <summary>
            All in one. 平差文件构造器
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.AioAdjustFileBuilder.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="Directory"></param>
            <param name="Name"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.AioAdjustFileBuilder.AddAdjustment(Geo.Algorithm.Adjust.Adjustment)">
            <summary>
            添加一个。
            </summary>
            <param name="Adjustment"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.AioAdjustFileBuilder.WriteToFile">
            <summary>
            写到文件
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.AioAdjustFileBuilder.Clear">
            <summary>
            清空内存
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.AioAdjustFileBuilder.AdjustTables">
            <summary>
            数据表
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.ManualAdjustMatrixBuilder">
            <summary>
            手动矩阵生成器
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.BaseAdjustMatrixBuilder">
            <summary>
            平差计算中需要转换的矩阵。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.SimpleAdjustMatrixBuilder">
            <summary>
            最简洁的平差矩阵生成器，平差计算中需要转换的矩阵。
            只需输入残差项即可。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.IAdjustMatrixBuilder">
            <summary>
            平差计算中需要转换的矩阵。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.IAdjustMatrixBuilder.Message">
            <summary>
            信息
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.IAdjustMatrixBuilder.IsAdjustable">
            <summary>
            指示是否可以平差。如果数据质量太差，则不推荐计算，以免影响结果。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.IAdjustMatrixBuilder.ParamNames">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.IAdjustMatrixBuilder.ObsCount">
            <summary>
            观测量，即设计矩阵的行数。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.IAdjustMatrixBuilder.ParamCount">
            <summary>
            参数数量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.IAdjustMatrixBuilder.CoeffOfDesign">
            <summary>
            设计阵，误差方程系数阵。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.IAdjustMatrixBuilder.ObsMinusApprox">
            <summary>
            观测值，一般为残差，即观测值减去近似值
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SimpleAdjustMatrixBuilder.#ctor">
            <summary>
            构造函数，
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SimpleAdjustMatrixBuilder.GetNewWeighedVectorInOrder(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},Geo.Algorithm.Adjust.WeightedVector,System.Double,System.Double)">
            <summary>
            按照新的参数顺序返回加权向量。权逆阵为对称阵。
            </summary>
            <param name="newParamNames">新的参数名称列表</param>
            <param name="oldParamNames">旧参数名称列表</param>
            <param name="oldVector">旧的加权向量</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SimpleAdjustMatrixBuilder.GetNewVectorInOrder(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},Geo.Algorithm.Vector)">
            <summary>
            按照新的参数顺序返回向量
            </summary>
            <param name="newParamNames"></param>
            <param name="oldParamNames"></param>
            <param name="oldVector"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleAdjustMatrixBuilder.Message">
            <summary>
            处理过程的信息，通常是出错信息。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleAdjustMatrixBuilder.IsAdjustable">
            <summary>
            指示是否可以平差。如果观测数据不足，或数据质量太差，则不推荐计算，以免影响结果。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleAdjustMatrixBuilder.ParamNames">
            <summary>
            参数名称和顺序.必须设置！！！
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleAdjustMatrixBuilder.IsParamsChanged">
            <summary>
            本历元参数是否改变
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleAdjustMatrixBuilder.ObsCount">
            <summary>
            观测量，即设计矩阵的行数。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleAdjustMatrixBuilder.ParamCount">
            <summary>
            参数数量,根据参数名称列表确定的参数数量。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleAdjustMatrixBuilder.CoeffOfDesign">
            <summary>
            设计阵，误差方程系数阵。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleAdjustMatrixBuilder.ObsMinusApprox">
            <summary>
            观测值，一般为残差，即观测值减去近似值.参数平差自由项， l = L - AX0， 观测值 减去 近似值。
            </summary> 
        </member>
        <member name="M:Geo.Algorithm.Adjust.BaseAdjustMatrixBuilder.#ctor">
            <summary>
            平差计算中需要转换的矩阵，构造函数
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.BaseAdjustMatrixBuilder.Build">
            <summary>
            生成
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BaseAdjustMatrixBuilder.HasApprox">
            <summary>
            参数是否具有初始值。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BaseAdjustMatrixBuilder.HasApriori">
            <summary>
            参数是否具有先验值。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BaseAdjustMatrixBuilder.Transfer">
            <summary>
            创建状态转移矩阵和噪声,注意：大多数状态转移模型为两个对角线矩阵。
            </summary>  
        </member>
        <member name="P:Geo.Algorithm.Adjust.BaseAdjustMatrixBuilder.ApproxParam">
            <summary>
            参数近似值，是参数实体，非改正项，可以为空
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BaseAdjustMatrixBuilder.AprioriObsCount">
            <summary>
            计算先验值时采用的观测个数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BaseAdjustMatrixBuilder.AprioriParam">
             <summary>
            参数先验值，具有权阵。
            如果以改正数作为参数进行计算，则数值向量通常为 0 
             </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BaseAdjustMatrixBuilder.ParamNameBuilder">
            <summary>
            参数名称生成器
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.ManualAdjustMatrixBuilder.#ctor">
            <summary>
            手动矩阵生成器
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.ManualAdjustMatrixBuilder.SetAprioriParam(Geo.Algorithm.Adjust.WeightedVector)">
            <summary>
            参数先验值
            </summary>
            <param name="AprioriParam"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.ManualAdjustMatrixBuilder.SetIsParamsChanged(System.Boolean)">
            <summary>
            设置参数是否改变
            </summary>
            <param name="IsParamsChanged"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.ManualAdjustMatrixBuilder.SetCoeffOfDesign(Geo.Algorithm.IMatrix)">
            <summary>
            设置设计阵
            </summary>
            <param name="CoeffOfDesign"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.ManualAdjustMatrixBuilder.SetObsMinusApprox(Geo.Algorithm.Adjust.WeightedVector)">
            <summary>
            设置观测值减去近似值
            </summary>
            <param name="ObsMinusApprox"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.ManualAdjustMatrixBuilder.SetTransfer(Geo.Algorithm.Adjust.WeightedMatrix)">
            <summary>
            设置转移矩阵
            </summary>
            <param name="Transfer"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.ManualAdjustMatrixBuilder.SetParamNames(System.Collections.Generic.List{System.String})">
            <summary>
            设置参数名称
            </summary>
            <param name="ParamNames"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ManualAdjustMatrixBuilder.AprioriParam">
            <summary>
            参数近似值
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ManualAdjustMatrixBuilder.IsParamsChanged">
            <summary>
            参数是否改变
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ManualAdjustMatrixBuilder.CoeffOfDesign">
            <summary>
            系数阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ManualAdjustMatrixBuilder.ObsMinusApprox">
            <summary>
            观测值减去近似值
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.OneDimAdjustMatrixBuilder">
            <summary>
            一维滤波矩阵构造器。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.OneDimAdjustMatrixBuilder.#ctor(Geo.RmsedNumeral,Geo.Algorithm.Adjust.Adjustment)">
            <summary>
            构造函数
            </summary>
            <param name="obs"></param>
            <param name="PrevAdjustment"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.OneDimAdjustMatrixBuilder.#ctor(System.Double,Geo.Algorithm.Adjust.Adjustment,System.Double)">
            <summary>
            一维滤波矩阵构造器
            </summary>
            <param name="obs"></param>
            <param name="PrevAdjustment"></param>
        </member>
        <member name="P:Geo.Algorithm.Adjust.OneDimAdjustMatrixBuilder.ObsValue">
            <summary>
            观测值
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.OneDimAdjustMatrixBuilder.PrevAdjustment">
            <summary>
            上一个平差器
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.OneDimAdjustMatrixBuilder.AprioriParam">
            <summary>
            先验值
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.OneDimAdjustMatrixBuilder.IsParamsChanged">
            <summary>
            一维变量，永不改变
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.OneDimAdjustMatrixBuilder.CoeffOfDesign">
            <summary>
            协方差阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.OneDimAdjustMatrixBuilder.ObsMinusApprox">
            <summary>
            观测残差
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.OneDimAdjustMatrixBuilder.Transfer">
            <summary>
            创建状态转移矩阵
            </summary>  
        </member>
        <member name="T:Geo.Algorithm.Adjust.WeightedMatrix">
            <summary>
            加权矩阵，每个元素对应一个方差
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Matrix">
            <summary>
            一个通用、方便的矩阵类。
            适配器模式。
            封装一个矩阵对象，提供方便的操作符计算功能。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.AbstractMatrix">
            <summary>
            Geo 抽象实现矩阵，如果要采用其它存储模型请重新实现对应接口。
            以向量为单位进行操作。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.IMatrix">
            <summary>
            Geo 矩阵接口。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.IArithmeticOperation`1">
            <summary>
            算术计算接口.加减乘除。
            </summary>
            <typeparam name="T">参与计算的类型</typeparam>
        </member>
        <member name="T:Geo.Algorithm.OneDimOperation`1">
            <summary>
            一维（时间，单位等）操作数包含加减法
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Geo.Algorithm.OneDimOperation`1.Plus(`0)">
            <summary>
            加法
            </summary>
            <param name="right">待操作数</param>
            <returns>计算结果</returns>
        </member>
        <member name="M:Geo.Algorithm.OneDimOperation`1.Minus(`0)">
            <summary>
            减法
            </summary>
            <param name="right">待操作数</param>
            <returns>计算结果</returns>
        </member>
        <member name="M:Geo.Algorithm.IArithmeticOperation`1.Opposite">
            <summary>
            相反数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.IArithmeticOperation`1.Multiply(`0)">
            <summary>
            乘法
            </summary>
            <param name="right">待操作数</param>
            <returns>计算结果</returns>
        </member>
        <member name="M:Geo.Algorithm.IArithmeticOperation`1.Multiply(System.Double)">
            <summary>
            乘法
            </summary>
            <param name="right">待操作数</param>
            <returns>计算结果</returns>
        </member>
        <member name="M:Geo.Algorithm.IArithmeticOperation`1.Divide(System.Double)">
            <summary>
            除法
            </summary>
            <param name="right">待操作数</param>
            <returns>计算结果</returns>
        </member>
        <member name="M:Geo.Algorithm.IMatrix.ContainsRowName(System.String)">
            <summary>
            是否包含行名称
            </summary>
            <param name="rowName">行名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.IMatrix.ContainsColName(System.String)">
            <summary>
            是否包含列名称
            </summary>
            <param name="colName">列名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.IMatrix.GetMatrix(System.Collections.Generic.List{System.String})">
            <summary>
            获取指定参数的向量
            </summary>
            <param name="paramNames">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.IMatrix.GetMatrix(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            获取指定参数的向量
            </summary>
            <param name="rowNames">行参数列表</param>
            <param name="colNames">列参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.IMatrix.SetRowValue(System.Int32,System.Double)">
            <summary>
            设置某行的值为统一的数值
            </summary>
            <param name="rowIndex">行编号</param>
            <param name="currentVal">数值</param>
        </member>
        <member name="M:Geo.Algorithm.IMatrix.SetColValue(System.Int32,System.Double)">
            <summary>
            设置某列的值为统一的数值
            </summary>
            <param name="colIndex">列编号</param>
            <param name="currentVal">数值</param>
        </member>
        <member name="M:Geo.Algorithm.IMatrix.GetRowIndex(System.String)">
            <summary>
            获取行编号
            </summary>
            <param name="paramName">参数名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.IMatrix.GetColIndex(System.String)">
            <summary>
            获取列编号
            </summary>
            <param name="paramName">参数名称</param>
        </member>
        <member name="M:Geo.Algorithm.IMatrix.GetRow(System.Int32)">
            <summary>
            行向量
            </summary>
            <param name="colIndex">编号</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.IMatrix.GetCol(System.Int32)">
            <summary>
            列向量
            </summary>
            <param name="rowIndex">编号</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.IMatrix.SubMatrix(System.Int32,System.Int32)">
            <summary>
            获取子矩阵,方阵。
            </summary>
            <param name="fromIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.IMatrix.Pow(System.Double)">
            <summary>
            求幂
            </summary>
            <param name="power"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.IMatrix.GetInverse">
            <summary>
            求逆
            </summary>
        </member>
        <member name="M:Geo.Algorithm.IMatrix.Clone">
            <summary>
            全克隆
            </summary>
        </member>
        <member name="P:Geo.Algorithm.IMatrix.RowNames">
            <summary>
            行名称
            </summary>
        </member>
        <member name="P:Geo.Algorithm.IMatrix.ColNames">
            <summary>
            列名称
            </summary>
        </member>
        <member name="P:Geo.Algorithm.IMatrix.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Geo.Algorithm.IMatrix.MatrixType">
            <summary>
            矩阵类型，用于快速判断其存储结构。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.IMatrix.Tolerance">
            <summary>
            两个数字最大差，认为相等。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.IMatrix.Array">
            <summary>
            返回二维数组。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.IMatrix.ItemCount">
            <summary>
            所有元素总和。指有效的内容表示数，矩阵内容必须的数。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.IMatrix.ColCount">
            <summary>
            列数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.IMatrix.RowCount">
            <summary>
            行数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.IMatrix.IsSquare">
            <summary>
            是否是方阵。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.IMatrix.IsSymmetric">
            <summary>
            是否是对称矩阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.IMatrix.IsDiagonal">
            <summary>
            是否对角阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.IMatrix.Item(System.Int32,System.Int32)">
            <summary>
            获取指定的元素。
            </summary>
            <param name="i">行编号</param>
            <param name="j">列编号</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.IMatrix.Item(System.String,System.String)">
            <summary>
            获取指定的元素
            </summary>
            <param name="rowName">行名称</param>
            <param name="colName">列名称</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.IMatrix.Transposition">
            <summary>
            转置
            </summary>
            <returns>返回新的结果矩阵</returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractMatrix.#ctor(Geo.Algorithm.MatrixType)">
            <summary>
            默认构造函数，必须提供一个数据类型。
            </summary>
            <param name="MatrixType">数据类型</param>
        </member>
        <member name="M:Geo.Algorithm.AbstractMatrix.SetRowValue(System.Int32,System.Double)">
            <summary>
            设置某行的值为统一的数值
            </summary>
            <param name="rowIndex">行编号</param>
            <param name="currentVal">数值</param>
        </member>
        <member name="M:Geo.Algorithm.AbstractMatrix.SetColValue(System.Int32,System.Double)">
            <summary>
            设置某列的值为统一的数值
            </summary>
            <param name="colIndex">列编号</param>
            <param name="currentVal">数值</param>
        </member>
        <member name="M:Geo.Algorithm.AbstractMatrix.GetMatrix(System.Collections.Generic.List{System.String})">
            <summary>
            获取指定参数的矩阵
            </summary>
            <param name="paramNames">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractMatrix.GetMatrix(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            获取指定参数的矩阵
            </summary>
            <param name="rowNames">行参数列表</param>
            <param name="colNames">列参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractMatrix.Col(System.Int32)">
            <summary>
            取矩阵的某列作为向量
            </summary>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractMatrix.Row(System.Int32)">
            <summary>
            取矩阵的某行作为向量
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractMatrix.SetCol(System.Int32,Geo.Algorithm.Vector)">
            <summary>
            直接设置某列的值
            </summary>
            <param name="j"></param>
            <param name="Col"></param>
        </member>
        <member name="M:Geo.Algorithm.AbstractMatrix.SetRow(System.Int32,Geo.Algorithm.Vector)">
            <summary>
            直接设定某行的值。
            </summary>
            <param name="i"></param>
            <param name="Row"></param>
        </member>
        <member name="M:Geo.Algorithm.AbstractMatrix.ContainsRowName(System.String)">
            <summary>
            是否包含行名称
            </summary>
            <param name="rowName">行名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractMatrix.ContainsColName(System.String)">
            <summary>
            是否包含列名称
            </summary>
            <param name="colName">列名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractMatrix.GetRowIndex(System.String)">
            <summary>
            获取行编号
            </summary>
            <param name="paramName">参数名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractMatrix.GetColIndex(System.String)">
            <summary>
            获取列编号
            </summary>
            <param name="paramName">参数名称</param>
        </member>
        <member name="M:Geo.Algorithm.AbstractMatrix.Clone">
            <summary>返回一个完全复制品.</summary>
        </member>
        <member name="M:Geo.Algorithm.AbstractMatrix.Plus(Geo.Algorithm.IMatrix)">
            <summary>
            矩阵加法
            </summary>
            <param name="right">右边矩阵</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractMatrix.Minus(Geo.Algorithm.IMatrix)">
            <summary>
            乘法减法
            </summary>
            <param name="right">右边</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractMatrix.Opposite">
            <summary>
            取负号
            </summary> 
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractMatrix.Multiply(Geo.Algorithm.IMatrix)">
            <summary>
            矩阵乘法。Left(m, n) * Right(n, k)
            </summary>
            <param name="right">右边乘法矩阵。</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractMatrix.MultiplyRow(System.Double[],System.Double[][])">
            <summary>
            乘法左边一行，乘以右边矩阵。返回一个新行。
            等价于一行的矩阵乘以一个矩阵。
            </summary>
            <param name="leftRow"></param>
            <param name="rightArray"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractMatrix.MultiplyAndSum(System.Double[],System.Double[])">
            <summary>
            两个向量对应元素相乘后，再相加。用于乘法。
            </summary> 
            <param name="vetorA"></param>
            <param name="vetorB"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractMatrix.Multiply(System.Double)">
            <summary>
            返回新的乘法结果。
            </summary>
            <param name="right">数字</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractMatrix.Divide(System.Double)">
            <summary>
            返回新的除法结果。
            </summary>
            <param name="right">数字</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractMatrix.GetInverse">
            <summary>
            求逆,提供一个二维数组默认的实现
            </summary>
        </member>
        <member name="M:Geo.Algorithm.AbstractMatrix.Pow(System.Double)">
            <summary>
            所有元素求幂
            </summary>
            <param name="power"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.AbstractMatrix.MatrixType">
            <summary>
            矩阵存储类型。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.AbstractMatrix.RowNames">
            <summary>
            行名称
            </summary>
        </member>
        <member name="P:Geo.Algorithm.AbstractMatrix.ColNames">
            <summary>
            列名称
            </summary>
        </member>
        <member name="P:Geo.Algorithm.AbstractMatrix.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Geo.Algorithm.AbstractMatrix.Tolerance">
            <summary>
            最大容忍度，用于判断两个数是否相等。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.AbstractMatrix.ColCount">
            <summary>
            列数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.AbstractMatrix.RowCount">
            <summary>
            行数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.AbstractMatrix.IsSquare">
            <summary>
            是否是方阵。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.AbstractMatrix.IsSymmetric">
            <summary>
            是否是对称矩阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.AbstractMatrix.IsIdentity">
            <summary>
            是否为单位阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.AbstractMatrix.IsDiagonal">
            <summary>
            是否是对角阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.AbstractMatrix.Item(System.String,System.String)">
            <summary>
            获取指定的元素。
            </summary>
            <param name="rowName">行名称</param>
            <param name="colName">列名称</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.AbstractMatrix.Item(System.Int32,System.Int32)">
            <summary>
            获取指定的元素。
            </summary>
            <param name="i">行编号</param>
            <param name="j">列编号</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.AbstractMatrix.Transposition">
            <summary>
            转置
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.AbstractMatrix.Array">
            <summary>
            返回二维数组。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Matrix.#ctor(Geo.Algorithm.IMatrix)">
            <summary>
            构造函数。
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:Geo.Algorithm.Matrix.#ctor(System.Int32)">
            <summary>
            构造函数，构建一个方阵。默认初始为二维数组矩阵。
            </summary>
            <param name="rowColCount"></param> 
        </member>
        <member name="M:Geo.Algorithm.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            构造函数。默认初始为二维数组矩阵。
            </summary>
            <param name="rowCount"></param>
            <param name="colCount"></param>
        </member>
        <member name="M:Geo.Algorithm.Matrix.#ctor(System.Double[],System.Int32,System.Int32)">
            <summary>
            一维数组初始化非对角矩阵，将顺序初始化为二维矩阵
            </summary>
            <param name="array"></param>
            <param name="RowCount"></param>
            <param name="ColCount"></param>
        </member>
        <member name="M:Geo.Algorithm.Matrix.#ctor(Geo.Algorithm.IVector)">
            <summary>
            一维数组初始化对角矩阵
            </summary>
            <param name="vector"></param> 
        </member>
        <member name="M:Geo.Algorithm.Matrix.SubMatrix(System.Int32,System.Int32)">
            <summary>
            获取子矩阵
            </summary>
            <param name="fromIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.ToString">
            <summary>
            可阅读的字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.op_Addition(Geo.Algorithm.Matrix,Geo.Algorithm.IMatrix)">
            <summary>
            +
            </summary>
            <param name="right"></param>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.op_Subtraction(Geo.Algorithm.Matrix,Geo.Algorithm.IMatrix)">
            <summary>
            -
            </summary>
            <param name="right"></param>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.op_Multiply(Geo.Algorithm.Matrix,Geo.Algorithm.IMatrix)">
            <summary>
            *
            </summary>
            <param name="right"></param>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.op_Multiply(Geo.Algorithm.Matrix,System.Double)">
            <summary>
            *
            </summary>
            <param name="right"></param>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.op_UnaryNegation(Geo.Algorithm.Matrix)">
            <summary>
            -
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.op_Multiply(System.Double,Geo.Algorithm.Matrix)">
            <summary>
             Scalar multiplication and division of a vector
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.op_Division(Geo.Algorithm.Matrix,System.Double)">
            <summary>
            /
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.op_Addition(Geo.Algorithm.Matrix,Geo.Algorithm.Matrix)">
            <summary>
            Matrix addition and subtraction
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.op_Subtraction(Geo.Algorithm.Matrix,Geo.Algorithm.Matrix)">
            <summary>
            -
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.op_Multiply(Geo.Algorithm.Matrix,Geo.Algorithm.Matrix)">
            <summary>
            Matrix product
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.op_Multiply(Geo.Algorithm.Matrix,Geo.Algorithm.Vector)">
            <summary>
            矩阵与列向量相乘。 n x m 阶矩阵，等于 m x 1 的矩阵，即 m 维的列向量。
            Vector/matrix product
            </summary>
            <param name="Mat"></param>
            <param name="Vec"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.op_Multiply(Geo.Algorithm.Vector,Geo.Algorithm.Matrix)">
            <summary>
            横向量与矩阵相乘， 1 x n 的横向量与 n x m 的列向量相乘，结果为 1 x m 的横向量。
            </summary>
            <param name="Vec"></param>
            <param name="Mat"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.GetInverse">
            <summary>
            求逆
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.Clone">
            <summary>返回一个完全复制品.</summary>
        </member>
        <member name="M:Geo.Algorithm.Matrix.Plus(Geo.Algorithm.IMatrix)">
            <summary>
            相加
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.Minus(Geo.Algorithm.IMatrix)">
            <summary>
            相减
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.Opposite">
            <summary>
            求反
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.Multiply(Geo.Algorithm.IMatrix)">
            <summary>
            乘以
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.Multiply(System.Double)">
            <summary>
            乘以
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.Equals(System.Object)">
            <summary>
            比较
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.GetHashCode">
            <summary>
            标识
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.CreateDiagonal(Geo.Algorithm.Vector)">
            <summary>
            创建一个对角阵。 Diagonal matrix。
            </summary>
            <param name="Vec"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.CreateIdentity(System.Int32)">
            <summary>
            创建一个单位阵。 
            </summary>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.GetDiagonal">
            <summary>
            返回对角线
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.RotateX3D(System.Double)">
            <summary>
            绕X轴旋转
            </summary>
            <param name="Angle"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.RotateY3D(System.Double)">
            <summary>
            绕Y轴旋转
            </summary>
            <param name="Angle"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.RotateZ3D(System.Double)">
            <summary>
            绕 Z 轴旋转
            </summary>
            <param name="Angle"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.Transpose">
            <summary>
            Transposition
            </summary>
            <returns></returns> 
        </member>
        <member name="M:Geo.Algorithm.Matrix.Inverses(Geo.Algorithm.Matrix)">
            <summary>
            求逆
            </summary>
            <param name="Mat"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.Pow(System.Double)">
            <summary>
            求幂
            </summary>
            <param name="power"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.GetSub(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            获取子矩阵
            </summary>
            <param name="startRowIndex">从0开始</param>
            <param name="endRowIndex">最后行</param>
            <param name="startColIndex">从0开始</param>
            <param name="endColIndex">最后列</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Matrix.SetSub(Geo.Algorithm.Matrix,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置矩阵内容
            </summary>
            <param name="subMatrix"></param>
            <param name="startMainRowIndex"></param>
            <param name="startMainColIndex"></param>
            <param name="startSubRowIndex"></param>
            <param name="startSubColIndex"></param>
            <param name="maxSubRowLen"></param>
            <param name="maxSubColLen"></param>
        </member>
        <member name="M:Geo.Algorithm.Matrix.IsEmpty(Geo.Algorithm.IMatrix)">
            <summary>
            是否为空。
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.Matrix.Trans">
            <summary>
            转置
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Matrix.Inversion">
            <summary>
            逆矩阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Matrix.FirstValue">
            <summary>
            矩阵左上角第一个数值。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Matrix.Array">
            <summary>
            返回二维数组
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Matrix.ItemCount">
            <summary>
            有效元素总和，二维数组为 n*m ，对角线为 n。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Matrix.RowNames">
            <summary>
            行名称
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Matrix.ColNames">
            <summary>
            列名称
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Matrix.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Matrix.Transposition">
            <summary>
            转置
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Matrix.ColCount">
            <summary>
            列数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Matrix.RowCount">
            <summary>
            行数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            检索
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.Matrix.IsSymmetric">
            <summary>
            是否对称
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Matrix.IsDiagonal">
            <summary>
            是否为对角阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Matrix.Item(System.String,System.String)">
            <summary>
            获取指定的元素。
            </summary>
            <param name="rowName">行名称</param>
            <param name="colName">列名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedMatrix.#ctor(System.Double[][],System.Double[][])">
            <summary>
            具有权值的数据向量
            </summary>
            <param name="matrix">数据向量</param>
            <param name="inverseWeight">权逆阵,如果为null，则为单位阵</param> 
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedMatrix.#ctor(Geo.Algorithm.IVector,Geo.Algorithm.IMatrix)">
            <summary>
            具有权值的数据向量
            </summary>
            <param name="vector">数据以矩阵形式初始化对角阵</param>
            <param name="inverseWeight">权逆阵,如果为null，则为单位阵</param>
        </member>
        <member name="P:Geo.Algorithm.Adjust.WeightedMatrix.InverseWeight">
            <summary>
            参数的权逆阵（协因数阵） Inverse Weight Matrix（Cofactor Matrix ）of Some Vector。
            协因数阵。InverseWeight=Weight^(-1)
            法方程系数阵的逆阵为未知参数向量的权逆阵.
            ??此处应该为残差的权逆阵？？
            </summary> 
        </member>
        <member name="P:Geo.Algorithm.Adjust.WeightedMatrix.IsWeighted">
            <summary>
            是否具有权值。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.WeightedMatrix.Weights">
            <summary>
            权阵
            </summary>
        </member>
        <member name="T:Geo.Algorithm.FractionTruncater">
            <summary>
            小数截取器。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.FractionTruncater.GetIntFreeFraction(Geo.Algorithm.Adjust.WeightedVector)">
            <summary>
            获取小数部分。
            整数项无关获取小数法。
            </summary>
            <param name="vector">带权向量</param>
            <returns></returns>
        </member>
        <member name="T:Geo.Algorithm.SparseMatrixOld">
            <summary>
             稀疏矩阵存储器
             以二进制文件形式保存。
             格式定义：1. 前3个为int，分别指行、列和集合数量；2.后面子项集合，分别为行（int）列（int）标号和双精度值。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.BaseMatrix">
            <summary>
            基础实现矩阵。提供一些通用的方法和设置。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.BaseMatrix.#ctor(Geo.Algorithm.MatrixType,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="MatrixType"></param>
            <param name="tolerance"></param>
        </member>
        <member name="M:Geo.Algorithm.SparseMatrixOld.#ctor(System.Int32,System.Int32)">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.Algorithm.SparseMatrixOld.#ctor(System.Double[][])">
            <summary>
            稀疏矩阵存储器
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:Geo.Algorithm.SparseMatrixOld.GetMatrix">
            <summary>
            获取二维数组矩阵。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.SparseMatrixOld.ToBinary(System.String)">
            <summary>
            以二进制文件形式保存。
            格式定义：1. 前3个为int，分别指行、列和集合数量；2.后面子项集合，分别为行（int）列（int）标号和双精度值。
            </summary> 
            <param name="path">路径</param>
        </member>
        <member name="M:Geo.Algorithm.SparseMatrixOld.FromBinary(System.String)">
            <summary>
            从二进制文件中读取。
             格式定义：1. 前3个为int，分别指行、列和集合数量；2.后面子项集合，分别为行（int）列（int）标号和双精度值。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.SparseMatrixOld.Add(Geo.Algorithm.MatrixItem)">
            <summary>
            增加一个，如已有，则覆盖。
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:Geo.Algorithm.SparseMatrixOld.RowCount">
            <summary>
            行数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.SparseMatrixOld.ColCount">
            <summary>
            列数量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.SparseMatrixOld.MatrixItems">
            <summary>
            非 0 值集合。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.SparseMatrixOld.Array">
            <summary>
            返回二维数组
            </summary>
        </member>
        <member name="T:Geo.Algorithm.IMatrixFactory">
            <summary>
            Geo 矩阵工厂接口。主要用于在指定对象内部创建矩阵。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.IMatrixFactory.Create(System.Int32,System.Int32)">
            <summary>
            创建一个新的默认的矩阵。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.IMatrixFactory.Create(System.Double[][])">
            <summary>
            以二维数组实例化一个矩阵
            </summary>
            <param name="array">二维数组</param>
            <returns></returns>
        </member>
        <member name="T:Geo.Algorithm.MatrixItem">
            <summary>
            矩阵中的一个数。三元组。
            改进方法：行列标号无符号，可用uint表示。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.MatrixItem.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.Algorithm.MatrixItem.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="currentVal"></param>
        </member>
        <member name="P:Geo.Algorithm.MatrixItem.Row">
            <summary>
            行标号，从0 开始
            </summary>
        </member>
        <member name="P:Geo.Algorithm.MatrixItem.Col">
            <summary>
            列标号，从 0 开始
            </summary>
        </member>
        <member name="P:Geo.Algorithm.MatrixItem.Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="T:Geo.Algorithm.HouseholderTransform">
            <summary>
              利用Householder变换把（系数）矩阵正交三角化，以便于求出最小二乘解，关键在于求正交矩阵 T
            </summary>
            <remarks>
            对于m*n的A(m>=n)，rankA=r>0，（通常系数矩阵是列满秩），求正交矩阵T(m*m)，使得：
             T * A = [U 0]'，其中U是k*n的上梯形矩阵，T=H1*H2*H3*...*Hk-1*Hk.
            </remarks>
        </member>
        <member name="F:Geo.Algorithm.HouseholderTransform.B">
            <summary>
            系数矩阵
            </summary>
        </member>
        <member name="M:Geo.Algorithm.HouseholderTransform.#ctor(Geo.Algorithm.Matrix)">
            <summary>
            householder变换
            </summary>
            <param name="Q">待正交化的系数矩阵</param>
        </member>
        <member name="M:Geo.Algorithm.HouseholderTransform.house(Geo.Algorithm.Vector,Geo.Algorithm.Vector@,System.Double@)">
            <summary>
            x: 是原矩阵的某一列向量
            </summary>
            <param name="x"></param>
            <param name="v"></param>
            <param name="baita"></param>
        </member>
        <member name="P:Geo.Algorithm.HouseholderTransform.T">
            <summary>
            正交矩阵
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.SquareRootInformationFilter">
            <summary>
            平方根信息滤波SRIF
            Square Root Information Filter最早由JPL提出，是卡尔曼滤波的一个演化版本，具有数值精度高、稳定性强等特点。
            SRIF以Householder正交变换为基础实现滤波递推计算的观测更新和时间更新。
            目前Panda、GIPSY等软件均采用SRIF算法。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SquareRootInformationFilter.#ctor(Geo.Algorithm.Adjust.BaseAdjustMatrixBuilder)">
            <summary>
            对应的方法为 Process
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SquareRootInformationFilter.Process">
            <summary>
            计算
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SquareRootInformationFilter.Predict(Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix)">
            <summary>
            预报
            </summary>
            <param name="TransferMatrix"></param>
            <param name="InverseWeightOfTransfer"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SquareRootInformationFilter.NewCorrect(Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix)">
            <summary>
             估计，改正。通常采用的方法。From 崔阳、2017.06.22
            </summary>
            <param name="observation"></param>
            <param name="control"></param>
            <param name="covaOfObs"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Geo.Algorithm.Adjust.SquareRootInformationFilter.CorrectNormal(Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix)”忽略有格式错误的 XML 注释 -->
        <member name="M:Geo.Algorithm.Adjust.SquareRootInformationFilter.CorrectSimple(Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix)">
            <summary>
            估计，改正。一个更健壮的方法。
            </summary>
            <param name="observation">观测值信息</param>
            <param name="control">控制矩阵，有时为非对称阵，如PPP</param>
            <param name="covaOfObs">观测值协方差</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SquareRootInformationFilter.ConbineMatrixByCol(Geo.Algorithm.Matrix,Geo.Algorithm.Matrix)">
            <summary>
            合并矩阵,将两个矩阵块合并成列块形式，ConbRA（(m1+m2)*n)=[R(m1*n);A(m2*n)]
            </summary>
            <param name="R"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SquareRootInformationFilter.ToString">
            <summary>
            显示
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SquareRootInformationFilter.GetTransferModelDic">
            <summary>
            将状态转移模型数值填充。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SquareRootInformationFilter.PredictParam">
            <summary>
            先验值。  A priori state estimation.
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SquareRootInformationFilter.CovaOfPredictParam">
             <summary>
            先验值方差。  A priori error covariance.
             </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SquareRootInformationFilter.AprioriParam">
            <summary>
            先验参数矩阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SquareRootInformationFilter.CovaOfAprioriParam">
            <summary>
            先验值的协方差矩阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SquareRootInformationFilter.InverseWeightOfTransfer">
            <summary>
            参数状态转移的权逆阵
            </summary>
        </member>
        <!-- 对于成员“T:Geo.Coordinates.CenterRegion`1”忽略有格式错误的 XML 注释 -->
        <member name="M:Geo.Coordinates.CenterRegion`1.#ctor(`0,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="center"></param>
            <param name="radius"></param>
        </member>
        <member name="M:Geo.Coordinates.CenterRegion`1.Contains(`0)">
            <summary>
            是否包含
            </summary>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.CenterRegion`1.Center">
            <summary>
            中心坐标
            </summary>
        </member>
        <member name="P:Geo.Coordinates.CenterRegion`1.Radius">
            <summary>
            半径
            </summary>
        </member>
        <member name="T:Geo.Coordinates.XyzCenterRegion">
            <summary>
            三维空间直角坐标的中心区域
            </summary>
        </member>
        <member name="M:Geo.Coordinates.XyzCenterRegion.#ctor(Geo.Coordinates.XYZ,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="center"></param>
            <param name="radius"></param>
        </member>
        <member name="M:Geo.Coordinates.XyzCenterRegion.Contains(Geo.Coordinates.XYZ)">
            <summary>
            是否包含
            </summary>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.BaseConcurrentDictionary`2">
            <summary>
            线程安全字典。具有关键字的数据存储结构。核心存储为字典。属于管理者模式应用。
            </summary>
            <typeparam name="TKey">关键字</typeparam>
            <typeparam name="TValue">值</typeparam>
        </member>
        <member name="T:Geo.AbstractBaseDictionary`2">
            <summary>
            具有关键字的数据存储结构。核心存储为字典。属于管理者模式应用。
            </summary>
            <typeparam name="TKey">关键字</typeparam>
            <typeparam name="TValue">值</typeparam>
        </member>
        <member name="T:Geo.IDictionaryClass`2">
            <summary>
            具有关键字的数据存储结构。核心存储为字典。属于管理者模式应用。
            </summary>
            <typeparam name="TKey">关键字</typeparam>
            <typeparam name="TValue">值</typeparam>
        </member>
        <member name="T:Geo.ICollectionClass`2">
            <summary>
            具有关键字的数据存储结构。核心存储为字典。属于管理者模式应用。
            </summary>
            <typeparam name="TIndex">关键字</typeparam>
            <typeparam name="TValue">值</typeparam>
        </member>
        <member name="T:Geo.Namable">
            <summary>
            名称接口。具有名称属性。
            </summary>
        </member>
        <member name="P:Geo.Namable.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:Geo.IManager`1">
            <summary>
            管理器负责对一个对象反复折腾。管理器。管理器模式，将对一个类的所有对象的管理封装到一个单独的管理器类中。
            这使得管理职责的变化独立于类本身，并且管理器还可以为不同的类进行重用。
            </summary>
            <typeparam name="TMaster">待处理类型</typeparam>
        </member>
        <member name="T:Geo.IManager">
            <summary>
            管理器总接口。管理器负责对一个对象反复折腾。
            </summary>
        </member>
        <member name="M:Geo.ICollectionClass`2.Set(`0,`1)">
            <summary>
            设置，直接替换
            </summary>
            <param name="keyPrev"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.ICollectionClass`2.Get(`0)">
            <summary>
            获取，若无则返回默认实例 ，如null
            </summary>
            <param name="keyPrev"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.ICollectionClass`2.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="P:Geo.ICollectionClass`2.Count">
            <summary>
            统计数量
            </summary>
        </member>
        <member name="P:Geo.ICollectionClass`2.Item(`0)">
            <summary>
            检索器
            </summary>
            <param name="keyPrev"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IDictionaryClass`2.Add(`0,`1)">
            <summary>
            添加，若有保存
            </summary>
            <param name="keyPrev"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.IDictionaryClass`2.Contains(`0)">
            <summary>
            是否包含
            </summary>
            <param name="keyPrev"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IDictionaryClass`2.Remove(`0)">
            <summary>
            移除一个
            </summary>
            <param name="keyPrev"></param>
        </member>
        <member name="F:Geo.AbstractBaseDictionary`2.log">
            <summary>
            日志记录。错误信息记录在日志里面。
            </summary> 
        </member>
        <member name="M:Geo.AbstractBaseDictionary`2.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.AbstractBaseDictionary`2.Add(`0,`1)">
            <summary>
            添加，若有保存
            </summary>
            <param name="key"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.AbstractBaseDictionary`2.Set(`0,`1)">
            <summary>
            设置，直接替换
            </summary>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:Geo.AbstractBaseDictionary`2.GetOrCreate(`0)">
            <summary>
            获取或创建
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractBaseDictionary`2.Create(`0)">
            <summary>
            创建默认
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractBaseDictionary`2.Contains(`0)">
            <summary>
            是否包含
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractBaseDictionary`2.Get(`0)">
            <summary>
            获取，若无则返回默认实例 ，如默认值，如null
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractBaseDictionary`2.Remove(`0)">
            <summary>
            移除一个
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Geo.AbstractBaseDictionary`2.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量移除
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Geo.AbstractBaseDictionary`2.OnDataClearing">
            <summary>
            数据即将被清空前激发。
            </summary>
        </member>
        <member name="M:Geo.AbstractBaseDictionary`2.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:Geo.AbstractBaseDictionary`2.GetEnumerator">
            <summary>
            IEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractBaseDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            IEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractBaseDictionary`2.GetFirstMatched(System.String)">
            <summary>
            返回第一个匹配上的，只要key包含该关键字就可以啦。
            </summary>
            <param name="containedKey"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractBaseDictionary`2.ToString">
            <summary>
            字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractBaseDictionary`2.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="E:Geo.AbstractBaseDictionary`2.DataClearing">
            <summary>
            事件，数据即将被清空。
            </summary>
        </member>
        <member name="P:Geo.AbstractBaseDictionary`2.Data">
            <summary>
            核心数据返回。
            </summary>
        </member>
        <member name="P:Geo.AbstractBaseDictionary`2.Count">
            <summary>
            数量。
            </summary>
        </member>
        <member name="P:Geo.AbstractBaseDictionary`2.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Geo.AbstractBaseDictionary`2.Values">
            <summary>
            以列表形式返回内容。
            </summary>
        </member>
        <member name="P:Geo.AbstractBaseDictionary`2.OrderedValues">
            <summary>
            排序后的值，按照Add先后顺序排序。依靠OrderedKeys，如果直接修改了Data请维护之。
            </summary>
        </member>
        <member name="P:Geo.AbstractBaseDictionary`2.OrderedData">
            <summary>
            核心数据按照插入顺序返回。不可以在此直接操作。
            </summary>
        </member>
        <member name="P:Geo.AbstractBaseDictionary`2.Keys">
            <summary>
            以列表形式返回key。
            </summary>
        </member>
        <member name="P:Geo.AbstractBaseDictionary`2.OrderedKeys">
            <summary>
            排序后的Key，按照Add先后顺序排序。依靠手动维护，如果直接修改了Data请维护之。
            </summary>
        </member>
        <member name="P:Geo.AbstractBaseDictionary`2.Item(`0)">
            <summary>
            检索器
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.AbstractBaseDictionary`2.First">
            <summary>
            第一个值
            </summary>
        </member>
        <member name="P:Geo.AbstractBaseDictionary`2.Second">
            <summary>
            第2个值
            </summary>
        </member>
        <member name="P:Geo.AbstractBaseDictionary`2.FirstKey">
            <summary>
            第一个键
            </summary>
        </member>
        <member name="P:Geo.AbstractBaseDictionary`2.SecondKey">
            <summary>
            第2个键
            </summary>
        </member>
        <member name="P:Geo.AbstractBaseDictionary`2.Last">
            <summary>
            最后个
            </summary>
        </member>
        <member name="P:Geo.AbstractBaseDictionary`2.LastKey">
            <summary>
            最后一个键
            </summary>
        </member>
        <member name="P:Geo.AbstractBaseDictionary`2.LastSecondKey">
            <summary>
            最后第2个键
            </summary>
        </member>
        <member name="P:Geo.AbstractBaseDictionary`2.SecondLast">
            <summary>
            倒数第2个值
            </summary>
        </member>
        <member name="P:Geo.AbstractBaseDictionary`2.Tag">
            <summary>
            存储额外数据。
            </summary>
        </member>
        <member name="M:Geo.BaseConcurrentDictionary`2.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:Geo.BaseConcurrentDictionary`2.#ctor(System.Collections.Generic.Dictionary{`0,`1},System.String)">
            <summary>
            采用字典数据直接初始化
            </summary>
            <param name="keyDic"></param>
            <param name="name"></param>
        </member>
        <member name="M:Geo.BaseConcurrentDictionary`2.Add(`0,`1)">
            <summary>
            添加，若有保存
            </summary>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:Geo.BaseConcurrentDictionary`2.GetOrCreate(`0)">
            <summary>
            获取或创建
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.BaseConcurrentDictionary`2.Create(`0)">
            <summary>
            创建默认
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.BaseConcurrentDictionary`2.Remove(`0)">
            <summary>
            移除一个
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:Geo.BaseConcurrentDictionary`2.data">
            <summary>
            核心数据
            </summary>
        </member>
        <member name="P:Geo.BaseConcurrentDictionary`2.Data">
            <summary>
            核心数据返回。
            </summary>
        </member>
        <member name="T:Geo.TwoKeyDictionary`3">
            <summary>
            双键字典,采用双字典快速检索方法。
            </summary>
        </member>
        <member name="M:Geo.TwoKeyDictionary`3.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.TwoKeyDictionary`3.ContainsKey(`0,`1)">
            <summary>
            是否包含键值
            </summary>
            <param name="keyA"></param>
            <param name="keyB"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TwoKeyDictionary`3.ContainsKeyA(`0)">
            <summary>
            是否包含键值
            </summary>
            <param name="keyA"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TwoKeyDictionary`3.ContainsKeyB(`1)">
            <summary>
            是否包含键值
            </summary>
            <param name="keyB"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TwoKeyDictionary`3.Set(`0,`1,`2)">
            <summary>
            设置值
            </summary>
            <param name="keyA"></param>
            <param name="keyB"></param>
            <param name="val"></param>
        </member>
        <member name="M:Geo.TwoKeyDictionary`3.Get(`0,`1)">
            <summary>
            获取
            </summary>
            <param name="keyA"></param>
            <param name="keyB"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TwoKeyDictionary`3.Remove(`0,`1)">
            <summary>
            移除
            </summary>
            <param name="keyA"></param>
            <param name="keyB"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TwoKeyDictionary`3.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="P:Geo.TwoKeyDictionary`3.Item(`0,`1)">
            <summary>
            检索
            </summary>
            <param name="keyA"></param>
            <param name="keyB"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.TwoKeyDictionary`3.Item(`0)">
            <summary>
            检索器
            </summary>
            <param name="keyA"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.TwoKeyDictionary`3.Item(`1)">
            <summary>
            检索器
            </summary>
            <param name="keyB"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.IndexedNumeralArrayManager">
            <summary>
            具有编号的数据
            </summary>
        </member>
        <member name="T:Geo.IndexedArrayManager`1">
            <summary>
            具有编号的数据
            </summary>
        </member>
        <member name="T:Geo.BaseDictionary`2">
            <summary>
            具有关键字的数据存储结构。核心存储为字典。属于管理者模式应用。
            </summary>
            <typeparam name="TKey">关键字</typeparam>
            <typeparam name="TValue">值</typeparam>
        </member>
        <member name="M:Geo.BaseDictionary`2.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:Geo.BaseDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.String)">
            <summary>
            采用字典数据直接初始化
            </summary>
            <param name="keyDic"></param>
            <param name="name"></param>
        </member>
        <member name="M:Geo.BaseDictionary`2.#ctor(Geo.IDictionaryClass{`0,`1},System.String)">
            <summary>
            采用字典数据直接初始化
            </summary>
            <param name="keyDic"></param>
            <param name="name"></param>
        </member>
        <member name="M:Geo.BaseDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.String)">
            <summary>
            采用字典数据直接初始化
            </summary>
            <param name="keyDic"></param>
            <param name="name"></param>
        </member>
        <member name="P:Geo.BaseDictionary`2.data">
            <summary>
            核心数据
            </summary>
        </member>
        <member name="P:Geo.BaseDictionary`2.Data">
            <summary>
            核心数据返回。
            </summary>
        </member>
        <member name="T:Geo.IndexedRawSmoothArrayManager">
            <summary>
            具有编号的数据
            </summary>
        </member>
        <member name="T:Geo.NumeralArrayManager">
            <summary>
            数组管理器
            </summary>
        </member>
        <member name="M:Geo.NumeralArrayManager.#ctor">
            <summary>
            默认构造函数。
            </summary>
        </member>
        <member name="M:Geo.NumeralArrayManager.Add(System.String)">
            <summary>
            增加一个数组
            </summary>
            <param name="keyPrev"></param>
        </member>
        <member name="M:Geo.NumeralArrayManager.GetVector(System.String)">
            <summary>
            返回向量
            </summary>
            <param name="keyPrev"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.EntityProducedEventHandler`1">
            <summary>
            实体产生了。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="T:Geo.TypeChangedEventHandler">
            <summary>
            类型改变事件处理委托
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Geo.InfoProducedEventHandler">
            <summary>
            信息生产委托
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:Geo.BooleanChangedEventHandler">
            <summary>
            bool 改变
            </summary>
            <param name="trueOrFalse"></param>
        </member>
        <member name="T:Geo.NumberEventHandler">
            <summary>
            浮点数事件
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="T:Geo.IntEventHandler">
            <summary>
            整数事件
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="T:Geo.IntValueChangedEventHandler">
            <summary>
            一个顶层的委托。指示一个整型数据变化了。
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="T:Geo.ProcessCommandChangedEventHandler">
            <summary>
            处理命令改变啦！
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Geo.EnableValue`1">
            <summary>
            是否启用对象
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Geo.IEnabled">
            <summary>
            是否启用的标记接口
            </summary>
        </member>
        <member name="P:Geo.IEnabled.Enabled">
            <summary>
            是否可用，是否启用。
            </summary>
        </member>
        <member name="M:Geo.EnableValue`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.EnableValue`1.#ctor(`0,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="currentVal"></param>
            <param name="enabled"></param>
        </member>
        <member name="P:Geo.EnableValue`1.Enabled">
            <summary>
            标记
            </summary>
        </member>
        <member name="P:Geo.EnableValue`1.Value">
            <summary>
            对象，值
            </summary>
        </member>
        <member name="T:Geo.EnableString">
            <summary>
            可启用的字符串
            </summary>
        </member>
        <member name="M:Geo.EnableString.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.EnableString.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="T:Geo.EnableInteger">
            <summary>
            可启用的整数
            </summary>
        </member>
        <member name="M:Geo.EnableInteger.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.EnableInteger.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="T:Geo.EnableFloat">
            <summary>
            可启用的浮点数
            </summary>
        </member>
        <member name="M:Geo.EnableFloat.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.EnableFloat.#ctor(System.Double,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="T:Geo.EnabledTimePeriod">
            <summary>
            时段
            </summary>
        </member>
        <member name="M:Geo.EnabledTimePeriod.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.EnabledTimePeriod.#ctor(Geo.Times.TimePeriod)">
            <summary>
            构造函数
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.EnabledTimePeriod.#ctor(System.DateTime,System.DateTime)">
            <summary>
            构造函数
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="T:Geo.EnableFloatSpan">
            <summary>
            可启用的浮点数范围
            </summary>
        </member>
        <member name="M:Geo.EnableFloatSpan.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.EnableFloatSpan.#ctor(Geo.NumerialSegment)">
            <summary>
            构造函数
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.EnableFloatSpan.#ctor(System.Double,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="T:Geo.EnableBool">
            <summary>
            可启用的布尔值
            </summary>
        </member>
        <member name="M:Geo.EnableBool.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.EnableBool.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="T:Geo.DateTimeBool">
            <summary>
            可启用的时间
            </summary>
        </member>
        <member name="M:Geo.DateTimeBool.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.DateTimeBool.#ctor(System.DateTime)">
            <summary>
            构造函数
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="T:Geo.IProgressNotifier">
            <summary>
            进度通知接口
            </summary>
        </member>
        <member name="M:Geo.IProgressNotifier.InitProcess(System.Int64)">
            <summary>
            初始化。只有一次分类的初始化。最简单的单进度。
            </summary>
            <param name="maxCount"></param>
        </member>
        <member name="M:Geo.IProgressNotifier.ShowInfo(System.String)">
            <summary>
            直接显示信息，一般显示当前正在进行的最小任务。
            </summary>
            <param name="txt"></param>
        </member>
        <member name="M:Geo.IProgressNotifier.PerformProcessStep">
            <summary>
            向前一步
            </summary>
        </member>
        <member name="M:Geo.IProgressNotifier.Full">
            <summary>
            填满
            </summary>
        </member>
        <member name="E:Geo.IProgressNotifier.ProgressValueChanged">
            <summary>
            最小的进度改变。
            </summary>
        </member>
        <member name="P:Geo.IProgressNotifier.CurrentPercessValue">
            <summary>
            当前实际进度值，非进度条的值。
            </summary>
        </member>
        <member name="T:Geo.StringKeyBuilder">
            <summary>
            字符串关键字构建器
            </summary>
        </member>
        <member name="T:Geo.AbstractBuilder`1">
            <summary>
            完美（可算）对象构造器。
            </summary>
            <typeparam name="TProduct">待构建的类型</typeparam>
        </member>
        <member name="T:Geo.IBuilder`1">
            <summary>
            完美（可算）对象构造器。
            </summary>
            <typeparam name="TProduct">待构建的类型</typeparam>
        </member>
        <member name="M:Geo.IBuilder`1.Build">
            <summary>
            返回OK对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractBuilder`1.Build">
            <summary>
            回OK对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.StringKeyBuilder.Append(System.Object)">
            <summary>
            增加一个
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.StringKeyBuilder.Markers">
            <summary>
            标记集合
            </summary>
        </member>
        <member name="P:Geo.StringKeyBuilder.KeyMarker">
            <summary>
            最关键的一个。第一个。
            </summary>
        </member>
        <member name="T:Geo.ProcessCommandType">
            <summary>
            数据处理流程控制命令类型
            </summary>
        </member>
        <member name="F:Geo.ProcessCommandType.Cancel">
            <summary>
            取消
            </summary>
        </member>
        <member name="F:Geo.ProcessCommandType.Run">
            <summary>
            运行
            </summary>
        </member>
        <member name="F:Geo.ProcessCommandType.Pause">
            <summary>
            暂停
            </summary>
        </member>
        <member name="T:Geo.Register`1">
            <summary>
            注册统计器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Geo.Register`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Register`1.Regist(`0)">
            <summary>
            注册
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Register`1.Regist(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量注册
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Register`1.Contains(`0)">
            <summary>
            是否包含
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.TimedNumberStorage">
            <summary>
            数字时段存储器
            </summary>
        </member>
        <member name="T:Geo.TimedValueStorage`1">
            <summary>
            时段数据存储器
            </summary>
            <typeparam name="T">时间相关的数据</typeparam>
        </member>
        <member name="M:Geo.TimedValueStorage`1.#ctor">
            <summary>
            默认构造函数。
            </summary>
        </member>
        <member name="M:Geo.TimedValueStorage`1.IsAvailable(System.String,Geo.Times.Time)">
            <summary>
            是否可以获取。是否已经存储指定的模糊度。
            </summary>
            <param name="name"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TimedValueStorage`1.GetValue(System.String,Geo.Times.Time)">
            <summary>
            得到模糊度
            </summary>
            <param name="name"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TimedValueStorage`1.Parse(System.String)">
            <summary>
            解析
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TimedValueStorage`1.GetFirstMatchedValue(System.String,Geo.Times.Time)">
            <summary>
            采用关键字获取
            </summary>
            <param name="keyPrev"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TimedValueStorage`1.Regist(System.String,Geo.Times.Time,`0)">
            <summary>
            注册一个模糊度信息。
            注册后，默认为后续一天的模糊度都不变化，除非新的参数进来。
            </summary>
            <param name="name">参数名称</param>
            <param name="time">时间</param>
            <param name="currentVal">绑定的数据：周跳或模糊度</param>
        </member>
        <member name="M:Geo.TimedValueStorage`1.BuildNewAmbiguityPeriod(Geo.Times.Time,`0)">
            <summary>
            建立一个新的时段，存储新模糊度信息，该模糊度默认一天不变。
            </summary>
            <param name="time"></param>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TimedValueStorage`1.WriteToFile(System.String)">
            <summary>
            写到文件
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Geo.TimedNumberStorage.GetVector(System.Collections.Generic.List{System.String},Geo.Times.Time)">
            <summary>
            获取模糊度向量
            </summary>
            <param name="paramNames"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TimedNumberStorage.Regist(Geo.Times.Time,Geo.Algorithm.IVector)">
            <summary>
            批量注册
            </summary>
            <param name="time"></param>
            <param name="vector"></param>
        </member>
        <member name="M:Geo.TimedNumberStorage.Parse(System.String)">
            <summary>
            解析字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TimedNumberStorage.Load(System.String)">
            <summary>
            解析文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.InstantValueStorage">
            <summary>
            时段信息，绑定对象为默认的字符串。
            </summary>
        </member>
        <member name="T:Geo.InstantValueStorage`1">
            <summary>
            时刻数据存储器。通过时刻的 Tag 存储对象。
            </summary>
            <typeparam name="T">时间相关的数据</typeparam>
        </member>
        <member name="M:Geo.InstantValueStorage`1.#ctor">
            <summary>
            默认构造函数。
            </summary>
        </member>
        <member name="M:Geo.InstantValueStorage`1.IsAvailable(System.String,Geo.Times.Time)">
            <summary>
            是否可以获取。是否已经存储指定的模糊度。
            </summary>
            <param name="name"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.InstantValueStorage`1.GetValue(System.String,Geo.Times.Time)">
            <summary>
            得到模糊度
            </summary>
            <param name="name"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.InstantValueStorage`1.Parse(System.String)">
            <summary>
            解析
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.InstantValueStorage`1.GetFirstMatchedValue(System.String,Geo.Times.Time)">
            <summary>
            采用关键字获取
            </summary>
            <param name="keyPrev"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.InstantValueStorage`1.Regist(System.String,Geo.Times.Time)">
            <summary>
            注册一个模糊度信息。
            注册后，默认为后续一天的模糊度都不变化，除非新的参数进来。
            </summary>
            <param name="name">参数名称</param>
            <param name="time">时间</param> 
        </member>
        <member name="M:Geo.InstantValueStorage`1.Regist(System.String,System.Collections.Generic.IEnumerable{Geo.Times.Time})">
            <summary>
            批量注册
            </summary>
            <param name="name"></param>
            <param name="times"></param>
        </member>
        <member name="M:Geo.InstantValueStorage`1.WriteToFile(System.String)">
            <summary>
            写到文件
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Geo.InstantValueStorage.Parse(System.String)">
            <summary>
            解析字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.InstantValueStorage.Load(System.String)">
            <summary>
            解析文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.TimedStringStorage">
            <summary>
            时段信息，绑定对象为默认的字符串。
            </summary>
        </member>
        <member name="M:Geo.TimedStringStorage.Parse(System.String)">
            <summary>
            解析字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TimedStringStorage.Load(System.String)">
            <summary>
            解析文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.IntBiasedSequenceValue`1">
            <summary>
            具有整数偏差的序列值，只保存当前历元和上一历元信息。实际为一个链条结构。
            </summary>
        </member>
        <member name="T:Geo.SequenceValue`1">
            <summary>
            MW 值，只保存当前历元和上一历元信息。实际为一个链条结构。
            </summary>
        </member>
        <member name="T:Geo.ISequenceValue`1">
            <summary>
            序列化数据，链表结构
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Geo.ISequenceValue`1.IsBreaked(System.Int32,System.Double)">
            <summary>
            是否断裂
            </summary>
            <param name="maxIndexGap"></param>
            <param name="maxDiffer"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.ISequenceValue`1.Index">
            <summary>
            编号
            </summary>
        </member>
        <member name="P:Geo.ISequenceValue`1.HasPrevValue">
            <summary>
            是否具有上一数据
            </summary>
        </member>
        <member name="P:Geo.ISequenceValue`1.IndexGap">
            <summary>
            与上一数据的编号差异
            </summary>
        </member>
        <member name="P:Geo.ISequenceValue`1.PrevValue">
            <summary>
            上一个数据
            </summary>
        </member>
        <member name="P:Geo.ISequenceValue`1.RawValue">
            <summary>
            原始数据
            </summary>
        </member>
        <member name="P:Geo.ISequenceValue`1.SmoothValue">
            <summary>
            平滑数据
            </summary>
        </member>
        <member name="M:Geo.SequenceValue`1.IsBreaked(System.Int32,System.Double)">
            <summary>
            通过比较上一个数据的编号间隔和数据差分值
            </summary>
            <param name="maxIndexGap"></param>
            <param name="maxDiffer"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.SequenceValue`1.PrevValue">
            <summary>
            上一个值。
            </summary>
        </member>
        <member name="P:Geo.SequenceValue`1.SmoothValue">
            <summary>
            平滑后的MW值，通常为滤波值，需要外部计算并赋值。
            </summary>
        </member>
        <member name="P:Geo.SequenceValue`1.Index">
            <summary>
            历元编号
            </summary>
        </member>
        <member name="P:Geo.SequenceValue`1.RawValue">
            <summary>
            原始MW值
            </summary>
        </member>
        <member name="P:Geo.SequenceValue`1.HasPrevValue">
            <summary>
            是否具有先前信息。
            </summary>
        </member>
        <member name="P:Geo.SequenceValue`1.IndexGap">
            <summary>
            编号间隙，可以探知是否发生了跳变。
            </summary>
        </member>
        <member name="P:Geo.SequenceValue`1.SmoothDifferValue">
            <summary>
            与上一历元差，平滑数据。
            </summary>
        </member>
        <member name="P:Geo.SequenceValue`1.DifferValue">
            <summary>
            实际数据与上一历元平滑数据差。
            </summary>
        </member>
        <member name="P:Geo.SequenceValue`1.RawDifferValue">
            <summary>
            与上一历元差，原始数据。
            </summary>
        </member>
        <member name="T:Geo.IIntBiasedSequenceValue`1">
            <summary>
            具有整数偏差的序列数据
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Geo.IIntBiasedSequenceValue`1.SetIntBias">
            <summary>
            设置偏差整数
            </summary>
        </member>
        <member name="P:Geo.IIntBiasedSequenceValue`1.IntBias">
            <summary>
            与整数差异
            </summary>
        </member>
        <member name="P:Geo.IIntBiasedSequenceValue`1.IsIntBiasChanged">
            <summary>
            对齐整数是否改变
            </summary>
        </member>
        <member name="M:Geo.IntBiasedSequenceValue`1.SetIntBias">
            <summary>
            设置偏差整数值，取自平滑值的取整。
            </summary>
        </member>
        <member name="P:Geo.IntBiasedSequenceValue`1.IntBias">
            <summary>
            整数，用于数值归算到小数。
            </summary>
        </member>
        <member name="P:Geo.IntBiasedSequenceValue`1.IsIntBiasChanged">
            <summary>
            判断整数偏差值是否改变了。
            </summary>
        </member>
        <member name="P:Geo.IntBiasedSequenceValue`1.FractionOfRawValue">
            <summary>
            原始数据减去整数偏差。
            </summary>
        </member>
        <member name="P:Geo.IntBiasedSequenceValue`1.FractionOfSmoothValue">
            <summary>
            平滑数据减去整数偏差。
            </summary>
        </member>
        <member name="T:Geo.ValueType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="T:Geo.ValueTypeHelper">
            <summary>
            帮助器
            </summary>
        </member>
        <member name="M:Geo.ValueTypeHelper.GetValueType(System.String)">
            <summary>
            尝试分析字符串的数据类型
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.NamedType">
            <summary>
            命名的类型
            </summary>
        </member>
        <member name="T:Geo.Named">
            <summary>
            名称.封装了一个Name属性。实质上就是一个string对象。
            </summary>
        </member>
        <member name="M:Geo.Named.#ctor(System.String)">
            <summary>
            构造函数，为名称赋值。默认为空。
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Geo.Named.ToString">
            <summary>
            字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Named.Equals(System.Object)">
            <summary>
            如果只是一个同名字符串，也会相等。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Named.GetHashCode">
            <summary>
            哈希数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Named.GetNames``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取名称
            </summary>
            <typeparam name="T"></typeparam>
            <param name="named"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Named.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:Geo.NamedType.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.NamedType.#ctor(System.String,System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="M:Geo.NamedType.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="M:Geo.NamedType.ToString">
            <summary>
            字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.NamedType.Equals(System.Object)">
            <summary>
            等于
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.NamedType.GetHashCode">
            <summary>
            哈希数
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.NamedType.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="T:Geo.NamedValueTypeManager">
            <summary>
            值 类型管理器
            </summary>
        </member>
        <member name="T:Geo.NamedValueType">
            <summary>
            命名的类型
            </summary>
        </member>
        <member name="M:Geo.NamedValueType.#ctor(System.String,Geo.ValueType)">
            <summary>
            默认构造函数
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="M:Geo.NamedValueType.GetValue(System.String)">
            <summary>
            转换值
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.NamedValueType.Convert(System.String,Geo.ValueType)">
            <summary>
            转换
            </summary>
            <param name="str"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.NamedValueType.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Geo.NamedValueType.ValueType">
            <summary>
            数值类型
            </summary>
        </member>
        <member name="T:Geo.TypedValue">
            <summary>
            参数和数值，以及类型
            </summary>
        </member>
        <member name="M:Geo.TypedValue.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.TypedValue.#ctor(System.String)">
            <summary>
            采用字符串初始化
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Geo.TypedValue.#ctor(System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
            <param name="currentVal"></param>
            <param name="type"></param>
        </member>
        <member name="M:Geo.TypedValue.SetValue(System.String,System.String,System.String)">
            <summary>
            设置值
            </summary>
            <param name="name"></param>
            <param name="currentVal"></param>
            <param name="type"></param>
        </member>
        <member name="M:Geo.TypedValue.ToString">
            <summary>
            Name=thisName|Int;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.TypedValue.Parse(System.String)">
            <summary>
            解析
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.TypedValue.Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="T:Geo.TimeValue`1">
            <summary>
            具有 Time 属性。
            </summary>
        </member>
        <member name="T:Geo.BaseValue`1">
            <summary>
            具有一个类型为 TValue 的 Value 属性。
            </summary>
        </member>
        <member name="T:Geo.IValue`1">
            <summary>
            具有一个Value属性。
            </summary>
        </member>
        <member name="P:Geo.IValue`1.Value">
            <summary>
            Value 属性
            </summary>
        </member>
        <member name="M:Geo.BaseValue`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.BaseValue`1.#ctor(`0)">
            <summary>
            构造函数。
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.BaseValue`1.Equals(System.Object)">
            <summary>
            等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.BaseValue`1.GetHashCode">
            <summary>
            哈希
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.BaseValue`1.ToString">
            <summary>
            字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.BaseValue`1.GetTabTitles">
            <summary>
            以制表位分割的题目
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.BaseValue`1.GetTabValues">
            <summary>
            以制表位分割的值
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.BaseValue`1.Value">
            <summary>
            双精度Value属性
            </summary>
        </member>
        <member name="P:Geo.TimeValue`1.Time">
            <summary>
            Time 属性
            </summary>
        </member>
        <member name="T:Geo.AdjustFilter">
            <summary>
            平差滤波器
            </summary>
        </member>
        <member name="M:Geo.AdjustFilter.Filter(Geo.RmsedNumeral)">
            <summary>
            滤波
            </summary>
            <param name="newVal"></param> 
            <returns></returns>
        </member>
        <member name="P:Geo.AdjustFilter.PrevAdjustment">
            <summary>
            上一个历元结果。
            </summary>
        </member>
        <member name="T:Geo.ErrorJudge">
            <summary>
            误差判断器,误差大法官.
            通过给定的初值，判断下一个值是否为误差，并根据缓存数据判断是否为跳变。
            </summary>
        </member>
        <member name="M:Geo.ErrorJudge.#ctor(System.Double,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="Value"></param>
            <param name="MaxError"></param>
            <param name="IsRelativeError"></param>
        </member>
        <member name="M:Geo.ErrorJudge.SetReferenceValue(System.Double)">
            <summary>
            当前值。
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.ErrorJudge.IsJumped(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            判断是否是跳变。通过后续缓存窗口数据判断。
            请先调用 IsOverTolerance 确定超限后，再调用我。
            这里假定粗差只出现少数几次或1次。
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.ErrorJudge.IsJumped(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            判断是否是跳变。通过后续缓存窗口数据判断。
            请先调用 IsOverTolerance 确定超限后，再调用我。
            这里假定粗差只出现少数几次或1次。
            </summary>
            <param name="buffer"></param>
            <param name="referValue"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.ErrorJudge.IsOverLimit(System.Double)">
            <summary>
            检核是否超限
            </summary>
            <param name="newVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.ErrorJudge.IsOverLimit(System.Double,System.Double)">
            <summary>
            检核是否超限.无记忆效应，可以多次重复使用
            </summary>
            <param name="newVal"></param>
            <param name="referValue"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.ErrorJudge.ReferenceValue">
            <summary>
            当前值
            </summary>
        </member>
        <member name="P:Geo.ErrorJudge.MaxError">
            <summary>
            允许的最大误差（含）
            </summary>
        </member>
        <member name="P:Geo.ErrorJudge.IsRelativeError">
            <summary>
            是否是相对误差
            </summary>
        </member>
        <member name="P:Geo.ErrorJudge.IsFirst">
            <summary>
            是否第一次计算，用于判断赋予初值。
            </summary>
        </member>
        <member name="P:Geo.ErrorJudge.Index">
            <summary>
            计算次数
            </summary>
        </member>
        <member name="T:Geo.IWindowData">
            <summary>
            窗口数据
            </summary>
        </member>
        <member name="P:Geo.IWindowData.IsFull">
            <summary>
            窗口是否已满
            </summary>
        </member>
        <member name="P:Geo.IWindowData.WindowSize">
            <summary>
            指定的窗口大小
            </summary>
        </member>
        <member name="T:Geo.IWindowData`1">
            <summary>
            窗口数据接口
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Geo.IBuffer`1">
            <summary>
            缓存接口
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Geo.IListClass`1">
            <summary>
            列表接口类。
            </summary> 
            <typeparam name="TValue">值</typeparam>
        </member>
        <member name="M:Geo.IListClass`1.Contains(`0)">
            <summary>
            是否包含
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IListClass`1.Remove(`0)">
            <summary>
            移除一个
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.IListClass`1.Pop">
            <summary>
            弹出最先进入的一个
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IListClass`1.Add(`0)">
            <summary>
            添加， 
            </summary> 
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.IListClass`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加， 
            </summary> 
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.IListClass`1.RemoveAt(System.Int32)">
            <summary>
            移除指定编号
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Geo.IListClass`1.GetSubList(System.Int32,System.Int32)">
            <summary>
            获取自列表
            </summary>
            <param name="indexFrom"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.IListClass`1.First">
            <summary>
            第一个
            </summary>
        </member>
        <member name="P:Geo.IListClass`1.Second">
            <summary>
            第2个
            </summary>
        </member>
        <member name="P:Geo.IListClass`1.Last">
            <summary>
            最后个
            </summary>
        </member>
        <member name="T:Geo.FractionalDataMaintainerManager">
             <summary>
             设计：
            1.数据进入后，要判断是否超限，
            如果是，则判断是跳跃还是粗差。
            如果是跳跃，则多读取几个数据重新计算其偏差；
            如果是粗差，则简单的剔除之。
             </summary>
        </member>
        <member name="M:Geo.FractionalDataMaintainerManager.#ctor(System.Double,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="MaxError"></param>
            <param name="IsRelativeError"></param>
        </member>
        <member name="P:Geo.FractionalDataMaintainerManager.MaxError">
            <summary>
            允许的最大误差（含）
            </summary>
        </member>
        <member name="P:Geo.FractionalDataMaintainerManager.IsRelativeError">
            <summary>
            是否是相对误差
            </summary>
        </member>
        <member name="T:Geo.FractionalPartDataMaintainer">
             <summary>
            小数部分数据维护器，如用于MW数值的维护。与父类不同，此处CurrentValue为小数值。
            只有小数部分才有意义，但同时需要考虑数据的偏移量，判断粗差和跳变更新等。
             </summary>
        </member>
        <member name="T:Geo.FloatNumberMaintainer">
            <summary>
            数值序列维护期。数值进行滤波，如果发现粗差则忽略，如果发现跳变，则重新滤波。
            </summary>
        </member>
        <member name="M:Geo.FloatNumberMaintainer.#ctor(System.Double,System.Boolean)">
            <summary>
            构造函数。
            </summary>
            <param name="jugedWindowSize">窗口大小</param>
        </member>
        <member name="M:Geo.FloatNumberMaintainer.CheckAndAdd(System.Double,Geo.NumeralWindowData)">
            <summary>
            新增加一个数据判断通过后才入库。
            添加成功后返回true。
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Geo.FloatNumberMaintainer.Add(System.Double)">
            <summary>
            添加数据
            </summary>
            <param name="newVal"></param>
        </member>
        <member name="M:Geo.FloatNumberMaintainer.OnValueUpdated(System.Double)">
            <summary>
            事件函数
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.FloatNumberMaintainer.Filter(System.Double)">
            <summary>
            滤波。默认期望为常数。
            </summary>
            <param name="rawValue"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.FloatNumberMaintainer.CurrentAdjustment">
            <summary>
            当前平差对象
            </summary>
        </member>
        <member name="P:Geo.FloatNumberMaintainer.CurrentValue">
            <summary>
            当前值，通常是滤波值或者平均值。
            </summary>
        </member>
        <member name="P:Geo.FloatNumberMaintainer.ErrorJudge">
            <summary>
            误差判断
            </summary>
        </member>
        <member name="E:Geo.FloatNumberMaintainer.ValueUpdated">
            <summary>
            输入采纳后激发。
            </summary>
        </member>
        <member name="M:Geo.FractionalPartDataMaintainer.#ctor(System.Double,System.Boolean)">
            <summary>
            构造函数。
            </summary>
            <param name="jugedWindowSize">窗口大小</param>
        </member>
        <member name="M:Geo.FractionalPartDataMaintainer.CheckAndAdd(System.Double,Geo.NumeralWindowData)">
            <summary>
            新增加一个数据判断通过后才入库。
            添加成功后返回true。
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Geo.FractionalPartDataMaintainer.CaculateIntBias(Geo.NumeralWindowData)">
            <summary>
            计算整数偏差。新偏差与原数据应该控制在 0.5 以内。
            </summary> 
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.FractionalPartDataMaintainer.OnIntBiasChanged(System.Int32)">
            <summary>
            事件函数
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="P:Geo.FractionalPartDataMaintainer.IntBias">
            <summary>
            当前的整数变差
            </summary>
        </member>
        <member name="P:Geo.FractionalPartDataMaintainer.IntFraction">
            <summary>
            滤波后的整数和小数。
            </summary>
        </member>
        <member name="E:Geo.FractionalPartDataMaintainer.IntBiasChanged">
            <summary>
            整数偏差发生了改变。
            </summary>
        </member>
        <member name="T:Geo.CyclicalNumerFilterManager">
            <summary>
            周跳性数据滤波器管理器.周跳性数据滤波器，需要考虑周跳和粗差，此处采用一维常量进行滤波
            </summary>
        </member>
        <member name="M:Geo.CyclicalNumerFilterManager.#ctor(System.Double,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="MaxError"></param>
            <param name="IsRelativeError"></param>
        </member>
        <member name="M:Geo.CyclicalNumerFilterManager.Create(System.String)">
            <summary>
            创建一个
            </summary>
            <param name="keyPrev"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.CyclicalNumerFilterManager.MaxError">
            <summary>
            最大误差倍数
            </summary>
        </member>
        <member name="P:Geo.CyclicalNumerFilterManager.IsRelativeError">
            <summary>
            是否是相对误差
            </summary>
        </member>
        <member name="T:Geo.CyclicalNumerFilter">
            <summary>
            周跳性数据滤波器，需要考虑周跳和粗差，此处采用一维常量进行滤波.
            将小数和整数部分分别存储，发生周跳后，将对小数部分重新滤波，而只需更改整数部分。
            </summary>
        </member>
        <member name="M:Geo.CyclicalNumerFilter.#ctor(System.Double,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="MaxError"></param>
            <param name="IsRelativeError"></param>
        </member>
        <member name="F:Geo.CyclicalNumerFilter._isCurrentSolved">
            <summary>
            指示粗差设置后，是否计算过了。
            </summary>
        </member>
        <member name="M:Geo.CyclicalNumerFilter.SetRawValue(Geo.RmsedNumeral)">
            <summary>
            设置当前值。
            </summary>
            <param name="rawValue"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.CyclicalNumerFilter.SetBuffer(Geo.NumeralWindowData)">
            <summary>
            设置缓存。
            </summary>
            <param name="Buffers"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.CyclicalNumerFilter.Filter(Geo.RmsedNumeral)">
            <summary>
            返回滤波后的值.为小数部分的滤波值。
            </summary>
            <param name="rawValue">具有整周的原始值。</param>
            <returns></returns>
        </member>
        <member name="M:Geo.CyclicalNumerFilter.Calculate">
            <summary>
            计算返回滤波后的数据，为小数部分的滤波值。
            </summary> 
            <returns></returns>
        </member>
        <member name="M:Geo.CyclicalNumerFilter.IsGrossError">
            <summary>
            当前值是否粗差。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.CyclicalNumerFilter.IsNeedInitValue">
            <summary>
            是否需要初始化数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.CyclicalNumerFilter.FilterAlignedValue(Geo.RmsedNumeral)">
            <summary>
            对齐后的数据，进行滤波。
            </summary>
            <param name="aligned"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.CyclicalNumerFilter.GetInitValue(Geo.RmsedNumeral)">
            <summary>
            第一次，初值,周跳发生后，也采用本法赋值。
            </summary>
            <param name="rawValue"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.CyclicalNumerFilter.ErrorJudge">
            <summary>
            误差判断器
            </summary>
        </member>
        <member name="P:Geo.CyclicalNumerFilter.IsAlignNeeded">
            <summary>
            从外部指定指定是否需要重新对齐。如有周跳时。
            </summary>
        </member>
        <member name="P:Geo.CyclicalNumerFilter.Index">
            <summary>
            当前编号
            </summary>
        </member>
        <member name="P:Geo.CyclicalNumerFilter.MaxError">
            <summary>
            最大误差倍数
            </summary>
        </member>
        <member name="P:Geo.CyclicalNumerFilter.IntegerPart">
            <summary>
            截断的整数部分，使得余下部分在同一数量级别。
            </summary>
        </member>
        <member name="P:Geo.CyclicalNumerFilter.Buffers">
            <summary>
            窗口数据。用于判断是周跳，还是粗差。
            </summary>
        </member>
        <member name="P:Geo.CyclicalNumerFilter.AdjustFilter">
            <summary>
            平差器
            </summary>
        </member>
        <member name="P:Geo.CyclicalNumerFilter.FactionCutter">
            <summary>
            如果发生周跳，则保证小数部分对齐。
            </summary>
        </member>
        <member name="P:Geo.CyclicalNumerFilter.IsBufferNeeded">
            <summary>
            是否需要缓存
            </summary>
        </member>
        <member name="P:Geo.CyclicalNumerFilter.CurrentRawValue">
            <summary>
            当前原始数据。
            </summary>
        </member>
        <member name="P:Geo.CyclicalNumerFilter.CurrentFilteredFraction">
            <summary>
            当前滤波后的数据小数部分 。参考结果，一般为上一个结果，用于判断当前是否粗差。
            </summary>
        </member>
        <member name="P:Geo.CyclicalNumerFilter.CurrentFilteredValue">
            <summary>
            当前滤波后的数据含小数和整数部分 。
            </summary>
        </member>
        <member name="T:Geo.NumericalAlignerManager`2">
            <summary>
            数据对齐管理器
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TIndex"></typeparam>
        </member>
        <member name="M:Geo.NumericalAlignerManager`2.#ctor(System.Double,System.Func{`1,System.Double})">
            <summary>
            构造函数
            </summary>
            <param name="MaxSan"></param>
            <param name="IndexToNumerial"></param>
        </member>
        <member name="F:Geo.NumericalAlignerManager`2.IndexToNumerial">
            <summary>
            方法转换为数字
            </summary>
        </member>
        <member name="M:Geo.NumericalAlignerManager`2.Create(`0)">
            <summary>
            创建一个
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.NumericalAlignerManager`2.MaxSan">
            <summary>
            允许的最大断裂。
            </summary>
        </member>
        <member name="T:Geo.NumericalAligner`1">
            <summary>
            数据对齐器。
            </summary>
        </member>
        <member name="M:Geo.NumericalAligner`1.#ctor(System.Double,System.Func{`0,System.Double})">
            <summary>
            构造函数
            </summary>
            <param name="MaxSan"></param>
            <param name="IndexToNumerial"></param>
        </member>
        <member name="F:Geo.NumericalAligner`1.IndexToNumerial">
            <summary>
            方法转换为数字
            </summary>
        </member>
        <member name="M:Geo.NumericalAligner`1.GetAlignedValue(`0,System.Double,System.Double)">
            <summary>
            获取对齐后的
            </summary>
            <param name="index"></param>
            <param name="val"></param>
            <param name="referVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.NumericalAligner`1.IsBreaked(`0)">
            <summary>
            根据编号判断是否断裂
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.NumericalAligner`1.UpdateValue(`0,System.Double)">
            <summary>
            更新
            </summary>
            <param name="index"></param>
            <param name="newIndexVal"></param>
        </member>
        <member name="P:Geo.NumericalAligner`1.MaxSan">
            <summary>
            允许的最大断裂。
            </summary>
        </member>
        <member name="P:Geo.NumericalAligner`1.IsReset">
            <summary>
            是否是重置
            </summary>
        </member>
        <member name="P:Geo.NumericalAligner`1.LastAlignedValue">
            <summary>
            上一个对齐后的数值
            </summary>
        </member>
        <member name="P:Geo.NumericalAligner`1.LastIndexValue">
            <summary>
            最后一个编号数值
            </summary>
        </member>
        <member name="P:Geo.NumericalAligner`1.LastIndex">
            <summary>
            最后一个编号
            </summary>
        </member>
        <member name="P:Geo.NumericalAligner`1.AdjustValue">
            <summary>
            调整数，对齐数。
            </summary>
        </member>
        <member name="P:Geo.NumericalAligner`1.ResetIndex">
            <summary>
            重置编号
            </summary>
        </member>
        <member name="T:Geo.TimeNumeralWindowDataManager`1">
            <summary>
            数值字典窗口数据
            </summary>
        </member>
        <member name="M:Geo.TimeNumeralWindowDataManager`1.#ctor(System.Int32,System.Double)">
            <summary>
            数值字典窗口数据
            </summary>
            <param name="windowSize"></param>
            <param name="BreakKeyGap"></param>
        </member>
        <member name="M:Geo.TimeNumeralWindowDataManager`1.Create(`0)">
            <summary>
            创建
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.TimeNumeralWindowDataManager`1.WindowSize">
            <summary>
            窗口大小
            </summary>
        </member>
        <member name="P:Geo.TimeNumeralWindowDataManager`1.BreakKeyGap">
            <summary>
            值断裂大小
            </summary>
        </member>
        <member name="T:Geo.NumeralWindowData`1">
            <summary>
            带检索关键字的数据窗口。
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:Geo.WindowData`2">
            <summary>
            采用字典维护的窗口数据，可以对数据进行编号。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Geo.WindowData`2.#ctor(System.Int32)">
            <summary>
            默认构造函数
            </summary>
            <param name="WindowSize"></param>
        </member>
        <member name="M:Geo.WindowData`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            采用字典维护的窗口数据
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Geo.WindowData`2.#ctor(Geo.IDictionaryClass{`0,`1})">
            <summary>
            采用字典维护的窗口数据
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Geo.WindowData`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            采用字典维护的窗口数据
            </summary>
            <param name="values"></param>
        </member>
        <member name="F:Geo.WindowData`2.KeyToDouble">
            <summary>
            委托，关键字转向数值
            </summary>
        </member>
        <member name="F:Geo.WindowData`2.ValueToDouble">
            <summary>
            委托，值转向数值
            </summary>
        </member>
        <member name="M:Geo.WindowData`2.Add(`0,`1)">
            <summary>
            增加一个。如果Key值断裂，则清空当前数据。激发清空数据事件。
            </summary>
            <param name="item"></param>
            <param name="key"></param>
        </member>
        <member name="M:Geo.WindowData`2.IsKeyBreaked(`0)">
            <summary>
            判断输入Key和最后的Key只差，若超过最大MaxKeyGap,则认为断裂。 
            需设置 KeyToDouble， 如果没有设置，则永远返回false。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.WindowData`2.Add(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            批量添加
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.WindowData`2.GetNew(System.Func{System.Collections.Generic.KeyValuePair{`0,`1},System.Boolean})">
            <summary>
            返回一个满足条件的新对象。
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.WindowData`2.SubWindow(`0,`0)">
            <summary>
            返回一个满足条件的新对象。
            </summary>
            <param name="startKey"></param>
            <param name="endKey"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.WindowData`2.SubWindow(System.Int32,System.Int32)">
            <summary>
            返回一个满足条件的新对象。
            </summary>
            <param name="startIndex"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.WindowData`2.ToString">
             <summary>
            显示
             </summary>
             <returns></returns>
        </member>
        <member name="P:Geo.WindowData`2.MaxKeyGap">
            <summary>
            允许的键最大断裂值。需要将Key转换为double计算。
            如果超过此值，则清空重来。如未设置@see KeyToDouble转换，则忽略之。
            </summary>
        </member>
        <member name="P:Geo.WindowData`2.WindowSize">
            <summary>
            窗口大小。
            </summary>
        </member>
        <member name="P:Geo.WindowData`2.IsFull">
            <summary>
            窗口是否已满
            </summary>
        </member>
        <member name="P:Geo.WindowData`2.ValueStringLines">
            <summary>
            为了方便调试输出数据而生
            </summary>
        </member>
        <member name="M:Geo.NumeralWindowData`1.#ctor(System.Int32)">
            <summary>
            构造函数。
            </summary>
            <param name="windowSize">窗口大小</param>
        </member>
        <member name="M:Geo.NumeralWindowData`1.#ctor(System.Collections.Generic.IDictionary{`0,System.Double})">
            <summary>
            构造函数
            </summary>
            <param name="dic"></param>
        </member>
        <member name="M:Geo.NumeralWindowData`1.#ctor(Geo.IDictionaryClass{`0,System.Double})">
            <summary>
            构造函数
            </summary>
            <param name="dic"></param>
        </member>
        <member name="M:Geo.NumeralWindowData`1.Clear">
             <summary>
            清空
             </summary>
        </member>
        <member name="M:Geo.NumeralWindowData`1.SplitAndGetKeysOfGrossError(System.Func{`0,System.Double},System.Double,System.Int32,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            探测的粗差或周跳，首先按照Key进行分离成多个子窗体，分别探测。其中Key断裂口，也认为是粗差。
            </summary>
            <param name="funcKeyToDouble">将Key转换为数值</param> 
            <param name="maxTimeSpan"></param>
            <param name="PolyFitOrder"></param>
            <param name="MaxErrorTimes"></param>
            <param name="MinWindowSize"></param>
            <param name="differTime"></param>
            <param name="IsFirstWindow"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData`1.GetKeysOfGrossError(System.Func{`0,System.Double},System.Int32,System.Double,System.Double)">
            <summary>
            多项式拟合检核数据.
            首先采用大阈值滑动平均，进行粗探，结果分离成多个子窗口，再采用多项式拟合细探测。
            </summary> 
            <param name="funcKeyToDouble">将Key转换为数值</param>
            <param name="order"></param>
            <param name="errorTimes"></param>
            <param name="minWindowSize"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData`1.Split(System.Int32)">
            <summary>
            按照指定长度截断。最后如果太小，则直接追加到上一个。
            </summary>
            <param name="aboutSize">大致大小</param>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData`1.Split(System.Func{`0,System.Double},System.Double)">
            <summary>
            按键间隔分离小窗口。如果间之间的间距超过了指定宽度，则分离成两个或多个子窗口。
            </summary>
            <param name="funcKeyToDouble">将Key转换为数值</param>
            <param name="maxKeySpan"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData`1.SplitByMovingAverage(System.Int32,System.Int32)">
            <summary>
            采用滑动平均值方法，对值进行比较，如果超限则就地分解。
            </summary>
            <param name="errorTimes"></param>
            <param name="judgeWindowSize"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData`1.SubNumeralWindow(System.Int32,System.Int32)">
            <summary>
            截取子窗口
            </summary>
            <param name="startIndex"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData`1.SplitByAverage(System.Int32)">
            <summary>
            采用平均值方法，对值进行比较，如果超限则就地分解。
            </summary>
            <param name="errorTimes"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData`1.GetDifferWindow(System.Int32)">
            <summary>
            获取差分指定次的数据窗口结果，后减前
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData`1.GetDifferWindow">
            <summary>
            获取差分一次的数据窗口结果。键值存储为后一个。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData`1.IsOverLimited(System.Double,System.Int32,System.Double)">
            <summary>
            判断这个数据是否超限。通过下一个值与多项式拟合值之差判断。
            </summary>
            <param name="newVal">待判断的数据</param>
            <param name="maxRmsTimes">最大的偏差，绝对值</param>
            <param name="order">拟合阶次</param>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData`1.IsOverLimited(System.Double,System.Double,System.Boolean)">
            <summary>
            判断这个数据是否超限。通过下一个值与当前平均值之差判断。
            </summary>
            <param name="newVal">待判断的数据</param>
            <param name="maxDelta">最大的偏差，绝对值</param>
            <param name="isRelativeError">是否是相对误差，即百分数。</param>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData`1.IsGrossOfLeveling(System.Double,System.Double)">
            <summary>
            是否是水平数据的粗差，通过已知数据求平均判断，并不将其参与计算。
            </summary>
            <param name="newVal"></param> 
            <param name="errorTimes"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData`1.AverageCheckAddOrClear(`0,System.Double,System.Double)">
            <summary>
            平均数和RMS检核新数据，通过则添加，返回ture，否则清空，添加该数据，并返回false。
            如果未满，则直接添加，不检核，并返回true。
            </summary>
            <param name="key">关键字</param>
            <param name="newVal"></param> 
            <param name="errorTimes"></param> 
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData`1.GetNeatlyWindowData(System.Double)">
            <summary>
            得到剔除粗差（默认3倍中误差）的数据列表。采用平均的方法。
            </summary>
            <param name="errorTimes"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData`1.GetNeatlyWindowData(System.Int32,System.Double,System.Boolean)">
            <summary>
            得到剔除粗差（默认3倍中误差）的数据列表。
            </summary>
            <param name="fitOrder">拟合阶次</param>
            <param name="errorTimes"></param>
            <param name="isLoop">是否循环</param>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData`1.GetKeysOfGrossError(System.Double,System.Boolean)">
             <summary>
            得到粗差编号（默认3倍中误差）列表。。
             </summary>
             <param name="errorTimes"></param>
             <param name="loop">是否循环</param>
             <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData`1.PolyfitCheckAddOrClear(`0,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            多项式拟合检核新数据，通过则添加，返回ture，否则清空，添加该数据，并返回false。
            如果未满，则直接添加，不检核，并返回true。
            </summary>
            <param name="key">关键字</param>
            <param name="newVal"></param>
            <param name="order"></param>
            <param name="maxRmsTimes"></param>
            <param name="nextIndex"></param>
            <returns>添加则返回true，否则false</returns>
        </member>
        <member name="M:Geo.NumeralWindowData`1.FitCheckAddAndAlign(`0,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            多项式拟合检核新数据，通过则直接添加，返回修正后的该值
            如果未满，则直接添加，不检核。
            如果数据达到最大断裂数，则清空之前数据重新对齐添加。
            采用Tag存储对齐数据。
            </summary>
            <param name="key">关键字</param>
            <param name="newVal"></param>
            <param name="order"></param>
            <param name="maxRmsTimes"></param>
            <param name="referVal">参考值</param>
            <returns>添加则返回true，否则false</returns>
        </member>
        <member name="M:Geo.NumeralWindowData`1.GetNextLsPolyFitValue(System.Double,System.Int32)">
            <summary>
             拟合下一个数据。
            </summary>
            <param name="nextIndex">下一个编号，0为推1个单位，1为外推2个单位</param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData`1.GetNextLsPolyFitValue(`0,System.Int32)">
            <summary>
             拟合下一个数据。
            </summary>
            <param name="nextIndex">下一个编号，0为推1个单位，1为外推2个单位</param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.NumeralWindowData`1.LoopDifferValue">
            <summary>
            获取后一个减去前一个，迭代相减的值，高次差值。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.NumeralWindowData`1.AverageValue">
            <summary>
            求平均
            </summary>
        </member>
        <member name="P:Geo.NumeralWindowData`1.Average">
            <summary>
            具有权值的平均值
            </summary>
        </member>
        <member name="P:Geo.NumeralWindowData`1.LastAverage">
            <summary>
            上一个平均值,在调用清空前赋值。
            </summary>
        </member>
        <member name="M:Geo.TimeNumeralWindowData.#ctor(System.Int32)">
            <summary>
            构造函数。
            </summary>
            <param name="judgeWindowSize">窗口大小</param>
        </member>
        <member name="M:Geo.TimeNumeralWindowData.#ctor(System.Collections.Generic.IDictionary{Geo.Times.Time,System.Double})">
            <summary>
            构造函数
            </summary>
            <param name="keyDic"></param>
        </member>
        <member name="M:Geo.TimeNumeralWindowData.#ctor(Geo.IDictionaryClass{Geo.Times.Time,System.Double})">
            <summary>
            构造函数
            </summary>
            <param name="keyDic"></param>
        </member>
        <member name="M:Geo.TimeNumeralWindowData.GetKeysOfGrossError(System.Int32,System.Double,System.Double)">
            <summary>
            多项式拟合检核数据.
            剔除粗差，分隔跳跃差为多个干净的小窗口,小窗口数据再检核。
            </summary>
            <param name="key">关键字</param>
            <param name="newVal"></param>
            <param name="order"></param>
            <param name="errorTimes"></param>
            <param name="nextIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TimeNumeralWindowData.GetNextLsPolyFitValue(System.Double,System.Int32)">
            <summary>
             拟合下一个数据。
            </summary>
            <param name="nextIndex">下一个编号，0为推1个单位，1为外推2个单位</param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.TimeNumeralWindowData.Interval">
            <summary>
            采样间隔
            </summary>
        </member>
        <member name="T:Geo.NumeralWindowData">
            <summary>
            数值窗口数据。做一些数据处理和判断工作。
            </summary>
        </member>
        <member name="T:Geo.IndexedWindowData`1">
            <summary>
            具有检错的窗口数据，可以判断是否连续而重置的窗口数据。
            检索数据默认按照一定的顺序，支持从大到校和从小到大
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Geo.WindowData`1">
            <summary>
            滑动窗口数据。只存储固定的数据，如果超出，则剔除先进入的数据。
            </summary>
        </member>
        <member name="T:Geo.BaseList`1">
            <summary>
            列表接口类, 采用列表实现。属于管理者模式应用。
            </summary> 
            <typeparam name="TValue">值</typeparam>
        </member>
        <member name="M:Geo.BaseList`1.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:Geo.BaseList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.String)">
            <summary>
            以数值初始化
            </summary>
            <param name="values"></param>
            <param name="name"></param>
        </member>
        <member name="M:Geo.BaseList`1.MoveUp(`0)">
            <summary>
            往前移动一位
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.BaseList`1.MoveDown(`0)">
            <summary>
            往后移动一位
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.BaseList`1.GetSubList(System.Int32,System.Int32)">
            <summary>
            截取自列表
            </summary>
            <param name="indexFrom"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.BaseList`1.Add(`0)">
            <summary>
            添加， 
            </summary> 
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.BaseList`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加， 
            </summary> 
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.BaseList`1.Insert(System.Int32,`0)">
            <summary>
            添加，若有保存
            </summary>
            <param name="keyPrev"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.BaseList`1.Set(System.Int32,`0)">
            <summary>
            设置，直接替换
            </summary>
            <param name="keyPrev"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.BaseList`1.Contains(`0)">
            <summary>
            是否包含
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.BaseList`1.Get(System.Int32)">
            <summary>
            获取，若无则返回默认实例 ，如null
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.BaseList`1.Remove(`0)">
            <summary>
            移除一个
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.BaseList`1.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            移除
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:Geo.BaseList`1.RemoveAt(System.Int32,System.Int32)">
            <summary>
            移除范围
            </summary>
            <param name="indexStart"></param>
            <param name="endIndex"></param>
        </member>
        <member name="M:Geo.BaseList`1.Clear">
            <summary>
            清空
            </summary> 
        </member>
        <member name="M:Geo.BaseList`1.GetEnumerator">
            <summary>
            IEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.BaseList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            IEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.BaseList`1.RemoveAt(System.Int32)">
            <summary>
            移除指定引用
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Geo.BaseList`1.Pop">
            <summary>
            弹出最先进入的一个
            </summary>
            <returns></returns> 
        </member>
        <member name="M:Geo.BaseList`1.ToList">
            <summary>
            到列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.BaseList`1.ToString">
             <summary>
            显示
             </summary>
             <returns></returns>
        </member>
        <member name="M:Geo.BaseList`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:Geo.BaseList`1.data">
            <summary>
            核心数据
            </summary>
        </member>
        <member name="P:Geo.BaseList`1.Data">
            <summary>
            核心数据返回。
            </summary>
        </member>
        <member name="P:Geo.BaseList`1.Tag">
            <summary>
            存储额外数据。
            </summary>
        </member>
        <member name="P:Geo.BaseList`1.First">
            <summary>
            第一个
            </summary>
        </member>
        <member name="P:Geo.BaseList`1.Second">
            <summary>
            第2个
            </summary>
        </member>
        <member name="P:Geo.BaseList`1.Middle">
            <summary>
            第一个
            </summary>
        </member>
        <member name="P:Geo.BaseList`1.Last">
            <summary>
            最后个
            </summary>
        </member>
        <member name="P:Geo.BaseList`1.Count">
            <summary>
            数量。
            </summary>
        </member>
        <member name="P:Geo.BaseList`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Geo.BaseList`1.Item(System.Int32)">
            <summary>
            检索器
            </summary>
            <param name="keyPrev"></param>
            <returns></returns>
        </member>
        <member name="F:Geo.WindowData`1.log">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:Geo.WindowData`1.#ctor(System.Int32)">
            <summary>
            默认构造函数。
            </summary>
            <param name="WindowSize">窗口大小</param>
        </member>
        <member name="M:Geo.WindowData`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.String)">
            <summary>
            以数值列表初始化，数据默认为窗口大小。
            </summary>
            <param name="values"></param>
            <param name="name"></param>
        </member>
        <member name="M:Geo.WindowData`1.Add(`0)">
            <summary>
            增加一个。
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Geo.WindowData`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量添加
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.WindowData`1.GetNew(System.Func{`0,System.Boolean})">
            <summary>
            返回一个满足条件的新对象。
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.WindowData`1.ToString">
             <summary>
            显示
             </summary>
             <returns></returns>
        </member>
        <member name="M:Geo.WindowData`1.Split(System.Func{`0,`0,System.Boolean})">
            <summary>
            按照指定条件分解，比较附近两个元素是否满足条件。
            </summary>
            <param name="funcConditionToSplit">如果返回真，则表示分离</param>
            <returns></returns>
        </member>
        <member name="P:Geo.WindowData`1.WindowSize">
            <summary>
            窗口大小。
            </summary>
        </member>
        <member name="P:Geo.WindowData`1.IsFull">
            <summary>
            是否存满了
            </summary>
        </member>
        <member name="P:Geo.WindowData`1.ValueStringLines">
            <summary>
            为了方便调试输出数据而生
            </summary>
        </member>
        <member name="M:Geo.IndexedWindowData`1.#ctor(System.Int32,System.Boolean,System.Int32)">
            <summary>
            具有检错的窗口数据构造函数
            </summary>
            <param name="jugedWindowSize"></param>
            <param name="IsResetWhenIndexBreak">当断裂时，是否重置 清空</param>
            <param name="MaxBreakCount">允许最大的断裂数量</param>
        </member>
        <member name="M:Geo.IndexedWindowData`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Int32,System.String)">
            <summary>
            具有检错的窗口数据 以数值初始化
            </summary>
            <param name="values"></param>
            <param name="IsResetWhenIndexBreak">当断裂时，是否重置 清空</param>
            <param name="MaxBreakCount">允许最大的断裂数量</param>
            <param name="name"></param>
        </member>
        <member name="M:Geo.IndexedWindowData`1.IsIndexBreaked(System.Int32)">
            <summary>
            编号是否断裂
            </summary>
            <param name="newIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IndexedWindowData`1.Add(System.Int32,`0)">
            <summary>
            添加一个具有编号的数据。
            </summary>
            <param name="index"></param>
            <param name="currentVal"></param>
        </member>
        <member name="P:Geo.IndexedWindowData`1.MaxBreakCount">
            <summary>
            允许的最大的非连续数量。
            </summary>
        </member>
        <member name="P:Geo.IndexedWindowData`1.IsResetWhenIndexBreaked">
            <summary>
            当数据编号断裂（超过最大非连续数量）时，是否重置数据。
            </summary>
        </member>
        <member name="P:Geo.IndexedWindowData`1.CurrentIndex">
            <summary>
            当前数据编号
            </summary>
        </member>
        <member name="M:Geo.NumeralWindowData.#ctor(System.Int32)">
            <summary>
            构造函数。
            </summary>
            <param name="judgeWindowSize">窗口大小</param>
        </member>
        <member name="M:Geo.NumeralWindowData.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Boolean,System.Int32,System.String)">
            <summary>
            以数值初始化
            </summary>
            <param name="values"></param>
            <param name="name"></param>
            <param name="IsResetWhenIndexBreak">当断裂时，是否重置 清空</param>
            <param name="MaxBreakCount">允许最大的断裂数量</param>
        </member>
        <member name="M:Geo.NumeralWindowData.GetDifferWindow(System.Int32)">
            <summary>
            获取差分一次的数据窗口结果，后减前
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData.GetDifferWindow">
            <summary>
            获取差分一次的数据窗口结果。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData.IsOverLimited(System.Double,System.Double,System.Boolean)">
            <summary>
            判断这个数据是否超限。通过下一个拟合值判断。
            </summary>
            <param name="newVal">待判断的数据</param>
            <param name="maxDelta">最大的偏差，绝对值</param>
            <param name="isRelativeError">是否是相对误差，即百分数。</param>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData.GetRmsedAverage(System.Int32,System.Int32)">
            <summary>
            获取平均带权值
            </summary>
            <param name="from"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData.IsGrossOfLeveling(System.Double,System.Double)">
            <summary>
            是否是水平数据的粗差，通过已知数据求平均判断，并不将其参与计算。
            </summary>
            <param name="newVal"></param> 
            <param name="errorTimes"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData.AverageCheckAddOrClear(System.Double,System.Double,System.Double)">
            <summary>
            平均数和RMS检核新数据，通过则添加，返回ture，否则清空，添加该数据，并返回false。
            如果未满，则直接添加，不检核，并返回true。
            </summary>
            <param name="newVal"></param> 
            <param name="errorTimes"></param> 
            <param name="greenPassRms">绿色通道，避免过于苛刻</param> 
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData.Clear">
            <summary>
            清空，并保存上一个平均数。
            </summary>
        </member>
        <member name="M:Geo.NumeralWindowData.PolyfitCheckAddOrClear(System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            多项式拟合检核新数据，通过则添加，返回ture，否则清空，添加该数据，并返回false。
            如果未满，则直接添加，不检核，并返回true。
            </summary>
            <param name="newVal"></param>
            <param name="order"></param>
            <param name="errorTimes"></param>
            <param name="nextIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData.GetNextLsPolyFitValue(System.Double,System.Int32)">
            <summary>
             拟合下一个数据。
            </summary>
            <param name="nextIndex">下一个编号，0为推1个单位，1为外推2个单位</param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData.GetNeatlyWindowData(System.Double)">
            <summary>
            得到剔除粗差（默认2倍中误差）的数据列表。
            </summary>
            <param name="errorTimes"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData.GetIndexesOfGrossError(System.Double)">
             <summary>
            得到粗差编号（默认3倍中误差）列表。。
             </summary>
             <param name="errorTimes"></param>
             <returns></returns>
        </member>
        <member name="M:Geo.NumeralWindowData.InsertAndReturnNew(System.Int32,System.Double)">
            <summary>
            插入，并返回新列表。
            </summary>
            <param name="index"></param>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.NumeralWindowData.LoopDifferValue">
            <summary>
            获取后一个减去前一个，迭代相减的值，高次差值。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.NumeralWindowData.AverageValue">
            <summary>
            求平均
            </summary>
        </member>
        <member name="P:Geo.NumeralWindowData.Average">
            <summary>
            具有权值的平均值
            </summary>
        </member>
        <member name="P:Geo.NumeralWindowData.LastAverage">
            <summary>
            上一个平均值,在调用清空前赋值。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.IXyCoordConverter">
            <summary>
            XY二维坐标转换器
            </summary>
        </member>
        <member name="T:Geo.Coordinates.ICoordConverter`1">
            <summary>
            坐标转换接口
            </summary>
            <typeparam name="TCoord"></typeparam>
        </member>
        <member name="M:Geo.Coordinates.ICoordConverter`1.GetNew(`0)">
            <summary>
            转换为新坐标
            </summary>
            <param name="oldCoord"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ICoordConverter`1.GetOld(`0)">
            <summary>
            转换为老坐标系的坐标值
            </summary>
            <param name="newCoord"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Coordinates.IOneDimCoordConverter">
            <summary>
            一维坐标转换器
            </summary>
        </member>
        <member name="T:Geo.Coordinates.CoordZoomer">
            <summary>
            坐标放缩，尺度变化类。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.CoordZoomer.#ctor(System.Double,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="zoomScaleX"></param>
            <param name="zoomScaleY"></param>
        </member>
        <member name="M:Geo.Coordinates.CoordZoomer.#ctor(Geo.Coordinates.XY)">
            <summary>
            构造函数
            </summary>
            <param name="zoomScale"></param>
        </member>
        <member name="M:Geo.Coordinates.CoordZoomer.#ctor(Geo.Coordinates.XY,Geo.Coordinates.XY)">
            <summary>
            构造函数
            </summary>
            <param name="oldCoord">对应点的老坐标，不可为原点</param>
            <param name="newCoord">对应点的新坐标，不可为原点 </param>
        </member>
        <member name="M:Geo.Coordinates.CoordZoomer.GetNew(Geo.Coordinates.XY)">
            <summary>
            获取新坐标系中的坐标。
            </summary>
            <param name="oldCoord"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordZoomer.GetOld(Geo.Coordinates.XY)">
            <summary>
            获取老坐标系中的坐标。
            </summary>
            <param name="newCoord"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.CoordZoomer.ScaleZoomerX">
            <summary>
            坐标放缩尺度, X 方向。
            定义为： ZoomScale =  老尺度 / 新尺度。
            如，新单位为 1 cm，老单位为 1 m=100 cm，则 ZoomScale = 100
            </summary>
        </member>
        <member name="P:Geo.Coordinates.CoordZoomer.ScaleZoomerY">
            <summary>
            坐标放缩尺度, Y 方向。
            定义为： ZoomScale =  老尺度 / 新尺度。
            如，新单位为 1 cm，老单位为 1 m=100 cm，则 ZoomScale = 100
            </summary>
        </member>
        <member name="T:Geo.Coordinates.ScaleZoomer">
            <summary>
            坐标放缩，尺度变化类。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.ScaleZoomer.#ctor(System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="zoomScale"></param>
        </member>
        <member name="M:Geo.Coordinates.ScaleZoomer.#ctor(System.Double,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="oldVal">对应点的老坐标，不可为原点</param>
            <param name="newCoord">对应点的新坐标，不可为原点 </param>
        </member>
        <member name="M:Geo.Coordinates.ScaleZoomer.GetNew(System.Double)">
            <summary>
            获取新坐标系中的坐标。
            </summary>
            <param name="oldVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ScaleZoomer.GetOld(System.Double)">
            <summary>
            获取老坐标系中的坐标。
            </summary>
            <param name="newVal"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.ScaleZoomer.ZoomScale">
            <summary>
            坐标放缩尺度.分别对应X和Y方向。
            定义为： ZoomScale =  老尺度 / 新尺度。
            如，新单位为 1 cm，老单位为 1 m=100 cm，则 ZoomScale = 100
            </summary>
        </member>
        <member name="T:Geo.Coordinates.CoordInverser">
            <summary>
            坐标反转类
            </summary>
        </member>
        <member name="M:Geo.Coordinates.CoordInverser.#ctor(System.Boolean,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="IsYInvert"></param>
            <param name="IsXInvert"></param>
        </member>
        <member name="M:Geo.Coordinates.CoordInverser.GetNew(Geo.Coordinates.XY)">
            <summary>
            获取新坐标系中的坐标。
            </summary>
            <param name="oldCoord"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordInverser.GetOld(Geo.Coordinates.XY)">
            <summary>
            获取老坐标系中的坐标。
            </summary>
            <param name="oldCoord"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.CoordInverser.IsYInvert">
            <summary>
            是否反转Y轴
            </summary>
        </member>
        <member name="P:Geo.Coordinates.CoordInverser.IsXInvert">
            <summary>
            是否反转X轴
            </summary>
        </member>
        <member name="T:Geo.Coordinates.CoordTranslater">
            <summary>
            坐标平移类
            </summary>
        </member>
        <member name="M:Geo.Coordinates.CoordTranslater.#ctor(Geo.Coordinates.XY)">
            <summary>
            构造函数
            </summary>
            <param name="TransVector">平移向量，老坐标系原点指向新坐标系原点，即新坐标系原点在老坐标系中的位置向量</param>
        </member>
        <member name="M:Geo.Coordinates.CoordTranslater.GetNew(Geo.Coordinates.XY)">
            <summary>
            获取新坐标系中的坐标。
            </summary>
            <param name="oldCoord"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTranslater.GetOld(Geo.Coordinates.XY)">
            <summary>
            获取老坐标系中的坐标。
            </summary>
            <param name="newCoord"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.CoordTranslater.TransVector">
            <summary>
            平移坐标，由旧坐标系原点指向新坐标系原点。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.ENU">
            <summary>
            站心坐标系.左手坐标系。或卫星坐标系。地方坐标系。当地左手笛卡尔坐标系
            N 北方
            E 东方
            U 头顶
            </summary>
        </member>
        <member name="T:Geo.Coordinates.Coordinate">
            <summary>
            通用坐标。 
            </summary>
        </member>
        <member name="T:Geo.Algorithm.AbstractVector">
            <summary>
            Geo 向量，为一维数组。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.IVector">
            <summary>
            Geo 向量接口。
            纯数字向量，无任务其它信息。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.IVectorOperation`1">
            <summary>
            向量的计算
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Geo.Algorithm.IVectorOperation`1.Dot(`0)">
            <summary>
            向量的点积/数量积
            </summary>
            <param name="right">另一个向量</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.IVectorOperation`1.Cross(`0)">
            <summary>
            向量的叉乘，结果还是向量
            </summary>
            <param name="right">另一个向量</param>
            <returns></returns>
        </member>
        <member name="T:Geo.INumeralIndexing">
            <summary>
            索引器
            </summary>
        </member>
        <member name="T:Geo.IIndexing`1">
            <summary>
            索引器
            </summary>
        </member>
        <member name="P:Geo.IIndexing`1.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.IVector.Create(System.Int32)">
            <summary>
            创建一个默认的对象。
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.IVector.Create(System.Double[])">
            <summary>
            以一维数组创建。
            </summary>
            <param name="array">一维数组</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.IVector.Contains(System.String)">
            <summary>
            是否包含指定参数名称
            </summary>
            <param name="paramName">参数名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.IVector.GetIndex(System.String)">
            <summary>
            获取参数名称的编号。
            </summary>
            <param name="paramName">参数名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.IVector.GetVector(System.Collections.Generic.List{System.String})">
            <summary>
            获取指定参数的向量
            </summary>
            <param name="paramNames">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.IVector.GetVector(System.Int32,System.Int32)">
            <summary>
            获取指定编号的向量
            </summary>
            <param name="fromIndex">起始编号</param>
            <param name="count">参数数量</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.IVector.GetCos(System.Int32)">
            <summary>
            向量与指定坐标轴的方向角余弦，CosX = x/r
            </summary>
            <param name="i">坐标轴/元素下标</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.IVector.GetDirectionAngle(System.Int32)">
            <summary>
            向量与指定坐标轴的方向角。单位：弧度
            </summary>
            <param name="i">坐标轴编号</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.IVector.GetCos(Geo.Algorithm.IVector)">
            <summary>
            与另一个向量的夹角余弦。
            </summary>
            <param name="another">另一个向量</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.IVector.GetIncludedAngle(Geo.Algorithm.IVector)">
            <summary>
            与另一个向量的夹角。单位：弧度
            </summary>
            <param name="another">另一个向量</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.IVector.SetSubVector(Geo.Algorithm.IVector,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置
            </summary>
            <param name="subVector"></param>
            <param name="startMainIndex"></param>
            <param name="startSubIndex"></param>
            <param name="maxSubLength"></param>
        </member>
        <member name="P:Geo.Algorithm.IVector.Dimension">
            <summary>
            维数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.IVector.ParamNames">
            <summary>
            参数名称。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.IVector.OneDimArray">
            <summary>
            返回一维数组。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.IVector.Count">
            <summary>
            元素数量,维数。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.IVector.Norm">
            <summary>
            向量的模/范数/长度/元素平方和的根
            </summary>
        </member>
        <member name="P:Geo.Algorithm.IVector.Item(System.Int32)">
            <summary>
            获取指定的元素。
            </summary>
            <param name="i">行编号</param> 
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.IVector.Item(System.String)">
            <summary>
            名称
            </summary>
            <param name="paramName"> 参数名称 </param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.IVector.UnitVector">
            <summary>
            单位向量
            </summary>
        </member>
        <member name="M:Geo.Algorithm.AbstractVector.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.Algorithm.AbstractVector.GetCos(System.Int32)">
            <summary>
            向量与指定坐标轴的方向余弦，CosX = x/r
            </summary>
            <param name="i">坐标轴/元素下标</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractVector.GetDirectionAngle(System.Int32)">
            <summary>
            向量与指定坐标轴的方向角[0-180]。单位：弧度。
            </summary>
            <param name="i">坐标轴编号</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractVector.GetVector(System.Collections.Generic.List{System.String})">
            <summary>
            获取指定参数的向量
            </summary>
            <param name="paramNames">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractVector.GetVector(System.Int32,System.Int32)">
            <summary>
            返回子向量，如果指定数量超限，则返回能提供的最大向量。
            </summary>
            <param name="fromIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractVector.Contains(System.String)">
            <summary>
            是否包含指定参数名称
            </summary>
            <param name="paramName">参数名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractVector.GetIndex(System.String)">
            <summary>
            获取参数名称的编号。
            </summary>
            <param name="paramName">参数名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractVector.Plus(Geo.Algorithm.IVector)">
            <summary>
            加上
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractVector.Minus(Geo.Algorithm.IVector)">
            <summary>
            减去
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractVector.Opposite">
            <summary>
            相反数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractVector.Multiply(Geo.Algorithm.IVector)">
            <summary>
            Corss
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractVector.Multiply(System.Double)">
            <summary>
            乘法
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractVector.Divide(System.Double)">
            <summary>
            除法
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractVector.Create(System.Int32)">
            <summary>
            创建
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractVector.Create(System.Double[])">
            <summary>
            创建
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractVector.Clone">
            <summary>
            拷贝
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractVector.GetIncludedAngle(Geo.Algorithm.IVector)">
            <summary>
            与另一个向量的夹角。单位：弧度
            </summary>
            <param name="another">另一个向量</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractVector.GetCos(Geo.Algorithm.IVector)">
            <summary>
            与另一个向量的夹角余弦。
            </summary>
            <param name="another">另一个向量</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractVector.Dot(Geo.Algorithm.IVector)">
            <summary>
            向量的点积/数量积
            </summary>
            <param name="right">另一个向量</param>
        </member>
        <member name="M:Geo.Algorithm.AbstractVector.Cross(Geo.Algorithm.IVector)">
            <summary>
            向量的叉乘，结果还是向量,大小为矩形面积，方向垂直此量向量所占的平面，方向符合右手规则，拇指方向
            </summary>
            <param name="right">另一个向量</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractVector.SetSubVector(Geo.Algorithm.IVector,System.Int32,System.Int32,System.Int32)">
            <summary>
            用子向量值设置向量
            </summary>
            <param name="subVector">子向量</param>
            <param name="startMainIndex">主向量起始编号</param>
            <param name="startSubIndex">子向量起始编号</param>
            <param name="maxSubLength">最大子向量的长度</param>
        </member>
        <member name="M:Geo.Algorithm.AbstractVector.Equals(System.Object)">
            <summary>
            是否在数值限内相等。
            </summary>
            <param name="obj">待比较对象</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.AbstractVector.GetUniqueKey(System.Double)">
            <summary>
            按照指定精度生成一个唯一的键
            </summary>
            <param name="resolution"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.AbstractVector.ParamNames">
            <summary>
            参数名称。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.AbstractVector.OneDimArray">
            <summary>
            返回一维数组。
            Linear Array.
            </summary>
        </member>
        <member name="P:Geo.Algorithm.AbstractVector.Count">
            <summary>
            元素数量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.AbstractVector.Norm">
            <summary>
            向量的模/范数/长度/元素平方和的根
            </summary>
        </member>
        <member name="P:Geo.Algorithm.AbstractVector.Tolerance">
            <summary>
            数值比较时的限差，默认为 1e-23.
            </summary>
        </member>
        <member name="P:Geo.Algorithm.AbstractVector.UnitVector">
            <summary>
            单位向量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.AbstractVector.Item(System.Int32)">
            <summary>
            获取指定的元素。
            </summary>
            <param name="i">行编号</param>
            <param name="i">列编号</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.AbstractVector.IsValid">
            <summary>
            是否所有数字都有效
            </summary>
        </member>
        <member name="P:Geo.Algorithm.AbstractVector.Dimension">
            <summary>
            坐标的维数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.AbstractVector.Weight">
            <summary>
            权值，可选。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.AbstractVector.Tag">
            <summary>
            用于保存数据。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.AbstractVector.Item(System.String)">
            <summary>
            名称
            </summary>
            <param name="paramName"> 参数名称 </param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.AbstractVector.FormatProvider">
            <summary>
            自定义格式化
            </summary>
        </member>
        <member name="T:Geo.Coordinates.ICoordinate">
            <summary>
            顶层坐标值的接口。所有的坐标类都应该实现本接口。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.ICoordinate.IsHomogenized(Geo.Coordinates.ICoordinate)">
            <summary>
            是否是同类型坐标，如同一参考系、相同的坐标轴、坐标单位等。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ICoordinate.ContainsOrdinate(Geo.Referencing.Ordinate)">
            <summary>
            是否包含坐标。
            </summary>
            <param name="ordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ICoordinate.Distance(Geo.Coordinates.ICoordinate)">
            <summary>
            与另一坐标的距离。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ICoordinate.Equals(Geo.Coordinates.ICoordinate,Geo.Coordinates.Tolerance)">
            <summary>
            在制定精度范围（含）内是否相等。
            </summary>
            <param name="other"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.ICoordinate.Weight">
            <summary>
            权值。兼容于GeoAPI对应于其 M 变量。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ICoordinate.Tag">
            <summary>
            标签，用于存储一个对象。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ICoordinate.Dimension">
            <summary>
            坐标分量的维数，通常为1维、2维和3维。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ICoordinate.ReferenceSystem">
            <summary>
            坐标所使用的参考系统。没有参考系统的坐标是没有意义的。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ICoordinate.Zero">
            <summary>
            为 0.
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ICoordinate.Item(Geo.Referencing.Ordinate)">
            <summary>
            获取和设置坐标值。
            </summary>
            <param name="ordinate"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.ICoordinate.Axes">
            <summary>
            坐标轴
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ICoordinate.Radius">
            <summary>
            到原点的欧式距离，半径。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ICoordinate.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="M:Geo.Coordinates.Coordinate.#ctor(Geo.Referencing.ICoordinateReferenceSystem,System.Double,Geo.Referencing.CoordinateType)">
            <summary>
            由参考系统实例化坐标。
            </summary>
            <param name="referenceSystem">参考系统</param>
        </member>
        <member name="M:Geo.Coordinates.Coordinate.Clone">
            <summary>
            克隆。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Coordinate.CompareTo(System.Object)">
            <summary>
            比较。与原点的距离。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Coordinate.ContainsOrdinate(Geo.Referencing.Ordinate)">
            <summary>
            是否包含指定坐标
            </summary>
            <param name="ordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Coordinate.Distance(Geo.Coordinates.ICoordinate)">
            <summary>
            欧式距离。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Coordinate.IsHomogenized(Geo.Coordinates.ICoordinate)">
            <summary>
            是否为同类坐标，主要是通过参考系判断。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Coordinate.ToString">
            <summary>
            字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Coordinate.Equals(Geo.Coordinates.ICoordinate)">
            <summary>
            数值是否相等。
            </summary>
            <param name="other">待比较对象</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Coordinate.Equals(Geo.Coordinates.ICoordinate,Geo.Coordinates.Tolerance)">
            <summary>
            相同参考系下，数值上是否相等。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Coordinate.Equals(System.Object)">
            <summary>
            相同参考系下，数值上是否相等。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Coordinate.GetHashCode">
            <summary>
            哈希数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Coordinate.GetEnumerator">
            <summary>
            枚举器接口
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Coordinate.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            枚举器接口
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.Coordinate.CoordDic">
            <summary>
            存储坐标的字典。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Coordinate.Item(System.Int32)">
            <summary>
            获取或设置坐标轴数值。
            </summary>
            <param name="axisIndex">坐标轴序号，从 0 开始</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.Coordinate.Axes">
            <summary>
            坐标轴列表。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Coordinate.Dimension">
            <summary>
            坐标的维数。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Coordinate.ReferenceSystem">
            <summary>
            坐标参考系。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Coordinate.IsEmpty">
            <summary>
            是否为空。若没有指定参考系统，则为空。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Coordinate.Item(Geo.Referencing.Ordinate)">
            <summary>
            获取或设置指定坐标值。
            </summary>
            <param name="ordinate"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.Coordinate.Radius">
            <summary>
            到原点的欧式距离，半径。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Coordinate.Zero">
            <summary>
            原点。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.ENU.#ctor">
            <summary>
            北东天坐标。卫星坐标，局部坐标，测站坐标。当地左手笛卡尔坐标系
            </summary>
        </member>
        <member name="M:Geo.Coordinates.ENU.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            北东天坐标。卫星坐标，局部坐标，测站坐标。当地左手笛卡尔坐标系
            </summary>
            <param name="n">北方向，X</param>
            <param name="e">东方向，Y</param>
            <param name="u">向上，Z</param>
        </member>
        <member name="M:Geo.Coordinates.ENU.ToRnxString">
            <summary>
            0.0780 0.0000 0.0000
            1X,F6.4
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ENU.ToRnxString(System.Double)">
            <summary>
            8.2 = 12345.78
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ENU.Distance(Geo.Coordinates.ENU)">
            <summare>
            欧式距离。
            </summare>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ENU.GetENU(Geo.Coordinates.ENU,System.Double,Geo.Coordinates.ENU,System.Double)">
            <summare>
            按权拟合。
            </summare>
            <param name="ENUA"></param>
            <param name="weightA"></param>
            <param name="ENUB"></param>
            <param name="weightB"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ENU.Dot(Geo.Coordinates.XYZ)">
            <summary>
            T是单位向量
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ENU.Dot(Geo.Coordinates.ENU)">
            <summary>
            T是单位向量
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ENU.Parse(System.String)">
            <summary>
            解析字符串，可以解析空格、分号、换行符、回车符、Tab为分隔符的字符串
            </summary>
            <param name="toString"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ENU.Parse(System.String,System.Char[])">
            <summary>
            (x,y) (x,y,z) (x y z) x y z
            </summary>
            <param name="toString"></param>
            <param name="separaters"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ENU.Parse(System.Double[])">
            <summary>
            从一维数组中解析。
            </summary>
            <param name="result">计算结果</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.ENU.N">
            <summary>
            北方向
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ENU.E">
            <summary>
            东方向
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ENU.U">
            <summary>
            上方向
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ENU.Zero">
            <summary>
            0 0 0
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ENU.Array">
            <summary>
            转为一维数组
            </summary>
        </member>
        <member name="T:Geo.Coordinates.GnsserXyzCoordWriter">
            <summary>
            坐标文件写入器
            </summary>
        </member>
        <member name="T:Geo.IO.LineFileWriter`1">
            <summary>
            行文件写入通用接口
            </summary>
        </member>
        <member name="T:Geo.IO.EntityWriter`1">
            <summary>
            块式读取，适合小文件。对象Xml文件写入通用接口.
            </summary>
        </member>
        <member name="T:Geo.IO.IEntityWriter`1">
            <summary>
            行对象文件读取器接口。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Geo.IO.IEntityWriter">
            <summary>
            写入器。
            </summary>
        </member>
        <member name="M:Geo.IO.IEntityWriter.Init(System.String,System.String)">
            <summary>
            初始化，等同于构造函数
            </summary>
            <param name="filePath"></param>
            <param name="metaFilePathOrDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.IEntityWriter.Write(System.Object)">
            <summary>
            写入
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Geo.IO.IEntityWriter.Close">
            <summary>
            关闭数据流
            </summary>
        </member>
        <member name="T:Geo.IBaseDirecory">
            <summary>
            基础目录，如工程目录
            </summary>
        </member>
        <member name="P:Geo.IBaseDirecory.BaseDirectory">
            <summary>
            基础目录，如工程目录，脚本目录。如果采用相对路径，且非当前程序默认路径，则必须赋值。
            </summary>
        </member>
        <member name="M:Geo.IO.IEntityWriter`1.Write(`0)">
            <summary>
            读取方法
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:Geo.IO.IEntityWriter`1.FilePath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:Geo.IO.IEntityWriter`1.Metadata">
            <summary>
            文件元数据
            </summary>
        </member>
        <member name="P:Geo.IO.IEntityWriter`1.EntityType">
            <summary>
            对象类型
            </summary>
        </member>
        <member name="M:Geo.IO.EntityWriter`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.IO.EntityWriter`1.#ctor(System.String,System.String,System.Text.Encoding,System.IO.FileMode)">
            <summary>
            构造函数
            </summary>
            <param name="filePath">数据文件路径。</param>
            <param name="metaFilePathOrDirectory">元数据文件或者元数据文件存放的目录。若不指定，则自动寻找文件目录下的元数据，若没有则调用默认的元数据，若还没有则报错。</param>
        </member>
        <member name="M:Geo.IO.EntityWriter`1.#ctor(System.String,Geo.IO.Gmetadata,System.Text.Encoding,System.IO.FileMode)">
            <summary>
            构造函数
            </summary>
            <param name="filePath">数据文件路径。</param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.EntityWriter`1.#ctor(System.IO.Stream,Geo.IO.Gmetadata,System.Text.Encoding)">
            <summary>
            构造函数
            </summary>
            <param name="Stream">数据流。</param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.EntityWriter`1.Init(System.IO.Stream,Geo.IO.Gmetadata,System.Text.Encoding)">
            <summary>
            初始化
            </summary>
            <param name="Stream"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.EntityWriter`1.Init(System.String,System.String,System.IO.FileMode)">
            <summary>
            初始化
            </summary>
            <param name="Stream"></param>
            <param name="metaFilePathOrDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.EntityWriter`1.Init(System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="Stream"></param>
            <param name="metaFilePathOrDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.EntityWriter`1.Init(System.IO.Stream,System.String,System.Text.Encoding)">
            <summary>
            初始化
            </summary>
            <param name="Stream"></param>
            <param name="metaFilePathOrDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.EntityWriter`1.InitStreamWriter(System.IO.Stream,System.Text.Encoding)">
            <summary>
            设置数据流
            </summary>
        </member>
        <member name="M:Geo.IO.EntityWriter`1.FinalInit">
            <summary>
            最后的初始化，在所有初始化执行之后
            </summary>
        </member>
        <member name="M:Geo.IO.EntityWriter`1.WriteCommentLine(System.String)">
            <summary>
            写入一行注释
            </summary>
            <param name="comment"></param>
        </member>
        <member name="M:Geo.IO.EntityWriter`1.AppendComment(System.String)">
            <summary>
            在当前行追加注释
            </summary>
            <param name="comment"></param>
        </member>
        <member name="M:Geo.IO.EntityWriter`1.Write(System.Object)">
            <summary>
            写入对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Geo.IO.EntityWriter`1.Write(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            写入
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Geo.IO.EntityWriter`1.Write(`0)">
            <summary>
            写入
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Geo.IO.EntityWriter`1.GetDefaultMetadata">
            <summary>
            获取默认的元数据。没有排序。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.EntityWriter`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:Geo.IO.EntityWriter`1.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="P:Geo.IO.EntityWriter`1.Encoding">
            <summary>
            字符编码
            </summary>
        </member>
        <member name="P:Geo.IO.EntityWriter`1.CurrentIndex">
            <summary>
            当前编号
            </summary>
        </member>
        <member name="P:Geo.IO.EntityWriter`1.StreamWriter">
            <summary>
            数据流阅读器
            </summary>
        </member>
        <member name="P:Geo.IO.EntityWriter`1.FilePath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:Geo.IO.EntityWriter`1.BaseDirectory">
            <summary>
            基础目录，当前文件的目录。
            </summary>
        </member>
        <member name="P:Geo.IO.EntityWriter`1.Metadata">
            <summary>
            元数据，描述数据的数据。
            应该包含 Name X Y Z
            </summary>
        </member>
        <member name="P:Geo.IO.EntityWriter`1.EntityType">
            <summary>
            对象类型
            </summary>
        </member>
        <member name="P:Geo.IO.EntityWriter`1.Properties">
            <summary>
            要写入XML的属性。
            </summary>
        </member>
        <member name="M:Geo.IO.LineFileWriter`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.IO.LineFileWriter`1.#ctor(System.String,System.String,System.Text.Encoding,System.IO.FileMode)">
            <summary>
            构造函数
            </summary>
            <param name="filePath">数据文件路径。</param>
            <param name="metaFilePathOrDirectory">元数据文件或者元数据文件存放的目录。若不指定，则自动寻找文件目录下的元数据，若没有则调用默认的元数据，若还没有则报错。</param>
        </member>
        <member name="M:Geo.IO.LineFileWriter`1.#ctor(System.String,Geo.IO.Gmetadata,System.Text.Encoding,System.IO.FileMode)">
            <summary>
            构造函数
            </summary>
            <param name="filePath">数据文件路径。</param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.LineFileWriter`1.#ctor(System.IO.Stream,Geo.IO.Gmetadata,System.Text.Encoding)">
            <summary>
            构造函数
            </summary>
            <param name="Stream">数据流。</param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.LineFileWriter`1.WriteHeaderLineWithComment">
            <summary>
            写头部信息，具有注释
            </summary>
        </member>
        <member name="M:Geo.IO.LineFileWriter`1.WriteHeaderLine">
            <summary>
            写入一行头部信息
            </summary> 
        </member>
        <member name="M:Geo.IO.LineFileWriter`1.WriteCommentLine(System.String)">
            <summary>
            写入一行注释
            </summary>
            <param name="comment"></param>
        </member>
        <member name="M:Geo.IO.LineFileWriter`1.WriteCommentLine(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            写入一行注释
            </summary>
            <param name="comment"></param>
        </member>
        <member name="M:Geo.IO.LineFileWriter`1.AppendComment(System.String)">
            <summary>
            在当前行追加注释
            </summary>
            <param name="comment"></param>
        </member>
        <member name="M:Geo.IO.LineFileWriter`1.Write(`0)">
            <summary>
            写入
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Geo.IO.LineFileWriter`1.EntityToLine(`0)">
            <summary>
            对象序列化为字符串行
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.LineFileWriter`1.PropertyToString(`0,System.Reflection.PropertyInfo)">
            <summary>
            属性转换为字符串
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.LineFileWriter`1.PropertyToString(System.Object)">
            <summary>
            属性转为字符串
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.IO.LineFileWriter`1.ItemSpliter">
            <summary>
            属性之间的分隔符号
            </summary>
        </member>
        <member name="P:Geo.IO.LineFileWriter`1.IsItemWidthFixed">
            <summary>
            项目宽度是否固定，若是，分别判断 PropertyPositions 和 ItemLengthes 是否为空，决定采用
            </summary>
        </member>
        <member name="P:Geo.IO.LineFileWriter`1.PropertyPositions">
            <summary>
            采用固定字符串截取。此处采用字典而不采用列表，是因为若不需要解析的就可以不解析了。
            </summary>
        </member>
        <member name="P:Geo.IO.LineFileWriter`1.ItemLengthes">
            <summary>
            项目长度集合，适用于以长度确定行的文件。
            如果没有指定，则采用分隔符分隔。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.GnsserXyzCoordWriter.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="gofFilePath"></param>
            <param name="metaFilePath"></param>
        </member>
        <member name="M:Geo.Coordinates.GnsserXyzCoordWriter.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="gofFilePath"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.Coordinates.GnsserXyzCoordWriter.#ctor(System.IO.Stream,Geo.IO.Gmetadata)">
            <summary>
            构造函数，以数据流初始化
            </summary>
            <param name="stream"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="T:Geo.Coordinates.GnsserXyzCoordReader">
            <summary>
            坐标文件写入器
            </summary>
        </member>
        <member name="T:Geo.IO.LineFileReader`1">
            <summary>
            行文件读取通用接口。本类采用流式读取，实现了枚举接口 IEnumerable 和 IEnumerator。
            </summary>
        </member>
        <member name="T:Geo.IO.EntityFileReader`1">
            <summary>
            Xml读取通用接口。本类采用流式读取，实现了枚举接口 IEnumerable 和 IEnumerator。
            </summary>
        </member>
        <member name="T:Geo.IO.IEntityFileReader`1">
            <summary>
            Gnsser对象读取通用接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Geo.IO.IEntityFileReader">
            <summary>
            非泛型读取接口，主要用于初始化
            </summary>
        </member>
        <member name="T:Geo.IO.ITableFileReader">
            <summary>
            文件读取器，表格。
            </summary>
        </member>
        <member name="T:Geo.IO.ITableReader">
            <summary>
            文件读取器，表格。
            </summary>
        </member>
        <member name="M:Geo.IO.ITableReader.ReadToModels``1">
            <summary>
            读取为模型列表
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.ITableReader.ReadToRawTable">
            <summary>
            读取
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.IO.ITableFileReader.InputPath">
            <summary>
            文件/网络等输入路径
            </summary>
        </member>
        <member name="M:Geo.IO.IEntityFileReader.Init(System.String,Geo.IO.Gmetadata)">
            <summary>
            初始化，等同于构造函数
            </summary>
            <param name="filePath"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.IEntityFileReader.Init(System.String,System.String)">
            <summary>
            初始化，等同于构造函数
            </summary>
            <param name="filePath"></param>
            <param name="metaFilePathOrDirectory"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.IEnumer`1">
            <summary>
            枚举数据源
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Geo.IEnumer`1.SetEnumIndex(System.Int32,System.Int32)">
            <summary>
            设置遍历数量
            </summary>
            <param name="StartIndex"></param>
            <param name="EnumCount"></param>
        </member>
        <member name="P:Geo.IEnumer`1.CurrentIndex">
            <summary>
            当前编号，从 0 开始。
            </summary>
        </member>
        <member name="P:Geo.IEnumer`1.StartIndex">
            <summary>
            起始编号，从0开始。
            </summary>
        </member>
        <member name="P:Geo.IEnumer`1.EnumCount">
            <summary>
            遍历数量，默认为最大值的一半。
            </summary>
        </member>
        <member name="P:Geo.IEnumer`1.MaxEnumIndex">
            <summary>
            最大的循环编号
            </summary>
        </member>
        <member name="M:Geo.IO.IEntityFileReader`1.Read(System.Int32,System.Int32)">
            <summary>
            读取
            </summary>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.IEntityFileReader`1.ReadAll">
            <summary>
            读取所有
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.IEntityFileReader`1.ReadAt(System.Int32)">
            <summary>
            读取指定索引
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.IO.IEntityFileReader`1.Current">
            <summary>
            当前对象
            </summary>
        </member>
        <member name="P:Geo.IO.IEntityFileReader`1.CurrentIndex">
            <summary>
            索引
            </summary>
        </member>
        <member name="M:Geo.IO.EntityFileReader`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.IO.EntityFileReader`1.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath">数据文件路径。</param>
            <param name="metaFilePathOrDirectory">元数据文件或者元数据文件存放的目录。若不指定，则自动寻找文件目录下的元数据，若没有则调用默认的元数据，若还没有则报错。</param>
        </member>
        <member name="M:Geo.IO.EntityFileReader`1.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="filePath">数据文件路径。</param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.EntityFileReader`1.Init(System.String,Geo.IO.Gmetadata)">
            <summary>
            初始化，等同于构造函数
            </summary>
            <param name="filePath"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.EntityFileReader`1.Init(System.String,System.String)">
            <summary>
            初始化，等同于构造函数
            </summary>
            <param name="filePath"></param>
            <param name="metaFilePathOrDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.EntityFileReader`1.Init(Geo.IO.Gmetadata)">
            <summary>
            初始化工作
            </summary>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.EntityFileReader`1.InitStreamReader">
            <summary>
            设置数据流
            </summary>
        </member>
        <member name="M:Geo.IO.EntityFileReader`1.SetEnumIndex(System.Int32,System.Int32)">
            <summary>
            设置遍历数量
            </summary>
            <param name="StartIndex"></param>
            <param name="EnumCount"></param>
        </member>
        <member name="M:Geo.IO.EntityFileReader`1.ReadAt(System.Int32)">
            <summary>
            读取指定的对象。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.EntityFileReader`1.Read(System.Int32,System.Int32)">
            <summary>
            读取指定的数量
            </summary>
            <param name="startIndex">起始编号（含）,若越界，则报错。</param>
            <param name="count">数量。若数据不足，则只返回已有数量</param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.EntityFileReader`1.ReadToRawTable">
            <summary>
            返回数据表。算法有待优化。??2015.09.28
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.EntityFileReader`1.ReadAll">
            <summary>
            一次性读取所有，适合小文件。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.EntityFileReader`1.GetDefaultMetadata">
            <summary>
            获取默认的元数据。没有排序。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.EntityFileReader`1.GetOrParseValueString(System.String,System.String)">
            <summary>
            根据输入字符串，和数据类型，以及上一个对象数值，获取新的属性值。
            若失败，则返回null。
            </summary>
            <param name="valString"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.EntityFileReader`1.ParseString(System.String,System.Reflection.PropertyInfo)">
            <summary>
            解析字符串为对象
            </summary>
            <param name="valString"></param>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.EntityFileReader`1.MoveNext">
            <summary>
            移动到下一个。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.EntityFileReader`1.Reset">
            <summary>
            重置。先释放资源，再初始化。
            </summary>
        </member>
        <member name="M:Geo.IO.EntityFileReader`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:Geo.IO.EntityFileReader`1.CurrentIndex">
            <summary>
            当前编号，从 0 开始。只有读取了有效内容才递增。
            </summary>
        </member>
        <member name="P:Geo.IO.EntityFileReader`1.StartIndex">
            <summary>
            起始编号，从0开始。
            </summary>
        </member>
        <member name="P:Geo.IO.EntityFileReader`1.EnumCount">
            <summary>
            遍历数量，默认为最大值的一半。
            </summary>
        </member>
        <member name="P:Geo.IO.EntityFileReader`1.MaxEnumIndex">
            <summary>
            最大的循环编号
            </summary>
        </member>
        <member name="P:Geo.IO.EntityFileReader`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Geo.IO.EntityFileReader`1.IsPropertyUnitChanged">
            <summary>
            属性单位是否需要转换
            </summary>
        </member>
        <member name="P:Geo.IO.EntityFileReader`1.EntityType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="P:Geo.IO.EntityFileReader`1.InputPath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:Geo.IO.EntityFileReader`1.Metadata">
            <summary>
            元数据，描述数据的数据。
            应该包含 Name X Y Z
            </summary>
        </member>
        <member name="P:Geo.IO.EntityFileReader`1.ItemSpliters">
            <summary>
            分隔符
            </summary>
        </member>
        <member name="P:Geo.IO.EntityFileReader`1.PropertyIndexes">
            <summary>
            属性名称对应的编号
            </summary>
        </member>
        <member name="P:Geo.IO.EntityFileReader`1.BaseDirectory">
            <summary>
            基础目录，如果是相对路径，则按照此目录拼接。
            </summary>
        </member>
        <member name="P:Geo.IO.EntityFileReader`1.PreviousObject">
            <summary>
            上一个全参数行。用于简化的数据文件。后续的就不用再填充相同数据。
            </summary>
        </member>
        <member name="P:Geo.IO.EntityFileReader`1.Current">
            <summary>
            当前
            </summary>
        </member>
        <member name="P:Geo.IO.EntityFileReader`1.ClassName">
            <summary>
            类名称
            </summary>
        </member>
        <member name="P:Geo.IO.EntityFileReader`1.System#Collections#IEnumerator#Current">
            <summary>
            当前对象
            </summary>
        </member>
        <member name="M:Geo.IO.LineFileReader`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.IO.LineFileReader`1.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath">数据文件路径。</param>
            <param name="metaFilePathOrDirectory">元数据文件或者元数据文件存放的目录。若不指定，则自动寻找文件目录下的元数据，若没有则调用默认的元数据，若还没有则报错。</param>
        </member>
        <member name="M:Geo.IO.LineFileReader`1.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="filePath">数据文件路径。</param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.LineFileReader`1.InitStreamReader">
            <summary>
            设置数据流
            </summary>
        </member>
        <member name="M:Geo.IO.LineFileReader`1.MoveNext">
            <summary>
            移动到下一个。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.LineFileReader`1.ReadContentLine">
            <summary>
            读取内容行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.LineFileReader`1.ParseLine(System.String)">
            <summary>
            解析行为对象。包含分解行和解析两个内容。
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.LineFileReader`1.Parse(System.String[])">
            <summary>
            字符串列表解析为属性
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.LineFileReader`1.SetPropertyValue(System.String[],`0,System.Int32)">
            <summary>
            设置属性值
            </summary>
            <param name="items"></param>
            <param name="entity"></param>
            <param name="i"></param>
        </member>
        <member name="M:Geo.IO.LineFileReader`1.Convert(System.String,System.Double)">
            <summary>
            单位转换
            </summary>
            <param name="propertyName"></param>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.LineFileReader`1.SplitLine(System.String)">
            <summary>
            分离
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.LineFileReader`1.GetDoubleProperty(System.String[],System.String)">
            <summary>
            获取双精度浮点数，若果出错则抛出异常。
            </summary>
            <param name="items"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.LineFileReader`1.GetPropertyValue(System.String[],System.String)">
            <summary>
            尝试获取指定索引的项目。若没有则返回null。
            </summary>
            <param name="items"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.LineFileReader`1.GetPropertyValue(System.String[],System.Int32)">
            <summary>
            尝试获取指定索引的项目。若没有则返回null。
            </summary>
            <param name="items"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.LineFileReader`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:Geo.IO.LineFileReader`1.IsCommentLine(System.String)">
            <summary>
            是否是注释行，即第一个字符,非如 # （空格除外），可以指定之
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.LineFileReader`1.IsEndLine(System.String)">
            <summary>
            是否为结果行
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.LineFileReader`1.GetContent(System.String)">
            <summary>
            返回内容行，如果没有内容，则返回 null 或 空白内容。
            自动省略CommentMarkers号后面的内容。并替换转义字符。
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.IO.LineFileReader`1.PropertyPositions">
            <summary>
            采用固定字符串截取。此处采用字典而不采用列表，是因为若不需要解析的就可以不解析了。
            </summary>
        </member>
        <member name="P:Geo.IO.LineFileReader`1.ItemLengthes">
            <summary>
            项目长度集合，适用于以长度确定行的文件。
            如果没有指定，则采用分隔符分隔。
            </summary>
        </member>
        <member name="P:Geo.IO.LineFileReader`1.CommentMarkers">
            <summary>
            注释行起始字符
            </summary>
        </member>
        <member name="P:Geo.IO.LineFileReader`1.StreamReader">
            <summary>
            数据流阅读器
            </summary>
        </member>
        <member name="M:Geo.Coordinates.GnsserXyzCoordReader.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="gofFilePath"></param>
            <param name="metaFilePath"></param>
        </member>
        <member name="M:Geo.Coordinates.GnsserXyzCoordReader.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="gofFilePath"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="T:Geo.Coordinates.GnsserXyzCoord">
            <summary>
            GNSSer坐标文件
            </summary>
        </member>
        <member name="T:Geo.IOrderedProperty">
            <summary>
            排好序的属性名称
            </summary>
        </member>
        <member name="P:Geo.IOrderedProperty.OrderedProperties">
            <summary>
            排好序的属性名称
            </summary>
        </member>
        <member name="P:Geo.IOrderedProperty.Properties">
            <summary>
            排好序的属性名称,具有单位
            </summary>
        </member>
        <member name="P:Geo.Coordinates.GnsserXyzCoord.Id">
            <summary>
            标识符,可以自定义，作为全局唯一标识。
            </summary>
        </member>
        <member name="T:Geo.Times.LeapSecond">
            <summary>
            闰秒/跳秒类的设计
            </summary>
        </member>
        <member name="F:Geo.Times.LeapSecond.MinLeapTime">
            <summary>
            起始跳秒时刻
            </summary>
        </member>
        <member name="F:Geo.Times.LeapSecond.MaxLeapTime">
            <summary>
            当前最大跳秒时刻
            </summary>
        </member>
        <member name="F:Geo.Times.LeapSecond.OfStartOfGpsT">
            <summary>
            GPST起始时间的跳秒数量。
            </summary>
        </member>
        <member name="F:Geo.Times.LeapSecond.OfStartOfBdT">
            <summary>
            北斗起始时间的跳秒数量
            </summary>
        </member>
        <member name="F:Geo.Times.LeapSecond.BeTweenBdTAndGpsT">
            <summary>
            GPS起始时间和BDS起始时间之间的跳秒数量。
            </summary>
        </member>
        <member name="M:Geo.Times.LeapSecond.GetLeapSecondBetween(System.DateTime,System.DateTime)">
            <summary>
            获取两个时刻内是否有闰秒
            </summary>
            <param name="startUtc"></param>
            <param name="endUtc"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.LeapSecond.GetLeapSecondFromGpsT(System.DateTime)">
            <summary>
            自GPST起始时间以来到指定时刻发生的跳秒。
            </summary>
            <param name="timeUtc"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.LeapSecond.GetLeapSecond(System.DateTime)">
            <summary>
            获取UTC跳秒
            </summary>
            <param name="timeUtc"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Times.TimeSquentialValue`2">
            <summary>
            时间序列对象维护。
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Geo.Times.TimeSquentialValue`2.Get(Geo.Times.Time)">
            <summary>
            获取数值
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeSquentialValue`2.Contains(System.DateTime)">
            <summary>
            是否包含指定时间
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeSquentialValue`2.Contains(Geo.Times.Time)">
            <summary>
            是否包含指定时间
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Times.TimePeriodValue`1">
            <summary>
            分时段数值
            </summary>
        </member>
        <member name="M:Geo.Times.TimePeriodValue`1.#ctor(Geo.Times.TimePeriod,`0)">
            <summary>
            默认构造函数
            </summary>
            <param name="perid"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.Times.TimePeriodValue`1.Equals(System.Object)">
            <summary>
            是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimePeriodValue`1.GetHashCode">
            <summary>
            哈希
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Times.TimePeriodValue`1.TimePeriod">
            <summary>
            时段
            </summary>
        </member>
        <member name="P:Geo.Times.TimePeriodValue`1.Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="T:Geo.GeoConst">
            <summary>
            常用常量
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.AdjustBasicInformation">
            <summary>
            定义平差基本信息，如总点数，未知点数，点编号等
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.AdjustBasicInformation.TotalPointName">
            <summary>
            点名指针数组,存储所有的点，不能遗漏也不能重复，根据点的位置进行系数矩阵的建立
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.AdjustBasicInformation.KnownPointName">
            <summary>
            已知点数组
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.AdjustBasicInformation.PointsXYZ">
            <summary>
            点坐标近似值
            坐标数组，三个坐标构成一个XYZ，顺序与点号一一对应
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.AdjustBasicInformation.FileNumber">
            <summary>
            文件数，同步区数，向量组总数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.AdjustBasicInformation.TotalPointNumber">
            <summary>
            总点数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.AdjustBasicInformation.TotalBaselineNumber">
            <summary>
            基线向量总数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.AdjustBasicInformation.UnknowPointnumber">
            <summary>
            未知点数=总点数-已知点数
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.BlockAdjustItem">
            <summary>
            分区平差的一个分区。
            有两个步骤：第一次计算区内Ni和Ui；第二次由公共参数值计算区内参数值。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.BlockAdjustItem.#ctor(System.Double[][],System.Double[][],System.Double[][],System.Double[][])">
            <summary>
            分区平差的一个分区
            </summary>
            <param name="coeffOfParams">区内参数观测方程系数阵</param>
            <param name="obs">观测值</param>
            <param name="inverseWeightOfObs">观测值权逆阵</param>
            <param name="coeffOfCommonParams">公共参数观测方程系数阵</param> 
        </member>
        <member name="M:Geo.Algorithm.Adjust.BlockAdjustItem.Solve_step1">
            <summary>
            第一步计算。如，在多核上执行。
            求 RightHand，NormalAB， etc. 
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.BlockAdjustItem.Solve_step2">
            <summary>
            第二步，由公共参数计算分区参数。
            求 ObsError， Params。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustItem.VTPV">
            <summary>
            V'PV 用于精度股估计。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustItem.CommonParams">
            <summary>
            公共参数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustItem.ObsError">
            <summary>
            观测残差 V 
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustItem.EstimatedParam">
            <summary>
            区内参数值.需要调用GetParams方法后才赋值。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustItem.InverseNormal">
            <summary>
            分区内参数权逆阵。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustItem.Normal">
            <summary>
            发方程系数阵组成部分。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustItem.RightHandA">
            <summary>
            区内发方程右手边组成部分。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustItem.RightHand">
            <summary>
            发方程右手边组成部分。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustItem.NormalAB">
            <summary>
            AT * P * Ab;
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustItem.CoeffOfParams">
            <summary>
            观测系数阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustItem.Obs">
            <summary>
            观测值
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustItem.InverseWeightOfObs">
            <summary>
            观测值权逆阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustItem.CoeffOfCommonParams">
            <summary>
            公共参数系数阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustItem.ParamRmsVector">
            <summary>
            参数的均方根差。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustItem.InverseWeightOfParam">
            <summary>
             参数的权逆阵。 法方程系数阵，正定阵。
            （1）法方程的个数等于未知参数的个数 
            （2）法方程系数阵 N 对称、正定。
             正定阵的定义：若存在一非零向量 Y，使得 Y^T N Y > 0  ，则   正定。
            （3）X^ 满足无偏性、一致性、有效性。      
            （4）X^ 满足 V^T Weight V = min。 
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustItem.WeightOfParam">
            <summary>
            参数的权阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustItem.CovaOfParams">
            <summary>
            参数（未知数）的协方差阵。D = Inverse(Normal) * VarianceFactor.
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustItem.VarianceFactor">
            <summary>
            单位权方差 Aposteriori variance factor.验后方差因子。
            方差：随机变量与其数学期望之差的平方的数学期望，称为方差。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustItem.StdDev">
            <summary>
              单位权中误差,均方差(Standard deviation )估值。
             方差不可求而中误差可求. 
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustItem.ObsCount">
            <summary>
            本区观测数量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustItem.BlockParamCount">
            <summary>
            区内参数数量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustItem.CommonParamCount">
            <summary>
            公共参数数量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustItem.Freedom">
            <summary>
            自由度（多余观测数=ObsCount - BlockParamCount）,此处公共参数作为已知，不知对不对？？？2013.06.23
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.BlockAdjustment">
            
             <summary>
             分区平差，是将一个大型网分成若干分区，每分区单独平差，然后把各个分区联解成一个整体。
             </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.BlockAdjustment.#ctor(Geo.Algorithm.Adjust.BlockAdjustItem[],System.Boolean,System.Int32)">
            <summary>
            分区平差
            </summary>
            <param name="BlockAdjustItems">分区集合</param>
            <param name="parallel">是否采用并行计算</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.BlockAdjustment.ParallelSolve(Geo.Algorithm.Adjust.BlockAdjustItem[])">
            <summary>
            多核并行计算
            </summary>
            <param name="BlockAdjustItems"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.BlockAdjustment.SerialSolve(Geo.Algorithm.Adjust.BlockAdjustItem[])">
            <summary>
            串行计算。
            </summary>
            <param name="BlockAdjustItems"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.BlockAdjustment.Summary(Geo.Algorithm.Adjust.BlockAdjustItem[])">
            <summary>
            汇总计算。由各分区的Ni，Ui，计算公共参数值和协方差阵。
            </summary>
            <param name="BlockAdjustItems"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.BlockAdjustment.PrecisionEstimation">
            <summary>
            最后的精度估计
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.BlockAdjustment.Test(System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            测试分区平差
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustment.MaxDegreeOfParallelism">
            <summary>
            并行度
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustment.BlockAdjustItems">
            <summary>
            分区集合，数组。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustment.CovaOfCommonParams">
            <summary>
            公共参数的协方差阵。D = InverseWeithOfCommonParam * VarianceFactor.
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustment.InverseWeithOfCommonParam">
            <summary>
            公共参数的权逆阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustment.CommonParams">
            <summary>
            公共参数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustment.BlockCount">
            <summary>
            分区数量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustment.CommonParamCount">
            <summary>
            公共参数数量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustment.ObsCount">
            <summary>
            观测量。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustment.Freedom">
             <summary>
            自由度，样本中独立或能自由变化的变量个数,通常为：样本个数 - 被限制的变量个数或条件数，或多余观测数。
             </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustment.SquareSumOfResidualsVTPV">
            <summary>
            残差平方和
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustment.VarianceFactor">
            <summary>
            单位权方差  
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustment.StdDev">
            <summary>
              单位权中误差,均方差(Standard deviation )估值。 
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.BlockAdjustment.CommonParamRmsVector">
            <summary>
            参数中误差，均方差估值。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.ConditionalAdjustment">
             <summary>
             条件平差。B L + B0 = 0
             条件平差的参数就是观测值，即直接对参数进行观测。
             取全部观测量的最或然值为未知数，建立这些未知数之间应满足的几何条件（条件方程），
             然后依原则求满足条件方程的最或然值，并估计精度。 
             1.条件方程式的个数等于多余观测数 r ：r = n - t
             2.个条件方程要求相互独立，即其中的任一条件方程都不能由其余的条件方程推出。
             函数模型：B L + B0 = 0
             
            条件方程：B V + W = 0
              W = BL + B0
              
             
             平差方法的选择
             1．手算时代：当 t>r 时，用条件平差，当 r>t 时，用参数平差。
             2．电算时代：对于大规模网的平差一般采用参数平差法。
             对于小的测边网，工程网多采用条件平差法。
             </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.ConditionalAdjustment.#ctor(Geo.Algorithm.Adjust.WeightedVector,Geo.Algorithm.IMatrix,Geo.Algorithm.Vector)">
            <summary>
            条件平差
            </summary>
            <param name="Observation">观测值初值 X 及其权逆阵 QX </param>
            <param name="CoeffOfCondition">条件系数阵 B</param>
            <param name="ConstVectorOfCondition">条件自由项 B0，注意：非 W</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.ConditionalAdjustment.#ctor(Geo.Algorithm.Adjust.WeightedVector,Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix)">
            <summary>
            条件平差
            </summary>
            <param name="Observation">观测值初值 X 及其权逆阵 QX </param>
            <param name="CoeffOfCondition">条件系数阵 B</param>
            <param name="ConstVectorOfCondition">条件自由项 B0，注意：非 W</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.ConditionalAdjustment.Process">
            <summary>
            计算，返回观测量的该证数。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ConditionalAdjustment.Observation">
            <summary>
            观测值
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ConditionalAdjustment.CorrectedObservation">
            <summary>
            改正后的观测值。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ConditionalAdjustment.ConditionCount">
            <summary>
            条件数量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ConditionalAdjustment.ObsCount">
            <summary>
            观测值数量。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ConditionalAdjustment.CoeffOfCondition">
            <summary>
            条件方程的系数阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ConditionalAdjustment.ConstVectorOfCondition">
            <summary>
            条件方程自由项向量，单列矩阵,B0
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ConditionalAdjustment.Correction">
            <summary>
            改正数向量dL，解算结果。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ConditionalAdjustment.VarianceOfUnitWeight">
            <summary>
            单位权方差，单位权中误差的平方
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.ParamAdjustmentWithCondition">
             <summary>
             具有约束条件的参数平差（The Adjustment of Parameter with Coditions）
             n 个方程，s个限制条件。
             误差方程：V = B x - l .
             条件方程：c x - w  = 0.
            
             </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.ParamAdjustmentWithCondition.#ctor(System.Double[][],System.Double[],System.Double[][],System.Double[],System.Double[][])">
            <summary>
            构造函数。
            </summary>
            <param name="coeff_error">参数（误差方程）系数阵</param>
            <param name="obsMinusApriori_error">误差方程右手边</param>
            <param name="inverseWeight">观测方程权逆阵</param>
            <param name="coeff_condition">条件方程系数阵</param>
            <param name="obsMinusApriori_condition">条件方程常数项</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.ParamAdjustmentWithCondition.#ctor(System.Double[][],System.Double[][],System.Double[][],System.Double[][],System.Double[][])">
            <summary>
            构造函数。
            </summary>
            <param name="coeffOfParams">参数（误差方程）系数阵</param>
            <param name="obsMinusApriori">误差方程右手边</param>
            <param name="inverseWeight">观测方程权逆阵</param>
            <param name="coeff_condition">条件方程系数阵</param>
            <param name="obsMinusApriori_condition">条件方程常数项</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.ParamAdjustmentWithCondition.Init(System.Double[][],System.Double[][],System.Double[][],System.Double[][],System.Double[][])">
            <summary>
            初始化。
            </summary>
            <param name="coeffOfParams">参数（误差方程）系数阵</param>
            <param name="obsMinusApriori">误差方程右手边</param>
            <param name="inverseWeight">观测方程权逆阵</param>
            <param name="coeff_condition">条件方程系数阵</param>
            <param name="obsMinusApriori_condition">条件方程常数项</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.ParamAdjustmentWithCondition.Solve">
            <summary>
             最小二乘解算。返回参数向量平差值。 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.ParamAdjustmentWithCondition.Solve_ToBeCheck">
            <summary>
             最小二乘解算。返回参数向量平差值。
             Delta X^ =  inv（N） U
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ParamAdjustmentWithCondition.RightHandSide_error">
            <summary>
             误差方程的法方程右手边
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ParamAdjustmentWithCondition.Normal_error">
            <summary>
            误差方程的法方程系数阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ParamAdjustmentWithCondition.Normal_condition">
            <summary>
            条件方程的法方程系数阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ParamAdjustmentWithCondition.Coeff_condition">
            <summary>
            条件方程的系数阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ParamAdjustmentWithCondition.ObsMinusApriori_condition">
            <summary>
            条件方程的常数项
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ParamAdjustmentWithCondition.ObsError">
            <summary>
            观测值误差 V
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ParamAdjustmentWithCondition.Weight">
            <summary>
            权阵.Weight=InverseWeight^(-1)
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ParamAdjustmentWithCondition.InverseWeight">
            <summary>
            参数的权逆阵（协因数阵） Inverse Weight Matrix（Cofactor Matrix ）of Some Vector。
            协因数阵。InverseWeight=Weight^(-1)
            法方程系数阵的逆阵为未知参数向量的权逆阵。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ParamAdjustmentWithCondition.Param">
            <summary>
            参数阵的值.为计算结果。矩阵。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ParamAdjustmentWithCondition.ParamVector">
            <summary>
            以一维数据形式返回解算的参数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ParamAdjustmentWithCondition.CovaOfParams">
            <summary>
            参数（未知数）的协方差阵。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ParamAdjustmentWithCondition.VarianceFactor">
            <summary>
            Aposteriori variance factor.验后方差因子（单位权方差）。
            方差：随机变量与其数学期望之差的平方的数学期望，称为方差。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ParamAdjustmentWithCondition.StdDev">
            <summary>
             均方差(Standard deviation )估值， 单位权中误差。
             方差不可求而中误差可求. 
             中误差：root mean square error; RMSE,也可称为 标准差 或 均方根差？
             单位权中误差： unit weight mean square error.
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ParamAdjustmentWithCondition.ObsCount">
            <summary>
            观测值数量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ParamAdjustmentWithCondition.ConditionCount">
            <summary>
            条件数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ParamAdjustmentWithCondition.ParamsCount">
            <summary>
            未知参数数量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ParamAdjustmentWithCondition.Freedom">
            <summary>
            自由度，样本中独立或能自由变化的变量个数,通常为：样本个数 - 被限制的变量个数或条件数，或多余观测数。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.FactorYype">
            <summary>
            
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.FactorYype.IGG1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.FactorYype.IGG3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.FactorYype.IGG33">
            <summary>
            去平方
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.FactorYype.Huber">
            <summary>
            
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.GnssRobustAdjustment">
            <summary>
            抗差估计----废除！！！
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.GnssRobustAdjustment.FileNumber">
            <summary>
            文件数，同步区数，向量组总数
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.GnssRobustAdjustment.totalPointNumber">
            <summary>
            总点数
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.GnssRobustAdjustment.totalBaselineNumber">
            <summary>
            向量总数
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.GnssRobustAdjustment.totalUnknowPointnumber">
            <summary>
            未知点数=总点数-已知点数
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.GnssRobustAdjustment.totalPointName">
            <summary>
            点名指针数组,存储所有的点，不能遗漏也不能重复，根据点的位置进行系数矩阵的建立
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.GnssRobustAdjustment.totalKnownPointName">
            <summary>
            已知点数组
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.GnssRobustAdjustment.isKnownPoint">
            <summary>
            是否是已知点
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.GnssRobustAdjustment.pointsXYZ">
            <summary>
            点坐标近似值
            坐标数组，三个坐标构成一个XYZ，顺序与点号一一对应
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.GnssRobustAdjustment.totalBeginOfBaselineList">
            <summary>
            基线向量起点点号， 是起点点号的序列 
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.GnssRobustAdjustment.totalEndOfBaselineList">
            <summary>
            基线向量终点点号
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.GnssRobustAdjustment.lList">
            <summary>
            基线向量，3m*1一维的矩阵块列，m=点号
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.GnssRobustAdjustment.pList">
            <summary>
            基线向量协方差矩阵列，3m*3m的方阵，权矩阵
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.GnssRobustAdjustment.VList">
            <summary>
            残差
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.GnssRobustAdjustment.QVList">
             <summary>
            残差的权倒数
             </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.GnssRobustAdjustment.unitVList">
            <summary>
            标准化残差，单位权残差
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GnssRobustAdjustment.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{Geo.Algorithm.Vector},System.Collections.Generic.List{System.Double[]},System.Collections.Generic.List{System.Double[]},System.Collections.Generic.List{System.Double[]})">
             <summary>
             构造函数
             </summary>
             <param name="totalFileNum"></param>
             <param name="totalPointNum"></param>
             <param name="totalUnPointNum"></param>
             <param name="totalObsBaselineNum"></param>
             <param name="totalPointStr">点名</param>
            <param name="totalKnownPointStr">已知点点名</param>
             <param name="totalPointXYZ">点坐标，其中已知点的坐标为真值</param>
             <param name="AList"></param>
             <param name="bList"></param>
             <param name="PList"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GnssRobustAdjustment.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Double[],System.Collections.Generic.List{System.Int32[]},System.Collections.Generic.List{System.Int32[]},System.Double[][],System.Double[][])">
            <summary>
            构造函数
            没有系数矩阵，通过基线点序列判断系数是1or-1or0。
            </summary>
            <param name="totalFileNum"></param>
            <param name="totalPointNum"></param>
            <param name="totalUnPointNum"></param>
            <param name="totalObsBaselineNum"></param>
            <param name="totalPointStr"></param>
            <param name="totalKnownPointStr"></param>
            <param name="totalPointXYZ"></param>
            <param name="totalbeginOfBaselineList"></param>
            <param name="totalendOfBaselineList"></param>
            <param name="bList"></param>
            <param name="pList"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GnssRobustAdjustment.LeastSquares">
            <summary>
            最小二乘平差函数
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GnssRobustAdjustment.Robust(Geo.Algorithm.Adjust.FactorYype,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            抗差估计
            </summary>
            <param name="fname"></param>
            <param name="esp"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GnssRobustAdjustment.ParallRobust(Geo.Algorithm.Adjust.FactorYype,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            抗差估计
            </summary>
            <param name="fname"></param>
            <param name="esp"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GnssRobustAdjustment.parallelRobust(Geo.Algorithm.Adjust.FactorYype,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            抗差估计
            </summary>
            <param name="fname"></param>
            <param name="eps"></param>
            <param name="k0"></param>
            <param name="k1"></param>
            <param name="m"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GnssRobustAdjustment.GetInverse(System.Double[],System.Int32)">
            <summary>
            对称正定矩阵求逆：变量循环重新编号法（宋力杰著）
            </summary>
            <param name="a">存储下三角矩阵元素的对称正定矩阵</param>
            <param name="n">矩阵阶数</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GnssRobustAdjustment.GetParallelInverse(System.Double[],System.Int32)">
            <summary>
            对称正定矩阵的并行求逆
            </summary>
            <param name="a"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GnssRobustAdjustment.GetSunScript(System.Int32,System.Int32)">
            <summary>
            对称矩阵下标计算函数
            对称矩阵采用下三角元素存储，则根据下标i,j计算矩阵所在序列中的元素值
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GnssRobustAdjustment.GetATPA">
            <summary>
            法方程的求取。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GnssRobustAdjustment.GetLV">
            <summary>
            误差方差自由项或最小二乘残差的计算 V=AX-L
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GnssRobustAdjustment.SetKnownCondition">
            <summary>
            已知点处理
            目前仅采用已知点固定的方法处理，且强约束第一个点作为已知点。
            </summary> 
        </member>
        <member name="M:Geo.Algorithm.Adjust.GnssRobustAdjustment.GetdX">
            <summary>
            未知数计算
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GnssRobustAdjustment.GetVTPV">
            <summary>
            残差二次型计算，先计算PV，再计算VTPV
            PV还能继续利用。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GnssRobustAdjustment.UpdateXYZ">
            <summary>
            更新参数值
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GnssRobustAdjustment.GetQV">
            <summary>
            计算残差V的权倒数
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GnssRobustAdjustment.GetUnitV">
            <summary>
            计算单位权残差，中位数计算方差因子
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GnssRobustAdjustment.GetMedian(System.Double[],System.Int32,System.Boolean)">
            <summary>
            中位数计算
            </summary>
            <param name="pp"></param>
            <param name="n"></param>
            <param name="IsAbs"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GnssRobustAdjustment.GetWeightFactor(Geo.Algorithm.Adjust.FactorYype,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            权因子函数
            </summary>
            <param name="fname"></param>
            <param name="v"></param>
            <param name="k0"></param>
            <param name="k1"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Algorithm.Adjust.KalmanFilter">
             <summary>
             卡尔曼滤波。
             需要建立状态方程和观测方程：
             X(k) = Φ(k,k-1) X(k-1) + W(k);
             L(k) = A(k)X(k) + Δ(k)
             其中，X(k),X(k-1)分别为t(k)、t(k-1)时刻的状态向量，Φ(k,k-1)为m*m阶状态转移矩阵，
             W(k)为动力模型噪声向量，L(k)为t(k)时刻的观测向量，A(k)为n*m阶设计矩阵，也称观测矩阵，
             Δ(k)为观测噪声向量。
             
            卡尔曼滤波就是利用观测向量L1、L2、...、Lk，由相应的状态方程及随机模型求tk时刻的状态向量的最佳估值。
            
             设X(k-1)为t(k-1)时刻的状态向量，D_X(k-1)为其协方差矩阵，L(k)为t(k)时刻的观测量，
             观测噪声向量 Δ(k)和动态噪声向量W(k)为高斯白噪声误差向量，即：
             D_W(k)W(j) = δkjDw,
             D_Δ(k)Δ(j) =δkj DΔ 
             
             1.由观测数据组成误差方程
             2.输入上历元的状态向量及其权逆阵
             3.计算状态向量的预报值及其权逆阵
             4.计算预报残差及其权逆阵
             5.计算增益矩阵
             6.计算参数估值及其精度估计
             </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.KalmanFilter.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            卡尔曼滤波构造函数。 
            立状态方程和观测方程：
            X = Φ X0 + W;
            L = A X + Δ
            </summary>
            <param name="coeff_obs">A n*m阶设计矩阵，也称观测矩阵，系数阵</param>
            <param name="obs">L 观测向量</param>
            <param name="trans">Φ 状态转移矩阵</param>
            <param name="aprioriParam">X0 上历元的状态向量</param>
            <param name="inverseWeightOfApriori">Qx0 上历元 X(即X0) 的协方差矩阵，权逆阵</param>
            <param name="inverseWeight_obs">Q_o 观测噪声向量Δ的方差， 权逆阵</param>
            <param name="inverseWeight_model">Q_m 动力模型噪声向量 W 的方差，权逆阵</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.KalmanFilter.#ctor(Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix,Geo.Algorithm.IVector)">
            <summary>
            卡尔曼滤波构造函数。 
            立状态方程和观测方程：
            X = Φ X0 + W;
            L = A X + Δ
            </summary>
            <param name="coeff">A n*m阶设计矩阵，也称观测矩阵，系数阵</param>
            <param name="obsOrDeltaObs">L 观测向量</param>
            <param name="trans">Φ 状态转移矩阵</param>
            <param name="aprioriParam">X0 上历元的状态向量</param>
            <param name="inverseWeightOfApriori">Qx0 上历元 X(即X0) 的协方差矩阵，权逆阵</param>
            <param name="inverseWeight_obs">Q_o 观测噪声向量Δ的方差， 权逆阵</param>
            <param name="inverseWeight_model">Q_m 动力模型噪声向量 W 的方差，权逆阵</param>
            <param name="approx"> </param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.KalmanFilter.#ctor(Geo.Algorithm.Adjust.Adjustment,Geo.Algorithm.Adjust.WeightedVector,Geo.Algorithm.IMatrix,Geo.Algorithm.Adjust.WeightedMatrix)">
            <summary>
            构造函数
            </summary>
            <param name="intPart"></param>
            <param name="observation"></param>
            <param name="coeff"></param>
            <param name="trans"></param>
            <param name="inverseWeight_model"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.KalmanFilter.#ctor(Geo.Algorithm.Adjust.BaseAdjustMatrixBuilder)">
            <summary>
            卡尔曼滤波构造函数
            </summary>
            <param name="buider">卡尔曼滤波矩阵生成器</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.KalmanFilter.#ctor(Geo.Algorithm.Adjust.WeightedVector,Geo.Algorithm.Adjust.WeightedVector,Geo.Algorithm.IMatrix,Geo.Algorithm.Adjust.WeightedMatrix,Geo.Algorithm.IVector)">
            <summary>
            卡尔曼滤波构造函数。 
            立状态方程和观测方程：
            X = Φ X0 + W;
            L = A X + Δ
            </summary>
            <param name="coeff">A n*m阶设计矩阵，也称观测矩阵，系数阵</param> 
            <param name="trans">Φ 状态转移矩阵</param>
            <param name="apriori">先验值</param>
            <param name="observation">观测值</param> 
            <param name="inverseWeight_model">Q_m 动力模型噪声向量 W 的方差，权逆阵</param>
            <param name="approx">近似向量</param> 
        </member>
        <member name="M:Geo.Algorithm.Adjust.KalmanFilter.Process">
            <summary>
            数据处理。全部转化为计算偏移量，即，各种参数采用近似值，此处需要考虑初值情况。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.KalmanFilter.Init1(System.Double[][],System.Double[][],System.Double[][],System.Double[][],System.Double[][],System.Double[][],System.Double[][])">
            <summary>
            计算的简化版本
            </summary>
            <param name="coeff"></param>
            <param name="obs"></param>
            <param name="inverseWeight_obs"></param>
            <param name="lastInverseWeight"></param>
            <param name="inverseWeight_model"></param>
            <param name="trans"></param>
            <param name="lastParams"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.KalmanFilter.InitLs(System.Double[][],System.Double[][],System.Double[][],System.Double[][],System.Double[][])">
            <summary>
            最小二乘解。
            </summary>
            <param name="coeff"></param>
            <param name="weight"></param>
            <param name="obs"></param>
            <param name="lastParams"></param>
            <param name="lastWeight"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.KalmanFilter.ToString">
            <summary>
            字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.KalmanFilter.Test">
            <summary>
            测试卡尔曼滤波。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.KalmanFilter.Motion">
            <summary>
            在 GNSS 动态导航中的应用
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.KalmanFilter.PostfitObservation">
            <summary>
            验后观测残差  V = L - A * X;
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.Algorithm.LlyLambda">
            <summary>
            Integer estimation with the LAMBDA method
            Least-square Ambiguity Decorrelation Adjustment(最小二乘模糊度降相关平差法)，简称LAMBDA法，被认为是目前最好的一种整周模糊度解算方法
            LAMBDA算法包括两个过程：模糊度降相关处理（整数 变换）和整数模糊度搜索。其基本思想是首先基于拉格朗日降相关原理，通过整体变化方法降低
            模糊度之间的相关性，然后在整数变换后的空间内，采用搜索技术获得其最优模糊度向量。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Algorithm.LlyLambda.#ctor(System.Int32,System.Double[][],System.Double[])">
            <summary>
            RTKLIB提供的LAMBDA固定
            </summary>
            <param name="n">浮点参数的个数.number of float parameters</param>
            <param name="m">固定解的个数，通常为两个，一个最小值，一个次小值. number of fixed solutions</param>
            <param name="Q">浮点解的协方差矩阵。covariance matrix of float parameters (n * n)</param>
            <param name="a">浮点解向量。float parameters (n * 1)</param>
            <param name="F">固定解向量。fixed solutions (n * m)</param>
            <param name="s">固定解的残差平方和，便于ratio检验。sum of squared residulas of fixed solutions (1 * m)</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Algorithm.LlyLambda.#ctor(System.Int32,System.Int32,System.Double[][],System.Double[])">
            <summary>
            RTKLIB提供的LAMBDA固定
            </summary>
            <param name="n">浮点参数的个数.number of float parameters</param>
            <param name="m">固定解的个数，通常为两个，一个最小值，一个次小值. number of fixed solutions</param>
            <param name="Q">浮点解的协方差矩阵。covariance matrix of float parameters (n * n)</param>
            <param name="a">浮点解向量。float parameters (n * 1)</param>
            <param name="F">固定解向量。fixed solutions (n * m)</param>
            <param name="s">固定解的残差平方和，便于ratio检验。sum of squared residulas of fixed solutions (1 * m)</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Algorithm.LlyLambda.getLambda(System.Double[]@,System.Double[]@)">
            <summary>
            
            </summary>
            <param name="F"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Algorithm.LlyLambda.LD(System.Int32,System.Double[],System.Double[]@,System.Double[]@)">
            <summary>
            LD factorization (Q=L'*diag(D)*L)
            </summary>
            <param name="n"></param>
            <param name="Q"></param>
            <param name="L"></param>
            <param name="D"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Algorithm.LlyLambda.reduction(System.Int32,System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>
            lambda reduction (z=Z'*a, Qz= Z'*Q*Z=L'*diag(D)*L)
            </summary>
            <param name="n"></param>
            <param name="L"></param>
            <param name="D"></param>
            <param name="Z"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Algorithm.LlyLambda.matmul(System.Char[],System.Int32,System.Int32,System.Int32,System.Double,System.Double[],System.Double[],System.Double,System.Double[]@)">
            <summary>
            multiply matrix
            </summary>
            <param name="tr"></param>
            <param name="n"></param>
            <param name="k"></param>
            <param name="m"></param>
            <param name="alpha"></param>
            <param name="A"></param>
            <param name="B"></param>
            <param name="beta"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Algorithm.LlyLambda.msearch(System.Int32,System.Int32,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>
            modified lambda(mlambda) search
            改良的、修正的LAMBDA
            </summary>
            <param name="n"></param>
            <param name="m"></param>
            <param name="L"></param>
            <param name="D"></param>
            <param name="zs"></param>
            <param name="zn"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Algorithm.LlyLambda.solve(System.Char[],System.Double[],System.Double[],System.Int32,System.Int32,System.Double[]@)">
            <summary>
            solve linear equation
            </summary>
            <param name="tr"></param>
            <param name="A"></param>
            <param name="Y"></param>
            <param name="n"></param>
            <param name="m"></param>
            <param name="X"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Algorithm.LlyLambda.InverseMatrix(System.Double[]@,System.Int32)">
            <summary>
            inverse of matrix
            </summary>
            <param name="A"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="F:Geo.Algorithm.Adjust.Algorithm.LlyLambda.MaxLoop">
            <summary>
            maximum count of search loop
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Algorithm.LlyLambda.Search(System.Double,System.Int32,System.Int32,System.Double[],Geo.Algorithm.ArrayMatrix,System.Double[],Geo.Algorithm.ArrayMatrix@,Geo.Algorithm.ArrayMatrix@,System.Int32@,System.Int32@)">
            <summary>
            finds 'MaxCan' integer vectors whose distances to the real vector 'a' are minimal in the metric of Q = transpose(L) D L.
            Only integer vectors with a distance less than sqrt(Chic) are regared.
            The search for gridpoints inside the ambiguity search ellipsoid is a sequential conditional adjustment upon the ambiguities.
            The search starts by conditioning the last ambiguity a_n to an integer, then the one-but-last a_{n-1} etc., until
              - the squared norm grows too large (out of the ellipsoid)
              - an integer for a_1 is found: a full integer vector is encountered (a gridpoint inside the ellipsoid)
              then is goes back to some previous (towards a_n) ambiguity 
              and considers another integer for it.
            </summary>
            <param name="Chic">Chi squared</param>
            <param name="MaxCan">Number of minimum integer vectors required</param>
            <param name="n">dimension of matrix</param>
            <param name="D">diagonal matrix</param>
            <param name="L">kiwer truabgykar natrux, only stroe lower triangular</param>
            <param name="a">vector of real valued estimates(float solution)</param>
            <param name="cands">2-dimensional array to store the candidates</param>
            <param name="disal1">according squared norms</param>
            <param name="ipos">column number in 'cands' where the candidate belonging to the minimum distance is stored</param>
            <param name="ncan">number of integer vectors found</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Algorithm.LlyLambda.Collects(System.Int32,System.Double[],System.Double,Geo.Algorithm.ArrayMatrix,Geo.Algorithm.ArrayMatrix,System.Double@,System.Int32@,System.Double[],System.Double[],System.Int32@,System.Double[],System.Double[],System.Double[])">
            <summary>
            collexts integer vectors and corresponding squared distances
            </summary>
            <param name="MaxCan">number of minimum integer vectors required</param>
            <param name="D">diagonal matrix</param>
            <param name="Chic">Chi squared</param>
            <param name="cands">2-dimensional array to store the candidates</param>
            <param name="disal1">according squared norms \hat{a}-\check{a}</param>
            <param name="tmax">the largest distance of the Min(ncan, MaxCan) vectors with minimum distance found until now</param>
            <param name="imax">position in disall/cands of the vector with the largest distance of the Min (ncan, MaxCan) vectors with minimum distance found until now</param>
            <param name="right">vector</param>
            <param name="left">vector</param>
            <param name="ncan">number of integer vectors found</param>
            <param name="lef">vector</param>
            <param name="dist">difference between the integer tried and \hat{a}_n</param>
            <param name="endd">vector</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Algorithm.LlyLambda.Stores(System.Int32,System.Int32,System.Double,Geo.Algorithm.ArrayMatrix,Geo.Algorithm.ArrayMatrix,System.Double@,System.Int32@,System.Double[])">
            <summary>
            Stores candidates and correspoding distances
            </summary>
            <param name="ican">Min (number of vectors found until now, MaxCan)</param>
            <param name="ipos">position in disall/cands to put the new found vector </param>
            <param name="t">distance of the new found vector</param>
            <param name="cands">2d-array to store the integer vectors</param>
            <param name="disal1">distance of the MaxCan integer vectors</param>
            <param name="tmax">the largest distance of the ican vectors with minmum distance found until now</param>
            <param name="imax">position in disal1/cands of the vector with the largest distance of the ican vectors with minimum distance found until now</param>
            <param name="dist">difference between the integer tried and \hat{a}_n</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Algorithm.LlyLambda.Backtrack(System.Boolean@,System.Double[],System.Int32@,System.Double[],System.Double[],System.Double[])">
            <summary>
            backtrack in the search tree: used in SEARCH
            </summary>
            <param name="ende">if 'true', then search is done</param>
            <param name="left">vector</param>
            <param name="i">level in the tree</param>
            <param name="lef">vector</param>
            <param name="dist">difference between the integer tried and hat {a}_i</param>
            <param name="endd">vector</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Algorithm.LlyLambda.Chistart(System.Double[],Geo.Algorithm.ArrayMatrix)">
            <summary>
            Compute squared distance of partially rounded float vectors to the float vector in the metric of the covariance matrix
            </summary>
            <param name="D"></param>
            <param name="L"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Algorithm.LlyLambda.L_Inv(Geo.Algorithm.ArrayMatrix)">
            <summary>
            Compute the inverse of a lower triangular matrix
            </summary>
            <param name="L"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Algorithm.LlyLambda.Re_Order(Geo.Algorithm.ArrayMatrix,System.Double[],Geo.Algorithm.ArrayMatrix)">
            <summary>
            Computation of the Z-transformation matrix
            The final Z-transformation is constructed from a sequence of interchanges of two neighbouring ambiguities(this function) and
            integer Gauss transformations (function ztransi) that pair-wise decorrelate the ambiguities
            </summary>
            <param name="Zti"></param>
            <param name="D"></param>
            <param name="L"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Algorithm.LlyLambda.Ztransi(Geo.Algorithm.ArrayMatrix,Geo.Algorithm.ArrayMatrix,System.Int32,System.Int32)">
            <summary>
            Update integral Z-transform for L
            only column 'prevObj' until 'last'.
            the output is the inverse of Z transpose
            </summary>
            <param name="Zti">the inverse Z transposed transformation matrix</param>
            <param name="L">lower triangular matrix L</param>
            <param name="prevObj">prevObj column to be updated</param>
            <param name="last">last column to be updated</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.Algorithm.LlyLambda.LTDL(System.Double[],Geo.Algorithm.ArrayMatrix)">
            <summary>
            factorization of Q into L^T D L
            </summary>
            <param name="D"></param>
            <param name="L"></param>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Algorithm.LlyLambda.NumberOfFloatParam">
            <summary>
            dimension of matrix Q and vector a 
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Algorithm.LlyLambda.FixingNumber">
            <summary>
            备选的值，通常为两组，一组最优，一组次优，便于RATIO判别
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Algorithm.LlyLambda.Q">
            <summary>
            variance covariance matrix(symmetric)
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Algorithm.LlyLambda.CovaOfParams">
            <summary>
            数组表示的浮点方差矩阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.Algorithm.LlyLambda.FloatParams">
            <summary>
            the vetor with real valued estimated(float solution)
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.LsCollocation">
             <summary>
            最小二乘配置(least square collocation)
             V = A X + B Y - l, l = L - A X0 - B Y0, Y = [S s]'
             最小二乘配置的主要目的是估计未测点的完全信号   
             </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.LsCollocation.#ctor(System.Double[][],System.Double[][],System.Double[][],System.Double[][])">
            <summary>
            最小二乘配置(least square collocation)
            </summary>
            <param name="coeff_param">参数的系数阵</param>
            <param name="obsMinusApriori">观测值减去估值</param>
            <param name="inverseWeight_obs">观测值的权逆阵</param>
            <param name="inverseWeight_signal">含下面最后三个变量</param>
        </member>
        <!-- 对于成员“M:Geo.Algorithm.Adjust.LsCollocation.Init(System.Double[][],System.Double[][],System.Double[][],System.Double[][])”忽略有格式错误的 XML 注释 -->
        <member name="M:Geo.Algorithm.Adjust.LsCollocation.Init(System.Double[][],System.Double[][],System.Double[][],System.Double[][],System.Double[][],System.Double[][],System.Double[][],System.Double[][])">
            <summary>
            初始化并计算。
            </summary>
            <param name="coeff_param">参数的系数阵</param>
            <param name="obsMinusApriori">观测值减去估值</param>
            <param name="inverseWeight_obs">观测值的权逆阵</param>
            <param name="inverseWeight_signal">含下面最后三个变量</param>
            <param name="coeff_signal">是否应该自己生成</param>
            <param name="inverseWeight_mesuredSignal">inverseWeight_signal的左上角</param>
            <param name="inverseWeight_notMesuredSignal">inverseWeight_signal的右下角</param>
            <param name="covaSignals_Ss">inverseWeight_signal的右上角</param>
        </member>
        <member name="P:Geo.Algorithm.Adjust.LsCollocation.ParamVector">
            <summary>
            非随机参数向量。NonrandomParamVector
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.LsCollocation.RandomParamVector">
            <summary>
            随机参数向量。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.LsCollocation.MeasuredSignalVector">
            <summary>
            已测信号向量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.LsCollocation.NotMeasuredSignalVector">
            <summary>
            未测信号向量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.LsCollocation.MeasuredSignal">
            <summary>
            已测信号
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.LsCollocation.NotMeasuredSignal">
            <summary>
            未测信号
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.LsCollocation.Param">
            <summary>
            参数。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.LsCollocation.Freedom">
            <summary>
            自由度，样本中独立或能自由变化的变量个数,通常为：样本个数 - 被限制的变量个数或条件数，或多余观测数。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.LsCollocation.ObsCount">
            <summary>
            观测数量。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.LsCollocation.VarianceFactor">
            <summary>
            单位权方差
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.LsCollocation.CovaOfParams">
            <summary>
            参数协方差
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.LsCollocation.RightHandSide">
            <summary>
            法方程右手边
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.LsCollocation.Normal">
            <summary>
            法方程
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.ParamAdjustment">
            约定：以 Vector 结尾的为一维数组。如参数，改正数等。
             <summary>
             最小二乘法方程之参数平差,或间接平差。
                函数模型： L = A X + delta
                随机模型： E(delta) = 0; 
                误差方程： v  = A x - l , 其中 l = L - A X0, 即 l = 观测值 - 先验值的函数值。
             </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.ParamAdjustment.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            参数平差构造函数。
            </summary>
            <param name="coeffOfParams">参数系数阵</param>
            <param name="obsMinusApriori">观测值 - 估值，观测方程常数项</param>
            <param name="inervseWeight">权逆阵</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.ParamAdjustment.#ctor(System.Double[][],System.Double[],System.Double[][],Geo.Algorithm.Vector)">
            <summary>
            参数平差构造函数。
            </summary>
            <param name="coeffOfParams">参数系数阵</param>
            <param name="obsMinusApriori">观测值 - 估值，观测方程常数项</param>
            <param name="inervseWeight">权逆阵</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.ParamAdjustment.#ctor(System.Double[][],System.Double[][],System.Double[][],Geo.Algorithm.Vector)">
            <summary>
            参数平差构造函数。
            误差方程为 V = A dX - obsMinusApriori,
            obsMinusApriori = 观测值 - 先验函数值,
            自定义权阵。
            </summary>
            <param name="coeffOfParams"></param>
            <param name="obsMinusApriori"></param>
            <param name="inverseWeightOfObs"></param>
            <param name="approx"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.ParamAdjustment.#ctor(Geo.Algorithm.Adjust.WeightedVector,Geo.Algorithm.IMatrix,Geo.Algorithm.Vector,System.Collections.Generic.List{System.String})">
            <summary>
            参数平差构造函数。
            </summary>
            <param name="observation">观测值和协方差</param>
            <param name="coeffOfParams">系数阵</param>
            <param name="approx">是否使用参数的偏移量</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.ParamAdjustment.#ctor(Geo.Algorithm.Adjust.BaseAdjustMatrixBuilder)">
            <summary>
            构造函数
            </summary>
            <param name="buider"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.ParamAdjustment.Process">
            <summary>
            数据计算
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.RmsCalculator">
            <summary>
            均方根计算器
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.RmsCalculator.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            线性粗差探测器。构造函数。
            </summary>
            <param name="errors"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.RmsCalculator.Calculate">
            <summary>
            计算赋值。
            </summary>
            <param name="errors">误差序列</param>
        </member>
        <member name="P:Geo.Algorithm.Adjust.RmsCalculator.Rms">
            <summary>
            均方根
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.RobustAdjustment">
            <summary>
            抗差估计
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.RobustAdjustment.FileNumber">
            <summary>
            文件数，同步区数，向量组总数
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.RobustAdjustment.totalPointNumber">
            <summary>
            总点数
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.RobustAdjustment.totalBaselineNumber">
            <summary>
            向量总数
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.RobustAdjustment.totalUnknowPointnumber">
            <summary>
            未知点数=总点数-已知点数
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.RobustAdjustment.totalPointName">
            <summary>
            点名指针数组,存储所有的点，不能遗漏也不能重复，根据点的位置进行系数矩阵的建立
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.RobustAdjustment.totalKnownPointName">
            <summary>
            已知点数组
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.RobustAdjustment.isKnownPoint">
            <summary>
            是否是已知点
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.RobustAdjustment.pointsXYZ">
            <summary>
            点坐标近似值
            坐标数组，三个坐标构成一个XYZ，顺序与点号一一对应
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.RobustAdjustment.totalBeginOfBaselineList">
            <summary>
            基线向量起点点号， 是起点点号的序列 
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.RobustAdjustment.totalEndOfBaselineList">
            <summary>
            基线向量终点点号
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.RobustAdjustment.lList">
            <summary>
            基线向量，3m*1一维的矩阵块列，m=点号
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.RobustAdjustment.pList">
            <summary>
            基线向量协方差矩阵列，3m*3m的方阵，权矩阵
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.RobustAdjustment.VList">
            <summary>
            残差
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.RobustAdjustment.QVList">
             <summary>
            残差的权倒数
             </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.RobustAdjustment.unitVList">
            <summary>
            标准化残差，单位权残差
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.RobustAdjustment.#ctor(Geo.Algorithm.Adjust.AdjustBasicInformation,System.Double[],System.Collections.Generic.List{System.Int32[]},System.Collections.Generic.List{System.Int32[]},System.Double[][],System.Double[][])">
            <summary>
             构造函数
            没有系数矩阵，通过基线点序列判断系数是1or-1or0。
            </summary>
            <param name="BasicInfor"></param>
            <param name="totalPointXYZ"></param>
            <param name="totalbeginOfBaselineList"></param>
            <param name="totalendOfBaselineList"></param>
            <param name="bList"></param>
            <param name="ppList"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.RobustAdjustment.LeastSquares">
            <summary>
            最小二乘平差函数
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.RobustAdjustment.Parallel_LeastSquares">
            <summary>
            最小二乘平差函数
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.RobustAdjustment.Robust(Geo.Algorithm.Adjust.FactorYype,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            抗差估计
            </summary>
            <param name="fname"></param>
            <param name="eps"></param>
            <param name="k0"></param>
            <param name="k1"></param>
            <param name="m"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.RobustAdjustment.ParallRobust(Geo.Algorithm.Adjust.FactorYype,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            抗差估计
            </summary>
            <param name="fname"></param>
            <param name="eps"></param>
            <param name="k0"></param>
            <param name="k1"></param>
            <param name="m"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.RobustAdjustment.parallelRobust(Geo.Algorithm.Adjust.FactorYype,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            抗差估计
            </summary>
            <param name="fname"></param>
            <param name="esp"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.RobustAdjustment.GetInverse(System.Double[],System.Int32)">
            <summary>
            对称正定矩阵求逆：变量循环重新编号法（宋力杰著）
            </summary>
            <param name="a">存储下三角矩阵元素的对称正定矩阵</param>
            <param name="n">矩阵阶数</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.RobustAdjustment.GetParallelInverse(System.Double[],System.Int32)">
            <summary>
            对称正定矩阵的并行求逆
            </summary>
            <param name="a"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.RobustAdjustment.GetSunScript(System.Int32,System.Int32)">
            <summary>
            对称矩阵下标计算函数
            对称矩阵采用下三角元素存储，则根据下标i,j计算矩阵所在序列中的元素值
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.RobustAdjustment.GetATPA">
            <summary>
            法方程的求取。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.RobustAdjustment.parallGetATPA">
            <summary>
            法方程的求取。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.RobustAdjustment.GetLV">
            <summary>
            误差方差自由项或最小二乘残差的计算 V=AX-L
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.RobustAdjustment.parallGetLV">
            <summary>
            误差方差自由项或最小二乘残差的计算 V=AX-L
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.RobustAdjustment.SetKnownCondition">
            <summary>
            已知点处理
            目前仅采用已知点固定的方法处理，且强约束第一个点作为已知点。
            </summary> 
        </member>
        <member name="M:Geo.Algorithm.Adjust.RobustAdjustment.GetdX">
            <summary>
            未知数计算
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.RobustAdjustment.GetVTPV">
            <summary>
            残差二次型计算，先计算PV，再计算VTPV
            PV还能继续利用。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.RobustAdjustment.UpdateXYZ">
            <summary>
            更新参数值
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.RobustAdjustment.GetQV">
            <summary>
            计算残差V的权倒数
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.RobustAdjustment.parallGetQV">
            <summary>
            计算残差V的权倒数
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.RobustAdjustment.GetUnitV">
            <summary>
            计算单位权残差，中位数计算方差因子
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.RobustAdjustment.parallGetUnitV">
            <summary>
            计算单位权残差，中位数计算方差因子
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.RobustAdjustment.GetMedian(System.Double[],System.Int32,System.Boolean)">
            <summary>
            中位数计算
            </summary>
            <param name="pp"></param>
            <param name="n"></param>
            <param name="IsAbs"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.RobustAdjustment.GetWeightFactor(Geo.Algorithm.Adjust.FactorYype,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            权因子函数
            </summary>
            <param name="fname"></param>
            <param name="v"></param>
            <param name="k0"></param>
            <param name="k1"></param>
            <returns></returns>
        </member>
        <member name="T:Algorithm.Adjust.RobustBayesAdjustment">
            <summary>
            抗差贝叶斯估计
            </summary>
        </member>
        <member name="F:Algorithm.Adjust.RobustBayesAdjustment.FileNumber">
            <summary>
            文件数,同步区数,向量组个数
            </summary>
        </member>
        <member name="F:Algorithm.Adjust.RobustBayesAdjustment.TotalPointNumber">
            <summary>
            总点数
            </summary>
        </member>
        <member name="F:Algorithm.Adjust.RobustBayesAdjustment.TotalBaselineNumber">
            <summary>
            基线总数
            </summary>
        </member>
        <member name="F:Algorithm.Adjust.RobustBayesAdjustment.TotalUnknownPointNumber">
            <summary>
            未知点个数
            </summary>
        </member>
        <member name="F:Algorithm.Adjust.RobustBayesAdjustment.TotalPointName">
            <summary>
            点名数组指针,存储所有的点,不能遗漏,也不能重复,根据点的位置进行系数矩阵的建立
            </summary>
        </member>
        <member name="F:Algorithm.Adjust.RobustBayesAdjustment.TotalKonwnPointName">
            <summary>
            已知点数组
            </summary>
        </member>
        <member name="F:Algorithm.Adjust.RobustBayesAdjustment.IsKnownPoint">
            <summary>
            判断是否是已知点
            </summary>
        </member>
        <member name="F:Algorithm.Adjust.RobustBayesAdjustment.PointsAppXYZ">
            <summary>
            近似坐标值,三个坐标构成一个XYZ,顺序与点号一一对应
            </summary>
        </member>
        <member name="F:Algorithm.Adjust.RobustBayesAdjustment.TotalBeginOfBaselineList">
            <summary>
            基线向量起点的点号，是起点点号的序列
            </summary>
        </member>
        <member name="F:Algorithm.Adjust.RobustBayesAdjustment.TotalEndOfBaselineList">
            <summary>
            基线向量终点的点号，是终点点号的序列
            </summary>
        </member>
        <member name="F:Algorithm.Adjust.RobustBayesAdjustment.lList">
            <summary>
            基线向量,3m*1维的矩阵块列,m=点号
            </summary>
        </member>
        <member name="F:Algorithm.Adjust.RobustBayesAdjustment.pList">
            <summary>
            基线向量协方差矩阵,3m*3m的方针,权矩阵
            </summary>
        </member>
        <member name="F:Algorithm.Adjust.RobustBayesAdjustment.VList">
            <summary>
            残差
            </summary>
        </member>
        <member name="F:Algorithm.Adjust.RobustBayesAdjustment.QVList">
            <summary>
            残差的权倒数
            </summary>
        </member>
        <member name="F:Algorithm.Adjust.RobustBayesAdjustment.unitVlist">
            <summary>
            标准化残差,单位权残差
            </summary>
        </member>
        <member name="F:Algorithm.Adjust.RobustBayesAdjustment.PrioriX">
            <summary>
            先验坐标值
            </summary>
        </member>
        <member name="F:Algorithm.Adjust.RobustBayesAdjustment.PrioriCovX">
            <summary>
            先验坐标的协方差矩阵
            </summary>
        </member>
        <member name="M:Algorithm.Adjust.RobustBayesAdjustment.#ctor(Geo.Algorithm.Adjust.AdjustBasicInformation,System.Double[],System.Collections.Generic.List{System.Int32[]},System.Collections.Generic.List{System.Int32[]},System.Double[][],System.Double[][],System.Double[],System.Double[])">
            <summary>
            构造函数
            </summary>
            <param name="BasicInfor"></param>
            <param name="TotalPointXYZ"></param>
            <param name="totalBeginOfBaselineList"></param>
            <param name="totalEndOfBaselineList"></param>
            <param name="bList"></param>
            <param name="ppList"></param>
            <param name="PPrioriX"></param>
            <param name="PPrioriCovX"></param>
        </member>
        <member name="M:Algorithm.Adjust.RobustBayesAdjustment.#ctor(Geo.Algorithm.Adjust.AdjustBasicInformation,System.Double[],System.Collections.Generic.List{System.Int32[]},System.Collections.Generic.List{System.Int32[]},System.Double[][],System.Double[][])">
            <summary>
            
            </summary>
            <param name="BasicInfor"></param>
            <param name="TotalPointXYZ"></param>
            <param name="totalBeginOfBaselineList"></param>
            <param name="totalEndOfBaselineList"></param>
            <param name="bList"></param>
            <param name="ppList"></param>
        </member>
        <member name="M:Algorithm.Adjust.RobustBayesAdjustment.LeastSquare">
            <summary>
            最小二乘平差函数
            </summary>
        </member>
        <member name="M:Algorithm.Adjust.RobustBayesAdjustment.Robust(Geo.Algorithm.Adjust.FactorYype,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            抗差估计
            </summary>
            <param name="fname"></param>
            <param name="eps"></param>
            <param name="k0"></param>
            <param name="k1"></param>
            <param name="m"></param>
        </member>
        <member name="M:Algorithm.Adjust.RobustBayesAdjustment.BayesEstimate">
            <summary>
            贝叶斯估计
            </summary>
        </member>
        <member name="M:Algorithm.Adjust.RobustBayesAdjustment.GetInverse(System.Double[],System.Int32)">
            <summary>
            对称正定矩阵求逆：变量循环重新编号法（宋力杰著）
            </summary>
            <param name="a">存储下三角矩阵元素的对称正定矩阵</param>
            <param name="n">矩阵阶数</param>
            <returns></returns>
        </member>
        <member name="M:Algorithm.Adjust.RobustBayesAdjustment.GetATPA">
            <summary>
            计算ATPA和ATPL
            </summary>
        </member>
        <member name="M:Algorithm.Adjust.RobustBayesAdjustment.GetPosterioriATPA">
            <summary>
            计算贝叶斯估计的ATPA和ATPL,在GetATPA之后计算
            </summary>
        </member>
        <member name="M:Algorithm.Adjust.RobustBayesAdjustment.GetLV">
            <summary>
            误差方程自由项或最小二乘残差的计算
            若计算误差方程自由项，算出来的是+L,方程为V = A * X + L
            </summary>
        </member>
        <member name="M:Algorithm.Adjust.RobustBayesAdjustment.SetKnownCondition">
            <summary>
            处理已知点，加一个很大的权,这里固定第一个点为已知点
            </summary>
        </member>
        <member name="M:Algorithm.Adjust.RobustBayesAdjustment.GetdX">
            <summary>
            参数平差值计算
            </summary>
            <returns></returns>
        </member>
        <member name="M:Algorithm.Adjust.RobustBayesAdjustment.UpdateXYZ">
            <summary>
            更新坐标值为平差后的坐标值
            </summary>
        </member>
        <member name="M:Algorithm.Adjust.RobustBayesAdjustment.GetQV">
            <summary>
            计算残差V的权倒数,即Qv
            </summary>
        </member>
        <member name="M:Algorithm.Adjust.RobustBayesAdjustment.GetUnitV">
            <summary>
            计算单位权残差，中位数计算方差因子
            </summary>
        </member>
        <member name="M:Algorithm.Adjust.RobustBayesAdjustment.GetMedian(System.Double[][],System.Boolean)">
            <summary>
            中位数计算
            </summary>
            <param name="unitVList"></param>
            <param name="IsAbs"></param>
            <returns></returns>
        </member>
        <member name="M:Algorithm.Adjust.RobustBayesAdjustment.GetVTPV">
            <summary>
            残差二次型计算,先计算PV(在粗差探测中还能利用)，再计算VTPV
            </summary>
        </member>
        <member name="M:Algorithm.Adjust.RobustBayesAdjustment.GetPosterVTPV">
            <summary>
            贝叶斯估计加入先验信息之后，求单位权中误差的公式也变了
            </summary>
            <returns></returns>
        </member>
        <member name="M:Algorithm.Adjust.RobustBayesAdjustment.GetWeightFactor(Geo.Algorithm.Adjust.FactorYype,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            权因子计算
            </summary>
            <param name="fname"></param>
            <param name="v"></param>
            <param name="k0"></param>
            <param name="k1"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Algorithm.Adjust.SequentialAdjustment">
            <summary>
            序贯平差 
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SequentialAdjustment.#ctor(Geo.Algorithm.Adjust.BaseAdjustMatrixBuilder)">
            <summary>
            对应的方法为 Process
            </summary>
            <param name="builder">需要上一历元的平差结果和当前观测结果</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SequentialAdjustment.Process">
            <summary>
            计算
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.SimpleKalmanFilter">
            <summary>
            Kalman 滤波计算器，包含预报和估计两部分。
            参见介绍 by Welch, G. and G. Bishop.
            "An Introduction to the Kalman IsSatisfied", at:
            http://www.cs.unc.edu/~welch/kalman/kalmanIntro.html.
            此版本修改自 G. J. Bierman. "Factorization Methods for
            Discrete Sequential Estimation". Mathematics in Science and
            Engineering, Vol. 128. Academic Press, New York, 1977. 
            其具有更好的稳定性。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SimpleKalmanFilter.#ctor(Geo.Algorithm.Adjust.BaseAdjustMatrixBuilder)">
            <summary>
            对应的方法为 Process
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SimpleKalmanFilter.Process">
            <summary>
            计算
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SimpleKalmanFilter.Predict(Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix)">
            <summary>
            预报
            </summary>
            <param name="TransferMatrix"></param>
            <param name="InverseWeightOfTransfer"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SimpleKalmanFilter.NewCorrect(Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix)">
            <summary>
             估计，改正。通常采用的方法。From 崔阳、2017.06.22
            </summary>
            <param name="observation"></param>
            <param name="control"></param>
            <param name="covaOfObs"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Geo.Algorithm.Adjust.SimpleKalmanFilter.CorrectNormal(Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix)”忽略有格式错误的 XML 注释 -->
        <member name="M:Geo.Algorithm.Adjust.SimpleKalmanFilter.CorrectSimple(Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix)">
            <summary>
            估计，改正。一个更健壮的方法。
            </summary>
            <param name="observation">观测值信息</param>
            <param name="control">控制矩阵，有时为非对称阵，如PPP</param>
            <param name="covaOfObs">观测值协方差</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SimpleKalmanFilter.ToString">
            <summary>
            显示
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.SimpleKalmanFilter.GetTransferModelDic">
            <summary>
            将状态转移模型数值填充。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleKalmanFilter.PredictParam">
            <summary>
            先验值。  A priori state estimation.
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleKalmanFilter.CovaOfPredictParam">
             <summary>
            先验值方差。  A priori error covariance.
             </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleKalmanFilter.AprioriParam">
            <summary>
            先验参数矩阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleKalmanFilter.CovaOfAprioriParam">
            <summary>
            先验值的协方差矩阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.SimpleKalmanFilter.InverseWeightOfTransfer">
            <summary>
            参数状态转移的权逆阵
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.WeightedParamAdjustment">
            <summary>
            参数加权平差。参数分为两部分加权和未加权的。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedParamAdjustment.#ctor(Geo.Algorithm.Adjust.BaseAdjustMatrixBuilder)">
            <summary>
            对应的方法为 Process
            </summary>
            <param name="builder">需要上一历元的平差结果和当前观测结果</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedParamAdjustment.Process">
            <summary>
            参数加权平差
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedParamAdjustment.Test">
            <summary>
            测试参数加权平差
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.AdjustmentManager">
            <summary>
            Adjustment 滤波管理器
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.AdjustmentManager.#ctor">
            <summary>
             Adjustment 滤波管理器
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.AdjustParamVectorType">
            <summary>
            平差向量类型
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.AdjustParamVectorType.参数先验值">
            <summary>
            Apriori
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.AdjustParamVectorType.参数预测值">
            <summary>
            Predicted
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.AdjustParamVectorType.参数估计值">
            <summary>
            Estimated
            </summary>
        </member>
        <member name="F:Geo.Algorithm.Adjust.AdjustParamVectorType.参数改正后向量">
            <summary>
            Corrected
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.AdjustmentResult">
            <summary>
            平差结果
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.AdjustmentResult.#ctor">
            <summary>
            构造函数
            </summary> 
        </member>
        <member name="M:Geo.Algorithm.Adjust.AdjustmentResult.#ctor(Geo.Algorithm.Adjust.Adjustment)">
            <summary>
            构造函数
            </summary>
            <param name="Adjustment">平差器</param> 
        </member>
        <member name="P:Geo.Algorithm.Adjust.AdjustmentResult.Adjustment">
            <summary>
            平差器
            </summary>
        </member>
        <member name="T:Geo.Algorithm.IWeightedVector">
            <summary>
            具有权值的数据向量。也是一个单列矩阵。
            其权值采用 InverseWeight 属性专门存储。
            平差计算中，数据向量值与数值的协方差是平差的基本单元。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.IWeightedVector.GetCovariance(System.Double)">
            <summary>
            获取协方差
            </summary>
            <param name="varianceFactor">协方差因子，单位权方差</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.IWeightedVector.SetInverseWeight(Geo.Algorithm.IMatrix)">
            <summary>
            设置权矩阵
            </summary>
            <param name="inverseWeight"></param>
        </member>
        <member name="M:Geo.Algorithm.IWeightedVector.ToFormatedText">
            <summary>
            输出格式化文本
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.IWeightedVector.InverseWeight">
            <summary>
            权逆阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.IWeightedVector.IsWeighted">
            <summary>
            是否具有权值
            </summary>
        </member>
        <member name="P:Geo.Algorithm.IWeightedVector.Weights">
            <summary>
            获取权矩阵。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.WeightedVector">
            <summary>
            具有权值的数据向量。也是一个单列矩阵。
            其权值采用 InverseWeight 属性专门存储。
            平差计算中，数据向量值与数值的协方差是平差的基本单元。
            本类可以用于存储先验值，估计值，推估值等。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.VectorMatrix">
            <summary>
            向量矩阵。只有一列的矩阵。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Vector">
            <summary>
            Geo 向量，以一维列表形式实现。
            是一串纯粹的数字，没有其它任何物理意义。
            与矩阵相同，向量也有多种存储方式，但是主要还是一维列表比较方便,如改变向量空间的维数。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Vector.#ctor(System.Double,System.Double)">
            <summary>
            构建一个二维向量
            </summary>
            <param name="prevObj">第一元素</param>
            <param name="second">第二元素</param>
        </member>
        <member name="M:Geo.Algorithm.Vector.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            构建一个三维向量
            </summary>
            <param name="prevObj">第一元素</param>
            <param name="second">第二元素</param>
            <param name="third">第3元素</param>
        </member>
        <member name="M:Geo.Algorithm.Vector.#ctor(System.Int32,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="dimension">维数</param>
            <param name="initVal">初始数据</param>
        </member>
        <member name="M:Geo.Algorithm.Vector.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            构造函数。自动忽略null数据。
            </summary>
            <param name="keyDic"></param>
        </member>
        <member name="M:Geo.Algorithm.Vector.#ctor(System.Double[])">
            <summary>
            构造函数
            </summary>
            <param name="array"></param> 
        </member>
        <member name="M:Geo.Algorithm.Vector.#ctor(System.Double[],System.Int32)">
            <summary>
            构造函数，只取N部分
            </summary>
            <param name="array"></param>
            <param name="dimension"></param>
        </member>
        <member name="M:Geo.Algorithm.Vector.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            6 维向量
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="Z"></param>
        </member>
        <member name="M:Geo.Algorithm.Vector.#ctor(System.Double[],System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="vector">一维数组</param>
        </member>
        <member name="M:Geo.Algorithm.Vector.#ctor(System.Collections.Generic.Dictionary{System.String,System.Double})">
            <summary>
            采用字典初始化
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Geo.Algorithm.Vector.#ctor(Geo.Algorithm.IVector)">
            <summary>
            构造函数
            </summary>
            <param name="vector">一维数组</param>
            <param name="names">名称</param>
        </member>
        <member name="M:Geo.Algorithm.Vector.#ctor(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.String})">
            <summary>
            构造函数
            </summary>
            <param name="vector">列表</param>
            <param name="names">名称</param>
        </member>
        <member name="M:Geo.Algorithm.Vector.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Vector.Stack(Geo.Algorithm.IVector,Geo.Algorithm.IVector)">
            <summary>
            b追加到a后面Concatenation
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.Stack(Geo.Algorithm.IVector)">
            <summary>
            追加一个向量。
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.Slice(System.Int32,System.Int32)">
            <summary>
            截取新向量。
            </summary>
            <param name="prevObj">起始编号（含）</param>
            <param name="last">最后编号（含）</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.DirectionUnit">
            <summary>
            单位方向向量
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.VecPolar(System.Double,System.Double,System.Double)">
            <summary>
             Vector from polar angles。
             站心坐标。极坐标转空间直角坐标。
            </summary>
            <param name="azim"></param>
            <param name="elev"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.Dot(Geo.Algorithm.Vector)">
            <summary>
            点乘
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.Norm">
            <summary>
            二次范数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.Cross3D(Geo.Algorithm.Vector,Geo.Algorithm.Vector)">
            <summary>
            叉乘
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.GetSame(Geo.Algorithm.Vector)">
            <summary>
            获取值和名称都相同的向量
            </summary>
            <param name="fixedAmbiguities"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.GetVector(System.Int32,System.Int32)">
            <summary>
            获取指定编号的向量
            </summary>
            <param name="fromIndex">起始编号</param>
            <param name="count">参数数量</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.SortByName">
            <summary>
            按名称顺序排序
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.SortByNameDescending">
            <summary>
            按名称逆序排序
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.Sort">
            <summary>
            按值顺序排序
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.SortDescending">
            <summary>
            逆序排序
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.GetDictionary">
            <summary>
            获取字典。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.SetDimension(System.Int32)">
            <summary>
            设置向量空间的维数。只设置增大。
            </summary>
            <param name="dimension">新维数</param>
        </member>
        <member name="M:Geo.Algorithm.Vector.Set(System.Int32,System.Double,System.String)">
            <summary>
            设置数据。
            </summary>
            <param name="i"></param>
            <param name="currentVal"></param>
            <param name="name"></param>
        </member>
        <member name="M:Geo.Algorithm.Vector.Add(System.Double,System.String)">
            <summary>
            增加一个数
            </summary>
            <param name="currentVal"></param>
            <param name="name"></param>
        </member>
        <member name="M:Geo.Algorithm.Vector.Radius">
            <summary>
            与原点的距离半径。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.op_Addition(Geo.Algorithm.Vector,Geo.Algorithm.IVector)">
            <summary>
            +
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.op_Subtraction(Geo.Algorithm.Vector,Geo.Algorithm.IVector)">
            <summary>
            -
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.op_UnaryNegation(Geo.Algorithm.Vector)">
            <summary>
            -
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.op_Multiply(Geo.Algorithm.Vector,Geo.Algorithm.IVector)">
            <summary>
            *
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.op_Addition(Geo.Algorithm.Vector,Geo.Algorithm.Vector)">
            <summary>
            +
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.op_Subtraction(Geo.Algorithm.Vector,Geo.Algorithm.Vector)">
            <summary>
            -
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.op_Multiply(Geo.Algorithm.Vector,Geo.Algorithm.Vector)">
            <summary>
            *
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.op_Multiply(Geo.Algorithm.Vector,System.Double)">
            <summary>
            *
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.Plus(Geo.Algorithm.Vector)">
            <summary>
            +
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.Minus(Geo.Algorithm.Vector)">
            <summary>
            -
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.Opposite">
            <summary>
            相反数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.Multiply(Geo.Algorithm.Vector)">
            <summary>
            Corss
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.Multiply(System.Double)">
            <summary>
            *
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.Divide(System.Double)">
            <summary>
            除以
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.Create(System.Double[])">
            <summary>
            创建一个实例
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.GetEnumerator">
            <summary>
            返回迭代
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.Parse(System.String)">
            <summary>
            解析字符串，默认为 \t , 
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.Parse(System.String,System.Char[])">
            <summary>
            解析字符串，默认为
            </summary>
            <param name="line"></param>
            <param name="splliters"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            移除指定参数
            </summary>
            <param name="paramNames"></param>
        </member>
        <member name="M:Geo.Algorithm.Vector.Remove(System.String)">
            <summary>
            移除指定参数
            </summary>
            <param name="paramName"></param>
        </member>
        <member name="M:Geo.Algorithm.Vector.GetSubVector(System.Int32,System.Int32)">
            <summary>
            获取子向量
            </summary>
            <param name="startIndex"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.IsEmpty(Geo.Algorithm.IVector)">
            <summary>
            向量是否为空
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Vector.IsValid(Geo.Algorithm.IVector)">
            <summary>
            是否所有数字有效
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.Vector.Data">
            <summary>
            核心存储
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Vector.Item(System.Int32)">
            <summary>
            获取指定的元素。
            </summary>
            <param name="i">行编号</param>
            <param name="j">列编号</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.Vector.OneDimArray">
            <summary>
            一维数组
            </summary>
        </member>
        <member name="T:Geo.Algorithm.IVectorMatrix">
            <summary>
             向量矩阵。只有一列的矩阵。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.VectorMatrix.#ctor(System.Double,System.Double)">
            <summary>
            构建一个二维向量
            </summary>
            <param name="prevObj">第一元素</param>
            <param name="second">第二元素</param>
        </member>
        <member name="M:Geo.Algorithm.VectorMatrix.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            构建一个三维向量
            </summary>
            <param name="prevObj">第一元素</param>
            <param name="second">第二元素</param>
            <param name="third">第3元素</param>
        </member>
        <member name="M:Geo.Algorithm.VectorMatrix.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="dimension">维数</param> 
        </member>
        <member name="M:Geo.Algorithm.VectorMatrix.#ctor(System.Double[])">
            <summary>
            构造函数
            </summary>
            <param name="vector">一维数组</param>
        </member>
        <member name="M:Geo.Algorithm.VectorMatrix.GetRowIndex(System.String)">
            <summary>
            获取行编号
            </summary>
            <param name="paramName">参数名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.VectorMatrix.GetColIndex(System.String)">
            <summary>
            获取列编号
            </summary>
            <param name="paramName">参数名称</param>
        </member>
        <member name="M:Geo.Algorithm.VectorMatrix.SetRowValue(System.Int32,System.Double)">
            <summary>
            设置某行的值为统一的数值
            </summary>
            <param name="rowIndex">行编号</param>
            <param name="currentVal">数值</param>
        </member>
        <member name="M:Geo.Algorithm.VectorMatrix.SetColValue(System.Int32,System.Double)">
            <summary>
            设置某列的值为统一的数值
            </summary>
            <param name="colIndex">列编号</param>
            <param name="currentVal">数值</param>
        </member>
        <member name="M:Geo.Algorithm.VectorMatrix.GetMatrix(System.Collections.Generic.List{System.String})">
            <summary>
            获取指定参数的矩阵
            </summary>
            <param name="paramNames">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.VectorMatrix.GetMatrix(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            获取指定参数的矩阵
            </summary>
            <param name="rowNames">行参数列表</param>
            <param name="colNames">列参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.VectorMatrix.ContainsRowName(System.String)">
            <summary>
            是否包含行名称
            </summary>
            <param name="rowName">行名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.VectorMatrix.ContainsColName(System.String)">
            <summary>
            是否包含列名称
            </summary>
            <param name="colName">列名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.VectorMatrix.Multiply(Geo.Algorithm.IMatrix)">
            <summary>
            矩阵乘法，左边列数应该等于右边行
            N * 1 列向量，只乘以 1 * M 的行向量，结果为 N*M 的矩阵。
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.VectorMatrix.op_Addition(Geo.Algorithm.VectorMatrix,Geo.Algorithm.IMatrix)">
            <summary>
            +
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.VectorMatrix.op_Subtraction(Geo.Algorithm.VectorMatrix,Geo.Algorithm.IMatrix)">
            <summary>
            -
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.VectorMatrix.op_Multiply(Geo.Algorithm.VectorMatrix,Geo.Algorithm.IMatrix)">
            <summary>
            *
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.VectorMatrix.op_Multiply(Geo.Algorithm.VectorMatrix,System.Double)">
            <summary>
            *
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.VectorMatrix.GetEnumerator">
            <summary>
            迭代
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.VectorMatrix.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Geo.Algorithm.VectorMatrix.Item(System.String,System.String)">
            <summary>
            获取指定的元素。
            </summary>
            <param name="rowName">行名称</param>
            <param name="colName">列名称</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.VectorMatrix.RowNames">
            <summary>
            行名称
            </summary>
        </member>
        <member name="P:Geo.Algorithm.VectorMatrix.ColNames">
            <summary>
            列名称
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedVector.#ctor(System.Double[],System.Double[][])">
            <summary>
            具有权值的数据向量
            </summary>
            <param name="vector">数据向量</param>
            <param name="inverseWeight">权逆阵,如果为null，则为单位阵</param>
            <param name="residual">改正残差，通常在计算结束时赋值</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedVector.#ctor(Geo.Algorithm.IMatrix,Geo.Algorithm.IMatrix)">
            <summary>
            具有权值的数据向量
            </summary>
            <param name="vector"></param>
            <param name="inverseWeight"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedVector.#ctor(Geo.Algorithm.IVector,Geo.Algorithm.IMatrix)">
            <summary>
            具有权值的数据向量
            </summary>
            <param name="vector">数据以矩阵形式初始化</param>
            <param name="inverseWeight">权逆阵,如果为null，则为单位阵</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedVector.CheckAndCorrectCova">
            <summary>
            数值数量。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedVector.Get(System.Int32)">
            <summary>
            获取具有 RMS 的值。
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedVector.Get(System.String,System.Boolean)">
            <summary>
            获取具有 RMS 的值。
            </summary>
            <param name="keyPrev"></param>
            <param name="isFuzzyMatching">如果模糊匹配，则返回第一个匹配上的</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedVector.GetAll(System.String)">
            <summary>
            获取具有 RMS 的值。
            </summary>
            <param name="keyPrev"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedVector.GetCovaOrdered(System.Boolean)">
            <summary>
            按照矩阵对角线排序返回。
            </summary>
            <param name="ascendingOrDescending"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedVector.GetRmsVector">
            <summary>
            中误差以向量形式返回
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedVector.GetRmsedVector">
            <summary>
            返回一个具有中误差的向量。这个比WeightedVector更加轻量级，更通用。获取了后就可以释放原对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedVector.GetWeightVector">
            <summary>
            以向量形式返回权向量
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedVector.GetWeightedVector(System.Collections.Generic.List{System.String})">
            <summary>
            具有协方差的向量，按照指定的参数顺序返回。
            </summary>
            <param name="paramNames">参数名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedVector.GetWeightedVector(System.Int32,System.Int32)">
            <summary>
            具有协方差的向量
            </summary>
            <param name="paramNames">参数名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedVector.GetCovariance(System.Double)">
            <summary>
            由传入的方差因子计算协方差。
            </summary>
            <param name="varianceFactor">方差因子</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedVector.GetVarianceValue(System.Int32,System.Double)">
            <summary>
            获取指定编号值的方差。
            </summary>
            <param name="i"></param>
            <param name="varianceFactor">方差因子</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedVector.GetWeithValue(System.Int32,System.Double)">
            <summary>
            获取指定编号值的权值，即方差倒数。
            </summary>
            <param name="i"></param>
            <param name="varianceFactor">方差因子</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedVector.GetInverseWeightedValue(System.Int32)">
            <summary>
            数值，及其均方差。
            </summary>
            <param name="i">编号</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedVector.op_Multiply(Geo.Algorithm.Adjust.WeightedVector,System.Double)">
            <summary>
            只对 Vector 做乘法
            </summary>
            <param name="right"></param>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedVector.op_Addition(Geo.Algorithm.Adjust.WeightedVector,Geo.Algorithm.Adjust.WeightedVector)">
            <summary>
            加上。
            </summary>
            <param name="right"></param>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedVector.op_Subtraction(Geo.Algorithm.Adjust.WeightedVector,Geo.Algorithm.Adjust.WeightedVector)">
            <summary>
            减去。
            </summary>
            <param name="right"></param>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedVector.ToString">
            <summary>
            显示值与均方差。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedVector.ToFormatedText">
            <summary>
            格式化的文本，方便阅读。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.WeightedVector.GetZeroVector(System.Int32,System.Double)">
            <summary>
            值全为 0,权阵也为 1 。
            </summary>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.Adjust.WeightedVector.ParamNames">
            <summary>
            设置参数名称，包括权阵的名称。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.WeightedVector.InverseWeight">
            <summary>
            参数的权逆阵（协因数阵） Inverse Weight Matrix（Cofactor Matrix ）of Some Vector。
            协因数阵。InverseWeight=Weight^(-1)
            法方程系数阵的逆阵为未知参数向量的权逆阵.
            ??此处应该为残差的权逆阵？？
            </summary> 
        </member>
        <member name="P:Geo.Algorithm.Adjust.WeightedVector.IsWeighted">
            <summary>
            是否具有权值。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.WeightedVector.Weights">
            <summary>
            权阵
            </summary>
        </member>
        <member name="T:Geo.Algorithm.ChebyshevPolyFit">
            <summary>
            第一类切比雪夫多项式拟合
            </summary>
        </member>
        <member name="T:Geo.Algorithm.IGetY">
            <summary>
            用于差值或拟合,输入输出都为双精度数值。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.IGetY`1">
            <summary>
            用于差值或拟合。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.IGetY`1.GetY(`0)">
            <summary>
            输入参数，获取函数值
            </summary>
            <param name="xValue">参数</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.ChebyshevPolyFit.#ctor(System.Double[],System.Int32)">
            <summary>
            构造
            </summary>
            <param name="yArray"></param>
            <param name="order"></param>
        </member>
        <member name="M:Geo.Algorithm.ChebyshevPolyFit.#ctor(System.Double[],System.Double[],System.Int32)">
            <summary>
            多项式拟合。
            阶次排序，从低到高。
            </summary>
            <param name="arrayX"></param>
            <param name="arrayY"></param>
            <param name="order"></param>
        </member>
        <member name="M:Geo.Algorithm.ChebyshevPolyFit.GetY(System.Double)">
            <summary>
            多项式求值。
            </summary>
            <param name="XArray"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.ChebyshevPolyFit.ChebyshevFit(System.Double,System.Double[],System.Double[],System.Int32)">
            <summary>
            切比雪夫多项式拟合
            </summary>
            <param name="x"></param>
            <param name="xs"></param>
            <param name="ys"></param>
            <param name="order">参数数量=最高阶次+1</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.ChebyshevPolyFit.GetT(System.Double,System.Int32)">
            <summary>
            第一类
            </summary>
            <param name="x"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.ChebyshevPolyFit.GetU(System.Double,System.Int32)">
            <summary>
            第二类 
            </summary>
            <param name="x"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.ChebyshevPolyFit.ToScope(System.Double,System.Double,System.Double)">
            <summary>
            归一化到 [-1 1]区间
            </summary>
            <param name="x"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.ChebyshevPolyFit.Chazhijiedian(System.Int32,System.Double,System.Double)">
            <summary>
            节点取值。
            </summary>
            <param name="order"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Algorithm.LsPolyFit">
            <summary>
            最小二乘多项式拟合 
            </summary>
        </member>
        <member name="M:Geo.Algorithm.LsPolyFit.#ctor(System.Collections.Generic.IDictionary{System.Double,System.Double},System.Int32)">
            <summary>
            拟合器
            </summary>
            <param name="keyDic"></param>
            <param name="nextIndex"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.LsPolyFit.#ctor(System.Double[],System.Double[],System.Int32)">
            <summary>
            多项式拟合。
            阶次排序，从低到高。
            </summary>
            <param name="arrayX"></param>
            <param name="arrayY"></param>
            <param name="order"></param>
        </member>
        <member name="M:Geo.Algorithm.LsPolyFit.GetY(System.Double)">
            <summary>
            多项式求值。
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.LsPolyFit.GetParams(System.Double[],System.Double[],System.Int32)">
            <summary>
            多项式拟合。
            参数与乘积为从低到高。
            注意：拟合参数数量 = 阶次 + 1
            </summary>
            <param name="arrayX">数组</param>
            <param name="arrayY">数组</param>
            <param name="order">阶次</param>
            <returns>拟合参数</returns>
        </member>
        <member name="P:Geo.Algorithm.LsPolyFit.ParamCount">
            <summary>
            参数数量。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.LsPolyFit.Parameters">
            <summary>
            多项式参数,数组表示。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.LsPolyFit.Rms">
            <summary>
            中误差
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.DicGrossErrorFilter">
            <summary>
            线性粗差过滤器。
            从粗差列表、数组中，找出粗差。
            在相同的测量条件下的测量值序列中，超过n（3、4或2）倍中误差的测量误差
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.DicGrossErrorFilter.#ctor(System.Collections.Generic.Dictionary{System.Double,System.Double})">
            <summary>
            线性粗差探测器。构造函数。
            </summary>
            <param name="residuals">数据残差，误差。</param> 
        </member>
        <member name="M:Geo.Algorithm.Adjust.DicGrossErrorFilter.Filter(System.Double)">
            <summary>
            过滤
            </summary>
            <param name="thresholdTimes"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.Adjust.DicGrossErrorFilter.Residuals">
            <summary>
            数据残差，误差。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.DicGrossErrorFilter.LimitError">
            <summary>
             限差。一般为 2、3、4 倍中误差。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.DicGrossErrorFilter.Rms">
            <summary>
            中误差。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.DicGrossErrorFilter.ThresholdTimes">
            <summary>
            中误差倍数
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.GrossErrorFilter">
            <summary>
            线性粗差过滤器。
            从粗差列表、数组中，找出粗差。
            在相同的测量条件下的测量值序列中，超过n（3、4或2）倍中误差的测量误差
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GrossErrorFilter.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            线性粗差探测器。构造函数。
            </summary>
            <param name="residuals">数据残差，误差。</param> 
        </member>
        <member name="M:Geo.Algorithm.Adjust.GrossErrorFilter.Filter(System.Double)">
            <summary>
            获取过滤粗差后的数据。循环过滤，直到所有粗差数据剔除。
            </summary>
            <param name="thresholdTimes">几倍中误差？</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.Adjust.GrossErrorFilter.Residuals">
            <summary>
            数据残差，误差。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.GrossErrorFilter.LimitError">
            <summary>
             限差。一般为 2、3、4 倍中误差。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.GrossErrorFilter.Rms">
            <summary>
            中误差。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.GrossErrorFilter.ThresholdTimes">
            <summary>
            中误差倍数
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.GrossErrorFinder">
            <summary>
            线性粗差探测器。
            从粗差列表、数组中，找出粗差。
            在相同的测量条件下的测量值序列中，超过n（3、4或2）倍中误差的测量误差
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GrossErrorFinder.#ctor(System.Double,System.Int32)">
            <summary>
            线性粗差探测器。构造函数。
            </summary>
            <param name="ThresholdTimes"></param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GrossErrorFinder.SetRms(System.Double[])">
            <summary>
            计算中误差并赋值。
            </summary>
            <param name="errors">误差序列</param>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GrossErrorFinder.IsGrossError(System.Double)">
            <summary>
            是否是粗差。与 N 倍中误差比较，是否大于阈值。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GrossErrorFinder.Find(System.Double[])">
            <summary>
            查找出粗差
            </summary>
            <param name="errors">误数组</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GrossErrorFinder.UpdateThreshold">
            <summary>
            更新粗差阈值
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.GrossErrorFinder.GetSmartData(System.Double[],System.Collections.Generic.Dictionary{System.Int32,System.Double})">
            <summary>
            得到过滤后的数据
            </summary>
            <param name="data">待处理数据</param>
            <param name="grosses">粗差字典</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.Adjust.GrossErrorFinder.LimitError">
            <summary>
            限差。一般为 3 倍中误差。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.GrossErrorFinder.Rms">
            <summary>
            中误差。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.GrossErrorFinder.ThresholdTimes">
            <summary>
            中误差倍数
            </summary>
        </member>
        <member name="T:Geo.Algorithm.Adjust.ResidualAnalysiser">
            <summary>
            残差分析结果
            </summary>
        </member>
        <member name="M:Geo.Algorithm.Adjust.ResidualAnalysiser.#ctor(System.Double[])">
            <summary>
            构造函数
            </summary>
            <param name="residuals">数据残差</param>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ResidualAnalysiser.Residuals">
            <summary>
            残差
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ResidualAnalysiser.AverageOfAbs">
            <summary>
            绝对值的平均值。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ResidualAnalysiser.Rms">
            <summary>
            均方根
            </summary>
        </member>
        <member name="P:Geo.Algorithm.Adjust.ResidualAnalysiser.Count">
            <summary>
            分析数据的数量。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.YGetter">
            <summary>
            简单的双精度输入与输出。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.YGetter.GetY(System.Double)">
            <summary>
            获取对应的Y值
            </summary>
            <param name="xValue"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Algorithm.IGetYDY">
            <summary>
            加入速度获取量
            </summary>
        </member>
        <member name="M:Geo.Algorithm.IGetYDY.GetDy(System.Double)">
            <summary>
            获取Y的变化，即速度
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Algorithm.IInterpolationCaller">
            <summary>
            插值调用器
            </summary>
        </member>
        <member name="P:Geo.Algorithm.IInterpolationCaller.InterpolationType">
            <summary>
            插值类型
            </summary>
        </member>
        <member name="P:Geo.Algorithm.IInterpolationCaller.Order">
            <summary>
            阶次
            </summary>
        </member>
        <member name="T:Geo.Algorithm.InterpolationType">
            <summary>
            插值类型。
            </summary>
        </member>
        <member name="F:Geo.Algorithm.InterpolationType.LagrangeInterplation">
            <summary>
            拉格朗日插值
            </summary>
        </member>
        <member name="F:Geo.Algorithm.InterpolationType.ChebyshevPolyFit">
            <summary>
            切比雪夫拟合插值
            </summary>
        </member>
        <member name="T:Geo.Algorithm.LagrangeInterplation">
            <summary>
            拉格朗日多项式插值 
            </summary>
        </member>
        <member name="M:Geo.Algorithm.LagrangeInterplation.#ctor(System.Double[],System.Int32)">
            <summary>
            构造函数。
            </summary>
            <param name="yArray"></param>
            <param name="order"></param>
        </member>
        <member name="M:Geo.Algorithm.LagrangeInterplation.#ctor(System.Double[],System.Double[],System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="xArray">应该是递增的值</param>
            <param name="yArray">函数值</param>
            <param name="order">阶次</param>
        </member>
        <member name="M:Geo.Algorithm.LagrangeInterplation.GetY(System.Double)">
            <summary>
            插值
            </summary>
            <param name="xValue"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.LagrangeInterplation.GetYdY(System.Double,System.Double@,System.Double@)">
            <summary>
            插值，返回 the value of Y(x) and dY(X)/dX
            Assumes that xValue is between X[k-1] and X[k] ,where k=N/2
            Warning: for use with the precise(sp3) ephemeris only when velocity is not avilable estimates of velocity , and especially clock drift, not as accurate.
            Cui Yang, 2014.06.09
            </summary>
            <param name="xValue"></param>
            <param name="Y">位置</param>
            <param name="dYdX">速度，单位Km</param>
        </member>
        <member name="M:Geo.Algorithm.LagrangeInterplation.GetNearstIndexes(System.Double[],System.Double,System.Int32)">
            <summary>
            获取指定数组中与 X 最相近的数组编号。 
            </summary>
            <param name="XArray">递增或递减数组</param>
            <param name="xValue"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.LagrangeInterplation.Linear(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Linear interpolation at coeffOfParams single point x.
            </summary>
            <param name="x">double</param>
            <param name="x0">double</param>
            <param name="x1">double</param>
            <param name="y0">double</param>
            <param name="y1">double</param>
            <returns>double</returns>
        </member>
        <member name="M:Geo.Algorithm.LagrangeInterplation.LagrangeInterp(System.Double[],System.Double[],System.Double)">
            <summary>
            Lagrange polynomial interpolation at coeffOfParams single point x. Because Lagrange polynomials tend to be ill behaved, this method should be used with care.
            A LagrangeInterpolator object should be used if multiple interpolations are to be performed using the same data
            </summary>
            <param name="xArray">the x data</param>
            <param name="yArray">the y data</param>
            <param name="x">double</param>
            <returns>double</returns>
        </member>
        <member name="M:Geo.Algorithm.LagrangeInterplation.Lagrange(System.Double[],System.Double[],System.Double)">
            <summary>
            拉格朗日插值
            </summary>
            <param name="xs"></param>
            <param name="ys"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.LagrangeInterplation.Lagrange(System.Double[],System.Double[],System.Double,System.Double@,System.Double@)">
            <summary>
            拉格朗日插值 崔阳
            </summary>
            <param name="xs"></param>
            <param name="ys"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="dydx"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.LagrangeInterplation.XArray">
            <summary>
            X各点坐标组成的数组
            </summary>
        </member>
        <member name="P:Geo.Algorithm.LagrangeInterplation.YArray">
            <summary>
            X各点对应的Y坐标值组成的数组
            </summary>
        </member>
        <member name="P:Geo.Algorithm.LagrangeInterplation.Order">
            <summary>
            多项式的阶次
            </summary>
        </member>
        <member name="P:Geo.Algorithm.LagrangeInterplation.XCount">
            <summary>
            x数组或者y数组中元素的个数, 注意两个数组中的元素个数需要一样
            </summary>
        </member>
        <member name="T:Geo.Algorithm.QuadraticLagrangeInterp">
            <summary>
            根据离散点进行二次的拉格朗日插值。每次自动筛选三个点。
            http://www.cnblogs.com/technology
            </summary>
        </member>
        <member name="M:Geo.Algorithm.QuadraticLagrangeInterp.#ctor(System.Double[],System.Double[])">
            <summary>
            初始化拉格朗日插值
            </summary>
            <param name="xArray">X各点坐标组成的数组</param>
            <param name="yArray">X各点对应的Y坐标值组成的数组</param>
        </member>
        <member name="M:Geo.Algorithm.QuadraticLagrangeInterp.GetY(System.Double)">
            <summary>
            获得某个横坐标对应的Y坐标值
            </summary>
            <param name="xValue">x坐标值</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.QuadraticLagrangeInterp.XArray">
            <summary>
            X各点坐标组成的数组
            </summary>
        </member>
        <member name="P:Geo.Algorithm.QuadraticLagrangeInterp.YArray">
            <summary>
            X各点对应的Y坐标值组成的数组
            </summary>
        </member>
        <member name="P:Geo.Algorithm.QuadraticLagrangeInterp.XCount">
            <summary>
            x数组或者y数组中元素的个数, 注意两个数组中的元素个数需要一样
            </summary>
        </member>
        <member name="T:Geo.Algorithm.PolyVal">
            <summary>
            多项式求值。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.PolyVal.#ctor(System.Double[])">
            <summary>
            求多项式值。
            yi = a0 * xi^0 + a1 * xi^1 + a2 * xi^2 + a3 *  xi^3 + ... + an * xi^n 
            参数顺序与matlab不同，为从低到高，即最后一位为0阶次的数字。
            </summary>
            <param name="paramArray"></param> 
        </member>
        <member name="M:Geo.Algorithm.PolyVal.GetYArray(System.Double[])">
            <summary>
            多项式对应的Y值数组。
            {y0, y1, y2,...,yn} 
            </summary>
            <param name="xArray"></param>
        </member>
        <member name="M:Geo.Algorithm.PolyVal.GetY(System.Double)">
            <summary>
            求多项式值。
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.PolyVal.GetYArray(System.Double[],System.Double[])">
            <summary>
            求多项式值。
            参数顺序与matlab不同，为从低到高，即最后一位为0阶次的数字。
            </summary>
            <param name="paramArray"></param>
            <param name="xArray"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.PolyVal.GetY(System.Double[],System.Double)">
            <summary>
             求多项式值。
             参数顺序与matlab不同，为从低到高，即最后一位为0阶次的数字。
            </summary>
            <param name="paramArray"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Algorithm.CovariancedValue`1">
            <summary>
            具有权值的值。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.ICovarianced">
            <summary>
            具有协方差矩阵的对象接口
            </summary>
        </member>
        <member name="P:Geo.Algorithm.ICovarianced.Covariance">
            <summary>
            协方差
            </summary>
        </member>
        <member name="M:Geo.Algorithm.CovariancedValue`1.#ctor(`0,Geo.Algorithm.IMatrix)">
            <summary>
            构造函数。
            </summary>
            <param name="currentVal">数值</param>
            <param name="weight">每个分量的均方根</param>
        </member>
        <member name="P:Geo.Algorithm.CovariancedValue`1.Covariance">
            <summary>
            RMS 属性
            </summary>
        </member>
        <member name="T:Geo.Algorithm.CovariancedVector">
            <summary>
            具有权值的值。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.CovariancedVector.#ctor(Geo.Algorithm.IVector,Geo.Algorithm.IMatrix)">
            <summary>
            构造函数。
            </summary>
            <param name="currentVal">数值</param>
            <param name="weight">每个分量的均方根</param>
        </member>
        <member name="P:Geo.Algorithm.CovariancedVector.Covariance">
            <summary>
            RMS 属性
            </summary>
        </member>
        <member name="T:Geo.Algorithm.IInverseWeighted">
            <summary>
            具有权逆阵的对象接口
            </summary>
        </member>
        <member name="P:Geo.Algorithm.IInverseWeighted.InverseWeight">
            <summary>
            权逆阵
            </summary>
        </member>
        <member name="T:Geo.Algorithm.ConstMatrix">
            <summary>
            全 同一数字常量 矩阵。节约内存，快速计算。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.ConstMatrix.#ctor(System.Int32,System.Double)">
            <summary>
            初始化一个全 同一数字常量 方阵。
            </summary>
            <param name="rowCol"></param>
        </member>
        <member name="M:Geo.Algorithm.ConstMatrix.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            初始化全 同一数字常量 矩阵
            </summary>
            <param name="rowCount">行数</param>
            <param name="colCount">列数</param>
        </member>
        <member name="P:Geo.Algorithm.ConstMatrix.Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="P:Geo.Algorithm.ConstMatrix.Array">
            <summary>
            请后面的同志去实现吧!!
            </summary>
        </member>
        <member name="P:Geo.Algorithm.ConstMatrix.ItemCount">
            <summary>
            所有元素总和。指有效的内容表示数，矩阵内容必须的数。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.DiagonalMatrix">
            <summary>
             对角矩阵，以一个一维数组存储对角线的矩阵。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.DiagonalMatrix.#ctor(System.Int32,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="dimension">维数</param>
            <param name="initVal">初始值</param>
        </member>
        <member name="M:Geo.Algorithm.DiagonalMatrix.#ctor(System.Double[],System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="diagonalVector">对角一维数组</param>
        </member>
        <member name="M:Geo.Algorithm.DiagonalMatrix.#ctor(Geo.Algorithm.IVector,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="diagonalVector">对角一维数组</param>
        </member>
        <member name="M:Geo.Algorithm.DiagonalMatrix.#ctor(System.Double[][])">
            <summary>
            构造函数
            </summary>
            <param name="matrix">二维数组</param>
        </member>
        <member name="M:Geo.Algorithm.DiagonalMatrix.SetValue(System.Int32,System.Double)">
            <summary>
            直接设置
            </summary>
            <param name="rowOrColIndex"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.Algorithm.DiagonalMatrix.GetInverse">
            <summary>
            矩阵求逆。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.DiagonalMatrix.Clone">
            <summary>
            完全克隆
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.DiagonalMatrix.Multiply(System.Double)">
            <summary>
            数乘
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.DiagonalMatrix.GetPlus(Geo.Algorithm.DiagonalMatrix)">
            <summary>
            矩阵与矩阵的加法运算
            </summary>
            <param name="right">右边</param>
            <returns>返回新的结果矩阵</returns>
        </member>
        <member name="M:Geo.Algorithm.DiagonalMatrix.GetPlus(Geo.Algorithm.SymmetricMatrix)">
            <summary>
            矩阵与矩阵的加法运算
            </summary>
            <param name="right">右边</param>
            <returns>返回新的结果矩阵</returns>
        </member>
        <member name="M:Geo.Algorithm.DiagonalMatrix.Multiply(Geo.Algorithm.VectorMatrix)">
            <summary>
            返回新的乘法结果。
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.DiagonalMatrix.GetDiagonal">
            <summary>
            获取对角向量
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.DiagonalMatrix.Vector">
            <summary>
            对角向量，本对象特有属性。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.DiagonalMatrix.RowCount">
            <summary>
            行数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.DiagonalMatrix.ColCount">
            <summary>
            列数量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.DiagonalMatrix.Array">
            <summary>
            返回二维数组
            </summary>
        </member>
        <member name="P:Geo.Algorithm.DiagonalMatrix.IsSymmetric">
            <summary>
            是否对称
            </summary>
        </member>
        <member name="P:Geo.Algorithm.DiagonalMatrix.Item(System.Int32,System.Int32)">
            <summary>
            检索器
            </summary>
            <param name="i">行号</param>
            <param name="j">列号</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.DiagonalMatrix.Item(System.Int32)">
            <summary>
            索引
            </summary>
            <param name="rowOrColIndex"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.DiagonalMatrix.Transposition">
            <summary>
            转置
            </summary>
        </member>
        <member name="T:Geo.Algorithm.SLJ_Inverse">
            <summary>
            借用的宋立杰的对称矩阵求逆算法。
            
            </summary>
        </member>
        <member name="M:Geo.Algorithm.SLJ_Inverse.#ctor(Geo.Algorithm.ArrayMatrix)">
            <summary>Construct a LU decomposition.借用的宋立杰的对称矩阵求逆算法。</summary>	
        </member>
        <member name="M:Geo.Algorithm.SLJ_Inverse.Solve(Geo.Algorithm.ArrayMatrix)">
            <summary>Solves a set of equation systems of type <c>A * X = B</c>.</summary>
            <param name="B">Right hand side matrix with as many rows as <c>A</c> and any number of columns.</param>
            <returns>Matrix <c>X</c> so that <c>L * U * X = B</c>.</returns>
        </member>
        <member name="P:Geo.Algorithm.SLJ_Inverse.IsNonSingular">
            <summary>Returns if the matrix is non-singular.</summary>
        </member>
        <member name="P:Geo.Algorithm.SLJ_Inverse.Determinant">
            <summary>Returns the determinant of the matrix.</summary>
        </member>
        <member name="P:Geo.Algorithm.SLJ_Inverse.PivotPermutationVector">
            <summary>Returns the pivot permuation vector.</summary>
        </member>
        <member name="T:Geo.Algorithm.DoubleKeyDictionary`2">
            <summary>
            双键字典类
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Geo.Algorithm.DoubleKeyDictionary`2.SetValue(`0,`0,`1)">
            <summary>
            设置值
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.Algorithm.DoubleKeyDictionary`2.GetValue(`0,`0)">
            <summary>
            直接获取数值，速度最快，但是可能出错。
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.DoubleKeyDictionary`2.TryGetValue(`0,`0)">
            <summary>
            判断后获取，如果失败则返回默认值。
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Algorithm.SparseMatrix">
            <summary>
             稀疏矩阵存储器
             以二进制文件形式保存。
             格式定义：1. 前3个为int，分别指行、列和集合数量；2.后面子项集合，分别为行（int）列（int）标号和双精度值。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.SparseMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.Algorithm.SparseMatrix.#ctor(System.Double[][])">
            <summary>
            稀疏矩阵存储器
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:Geo.Algorithm.SparseMatrix.GetMatrix">
            <summary>
            获取二维数组矩阵。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.SparseMatrix.ToBinary(System.String)">
            <summary>
            以二进制文件形式保存。
            格式定义：1. 前3个为int，分别指行、列和集合数量；2.后面子项集合，分别为行（int）列（int）标号和双精度值。
            </summary> 
            <param name="path">路径</param>
        </member>
        <member name="M:Geo.Algorithm.SparseMatrix.FromBinary(System.String)">
            <summary>
            从二进制文件中读取。
             格式定义：1. 前3个为int，分别指行、列和集合数量；2.后面子项集合，分别为行（int）列（int）标号和双精度值。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.SparseMatrix.Add(System.Int32,System.Int32,System.Double)">
            <summary>
            增加一个，如已有，则覆盖。
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:Geo.Algorithm.SparseMatrix.RowCount">
            <summary>
            行数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.SparseMatrix.ColCount">
            <summary>
            列数量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.SparseMatrix.MatrixItems">
            <summary>
            非 0 值集合。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.SparseMatrix.Array">
            <summary>
            返回二维数组
            </summary>
        </member>
        <member name="T:Geo.Algorithm.SymmetricMatrix">
            <summary>
             对称矩阵(应该是对称正定矩阵，即对角线全是非零元素，否则不可求逆)，只存储下三角，以一个一维数组存储的矩阵。 宋力杰模式。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.SymmetricMatrix.#ctor(System.Int32,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="dimension">维数</param>
            <param name="initVal">初始值</param>
        </member>
        <member name="M:Geo.Algorithm.SymmetricMatrix.#ctor(System.Double[])">
            <summary>
            构造函数
            </summary>
            <param name="symmetricVector">下三角一维数组</param>
        </member>
        <member name="M:Geo.Algorithm.SymmetricMatrix.#ctor(System.Double[][])">
            <summary>
            构造函数
            </summary>
            <param name="matrix">二维数组</param>
        </member>
        <member name="M:Geo.Algorithm.SymmetricMatrix.GetInverse">
            <summary>
            矩阵求逆。
            参照宋力杰的红包书提供的求逆方法。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.SymmetricMatrix.Inverse">
            <summary>
            求逆
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.SymmetricMatrix.Clone">
            <summary>
            完全克隆
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.SymmetricMatrix.Plus(Geo.Algorithm.IMatrix)">
            <summary>
            分多种情况，如果是对称阵，则计算一般就可以了，如果是对角阵，则只计算对角。
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.SymmetricMatrix.GetPlus(Geo.Algorithm.SymmetricMatrix)">
            <summary>
            矩阵与矩阵的加法运算
            </summary>
            <param name="right">右边</param>
            <returns>返回新的结果矩阵</returns>
        </member>
        <member name="M:Geo.Algorithm.SymmetricMatrix.GetPlus(Geo.Algorithm.DiagonalMatrix)">
            <summary>
            矩阵与矩阵的加法运算
            </summary>
            <param name="right">右边</param>
            <returns>返回新的结果矩阵</returns>
        </member>
        <member name="M:Geo.Algorithm.SymmetricMatrix.GetIndex(System.Int32,System.Int32)">
            <summary>
            获取下标
            </summary>
            <param name="rowIndex"></param>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.SymmetricMatrix.GetDiagonalIndex(System.Int32)">
            <summary>
            获取对角线对应的一维数组下标。
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.SymmetricMatrix.GetMinus(Geo.Algorithm.SymmetricMatrix)">
            <summary>
            矩阵与矩阵的加法运算
            </summary>
            <param name="right">右边</param>
            <returns>返回新的结果矩阵</returns>
        </member>
        <member name="M:Geo.Algorithm.SymmetricMatrix.GetMinus(Geo.Algorithm.DiagonalMatrix)">
            <summary>
            矩阵与矩阵的加法运算
            </summary>
            <param name="right">右边</param>
            <returns>返回新的结果矩阵</returns>
        </member>
        <member name="M:Geo.Algorithm.SymmetricMatrix.Equals(System.Object)">
            <summary>
            等于
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.SymmetricMatrix.Equals(Geo.Algorithm.SymmetricMatrix)">
            <summary>
            等于
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.SymmetricMatrix.GetHashCode">
            <summary>
            哈希数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.SymmetricMatrix.ToString">
            <summary>
            打印输出
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.SymmetricMatrix.GetDiagonal">
            <summary>
            获取对角向量
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.SymmetricMatrix.Vector">
            <summary>
            一维数组表示的矩阵
            </summary>
        </member>
        <member name="P:Geo.Algorithm.SymmetricMatrix.ItemCount">
            <summary>
            数量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.SymmetricMatrix.RowCount">
            <summary>
            行数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.SymmetricMatrix.ColCount">
            <summary>
            列数量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.SymmetricMatrix.Array">
            <summary>
            返回二维数组
            </summary>
        </member>
        <member name="P:Geo.Algorithm.SymmetricMatrix.IsSymmetric">
            <summary>
            是否对称
            </summary>
        </member>
        <member name="P:Geo.Algorithm.SymmetricMatrix.Item(System.Int32,System.Int32)">
            <summary>
            检索器
            </summary>
            <param name="i">行号</param>
            <param name="j">列号</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.SymmetricMatrix.Transposition">
            <summary>
            转置相同。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.ZeroMatrix">
            <summary>
            全 0 矩阵。节约内存，快速计算。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.ZeroMatrix.#ctor(System.Int32)">
            <summary>
            初始化一个全 0 方阵。
            </summary>
            <param name="rowCol"></param>
        </member>
        <member name="M:Geo.Algorithm.ZeroMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            初始化一个全零矩阵。
            </summary>
            <param name="rowCount">行数</param>
            <param name="colCount">列数</param>
        </member>
        <member name="M:Geo.Algorithm.ZeroMatrix.GetMatrix(System.Collections.Generic.List{System.String})">
            <summary>
            获取指定参数的矩阵
            </summary>
            <param name="paramNames">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.ZeroMatrix.SetRowValue(System.Int32,System.Double)">
            <summary>
            设置某行的值为统一的数值
            </summary>
            <param name="rowIndex">行编号</param>
            <param name="currentVal">数值</param>
        </member>
        <member name="M:Geo.Algorithm.ZeroMatrix.SetColValue(System.Int32,System.Double)">
            <summary>
            设置某列的值为统一的数值
            </summary>
            <param name="colIndex">列编号</param>
            <param name="currentVal">数值</param>
        </member>
        <member name="M:Geo.Algorithm.ZeroMatrix.GetMatrix(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            获取指定参数的矩阵
            </summary>
            <param name="rowNames">行参数列表</param>
            <param name="colNames">列参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.ZeroMatrix.ContainsRowName(System.String)">
            <summary>
            是否包含行名称
            </summary>
            <param name="rowName">行名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.ZeroMatrix.ContainsColName(System.String)">
            <summary>
            是否包含列名称
            </summary>
            <param name="colName">列名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.ZeroMatrix.GetRowIndex(System.String)">
            <summary>
            获取行编号
            </summary>
            <param name="paramName">参数名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.ZeroMatrix.GetColIndex(System.String)">
            <summary>
            获取列编号
            </summary>
            <param name="paramName">参数名称</param>
        </member>
        <member name="P:Geo.Algorithm.ZeroMatrix.Item(System.String,System.String)">
            <summary>
            获取指定的元素。
            </summary>
            <param name="rowName">行名称</param>
            <param name="colName">列名称</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.ZeroMatrix.RowNames">
            <summary>
            行名称
            </summary>
        </member>
        <member name="P:Geo.Algorithm.ZeroMatrix.ColNames">
            <summary>
            列名称
            </summary>
        </member>
        <member name="P:Geo.Algorithm.ZeroMatrix.Array">
            <summary>
            请后面的同志去实现吧!!
            </summary>
        </member>
        <member name="P:Geo.Algorithm.ZeroMatrix.ItemCount">
            <summary>
            所有元素总和。指有效的内容表示数，矩阵内容必须的数。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.AbstractBinaryMatrixReader`1">
            <summary>
            矩阵读。
            </summary>
        </member>
        <member name="T:Geo.IO.AbstractBinaryReader`1">
            <summary>
            包含Stream, Encoding属性，用于输入输出。
            </summary>
        </member>
        <member name="T:Geo.IO.AbstractReader`1">
            <summary>
            包含Stream, Encoding属性，用于输入输出。
            适用于整存争取的小文件。
            </summary>
        </member>
        <member name="T:Geo.IO.AbstractEncodedStreamer">
            <summary>
            包含Stream, Encoding属性，用于输入输出。
            </summary>
        </member>
        <member name="T:Geo.IO.AbstractStreamer">
            <summary>
            包含一个Stream属性，用于输入输出。
            </summary>
        </member>
        <member name="T:Geo.IO.IStreamer">
            <summary>
            包含一个Stream属性，用于输入输出。
            </summary>
        </member>
        <member name="M:Geo.IO.IStreamer.Flush">
            <summary>
            将清除该流的所有缓冲区，并使得所有缓冲数据被写入到基础设备。
            </summary>
        </member>
        <member name="M:Geo.IO.IStreamer.Close">
            <summary>
            关闭当前流并释放与之关联的所有资源（如套接字和文件句柄）。
            </summary>
        </member>
        <member name="P:Geo.IO.IStreamer.Stream">
            <summary>
            数据流。
            </summary>
        </member>
        <member name="M:Geo.IO.AbstractStreamer.#ctor(System.IO.Stream)">
            <summary>
            构造函数
            </summary>
            <param name="stream">数据流</param>
        </member>
        <member name="M:Geo.IO.AbstractStreamer.Flush">
            <summary>
            将清除该流的所有缓冲区，并使得所有缓冲数据被写入到基础设备。
            </summary>
        </member>
        <member name="M:Geo.IO.AbstractStreamer.Close">
            <summary>
            关闭当前流并释放与之关联的所有资源（如套接字和文件句柄）。
            </summary>
        </member>
        <member name="M:Geo.IO.AbstractStreamer.Dispose">
            <summary>
            关闭当前流并释放与之关联的所有资源
            </summary>
        </member>
        <member name="P:Geo.IO.AbstractStreamer.Stream">
            <summary>
            数据流。
            </summary>
        </member>
        <member name="T:Geo.IO.IEncodedStreamer">
            <summary>
            包含Stream, Encoding属性，用于输入输出。
            </summary>
        </member>
        <member name="P:Geo.IO.IEncodedStreamer.Encoding">
            <summary>
            数据流。
            </summary>
        </member>
        <member name="M:Geo.IO.AbstractEncodedStreamer.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            构造函数
            </summary>
            <param name="stream">数据流</param>
        </member>
        <member name="P:Geo.IO.AbstractEncodedStreamer.Encoding">
            <summary>
            字符编码
            </summary>
        </member>
        <member name="T:Geo.IO.IReader`1">
            <summary>
            包含Stream, Encoding属性，用于输入输出。
            适用于整存争取的小文件。
            </summary>
        </member>
        <member name="M:Geo.IO.IReader`1.Read">
            <summary>
            读取一个。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.AbstractReader`1.#ctor(System.String,System.Text.Encoding)">
            <summary>
            本地文件读取
            </summary>
            <param name="path"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Geo.IO.AbstractReader`1.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            构造函数
            </summary>
            <param name="stream">数据流</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Geo.IO.AbstractReader`1.Read">
            <summary>
            读取一个到数据流。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.AbstractBinaryReader`1.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            构造函数
            </summary>
            <param name="stream">数据流</param>
        </member>
        <member name="P:Geo.IO.AbstractBinaryReader`1.BinaryReader">
            <summary>
            读入器
            </summary>
        </member>
        <member name="M:Geo.Algorithm.AbstractBinaryMatrixReader`1.#ctor(System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:Geo.Algorithm.AbstractBinaryMatrixReader`1.#ctor(System.IO.Stream)">
            <summary>
            构造函数。
            </summary>
            <param name="Stream">数据流</param>
        </member>
        <member name="T:Geo.Algorithm.AbstractBinaryMatrixReader`2">
            <summary>
            矩阵读。
            </summary>
        </member>
        <member name="T:Geo.IO.AbstractBinaryReader`2">
            <summary>
            包含Stream, Encoding属性，用于输入输出。
            </summary>
        </member>
        <member name="T:Geo.IO.AbstractReader`2">
            <summary>
            包含Stream, Encoding属性，用于输入输出。
            </summary>
        </member>
        <member name="T:Geo.IO.IReader`2">
            <summary>
            包含Stream, Encoding属性，用于输入输出。
            适用于整存争取的小文件。
            </summary>
        </member>
        <member name="M:Geo.IO.IReader`2.Read(`1)">
            <summary>
            读取一个。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.AbstractReader`2.#ctor(System.String,System.Text.Encoding)">
            <summary>
            本地文件读取
            </summary>
            <param name="path"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Geo.IO.AbstractReader`2.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            构造函数
            </summary>
            <param name="stream">数据流</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Geo.IO.AbstractReader`2.Read(`1)">
            <summary>
            读取一个到数据流。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.AbstractBinaryReader`2.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            构造函数
            </summary>
            <param name="stream">数据流</param>
        </member>
        <member name="P:Geo.IO.AbstractBinaryReader`2.BinaryReader">
            <summary>
            读入器
            </summary>
        </member>
        <member name="M:Geo.Algorithm.AbstractBinaryMatrixReader`2.#ctor(System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:Geo.Algorithm.AbstractBinaryMatrixReader`2.#ctor(System.IO.Stream)">
            <summary>
            构造函数。
            </summary>
            <param name="Stream">数据流</param>
        </member>
        <member name="T:Geo.Algorithm.AbstractBinaryMatrixWriter`1">
            <summary>
            矩阵写。
            </summary>
        </member>
        <member name="T:Geo.IO.AbstractBinaryWriter`1">
            <summary>
            包含Stream, Encoding属性，用于输入输出。
            </summary>
        </member>
        <member name="T:Geo.IO.AbstractWriter`1">
            <summary>
            包含Stream, Encoding属性，用于输入输出。
            </summary>
        </member>
        <member name="T:Geo.IO.IWriter`1">
            <summary>
            包含Stream, Encoding属性，用于输入输出。
            </summary>
        </member>
        <member name="M:Geo.IO.IWriter`1.Write(`0)">
            <summary>
            写入一个到数据流。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.AbstractWriter`1.#ctor(System.String,System.Text.Encoding)">
            <summary>
            构造函数
            </summary>
            <param name="path">数据流</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Geo.IO.AbstractWriter`1.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            构造函数
            </summary>
            <param name="stream">数据流</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Geo.IO.AbstractWriter`1.Init">
            <summary>
            初始化，在构造函数之后执行
            </summary>
        </member>
        <member name="M:Geo.IO.AbstractWriter`1.Write(`0)">
            <summary>
            写入一个到数据流。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.IO.AbstractWriter`1.StreamWriter">
            <summary>
            写
            </summary>
        </member>
        <member name="M:Geo.IO.AbstractBinaryWriter`1.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            构造函数
            </summary>
            <param name="stream">数据流</param>
        </member>
        <member name="P:Geo.IO.AbstractBinaryWriter`1.BinaryWriter">
            <summary>
            二进制写入器
            </summary>
        </member>
        <member name="M:Geo.Algorithm.AbstractBinaryMatrixWriter`1.#ctor(System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:Geo.Algorithm.AbstractBinaryMatrixWriter`1.#ctor(System.IO.Stream)">
            <summary>
            构造函数。
            </summary>
            <param name="Stream">数据流</param>
        </member>
        <member name="T:Geo.Algorithm.BinaryMatrixReader">
            <summary>
            矩阵写。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.BinaryMatrixReader.#ctor(System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:Geo.Algorithm.BinaryMatrixReader.#ctor(System.IO.Stream)">
            <summary>
            构造函数。
            </summary>
            <param name="Stream">数据流</param>
        </member>
        <member name="M:Geo.Algorithm.BinaryMatrixReader.SkipHeader">
            <summary>
            数据流标识跳到内容起始位置  BinarySpliter.StartOfContent
            下一步直接读取内容。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.BinaryMatrixWriter">
            <summary>
            矩阵写。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.BinaryMatrixWriter.#ctor(System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:Geo.Algorithm.BinaryMatrixWriter.#ctor(System.IO.Stream)">
            <summary>
            构造函数。
            </summary>
            <param name="Stream">数据流</param>
        </member>
        <member name="M:Geo.Algorithm.BinaryMatrixWriter.WriteMatrix(Geo.Algorithm.IMatrix)">
            <summary>
            只写矩数据阵内容本身
            </summary>
            <param name="product">矩阵</param>
        </member>
        <member name="T:Geo.Algorithm.BinarySpliter">
            <summary>
            二进制分隔符
            </summary>
        </member>
        <member name="P:Geo.Algorithm.BinarySpliter.StartOfFile">
            <summary>
            二进制文件的开始
            </summary>
        </member>
        <member name="P:Geo.Algorithm.BinarySpliter.StartOfBlock">
            <summary>
            块的开始
            </summary>
        </member>
        <member name="P:Geo.Algorithm.BinarySpliter.StartOfHeader">
            <summary>
            头部信息的开始
            </summary>
        </member>
        <member name="P:Geo.Algorithm.BinarySpliter.EndOfHeader">
            <summary>
            头部信息的结束
            </summary>
        </member>
        <member name="P:Geo.Algorithm.BinarySpliter.StartOfContent">
            <summary>
            主题内容部分的开始
            </summary>
        </member>
        <member name="P:Geo.Algorithm.BinarySpliter.EndOfContent">
            <summary>
            主题内容部分的结束
            </summary>
        </member>
        <member name="P:Geo.Algorithm.BinarySpliter.EndOfBlock">
            <summary>
            块的结束
            </summary>
        </member>
        <member name="P:Geo.Algorithm.BinarySpliter.EndOfFile">
            <summary>
            二进制文件的开始
            </summary>
        </member>
        <member name="T:Geo.Algorithm.BinaryArrayMatrixReader">
            <summary>
            二维矩阵原生态（无压缩）读取。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.BinaryArrayMatrixReader.#ctor(System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:Geo.Algorithm.BinaryArrayMatrixReader.#ctor(System.IO.Stream)">
            <summary>
            构造函数。
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:Geo.Algorithm.BinaryArrayMatrixReader.Read(Geo.Algorithm.MatrixHeader)">
            <summary>
            写方法。Version 1.
            </summary>
        </member>
        <member name="T:Geo.Algorithm.BinaryArrayMatrixWriter">
            <summary>
            二维矩阵原生态写。
            可选是否采用单精度翅膀压缩方法。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.BinaryArrayMatrixWriter.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数。
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:Geo.Algorithm.BinaryArrayMatrixWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            构造函数。
            </summary>
            <param name="Stream">文件路径</param>
            <param name="IsFloatWingCompress">文件路径</param>
        </member>
        <member name="M:Geo.Algorithm.BinaryArrayMatrixWriter.Write(Geo.Algorithm.IMatrix)">
            <summary>
            写方法。Version 1.
            内容区：
            第1个数为byte，表示矩阵文件的版本，对应数字 1-255
            第2个数为byte，表示矩阵的类型，对应C#的枚举类型
            第3、4个数为int32，分别表示 矩阵的行和列。
            第5个开始为浮点数（双精度、单精度或整型）记录
            </summary>
            <param name="matrix">待写成文件的矩阵。</param>
        </member>
        <member name="P:Geo.Algorithm.BinaryArrayMatrixWriter.IsFloatWingCompress">
            <summary>
            是否采用两翼Float压缩法。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.BinaryDiagonalMatrixReader">
            <summary>
            对角阵读取。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.BinaryDiagonalMatrixReader.#ctor(System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:Geo.Algorithm.BinaryDiagonalMatrixReader.#ctor(System.IO.Stream)">
            <summary>
            构造函数。
            </summary>
            <param name="Stream">文件路径</param>
        </member>
        <member name="M:Geo.Algorithm.BinaryDiagonalMatrixReader.Read(Geo.Algorithm.MatrixHeader)">
            <summary>
            写方法。Version 1.
            内容区：
            第1个数为byte，表示矩阵文件的版本，对应数字 1-255
            第2个数为byte，表示矩阵的类型，对应C#的枚举类型
            第3、4个数为int32，分别表示 矩阵的行和列。
            第5个开始为浮点数（双精度、单精度或整型）记录
            </summary>
        </member>
        <member name="T:Geo.Algorithm.BinaryDiagonalMatrixWriter">
            <summary>
            对角阵写入。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.BinaryDiagonalMatrixWriter.#ctor(System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:Geo.Algorithm.BinaryDiagonalMatrixWriter.#ctor(System.IO.Stream)">
            <summary>
            构造函数。
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="T:Geo.Algorithm.BinarySparseMatrixReader">
            <summary>
            对角阵读取。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.BinarySparseMatrixReader.#ctor(System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:Geo.Algorithm.BinarySparseMatrixReader.#ctor(System.IO.Stream)">
            <summary>
            构造函数。
            </summary>
            <param name="Stream">文件路径</param>
        </member>
        <member name="M:Geo.Algorithm.BinarySparseMatrixReader.Read(Geo.Algorithm.MatrixHeader)">
            <summary>
            写方法。Version 1. 
            </summary>
        </member>
        <member name="T:Geo.Algorithm.BinarySparseMatrixWriter">
            <summary>
            对角阵写入。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.BinarySparseMatrixWriter.#ctor(System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:Geo.Algorithm.BinarySparseMatrixWriter.#ctor(System.IO.Stream)">
            <summary>
            构造函数。
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="T:Geo.Algorithm.BinarySymmetricMatrixReader">
            <summary>
            对角阵读取。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.BinarySymmetricMatrixReader.#ctor(System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:Geo.Algorithm.BinarySymmetricMatrixReader.#ctor(System.IO.Stream)">
            <summary>
            构造函数。
            </summary>
            <param name="Stream">文件路径</param>
        </member>
        <member name="M:Geo.Algorithm.BinarySymmetricMatrixReader.Read(Geo.Algorithm.MatrixHeader)">
            <summary>
            写方法。Version 1. 
            </summary>
        </member>
        <member name="T:Geo.Algorithm.BinarySymmetricMatrixWriter">
            <summary>
            对角阵写入。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.BinarySymmetricMatrixWriter.#ctor(System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:Geo.Algorithm.BinarySymmetricMatrixWriter.#ctor(System.IO.Stream)">
            <summary>
            构造函数。
            </summary>
            <param name="Stream">文件路径</param>
        </member>
        <member name="M:Geo.Algorithm.BinarySymmetricMatrixWriter.WriteMatrix(Geo.Algorithm.IMatrix)">
            <summary>
            写矩阵
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="T:Geo.Algorithm.BinaryMatrixHeaderReader">
            <summary>
            矩阵头文件。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.BinaryMatrixHeaderReader.#ctor(System.String)">
            <summary>
            构造函数。
            </summary> 
        </member>
        <member name="M:Geo.Algorithm.BinaryMatrixHeaderReader.#ctor(System.IO.Stream)">
            <summary>
            构造函数。
            </summary> 
        </member>
        <member name="T:Geo.Algorithm.BinaryMatrixHeaderWriter">
            <summary>
            矩阵头文件。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.BinaryMatrixHeaderWriter.#ctor(System.String)">
            <summary>
            构造函数。
            </summary> 
        </member>
        <member name="M:Geo.Algorithm.BinaryMatrixHeaderWriter.#ctor(System.IO.Stream)">
            <summary>
            构造函数。
            </summary> 
        </member>
        <member name="T:Geo.Algorithm.MatrixHeader">
            <summary>
            矩阵头文件。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.MatrixHeader.#ctor(Geo.Algorithm.MatrixType,System.String)">
            <summary>
            构造函数。
            </summary> 
        </member>
        <member name="P:Geo.Algorithm.MatrixHeader.Comments">
            <summary>
            头文件注释
            </summary>
        </member>
        <member name="P:Geo.Algorithm.MatrixHeader.RowCount">
            <summary>
            行数量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.MatrixHeader.ColCount">
            <summary>
            列数量
            </summary>
        </member>
        <member name="P:Geo.Algorithm.MatrixHeader.ContentCount">
            <summary>
            矩阵数据数量。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.MatrixHeader.MatrixType">
            <summary>
            矩阵存储类型。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.MatrixHeader.Version">
            <summary>
            矩阵存储版本
            </summary>
        </member>
        <member name="P:Geo.Algorithm.MatrixHeader.Name">
            <summary>
            矩阵的名称，请使用英文或拼音，中文可能出错。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.MatrixHeader.CreationTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Geo.Algorithm.MatrixHeader.Creator">
            <summary>
            创建者，创建机构。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.MatrixType">
            <summary>
            矩阵数据结构类型。默认以Double形式表示。
            </summary>
        </member>
        <member name="F:Geo.Algorithm.MatrixType.Unknow">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:Geo.Algorithm.MatrixType.Array">
            <summary>
            二维数组
            </summary>
        </member>
        <member name="F:Geo.Algorithm.MatrixType.Vector">
            <summary>
            一维数组
            </summary>
        </member>
        <member name="F:Geo.Algorithm.MatrixType.Sparse">
            <summary>
            稀疏矩阵
            </summary>
        </member>
        <member name="F:Geo.Algorithm.MatrixType.Float">
            <summary>
            全部由Float数据类型表示的矩阵。
            </summary>
        </member>
        <member name="F:Geo.Algorithm.MatrixType.FloatWing">
            <summary>
            对角线是Double，非对角线是Float类型.
            即具有 float 翅膀。
            </summary>
        </member>
        <member name="F:Geo.Algorithm.MatrixType.Diagonal">
            <summary>
            对角线一维数组
            </summary>
        </member>
        <member name="F:Geo.Algorithm.MatrixType.Symmetric">
            <summary>
            对称矩阵，一般采用一维数据存储
            </summary>
        </member>
        <member name="F:Geo.Algorithm.MatrixType.VectorMatrix">
            <summary>
            只有一列的矩阵，也是向量。
            </summary>
        </member>
        <member name="F:Geo.Algorithm.MatrixType.ZeroMatrix">
            <summary>
            全 0 矩阵
            </summary>
        </member>
        <member name="F:Geo.Algorithm.MatrixType.ConstMatrix">
            <summary>
            全 常数 矩阵
            </summary>
        </member>
        <member name="T:Geo.Algorithm.CholeskyDecomposition">
            <summary>
             乔里斯基分解。	Cholesky Decomposition of a symmetric, positive definite matrix.
            </summary>
            <remarks>
            	For a symmetric, positive definite matrix <c>A</c>, the Cholesky decomposition is a
            	lower triangular matrix <c>L</c> so that <c>A = L * L'</c>.
            	If the matrix is not symmetric or positive definite, the constructor returns a partial 
            	decomposition and sets two internal variables that can be queried using the
            	<see cref="P:Geo.Algorithm.CholeskyDecomposition.IsSymmetric"/> and <see cref="P:Geo.Algorithm.CholeskyDecomposition.IsPositiveDefinite"/> properties.
            </remarks>
        </member>
        <member name="M:Geo.Algorithm.CholeskyDecomposition.#ctor(Geo.Algorithm.Matrix)">
            <summary>Construct a Cholesky Decomposition.</summary>
        </member>
        <member name="M:Geo.Algorithm.CholeskyDecomposition.Solve(Geo.Algorithm.ArrayMatrix)">
            <summary>Solves a set of equation systems of type <c>A * X = B</c>.</summary>
            <param name="rhs">Right hand side matrix with as many rows as <c>A</c> and any number of columns.</param>
            <returns>Matrix <c>X</c> so that <c>L * L' * X = B</c>.</returns>
            <exception cref="T:System.ArgumentException">Matrix dimensions do not match.</exception>
            <exception cref="T:System.InvalidOperationException">Matrix is not symmetrix and positive definite.</exception>
        </member>
        <member name="P:Geo.Algorithm.CholeskyDecomposition.IsSymmetric">
            <summary>Returns <see langword="true"/> if the matrix is symmetric.</summary>
        </member>
        <member name="P:Geo.Algorithm.CholeskyDecomposition.IsPositiveDefinite">
            <summary>Returns <see langword="true"/> if the matrix is positive definite.</summary>
        </member>
        <member name="P:Geo.Algorithm.CholeskyDecomposition.LeftTriangularFactor">
            <summary>Returns the left triangular factor <c>L</c> so that <c>A = L * L'</c>.</summary>
        </member>
        <member name="T:Geo.Algorithm.EigenvalueDecomposition">
            <summary>
            	Determines the eigenvalues and eigenvectors of a real square matrix.
            </summary>
            <remarks>
            	If <c>A</c> is symmetric, then <c>A = V * D * V'</c> and <c>A = V * V'</c>
            	where the eigenvalue matrix <c>D</c> is diagonal and the eigenvector matrix <c>V</c> is orthogonal.
            	If <c>A</c> is not symmetric, the eigenvalue matrix <c>D</c> is block diagonal
            	with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            	<c>lambda+i*mu</c>, in 2-by-2 blocks, <c>[lambda, mu; -mu, lambda]</c>.
            	The columns of <c>V</c> represent the eigenvectors in the sense that <c>A * V = V * D</c>.
            	The matrix V may be badly conditioned, or even singular, so the validity of the equation
            	<c>A=V*D*inverse(V)</c> depends upon the condition of <c>V</c>.
            </remarks>
        </member>
        <member name="M:Geo.Algorithm.EigenvalueDecomposition.#ctor(Geo.Algorithm.ArrayMatrix)">
            <summary>Construct an eigenvalue decomposition.</summary>
        </member>
        <member name="P:Geo.Algorithm.EigenvalueDecomposition.RealEigenvalues">
            <summary>Returns the real parts of the eigenvalues.</summary>
        </member>
        <member name="P:Geo.Algorithm.EigenvalueDecomposition.ImaginaryEigenvalues">
            <summary>Returns the imaginary parts of the eigenvalues.</summary>	
        </member>
        <member name="P:Geo.Algorithm.EigenvalueDecomposition.EigenvectorMatrix">
            <summary>Returns the eigenvector matrix.</summary>
        </member>
        <member name="P:Geo.Algorithm.EigenvalueDecomposition.DiagonalMatrix">
            <summary>Returns the block diagonal eigenvalue matrix.</summary>
        </member>
        <member name="T:Geo.Algorithm.LuDecomposition">
            <summary>
             LU分解。  LU decomposition of a rectangular matrix.
            </summary>
            <remarks>
              For an m-by-n matrix <c>A</c> with m &gt;= n, the LU decomposition is an m-by-n
              unit lower triangular matrix <c>L</c>, an n-by-n upper triangular matrix <c>U</c>,
              and a permutation vector <c>piv</c> of length m so that <c>A(piv)=L*U</c>.
              If m &lt; n, then <c>L</c> is m-by-m and <c>U</c> is m-by-n.
              The LU decompostion with pivoting always exists, even if the matrix is
              singular, so the constructor will never fail.  The primary use of the
              LU decomposition is in the solution of square systems of simultaneous
              linear equations. This will fail if <see cref="P:Geo.Algorithm.LuDecomposition.IsNonSingular"/> returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Geo.Algorithm.LuDecomposition.#ctor(Geo.Algorithm.ArrayMatrix)">
            <summary>Construct a LU decomposition.</summary>	
        </member>
        <member name="M:Geo.Algorithm.LuDecomposition.Solve(Geo.Algorithm.ArrayMatrix)">
            <summary>Solves a set of equation systems of type <c>A * X = B</c>.</summary>
            <param name="B">Right hand side matrix with as many rows as <c>A</c> and any number of columns.</param>
            <returns>Matrix <c>X</c> so that <c>L * U * X = B</c>.</returns>
        </member>
        <member name="P:Geo.Algorithm.LuDecomposition.IsNonSingular">
            <summary>Returns if the matrix is non-singular.</summary>
        </member>
        <member name="P:Geo.Algorithm.LuDecomposition.Determinant">
            <summary>Returns the determinant of the matrix.</summary>
        </member>
        <member name="P:Geo.Algorithm.LuDecomposition.LowerTriangularFactor">
            <summary>Returns the lower triangular factor <c>L</c> with <c>A=LU</c>.</summary>
        </member>
        <member name="P:Geo.Algorithm.LuDecomposition.UpperTriangularFactor">
            <summary>Returns the lower triangular factor <c>L</c> with <c>A=LU</c>.</summary>
        </member>
        <member name="P:Geo.Algorithm.LuDecomposition.PivotPermutationVector">
            <summary>Returns the pivot permuation vector.</summary>
        </member>
        <member name="T:Geo.Algorithm.ArrayMatrix">
            <summary>二维数组表示的矩阵，最通用的矩阵类</summary>
        </member>
        <member name="M:Geo.Algorithm.ArrayMatrix.#ctor(System.Int32,System.Int32)">
            <summary>Constructs an empty matrix of the given aboutSize.</summary>
            <param name="rows">Number of rows.</param>
            <param name="columns">Number of columns.</param>
        </member>
        <member name="M:Geo.Algorithm.ArrayMatrix.#ctor(Geo.Algorithm.IVector)">
            <summary>
            采用向量初始化一个 N x 1 的矩阵。
            </summary>
            <param name="vector">向量</param>
        </member>
        <member name="M:Geo.Algorithm.ArrayMatrix.#ctor(System.Int32,System.Int32,System.Double,System.Boolean)">
            <summary>Constructs a matrix of the given aboutSize and assigns a given value to all diagonal elements.</summary>
            <param name="rows">Number of rows.</param>
            <param name="columns">Number of columns.</param>
            <param name="value">Value to assign to the all of the elements.</param>diagnoal
        </member>
        <member name="M:Geo.Algorithm.ArrayMatrix.#ctor(System.Int32,System.Int32,System.Double[])">
            <summary>
            一维数组存储的二维矩阵
            </summary>
            <param name="rows"></param>
            <param name="columns"></param>
            <param name="value"></param>
        </member>
        <member name="M:Geo.Algorithm.ArrayMatrix.#ctor(System.Double[][])">
            <summary>Constructs a matrix from the given array.</summary>
            <param name="data">The array the matrix gets constructed from.</param>
        </member>
        <member name="M:Geo.Algorithm.ArrayMatrix.Submatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Returns a sub matrix extracted from the current matrix.</summary>
            <param name="i0">Start row index</param>
            <param name="i1">End row index</param>
            <param name="j0">Start column index</param>
            <param name="j1">End column index</param>
        </member>
        <member name="M:Geo.Algorithm.ArrayMatrix.Submatrix(System.Int32[],System.Int32[])">
            <summary>Returns a sub matrix extracted from the current matrix.</summary>
            <param name="r">Array of row indices</param>
            <param name="c">Array of row indices</param>
        </member>
        <member name="M:Geo.Algorithm.ArrayMatrix.Submatrix(System.Int32,System.Int32,System.Int32[])">
            <summary>Returns a sub matrix extracted from the current matrix.</summary>
            <param name="i0">Starttial row index</param>
            <param name="i1">End row index</param>
            <param name="c">Array of row indices</param>
        </member>
        <member name="M:Geo.Algorithm.ArrayMatrix.Submatrix(System.Int32[],System.Int32,System.Int32)">
            <summary>Returns a sub matrix extracted from the current matrix.</summary>
            <param name="r">Array of row indices</param>
            <param name="j0">Start column index</param>
            <param name="j1">End column index</param>
        </member>
        <member name="M:Geo.Algorithm.ArrayMatrix.Clone">
            <summary>Creates a copy of the matrix.</summary>
        </member>
        <member name="M:Geo.Algorithm.ArrayMatrix.Transpose">
            <summary>Returns the transposed matrix.</summary>
        </member>
        <member name="M:Geo.Algorithm.ArrayMatrix.op_UnaryNegation(Geo.Algorithm.ArrayMatrix)">
            <summary>Unary minus.</summary>
        </member>
        <member name="M:Geo.Algorithm.ArrayMatrix.op_Addition(Geo.Algorithm.ArrayMatrix,Geo.Algorithm.IMatrix)">
            <summary>Matrix addition.</summary>
        </member>
        <member name="M:Geo.Algorithm.ArrayMatrix.op_Subtraction(Geo.Algorithm.ArrayMatrix,Geo.Algorithm.IMatrix)">
            <summary>Matrix subtraction.</summary>
        </member>
        <member name="M:Geo.Algorithm.ArrayMatrix.op_Multiply(Geo.Algorithm.ArrayMatrix,System.Double)">
            <summary>Matrix-scalar multiplication.</summary>
        </member>
        <member name="M:Geo.Algorithm.ArrayMatrix.ATA(Geo.Algorithm.IMatrix)">
            <summary>
            快捷计算方法
            </summary>
            <param name="A">系数阵</param>
            <param name="Q">对角阵</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.ArrayMatrix.op_Multiply(Geo.Algorithm.ArrayMatrix,Geo.Algorithm.IMatrix)">
            <summary>Matrix-matrix multiplication.</summary>
        </member>
        <member name="M:Geo.Algorithm.ArrayMatrix.Solve(Geo.Algorithm.ArrayMatrix)">
            <summary>Returns the LHS solution vetor if the matrix is square or the least squares solution otherwise.</summary>
        </member>
        <member name="M:Geo.Algorithm.ArrayMatrix.Random(System.Int32,System.Int32)">
            <summary>Returns a matrix filled with random values.</summary>
        </member>
        <member name="M:Geo.Algorithm.ArrayMatrix.EyeMatrix(System.Int32,System.Double)">
            <summary>
            创建一个相同数的对角阵
            </summary>
            <param name="dimension"></param>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.ArrayMatrix.Diagonal(System.Int32,System.Int32,System.Double)">
            <summary>Returns a diagonal matrix of the given aboutSize.</summary>
        </member>
        <member name="M:Geo.Algorithm.ArrayMatrix.ToString">
            <summary>Returns the matrix in a textual form.</summary>
        </member>
        <member name="M:Geo.Algorithm.ArrayMatrix.CompressToByte(Geo.Algorithm.ArrayMatrix)">
            <summary>
            先matrix转化为string,再string序列化char[]，然后将数据压缩为流，便于传输
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.ArrayMatrix.ToByte(Geo.Algorithm.ArrayMatrix)">
            <summary>
            先matrix转化为string,再string序列化char[]，然后传输
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.ArrayMatrix.Array">
            <summary>
            二维数组
            </summary>
        </member>
        <member name="P:Geo.Algorithm.ArrayMatrix.Rows">
            <summary>Returns the number of columns.</summary>
        </member>
        <member name="P:Geo.Algorithm.ArrayMatrix.Columns">
            <summary>Returns the number of columns.</summary>
        </member>
        <member name="P:Geo.Algorithm.ArrayMatrix.ItemCount">
            <summary>
            总共元素数量。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.ArrayMatrix.Norm1">
            <summary>Returns the One Norm for the matrix.</summary>
            <value>The maximum column sum.</value>
        </member>
        <member name="P:Geo.Algorithm.ArrayMatrix.InfinityNorm">
            <summary>Returns the Infinity Norm for the matrix.</summary>
            <value>The maximum row sum.</value>
        </member>
        <member name="P:Geo.Algorithm.ArrayMatrix.FrobeniusNorm">
            <summary>Returns the Frobenius Norm for the matrix.</summary>
            <value>The square root of sum of squares of all elements.</value>
        </member>
        <member name="P:Geo.Algorithm.ArrayMatrix.Inverse">
            <summary>Inverse of the matrix if matrix is square, pseudoinverse otherwise.</summary>
        </member>
        <member name="P:Geo.Algorithm.ArrayMatrix.Determinant">
            <summary>Determinant if matrix is square.</summary>
        </member>
        <member name="P:Geo.Algorithm.ArrayMatrix.Trace">
            <summary>Returns the trace of the matrix.</summary>
            <returns>Sum of the diagonal elements.</returns>
        </member>
        <member name="P:Geo.Algorithm.ArrayMatrix.MaxValue">
            <summary>
            矩阵中最大值
            </summary>
        </member>
        <member name="P:Geo.Algorithm.ArrayMatrix.MinValue">
            <summary>
            矩阵中最小值
            </summary>
        </member>
        <member name="P:Geo.Algorithm.ArrayMatrix.MeanValue">
            <summary>
            所有的平均值
            </summary>
        </member>
        <member name="P:Geo.Algorithm.ArrayMatrix.ColCount">
            <summary>
            列数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.ArrayMatrix.RowCount">
            <summary>
            行数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.ArrayMatrix.Transposition">
            <summary>
            转置。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.QrDecomposition">
            <summary>
             QR 分解。  QR decomposition for a rectangular matrix.
            </summary>
            <remarks>
              For an m-by-n matrix <c>A</c> with <c>m &gt;= n</c>, the QR decomposition is an m-by-n
              orthogonal matrix <c>Q</c> and an n-by-n upper triangular 
              matrix <c>R</c> so that <c>A = Q * R</c>.
              The QR decompostion always exists, even if the matrix does not have
              full rank, so the constructor will never fail.  The primary use of the
              QR decomposition is in the least squares solution of nonsquare systems
              of simultaneous linear equations.
              This will fail if <see cref="P:Geo.Algorithm.QrDecomposition.IsFullRank"/> returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Geo.Algorithm.QrDecomposition.#ctor(Geo.Algorithm.ArrayMatrix)">
            <summary>Construct a QR decomposition.</summary>	
        </member>
        <member name="M:Geo.Algorithm.QrDecomposition.Solve(Geo.Algorithm.ArrayMatrix)">
            <summary>Least squares solution of <c>A * X = B</c></summary>
            <param name="rhs">Right-hand-side matrix with as many rows as <c>A</c> and any number of columns.</param>
            <returns>A matrix that minimized the two norm of <c>Q * R * X - B</c>.</returns>
            <exception cref="T:System.ArgumentException">Matrix row dimensions must be the same.</exception>
            <exception cref="T:System.InvalidOperationException">Matrix is rank deficient.</exception>
        </member>
        <member name="P:Geo.Algorithm.QrDecomposition.IsFullRank">
            <summary>Shows if the matrix <c>A</c> is of full rank.</summary>
            <value>The value is <see langword="true"/> if <c>R</c>, and hence <c>A</c>, has full rank.</value>
        </member>
        <member name="P:Geo.Algorithm.QrDecomposition.UpperTriangularFactor">
            <summary>Returns the upper triangular factor <c>R</c>.</summary>
        </member>
        <member name="P:Geo.Algorithm.QrDecomposition.OrthogonalFactor">
            <summary>Returns the orthogonal factor <c>Q</c>.</summary>
        </member>
        <member name="T:Geo.Algorithm.SingularValueDecomposition">
            <summary>
            	Singular Value Decomposition for a rectangular matrix.矩阵的奇异值分解有两种形式？？？！！！
            </summary>
            <remarks>
              For an m-by-n matrix <c>A</c> with <c>m >= n</c>, the singular value decomposition is
              an m-by-n orthogonal matrix <c>U</c>, an n-by-n diagonal matrix <c>S</c>, and
              an n-by-n orthogonal matrix <c>V</c> so that <c>A = U * S * V'</c>.
              The singular values, <c>sigma[k] = S[k,k]</c>, are ordered so that
              <c>sigma[0] >= sigma[1] >= ... >= sigma[n-1]</c>.
              The singular value decompostion always exists, so the constructor will
              never fail. The matrix condition number and the effective numerical
              rank can be computed from this decomposition.
            </remarks>
        </member>
        <member name="M:Geo.Algorithm.SingularValueDecomposition.#ctor(Geo.Algorithm.ArrayMatrix)">
            <summary>Construct singular value decomposition.</summary>
        </member>
        <member name="P:Geo.Algorithm.SingularValueDecomposition.Condition">
            <summary>Returns the condition number <c>max(S) / min(S)</c>.</summary>
        </member>
        <member name="P:Geo.Algorithm.SingularValueDecomposition.Norm2">
            <summary>Returns the Two norm.</summary>
        </member>
        <member name="P:Geo.Algorithm.SingularValueDecomposition.Rank">
            <summary>Returns the effective numerical matrix rank.</summary>
            <value>Number of non-negligible singular values.</value>
        </member>
        <member name="P:Geo.Algorithm.SingularValueDecomposition.Diagonal">
            <summary>Return the one-dimensional array of singular values.</summary>		
        </member>
        <member name="T:Geo.Algorithm.SVD">
            <summary>
            	这里采用陈国良书中的算法，前提是A矩阵m*n，且m>=n!!!!
            </summary>
            <remarks>
              
            </remarks>
        </member>
        <member name="M:Geo.Algorithm.SVD.#ctor(Geo.Algorithm.ArrayMatrix)">
            <summary>Construct singular value decomposition.</summary>
        </member>
        <member name="T:Geo.Algorithm.NamedMatrix">
            <summary>
            命名的矩阵。通常用于矩阵行里变换。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.NamedMatrix.#ctor(System.Collections.Generic.List{System.String},System.Double[][])">
            <summary>
            构造函数。
            </summary>
            <param name="paramNames">矩阵对应行列的名称</param>
            <param name="matrix">矩阵</param>
        </member>
        <member name="M:Geo.Algorithm.NamedMatrix.GetNewMatrix(System.Collections.Generic.List{System.String},System.Double,System.Double)">
            <summary>
            根据新的名称列表，生成新的矩阵。
            </summary>
            <param name="newParamNames">新矩阵行列名称</param>
            <param name="DefaultValue">默认非对角线数值</param>
            <param name="DefaultDiagonalValue">默认对角线数值的平方根</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.NamedMatrix.GetNewMatrix(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Double[][],System.Double,System.Double)">
            <summary>
            根据新的名称列表，生成新的矩阵。
            </summary>
            <param name="newParamNames">新矩阵行列名称</param>
            <param name="oldParamNames">旧矩阵行列名称</param>
            <param name="oldMatrix">旧矩阵</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.NamedMatrix.GetSymmetricInOrder(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Double[][],System.Double,System.Double)">
            <summary>
            根据新的名称列表，生成新的矩阵。
            </summary>
            <param name="newParamNames">新矩阵行列名称</param>
            <param name="oldParamNames">旧矩阵行列名称</param>
            <param name="oldMatrix">旧矩阵</param>
            <returns></returns>
        </member>
        <member name="T:Geo.Algorithm.NamedVector">
            <summary>
            元素具有名称的向量。每一个元素都有一个名词。
            矩阵行列转换类。通过名称转换。
            代表一个名称的行。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.NamedVector.#ctor(System.String,System.Double,System.Double)">
            <summary>
            构造函数。
            </summary>
            <param name="name">名称</param>
            <param name="DefaultValue">默认非对角线数值</param>
            <param name="DefaultDiagonalValue">默认对角线数值的平方根</param>
        </member>
        <member name="M:Geo.Algorithm.NamedVector.SetValue(System.String,System.Double)">
            <summary>
            设置数值
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Geo.Algorithm.NamedVector.GetValue(System.String)">
            <summary>
            获取数值，如果没有这返回默认。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.NamedVector.DefaultDiagonalValue">
            <summary>
            默认对角线数字
            </summary>
        </member>
        <member name="P:Geo.Algorithm.NamedVector.DefaultValue">
            <summary>
            默认数
            </summary>
        </member>
        <member name="P:Geo.Algorithm.NamedVector.Name">
            <summary>
            名称。行列名称。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.NamedVector.values">
            <summary>
            内部存储核心数据结构。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.NamedVectorConvert">
            <summary>
            元素具有名称的向量 的转换器。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.NamedVectorConvert.#ctor(System.Collections.Generic.List{System.String},System.Double[])">
            <summary>
            构造函数。
            </summary>
            <param name="paramNames">名称列表</param>
            <param name="vector">向量</param>
        </member>
        <member name="M:Geo.Algorithm.NamedVectorConvert.GetNewVector(System.Collections.Generic.List{System.String})">
            <summary>
            按照指定顺序获取新向量。
            </summary>
            <param name="newParamNames">名称列表</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.NamedVectorConvert.ConvertNamedVector(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},Geo.Algorithm.Vector)">
            <summary>
            名称向量转换静态方法。
            </summary>
            <param name="newParamNames">新的名称列表</param>
            <param name="oldParamNames">老的参数列表</param>
            <param name="oldMatrix">老的矩阵</param>
            <returns></returns>
        </member>
        <member name="T:Geo.Algorithm.MovingAverageInterpolater">
            <summary>
            滑动平均插值器。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.MovingAverageInterpolater.#ctor(System.Double[],System.Int32)">
            <summary>
            构造
            </summary>
            <param name="ys"></param>
            <param name="order"></param>
        </member>
        <member name="M:Geo.Algorithm.MovingAverageInterpolater.GetY(System.Double)">
            <summary>
            获取Y值
            </summary>
            <param name="xValue"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.MovingAverageInterpolater.GetNexts(System.Int32)">
            <summary>
            获取接下来的
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Algorithm.MovingAverageInterpolater.Order">
            <summary>
            滑动个数。
            </summary>
        </member>
        <member name="T:Geo.Algorithm.StreamMovingAverageInterpolater">
            <summary>
            滑动平均插值器。
            </summary>
        </member>
        <member name="P:Geo.Algorithm.StreamMovingAverageInterpolater.Order">
            <summary>
            滑动个数。
            </summary>
        </member>
        <member name="T:Geo.ELMarker">
            <summary>
             EL 关键字
            </summary>
        </member>
        <member name="T:Geo.ELMarkerReplaceService">
            <summary>
            EL 标签替换器
            </summary>
        </member>
        <member name="T:Geo.AbstractService`2">
            <summary>
            提供产品的供应商。规定了生产流程。
            </summary> 
        </member>
        <member name="T:Geo.AbstractService`1">
            <summary>
            服务，一切皆服务。
            </summary>
        </member>
        <member name="T:Geo.IService`1">
            <summary>
            服务，一切皆服务。
            </summary>
            <typeparam name="TProduct">服务提供的产品</typeparam>
        </member>
        <member name="T:Geo.IService">
            <summary>
            顶层服务接口。 
            </summary>
        </member>
        <member name="P:Geo.AbstractService`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:Geo.IService`2">
            <summary>
            服务，提供一个默认的实现。
            </summary>
            <typeparam name="TProduct">产品</typeparam>
            <typeparam name="TCondition">条件</typeparam>
        </member>
        <member name="M:Geo.IService`2.Get(`1)">
            <summary>
            获取一个产品。
            </summary>
            <param name="condition">查询产品的条件</param>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractService`2.#ctor">
            <summary>
            默认构造函数。
            </summary>
        </member>
        <member name="M:Geo.AbstractService`2.Init">
            <summary>
            构造函数之后调用。用于完成一些初始工作。
            </summary>
        </member>
        <member name="M:Geo.AbstractService`2.Get(`1)">
            <summary>
            获取最终的产品，如果失败则返回默认对象，通常为null。每次生产都要执行。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.ELMarkerReplaceService.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            构造函数
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Geo.ELMarkerReplaceService.Get(System.Collections.Generic.List{System.String})">
            <summary>
            获取
            </summary>
            <param name="Models"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.ELMarkerReplaceService.GetTimeKeyWordDictionary(Geo.Times.Time)">
            <summary>
            Key 为时间 EL
            </summary>
            <param name="ifrom"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.ELMarkerReplaceService.BuildWithTime(System.Collections.Generic.List{System.String},System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            对时间解析替换
            </summary>
            <param name="urlModels"></param>
            <param name="timeFrom"></param>
            <param name="timeTo"></param>
            <param name="intervalSpan"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.ELMarkerReplaceService.BuildWithTime(System.String,System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            对时间解析替换
            </summary>
            <param name="urlModels"></param>
            <param name="timeFrom"></param>
            <param name="timeTo"></param>
            <param name="intervalSpan"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.ELMarkerReplaceService.BuildWithTime(System.Collections.Generic.List{System.String},Geo.Times.Time)">
            <summary>
            对时间解析替换
            </summary>
            <param name="urlModels"></param>
            <param name="ifrom"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.ELMarkerReplaceService.Dictionary">
            <summary>
            字典
            </summary>
        </member>
        <member name="T:Geo.TimeBasedFilePathBuilder">
            <summary>
            文件路径服务。通过一些条件提供路径服务。
            </summary>
        </member>
        <member name="M:Geo.TimeBasedFilePathBuilder.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="pathModel">路径模板</param>
        </member>
        <member name="M:Geo.TimeBasedFilePathBuilder.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            构造函数
            </summary>
            <param name="pathModels">路径模板，安装默认顺序</param>
        </member>
        <member name="M:Geo.TimeBasedFilePathBuilder.Get(Geo.Times.Time)">
            <summary>
            根据时间获取路径
            </summary>
            <param name="time">时间</param>
            <returns></returns>
        </member>
        <member name="P:Geo.TimeBasedFilePathBuilder.PathModels">
            <summary>
            路径模型
            </summary>
        </member>
        <member name="T:Geo.Coordinates.GeometryRelation">
            <summary>
            几何对象之间的关系
            </summary>
        </member>
        <member name="F:Geo.Coordinates.GeometryRelation.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:Geo.Coordinates.GeometryRelation.Contain">
            <summary>
            包含
            </summary>
        </member>
        <member name="F:Geo.Coordinates.GeometryRelation.Cross">
            <summary>
            切割而过
            </summary>
        </member>
        <member name="F:Geo.Coordinates.GeometryRelation.Intersect">
            <summary>
            相切一半
            </summary>
        </member>
        <member name="F:Geo.Coordinates.GeometryRelation.Sparate">
            <summary>
             相离
            </summary>
        </member>
        <member name="T:Geo.Coordinates.Box`1">
            <summary>
            无所不在的盒子、边界、窗口、矩形。
            以 （X， Y）为坐标，笛卡尔右手坐标系，Y为竖轴指向上对应高度，X为横轴指向右对应宽度。
            Box, Bound, Box ViewPort.
            </summary>
        </member>
        <member name="T:Geo.Coordinates.IBox`1">
            <summary>
             二维盒子，由坐标组成的盒子。
             一个方方正正的盒子。
            </summary>
            <typeparam name="TCoord">坐标类型</typeparam>
        </member>
        <member name="M:Geo.Coordinates.IBox`1.Contains(Geo.Coordinates.IBox{`0})">
            <summary>
            是否包含另一个盒子
            </summary>
            <param name="box">另一个盒子</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.IBox`1.Contains(Geo.Coordinates.LineSegment{`0})">
            <summary>
            是否包含一条线段
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.IBox`1.Contains(`0)">
            <summary>
            是否好汉指定坐标
            </summary>
            <param name="xy">坐标</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.IBox`1.And(Geo.Coordinates.IBox{`0})">
            <summary>
            求交集
            </summary>
            <param name="other">另一个盒子</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.IBox`1.Expands(Geo.Coordinates.IBox{`0})">
            <summary>
            求与另一个盒子的并集。
            </summary>
            <param name="bbox">另一个盒子</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.IBox`1.IntersectsWith(Geo.Coordinates.IBox{`0})">
            <summary>
            是否与另一个盒子相交
            </summary>
            <param name="box">另一个盒子</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.IBox`1.Expands(System.Double)">
            <summary>
            按照倍数扩展
            </summary>
            <param name="times"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.IBox`1.GetIntersectPoint(Geo.Coordinates.TwoDLineSegment{`0})">
            <summary>
            与指定线段是否相交。
            </summary>
            <param name="line">线段</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.IBox`1.Transform(Geo.Coordinates.ICoordTransformer)">
            <summary>
            坐标转换
            </summary>
            <param name="trans">坐标转换接口</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.IBox`1.GetIntersectPoints(Geo.Coordinates.TwoDLineSegment{`0})">
            <summary>
            获取线段与盒子的切点，如果相离则没有切点。
            </summary>
            <param name="line">线段</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.IBox`1.Center">
            <summary>
            盒子中心坐标
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IBox`1.Height">
            <summary>
            盒子的高度
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IBox`1.Width">
            <summary>
            盒子宽度
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IBox`1.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IBox`1.LeftBottom">
            <summary>
            左下角
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IBox`1.LeftTop">
            <summary>
            左上角
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IBox`1.RightBottom">
            <summary>
            右下角
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IBox`1.RightTop">
            <summary>
            右上角
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IBox`1.MaxHorizontal">
            <summary>
            最大的水平数值
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IBox`1.MinHorizontal">
            <summary>
            最小的水平数值
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IBox`1.MaxVertical">
            <summary>
            最大的竖直数值
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IBox`1.MinVertical">
            <summary>
            最小的竖直数值
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IBox`1.Top">
            <summary>
            最上面的线段
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IBox`1.Bottom">
            <summary>
            最下边的线段
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IBox`1.Left">
            <summary>
            最左边的线段
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IBox`1.Right">
            <summary>
            最右边的线段
            </summary>
        </member>
        <member name="M:Geo.Coordinates.Box`1.#ctor">
            <summary>
            默认构造函数。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.Box`1.#ctor(`0)">
            <summary>
            以一个点初始化。
            </summary>
            <param name="xy"></param>
        </member>
        <member name="M:Geo.Coordinates.Box`1.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            以四个参数初始化
            </summary>
            <param name="minX"></param>
            <param name="minY"></param>
            <param name="maxX"></param>
            <param name="maxY"></param>
        </member>
        <member name="M:Geo.Coordinates.Box`1.#ctor(`0,System.Double,System.Double)">
            <summary>
            以中心点初始化
            </summary>
            <param name="centerXy"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Geo.Coordinates.Box`1.#ctor(Geo.INumeralIndexing,Geo.INumeralIndexing)">
            <summary>
            自动提取TCoord的最大小X、Y值生成一个Box。
            </summary>
            <param name="xy1">第一个坐标</param>
            <param name="xy2">第二个坐标</param>
        </member>
        <member name="M:Geo.Coordinates.Box`1.Contains(`0)">
            <summary>
            是否包含此点
            </summary>
            <param name="xy"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Box`1.Contains(Geo.Coordinates.LineSegment{`0})">
            <summary>
            是否包含这个线段
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Box`1.And(Geo.Coordinates.IBox{`0})">
            <summary>
            求交集盒子
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Box`1.Contains(Geo.Coordinates.IBox{`0})">
            <summary>
            Returns true if this instance contains the <see cref="T:Geo.Coordinates.Envelope"/>
            </summary>
            <param name="box"><see cref="!:BoundingBox"/></param>
            <returns>True it contains</returns>
        </member>
        <member name="M:Geo.Coordinates.Box`1.IntersectsWith(Geo.Coordinates.IBox{`0})">
            <summary>
            Determines whether the boundingbox intersects another boundingbox
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Box`1.Expands(Geo.Coordinates.IBox{`0})">
            <summary>
            合并两个盒子。大盒子为两小盒子的最小并集盒子。
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Box`1.Clone">
            <summary>
            获取一个拷贝。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Box`1.Expands(System.Double)">
             <summary>
            扩张倍数。
             </summary>
             <param name="times"></param>
             <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Box`1.Equals(System.Object)">
            <summary>
            值相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Box`1.GetHashCode">
            <summary>
            值相等
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Box`1.ToString">
            <summary>
            自定义的格式化输出。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Box`1.Transform(Geo.Coordinates.ICoordTransformer)">
            <summary>
            坐标转换
            </summary>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Box`1.GetDirection(`0)">
            <summary>
            获取这个坐标在相对盒子的方向。如果在盒子内则为 Unkown。
            </summary>
            <param name="coord">待判断的坐标</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Box`1.GetIntersectPoint(Geo.Coordinates.TwoDLineSegment{`0})">
            <summary>
            获取相交点，如果没有，则返回null。
            </summary>
            <param name="line">线段</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Box`1.GetIntersectPoints(Geo.Coordinates.TwoDLineSegment{`0})">
            <summary>
            线段与盒子，可能出现1，包含，2，远离，3穿过，4相交一个边
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.Box`1.Center">
            <summary>
            盒子中心
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Box`1.LeftTop">
            <summary>
            左上角
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Box`1.LeftBottom">
            <summary>
            左下角
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Box`1.RightTop">
            <summary>
            右上角
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Box`1.RightBottom">
            <summary>
            右下角
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Box`1.Width">
            <summary>
            盒子宽度
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Box`1.Height">
            <summary>
            盒子高度
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Box`1.MinHorizontal">
            <summary>
            X 轴最小值
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Box`1.MaxVertical">
            <summary>
            Y 轴最大值
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Box`1.MaxHorizontal">
            <summary>
            X 轴的最大值
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Box`1.MinVertical">
            <summary>
            Y 轴最小值
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Box`1.IsEmpty">
            <summary>
            长或宽为 0
            </summary>
        </member>
        <member name="T:Geo.Coordinates.Envelope">
            <summary>
            无所不在的盒子、边界、窗口、矩形。
            以 （X， Y）为坐标，笛卡尔右手坐标系，Y为竖轴指向上对应高度，X为横轴指向右对应宽度。
            Box, Bound, Envelope, ViewPort.
            </summary>
        </member>
        <member name="T:Geo.Coordinates.IEnvelope">
            <summary>
            XY 二维接口。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.IEnvelope.And(Geo.Coordinates.IEnvelope)">
            <summary>
            交集
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.IEnvelope.Expands(Geo.Coordinates.IEnvelope)">
            <summary>
            并集
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.IEnvelope.MaxX">
            <summary>
            最大X
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IEnvelope.MaxY">
            <summary>
            最大Y
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IEnvelope.MinX">
            <summary>
            最小X
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IEnvelope.MinY">
            <summary>
            最小Y
            </summary>
        </member>
        <member name="M:Geo.Coordinates.Envelope.#ctor">
            <summary>
            默认构造函数。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.Envelope.#ctor(Geo.Coordinates.XY)">
            <summary>
            以一个点初始化。
            </summary>
            <param name="xy"></param>
        </member>
        <member name="M:Geo.Coordinates.Envelope.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            以四个参数初始化
            </summary>
            <param name="minX"></param>
            <param name="minY"></param>
            <param name="maxX"></param>
            <param name="maxY"></param>
        </member>
        <member name="M:Geo.Coordinates.Envelope.#ctor(Geo.Algorithm.Vector,System.Double,System.Double)">
            <summary>
            以中心点初始化
            </summary>
            <param name="centerXy"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Geo.Coordinates.Envelope.#ctor(Geo.Coordinates.XY,System.Double,System.Double)">
            <summary>
            以中心点初始化
            </summary>
            <param name="centerXy"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Geo.Coordinates.Envelope.#ctor(Geo.Coordinates.XY,Geo.Coordinates.XY)">
            <summary>
            自动提取XY的最大小X、Y值生成一个Envelope。
            </summary>
            <param name="xy1"></param>
            <param name="xy2"></param>
        </member>
        <member name="M:Geo.Coordinates.Envelope.ToString">
            <summary>
            自定义的格式化输出。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Envelope.ToXmlStub">
            <summary>
            持久化为XML
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Envelope.ParseXmlStub(System.String)">
            <summary>
            <Envelope><MinX>116.0000000</MinX><MinY>39.0000000</MinY><MaxX>116.0000000</MaxX><MaxY>40.0000000</MaxY></Envelope>
            </summary>
            <param name="xmlString"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Coordinates.ILonLatEnvelope">
            <summary>
            XY 二维接口。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.ILonLatEnvelope.And(Geo.Coordinates.ILonLatEnvelope)">
            <summary>
            交集
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ILonLatEnvelope.Expands(Geo.Coordinates.ILonLatEnvelope)">
            <summary>
            并集
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.ILonLatEnvelope.MaxX">
            <summary>
            最大X
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ILonLatEnvelope.MaxY">
            <summary>
            最大Y
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ILonLatEnvelope.MinX">
            <summary>
            最小X
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ILonLatEnvelope.MinY">
            <summary>
            最小Y
            </summary>
        </member>
        <member name="T:Geo.Coordinates.LonLatEnvelope">
            <summary>
            无所不在的盒子、边界、窗口、矩形。
            以 （X， Y）为坐标，笛卡尔右手坐标系，Y为竖轴指向上对应高度，X为横轴指向右对应宽度。
            Box, Bound, LonLatEnvelope, ViewPort.
            </summary>
        </member>
        <member name="M:Geo.Coordinates.LonLatEnvelope.#ctor">
            <summary>
            默认构造函数。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.LonLatEnvelope.#ctor(Geo.Coordinates.LonLat)">
            <summary>
            以一个点初始化。
            </summary>
            <param name="xy"></param>
        </member>
        <member name="M:Geo.Coordinates.LonLatEnvelope.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            以四个参数初始化
            </summary>
            <param name="minX"></param>
            <param name="minY"></param>
            <param name="maxX"></param>
            <param name="maxY"></param>
        </member>
        <member name="M:Geo.Coordinates.LonLatEnvelope.#ctor(Geo.Coordinates.LonLat,System.Double,System.Double)">
            <summary>
            以中心点初始化
            </summary>
            <param name="centerXy"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Geo.Coordinates.LonLatEnvelope.#ctor(Geo.Coordinates.LonLat,System.Double)">
            <summary>
            以中心点初始化
            </summary>
            <param name="centerXy"></param>
            <param name="distance"></param> 
        </member>
        <member name="M:Geo.Coordinates.LonLatEnvelope.#ctor(Geo.Coordinates.LonLat,Geo.Coordinates.LonLat)">
            <summary>
            自动提取LonLat的最大小X、Y值生成一个LonLatEnvelope。
            </summary>
            <param name="xy1"></param>
            <param name="xy2"></param>
        </member>
        <member name="M:Geo.Coordinates.LonLatEnvelope.ToString">
            <summary>
            自定义的格式化输出。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.LonLatEnvelope.ToXmlStub">
            <summary>
            持久化为XML
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.LonLatEnvelope.ParseXmlStub(System.String)">
            <summary>
            <LonLatEnvelope><MinX>116.0000000</MinX><MinY>39.0000000</MinY><MaxX>116.0000000</MaxX><MaxY>40.0000000</MaxY></LonLatEnvelope>
            </summary>
            <param name="xmlString"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.CoordConsts">
            <summary>
            坐标相关常量全在这里。
            </summary>
        </member>
        <member name="F:Geo.CoordConsts.HalfMercatrorLength">
            <summary>
            墨卡托正方形半个边长，单位：米。
            </summary>
        </member>
        <member name="F:Geo.CoordConsts.EarthRadius">
            <summary>
            地球半径
            </summary>
        </member>
        <member name="F:Geo.CoordConsts.DegToRadMultiplier">
            <summary>
            度到弧度乘法因子
            </summary>
        </member>
        <member name="F:Geo.CoordConsts.MinToRadMultiplier">
            <summary>
            分到弧度乘法因子
            </summary>
        </member>
        <member name="F:Geo.CoordConsts.SecToRadMultiplier">
            <summary>
            秒到弧度乘法因子
            </summary>
        </member>
        <member name="F:Geo.CoordConsts.RadToDegMultiplier">
            <summary>
            弧度到度乘法因子
            </summary>
        </member>
        <member name="F:Geo.CoordConsts.RadToMinMultiplier">
            <summary>
            弧度到分乘法因子
            </summary>
        </member>
        <member name="F:Geo.CoordConsts.RadToSecMultiplier">
            <summary>
            弧度到秒乘法因子
            </summary>
        </member>
        <member name="F:Geo.CoordConsts.OneQuaterPI">
            <summary>
            1/4 PI
            </summary>
        </member>
        <member name="F:Geo.CoordConsts.MaxLat">
            <summary>
            墨卡托投影的维度死角
            </summary>
        </member>
        <member name="F:Geo.CoordConsts.PI">
            <summary>
            高精度PI，请不要用系统自带的 PI，只有 5 位数的精度。
            3.1415926535897932384626433832795
            </summary>
        </member>
        <member name="T:Geo.IntIdTreeNode`1">
            <summary>
            ID 为整型的树形节点
            </summary>
            <typeparam name="TNode"></typeparam>
        </member>
        <member name="T:Geo.AbstractTreeNode`3">
            <summary>
            通用树形节点，抽象树节点。
            </summary>
            <typeparam name="TNode"></typeparam>
        </member>
        <member name="T:Geo.IdentifyNamed`1">
            <summary>
            具有ID和Name的基类
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:Geo.Identified`1">
            <summary>
            区别与标识
            </summary>
        </member>
        <member name="T:Geo.Identifiable`1">
            <summary>
            可标识的，具有一个Id属性。
            </summary>
        </member>
        <member name="P:Geo.Identifiable`1.Id">
            <summary>
            标识
            </summary>
        </member>
        <member name="M:Geo.Identified`1.GetIds(System.Collections.IEnumerable)">
            <summary>
            获取所有的ID
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Identified`1.Id">
            <summary>
            标识
            </summary>
        </member>
        <member name="P:Geo.IdentifyNamed`1.Name">
            <summary>
            标识
            </summary>
        </member>
        <member name="T:Geo.ITreeNode`3">
            <summary>
            树形节点接口,具有相同类型的子节点和父节点
            </summary>
            <typeparam name="TNode"></typeparam>
        </member>
        <member name="T:Geo.INode`3">
            <summary>
            标识是一个节点，可以具有父亲，父可以为Null
            </summary>
        </member>
        <member name="T:Geo.IChild`1">
            <summary>
            这是一个孩子，可能有父亲
            </summary>
        </member>
        <member name="P:Geo.IChild`1.ParentId">
            <summary>
            父亲节点的
            </summary>
        </member>
        <member name="P:Geo.INode`3.Parent">
            <summary>
            父节点
            </summary>
        </member>
        <member name="M:Geo.ITreeNode`3.GetNoChildNodes">
            <summary>
            获取没有子节点的节点。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.ITreeNode`3.GetNodeList">
            <summary>
            获取所有的节点，含本身。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.ITreeNode`3.GetNodeNames">
            <summary>
            获取所有的名称列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.ITreeNode`3.GetPath">
            <summary>
            获取路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.ITreeNode`3.GetTreeText(System.String,System.Int32)">
            <summary>
            导出为文本
            </summary>
            <param name="spliter"></param>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.ITreeNode`3.Children">
            <summary>
            子节点结合
            </summary>
        </member>
        <member name="P:Geo.ITreeNode`3.Depth">
            <summary>
            深度
            </summary>
        </member>
        <member name="P:Geo.ITreeNode`3.HasChild">
            <summary>
            是否有子节点
            </summary>
        </member>
        <member name="P:Geo.ITreeNode`3.HasParent">
            <summary>
            是否有父节点
            </summary>
        </member>
        <member name="M:Geo.AbstractTreeNode`3.GetNodeNames">
            <summary>
            获取所有的名称，含本节点。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractTreeNode`3.GetNodeList">
            <summary>
            所有的树叶节点(含本身)以列表形式返回。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractTreeNode`3.GetPath">
            <summary>
            获取节点的路径。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractTreeNode`3.GetNoChildNodes">
            <summary>
            获取没有子节点的节点，常用于从底到上进行删除.
            如果没有则返回自身。
            如果只包含一个则是他本身,反之也成立
            </summary>
            <param name="treeId"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractTreeNode`3.GetTreeText(System.String,System.Int32)">
            <summary>
            以返回文本化的树形目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractTreeNode`3.ParseTreeText``1(System.Collections.Generic.ICollection{System.String},System.String)">
            <summary>
            文本解析
            </summary>
            <param name="nodeLines"></param>
            <param name="spliter"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.AbstractTreeNode`3.Rank">
            <summary>
            从 0 开始。
            </summary>
        </member>
        <member name="P:Geo.AbstractTreeNode`3.HasChild">
            <summary>
            是否具有子节点
            </summary> 
        </member>
        <member name="P:Geo.AbstractTreeNode`3.HasParent">
            <summary>
            是否具有父节点 通过 ParentId 判断
            </summary>
        </member>
        <member name="P:Geo.AbstractTreeNode`3.Depth">
            <summary>
            深度
            </summary>
        </member>
        <member name="T:Geo.IIntId">
            <summary>
            ID 为整型接口
            </summary>
        </member>
        <member name="T:Geo.IChildOfNullableInt">
            <summary>
            具有 ParentId 属性的一个节点，ParentId 属性可为Null。
            </summary>
        </member>
        <member name="M:Geo.IntIdTreeNode`1.SetParent(`0)">
            <summary>
            设置父节点，同时设置父ID。
            </summary>
            <param name="parent"></param>
        </member>
        <member name="T:Geo.StringIdTreeNode`1">
            <summary>
            ID 为String的树形节点
            </summary>
            <typeparam name="TNode"></typeparam>
        </member>
        <member name="T:Geo.IStringId">
            <summary>
            ID 为字符串类型接口
            </summary>
        </member>
        <member name="M:Geo.StringIdTreeNode`1.SetParent(`0)">
            <summary>
            设置父节点，同时设置父ID。
            </summary>
            <param name="parent"></param>
        </member>
        <member name="T:Geo.NumerialListManager">
            <summary>
            浮点数列表管理器
            </summary>
        </member>
        <member name="T:Geo.ListManager`1">
            <summary>
            列表管理器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Geo.NumeralCorrectionManager">
            <summary>
            增加测站相关改正数
            </summary>
        </member>
        <member name="T:Geo.DequeueEventHandler`1">
            <summary>
            被挤出队列啦
            </summary>
            <param name="queue"></param>
        </member>
        <member name="T:Geo.BaseQueue`1">
            <summary>
            队列，也可以用系统自带 Queue
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Geo.BaseQueue`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="Capacity"></param>
        </member>
        <member name="M:Geo.BaseQueue`1.Insert(System.Int32,`0[])">
            <summary>
            插入数组到队列
            </summary>
            <param name="index">编号</param>
            <param name="bts">字节数组</param>
        </member>
        <member name="M:Geo.BaseQueue`1.Enqueue(`0[])">
            <summary>
            入队,接收数据。
            </summary>
            <param name="bts">字节数组</param>
        </member>
        <member name="M:Geo.BaseQueue`1.Enqueue(`0)">
            <summary>
            入队,接收数据。
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Geo.BaseQueue`1.Dequeue(System.Int32)">
             <summary>
            出队， 将先入的推出来。从低字节开始提取。
             </summary>
        </member>
        <member name="M:Geo.BaseQueue`1.DoDequeuing(System.Collections.Generic.List{`0})">
            <summary>
            出队事件
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Geo.BaseQueue`1.Clear">
            <summary>
            清空队列
            </summary>
        </member>
        <member name="P:Geo.BaseQueue`1.Queue">
            <summary>
            数据存储。
            </summary>
        </member>
        <member name="P:Geo.BaseQueue`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Geo.BaseQueue`1.AutoDequeue">
            <summary>
            自动出队。即如果入队数量超过了容量，则自动出队，同时激发 Dequeuing 事件。
            </summary>
        </member>
        <member name="E:Geo.BaseQueue`1.Dequeuing">
            <summary>
            即将出队。
            </summary>
        </member>
        <member name="P:Geo.BaseQueue`1.Capacity">
            <summary>
            缓存大小,单位为个数。
            </summary>
        </member>
        <member name="P:Geo.BaseQueue`1.Count">
            <summary>
            库存实际数量。
            </summary>
        </member>
        <member name="T:Geo.NumerialSegment">
            <summary>
            双精度的数据范围。
            </summary>
        </member>
        <member name="T:Geo.Segment`2">
            <summary>
             一段，由两个标量组成。具有距离变量 Span。
            </summary>
            <typeparam name="TValue">标量类型</typeparam>
            <typeparam name="TSpan">标量长度类型</typeparam>
        </member>
        <member name="T:Geo.Segment`1">
            <summary>
            一段，由两个标量组成。
            </summary>
            <typeparam name="TValue">标量类型</typeparam>
        </member>
        <member name="T:Geo.ISegment`1">
            <summary>
            顶层分段接口
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Geo.ISegment`1.Contains(`0)">
            <summary>
            完全包含或相等才返回true。
            </summary>
            <param name="currentVal">是否包含值</param>
            <returns></returns>
        </member>
        <member name="M:Geo.ISegment`1.Contains(Geo.ISegment{`0})">
            <summary>
            完全包含或相等才返回true。
            </summary>
            <param name="timePeriod">待判断时段</param>
            <returns></returns>
        </member>
        <member name="M:Geo.ISegment`1.IsIntersect(Geo.ISegment{`0})">
            <summary>
            是否相交
            </summary>
            <param name="segment">另一个段</param> 
            <returns></returns>
        </member>
        <member name="P:Geo.ISegment`1.End">
            <summary>
            结束值
            </summary>
        </member>
        <member name="P:Geo.ISegment`1.Start">
            <summary>
            起始值
            </summary>
        </member>
        <member name="P:Geo.ISegment`1.Tag">
            <summary>
            绑定对象。
            </summary>
        </member>
        <member name="M:Geo.Segment`1.#ctor">
            <summary>
            默认构造函数。
            </summary>
        </member>
        <member name="M:Geo.Segment`1.#ctor(`0,`0)">
            <summary>
            段的构造函数
            </summary>
            <param name="start">开始</param>
            <param name="end">结束</param>
        </member>
        <member name="M:Geo.Segment`1.Contains(`0)">
            <summary>
            是否包含指定的数
            </summary>
            <param name="currentVal">值</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Segment`1.Contains(Geo.ISegment{`0})">
            <summary>
            完全包含或相等才返回true。
            </summary>
            <param name="seg">待判断时段</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Segment`1.IsIntersect(Geo.ISegment{`0})">
            <summary>
            是否相交
            </summary>
            <param name="segment">另一个段</param> 
            <returns></returns>
        </member>
        <member name="M:Geo.Segment`1.GetIntersect(Geo.ISegment{`0})">
            <summary>
            获取线段相交部分。如果没有，返回null
            </summary>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Segment`1.ToString">
            <summary>
            字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Segment`1.Equals(System.Object)">
            <summary>
            是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Segment`1.GetHashCode">
            <summary>
            哈希
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Segment`1.Start">
            <summary>
            开始
            </summary>
        </member>
        <member name="P:Geo.Segment`1.End">
            <summary>
            结束
            </summary>
        </member>
        <member name="P:Geo.Segment`1.Tag">
            <summary>
            绑定的对象
            </summary>
        </member>
        <member name="P:Geo.Segment`1.IsOnlyStartHashCode">
            <summary>
            是否只对起始采用哈希数，利于扩展结尾数。
            </summary>
        </member>
        <member name="T:Geo.ISegment`2">
            <summary>
            顶层分段接口，数值与分段单位或对象不同。
            </summary>
            <typeparam name="TValue"></typeparam>
            <typeparam name="TSpan"></typeparam>
        </member>
        <member name="P:Geo.ISegment`2.Span">
            <summary>
            长度，不含缓冲
            </summary>
        </member>
        <member name="M:Geo.Segment`2.#ctor">
            <summary>
            默认构造函数。
            </summary>
        </member>
        <member name="M:Geo.Segment`2.#ctor(`0,`0)">
            <summary>
            段的构造函数
            </summary>
            <param name="start">开始</param>
            <param name="end">结束</param>
        </member>
        <member name="P:Geo.Segment`2.Span">
            <summary>
            长度，不含缓冲
            </summary>
        </member>
        <member name="P:Geo.Segment`2.Median">
            <summary>
            中间值
            </summary>
        </member>
        <member name="M:Geo.NumerialSegment.#ctor(System.Double,System.Double)">
            <summary>
            双精度的数据范围,构造函数。
            </summary>
            <param name="start">起始数值</param>
            <param name="end">结束值</param>
        </member>
        <member name="M:Geo.NumerialSegment.Contains(System.Double)">
            <summary>
            是否在范围内，含边界。
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.NumerialSegment.Span">
            <summary>
            跨度
            </summary>
        </member>
        <member name="P:Geo.NumerialSegment.Median">
            <summary>
            中间数
            </summary>
        </member>
        <member name="T:Geo.ClassCashe`1">
            <summary>
            类型缓存池。可以自动管理多个不同类型的高速缓存。
            不负责读取数据，只负责标记和存储数据，且为单例模式。
            </summary>
        </member>
        <member name="M:Geo.ClassCashe`1.SetAvailable(System.Boolean)">
            <summary>
            设置缓存可用性
            </summary>
            <param name="keyPrev"></param>
            <param name="trueOrFalse"></param>
        </member>
        <member name="M:Geo.ClassCashe`1.Set(`0)">
            <summary>
            设置缓存数据，同时将该数据关键字标记为可用。
            </summary>
            <param name="keyPrev"></param>
            <param name="currentVal"></param>
        </member>
        <member name="P:Geo.ClassCashe`1.AvailableDic">
            <summary>
            缓存是否可用，标记数据是否改变。指示是否需要从数据库获取数据。
            </summary>
        </member>
        <member name="P:Geo.ClassCashe`1.CasheData">
            <summary>
            缓存的数据
            </summary>
        </member>
        <member name="P:Geo.ClassCashe`1.IsAvailable">
            <summary>
            缓存是否可用。查看是否需要直接从数据库读取数据。
            </summary>
            <param name="keyPrev"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.EntityCashe`1">
            <summary>
            对象缓存池。
            不负责读取数据，只负责标记和存储数据，且为单例模式。
            </summary>
        </member>
        <member name="M:Geo.EntityCashe`1.IsAvailable(System.String)">
            <summary>
            缓存是否可用。查看是否需要直接从数据库读取数据。
            </summary>
            <param name="keyPrev"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.EntityCashe`1.SetAvailable(System.String,System.Boolean)">
            <summary>
            设置缓存可用性
            </summary>
            <param name="keyPrev"></param>
            <param name="trueOrFalse"></param>
        </member>
        <member name="M:Geo.EntityCashe`1.Set(System.String,`0)">
            <summary>
            设置缓存数据，同时将该数据关键字标记为可用。
            </summary>
            <param name="keyPrev"></param>
            <param name="currentVal"></param>
        </member>
        <member name="P:Geo.EntityCashe`1.AvailableDic">
            <summary>
            缓存是否可用，标记数据是否改变。指示是否需要从数据库获取数据。
            </summary>
        </member>
        <member name="P:Geo.EntityCashe`1.IsDataSourceChanged">
            <summary>
            指示数据源是否改变，缓存失效否
            </summary>
        </member>
        <member name="T:Geo.Exceptions.ExceptionHandlerFactory">
            <summary>
            异常处理工程。采用简单工厂方法模式创建。
            </summary>
        </member>
        <member name="M:Geo.Exceptions.ExceptionHandlerFactory.Create(System.Exception)">
            <summary>
            工厂方法
            </summary>
            <param name="excetpion">异常实例</param>
        </member>
        <member name="M:Geo.Exceptions.ExceptionHandlerFactory.Create(System.Type)">
            <summary>
            工工厂方法
            </summary>
            <param name="excetpionType">异常类型</param>
            <returns></returns>
        </member>
        <member name="T:Geo.Exceptions.ConfigurationException">
            <summary>
            配置错误
            </summary>
        </member>
        <member name="T:Geo.GeoException">
            <summary>
            程序调用错误。
            </summary>
        </member>
        <member name="M:Geo.GeoException.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.GeoException.#ctor(System.Exception)">
            <summary>
            构造函数。
            </summary>
            <param name="exception">传入异常</param>
        </member>
        <member name="M:Geo.GeoException.#ctor(System.String)">
            <summary>
            以错误信息初始化
            </summary>
            <param name="Message">错误字符串</param>
        </member>
        <member name="P:Geo.GeoException.Exception">
            <summary>
            父类异常。
            </summary>
        </member>
        <member name="P:Geo.GeoException.Message">
            <summary>
            错误信息描述。
            </summary>
        </member>
        <member name="P:Geo.GeoException.ErrorMessage">
            <summary>
            错误信息描述。
            </summary>
        </member>
        <member name="T:Geo.NotSupportVersionException">
            <summary>
            版本不支持错误。
            </summary>
        </member>
        <member name="M:Geo.NotSupportVersionException.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.NotSupportVersionException.#ctor(System.Exception)">
            <summary>
            构造函数。
            </summary>
            <param name="exception">传入异常</param>
        </member>
        <member name="M:Geo.NotSupportVersionException.#ctor(System.String)">
            <summary>
            以错误信息初始化
            </summary>
            <param name="Message">错误字符串</param>
        </member>
        <member name="P:Geo.NotSupportVersionException.Exception">
            <summary>
            父类异常。
            </summary>
        </member>
        <member name="P:Geo.NotSupportVersionException.Message">
            <summary>
            错误信息描述。
            </summary>
        </member>
        <member name="T:Geo.DimentionException">
            <summary>
            程序调用错误。
            </summary>
        </member>
        <member name="M:Geo.DimentionException.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.DimentionException.#ctor(System.Exception)">
            <summary>
            构造函数。
            </summary>
            <param name="exception">传入异常</param>
        </member>
        <member name="M:Geo.DimentionException.#ctor(System.String)">
            <summary>
            以错误信息初始化
            </summary>
            <param name="Message">错误字符串</param>
        </member>
        <member name="P:Geo.DimentionException.Exception">
            <summary>
            父类异常。
            </summary>
        </member>
        <member name="P:Geo.DimentionException.Message">
            <summary>
            错误信息描述。
            </summary>
        </member>
        <member name="T:Geo.InvocationException">
            <summary>
            程序调用错误。
            </summary>
        </member>
        <member name="M:Geo.InvocationException.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.InvocationException.#ctor(System.Exception)">
            <summary>
            构造函数。
            </summary>
            <param name="exception">传入异常</param>
        </member>
        <member name="F:Geo.InvocationException.exception">
            <summary>
            父类异常。
            </summary>
        </member>
        <member name="P:Geo.InvocationException.InvocationPath">
            <summary>
            程序调用路径。
            </summary>
        </member>
        <member name="T:Geo.ShouldNotHappenException">
            <summary>
            程序调用错误。
            </summary>
        </member>
        <member name="M:Geo.ShouldNotHappenException.#ctor(System.Exception)">
            <summary>
            构造函数。
            </summary>
            <param name="exception">传入异常</param>
        </member>
        <member name="M:Geo.ShouldNotHappenException.#ctor(System.String)">
            <summary>
            以错误信息初始化
            </summary>
            <param name="Message">错误字符串</param>
        </member>
        <member name="P:Geo.ShouldNotHappenException.Message">
            <summary>
            错误信息描述。
            </summary>
        </member>
        <member name="T:Geo.Exceptions.ArgumentExceptionHandler">
            <summary>
            错误处理
            </summary>
        </member>
        <member name="T:Geo.Exceptions.ExceptionHandler">
            <summary>
            默认错误处理基类。
            </summary>
        </member>
        <member name="T:Geo.Exceptions.IExceptionHandler">
            <summary>
            异常处理接口
            </summary>
        </member>
        <member name="M:Geo.Exceptions.IExceptionHandler.Handle(System.Exception)">
            <summary>
            异常处理
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Geo.Exceptions.ExceptionHandler.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="F:Geo.Exceptions.ExceptionHandler.Log">
            <summary>
            日志记录
            </summary>
        </member>
        <member name="M:Geo.Exceptions.ExceptionHandler.Handle(System.Exception)">
            <summary>
            递交错误处理。
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Geo.Exceptions.ArgumentExceptionHandler.Handle(System.Exception)">
            <summary>
            递交错误处理。
            </summary>
            <param name="exception"></param>
        </member>
        <member name="T:Geo.Exceptions.InvocationExceptionHandler">
            <summary>
            错误处理
            </summary>
        </member>
        <member name="M:Geo.Exceptions.InvocationExceptionHandler.Handle(System.Exception)">
            <summary>
            递交错误处理。
            </summary> 
        </member>
        <member name="T:Geo.Helper.ListHelper">
            <summary>
            List 功能扩展
            </summary>
        </member>
        <member name="M:Geo.Helper.ListHelper.ToString``1(System.Collections.Generic.List{``0})">
            <summary>
            序列化显示
            </summary>
            <typeparam name="T"></typeparam>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.IBuilder`3">
            <summary>
            具参数（材料）的对象构造器。
            不难发现，与IService结构相似，只是名称不同而已。
            </summary>
            <typeparam name="TProduct">待构建的类型</typeparam>
            <typeparam name="TMaterial">材料</typeparam>
            <typeparam name="TSecondMaterial">第二材料</typeparam>
        </member>
        <member name="M:Geo.IBuilder`3.Build(`1,`2)">
            <summary>
            返回OK对象。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Geo.IBuilder`2">
            <summary>
            具参数（材料）的对象构造器。
            不难发现，与IService结构相似，只是名称不同而已。
            </summary>
            <typeparam name="TProduct">待构建的类型</typeparam>
            <typeparam name="TMaterial">材料</typeparam>
        </member>
        <member name="M:Geo.IBuilder`2.Build(`1)">
            <summary>
            返回OK对象。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Geo.AbstractBuilder`2">
            <summary>
            具参数（材料）的对象构造器。
            不难发现，与IService结构相似，只是名称不同而已。
            </summary>
            <typeparam name="TProduct">待构建的类型</typeparam>
            <typeparam name="TMaterial">材料</typeparam>
        </member>
        <member name="M:Geo.AbstractBuilder`2.Build(`1)">
            <summary>
            回OK对象。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Geo.AbstractBuilder`3">
            <summary>
            具参数（材料）的对象构造器。
            不难发现，与IService结构相似，只是名称不同而已。
            </summary>
            <typeparam name="TProduct">待构建的类型</typeparam>
            <typeparam name="TMaterial">材料</typeparam>
            <typeparam name="TSecondMaterial">第二材料</typeparam>
        </member>
        <member name="M:Geo.AbstractBuilder`3.Build(`1,`2)">
            <summary>
            回OK对象。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Geo.ICheckable">
            <summary>
            指示该数据是否需要审核
            </summary>
        </member>
        <member name="T:Gnsser.Checkers.IChecker`1">
            <summary>
            抽象接口，对某一对象进行检核
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Gnsser.Checkers.IChecker`1.Check(`0)">
            <summary>
            检核是否满足要求
            </summary>
            <param name="epochInfo"></param>
        </member>
        <member name="P:Gnsser.Checkers.IChecker`1.Exception">
            <summary>
            异常或错误信息，当且仅当检查不通过时，才具有该信息。
            </summary>
        </member>
        <member name="T:Gnsser.Checkers.Checker`1">
            <summary>
            抽象接口，对某一对象进行检核
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Gnsser.Checkers.Checker`1.Check(`0)">
            <summary>
            检核是否满足要求
            </summary>
            <param name="t"></param>
        </member>
        <member name="P:Gnsser.Checkers.Checker`1.Exception">
            <summary>
            异常或错误信息，当且仅当检查不通过时，才具有该信息。
            </summary>
        </member>
        <member name="T:Gnsser.Checkers.CheckerChain`1">
            <summary>
            历元信息检核,卫星数量检核。
            </summary>
        </member>
        <member name="M:Gnsser.Checkers.CheckerChain`1.#ctor">
            <summary>
            默认构造函数。
            </summary>
        </member>
        <member name="M:Gnsser.Checkers.CheckerChain`1.Add(Gnsser.Checkers.IChecker{`0})">
            <summary>
            添加一个检核器。
            </summary>
            <param name="checker"></param>
        </member>
        <member name="M:Gnsser.Checkers.CheckerChain`1.Check(`0)">
            <summary>
            检核是否满足要求,不对数据本身进行修改
            </summary>
            <param name="epochInfo"></param>
        </member>
        <member name="P:Gnsser.Checkers.CheckerChain`1.Checkers">
            <summary>
            卫星数量
            </summary>
        </member>
        <member name="T:Geo.IVectorStringId">
            <summary>
            向量指示
            </summary>
        </member>
        <member name="P:Geo.IVectorStringId.ToId">
            <summary>
            目标ID
            </summary>
        </member>
        <member name="T:Geo.VectorStringId">
            <summary>
            向量ID
            </summary>
        </member>
        <member name="T:Geo.StringId">
            <summary>
            字符串ID
            </summary>
        </member>
        <member name="P:Geo.VectorStringId.ToId">
            <summary>
            目标ID
            </summary>
        </member>
        <member name="T:Geo.IntId">
            <summary>
            整型数字ID
            </summary>
        </member>
        <member name="T:Geo.SiteValueType">
            <summary>
            测站测量类型,此处略显多余，数据库自身已有标识，但是为了方便。。。。
            但是，如果要动态增加新类型，则这个有大用处！！
            </summary>
        </member>
        <member name="F:Geo.SiteValueType.UnKnown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:Geo.SiteValueType.Gravity">
            <summary>
            重力
            </summary>
        </member>
        <member name="F:Geo.SiteValueType.Magnetic">
            <summary>
            磁力
            </summary>
        </member>
        <member name="F:Geo.SiteValueType.HeightAbnormal">
             <summary>
            高程异常 
             </summary>
        </member>
        <member name="F:Geo.SiteValueType.NormalHeight">
            <summary>
            正常高
            </summary>
        </member>
        <member name="F:Geo.SiteValueType.PlaneXy">
            <summary>
            高斯平面坐标
            </summary>
        </member>
        <member name="F:Geo.SiteValueType.VerticalDeflection">
            <summary>
            垂线偏差
            </summary>
        </member>
        <member name="F:Geo.SiteValueType.XYZ">
            <summary>
            空间直角坐标
            </summary>
        </member>
        <member name="F:Geo.SiteValueType.GeoCoord">
            <summary>
            大地坐标
            </summary>
        </member>
        <member name="F:Geo.SiteValueType.AstroCoord">
            <summary>
            天文坐标
            </summary>
        </member>
        <member name="F:Geo.SiteValueType.AstronomicalAzimuth">
            <summary>
            天文方位
            </summary>
        </member>
        <member name="F:Geo.SiteValueType.GeodeticAzimuth">
            <summary>
            大地方位
            </summary>
        </member>
        <member name="T:Geo.IStringIdName">
            <summary>
            可标识接口。具有 Id 和 Name 属性。
            </summary>
        </member>
        <member name="T:Geo.Common.AbbrevIdNamed">
            <summary>
            具有名称和别称
            </summary>
        </member>
        <member name="T:Geo.Common.IdNamed">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:Geo.Common.IdNamed.Equals(System.Object)">
            <summary>
            是否相等。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Common.IdNamed.GetHashCode">
            <summary>
            哈希数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Common.IdNamed.ToString">
            <summary>
            默认以逗号隔开的字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Common.IdNamed.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Geo.Common.IdNamed.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Geo.Common.AbbrevIdNamed.Abbreviation">
            <summary>
            名称简称
            </summary>
        </member>
        <member name="T:Geo.Common.AbbrevNamed">
            <summary>
            具有名称和别称
            </summary>
        </member>
        <member name="P:Geo.Common.AbbrevNamed.Abbreviation">
            <summary>
            名称简称
            </summary>
        </member>
        <member name="T:Geo.Common.AliasIdNamed">
            <summary>
            具有名称，别称和ID。
            </summary>
        </member>
        <member name="P:Geo.Common.AliasIdNamed.Alias">
            <summary>
            名称简称
            </summary>
        </member>
        <member name="T:Geo.Common.AliasNamed">
            <summary>
            具有名称和简称
            </summary>
        </member>
        <member name="P:Geo.Common.AliasNamed.Alias">
            <summary>
            名称简称
            </summary>
        </member>
        <member name="T:Geo.IdentifiedValue`2">
            <summary>
            具有名称的值，如命名的空间直角坐标
            </summary>
        </member>
        <member name="M:Geo.IdentifiedValue`2.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.IdentifiedValue`2.#ctor(`0,`1)">
            <summary>
            构造函数，为名称赋值。默认为空。
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Geo.IdentifiedValue`2.Equals(System.Object)">
            <summary>
            如果只是一个同名字符串，也会相等。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.IdentifiedValue`2.Id">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:Geo.StringIdValue`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.StringIdValue`1.#ctor(System.String,`0)">
            <summary>
            构造函数，为名称赋值。默认为空。
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Geo.IntIdValue`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.IntIdValue`1.#ctor(System.Int32,`0)">
            <summary>
            构造函数，为名称赋值。默认为空。
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Geo.IRowClass">
            <summary>
            顶层行类接口，即有属性顺序的类，如行文件，文件参数等
            </summary>
        </member>
        <member name="M:Geo.IdentifiedValueRow`2.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.IdentifiedValueRow`2.#ctor(`0,`1)">
            <summary>
            构造函数，为名称赋值。默认为空。
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Geo.IdentifiedValueRow`2.OrderedProperties">
            <summary>
            具有排序的属性名称列表
            </summary>
        </member>
        <member name="P:Geo.IdentifiedValueRow`2.Properties">
            <summary>
             具有数值单位的属性列表
            </summary>
        </member>
        <member name="M:Geo.StrIdValueRow`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.StrIdValueRow`1.#ctor(System.String,`0)">
            <summary>
            构造函数，为名称赋值。默认为空。
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Geo.NamedValueRow`1">
            <summary>
            具有名称的值，并且为表的一行。
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Geo.NamedValue`1">
            <summary>
            具有名称的值，如命名的空间直角坐标
            </summary>
        </member>
        <member name="M:Geo.NamedValue`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.NamedValue`1.#ctor(System.String,`0)">
            <summary>
            构造函数，为名称赋值。默认为空。
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Geo.NamedValue`1.Equals(System.Object)">
            <summary>
            如果只是一个同名字符串，也会相等。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.NamedValue`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:Geo.NamedValueRow`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.NamedValueRow`1.#ctor(System.String,`0)">
            <summary>
            构造函数，为名称赋值。默认为空。
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Geo.NamedValueRow`1.OrderedProperties">
            <summary>
            具有排序的属性名称列表
            </summary>
        </member>
        <member name="P:Geo.NamedValueRow`1.Properties">
            <summary>
             具有数值单位的属性列表
            </summary>
        </member>
        <member name="T:Geo.SingleValueRow`1">
            <summary>
            单值行，只有名称和数值
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Geo.SingleValueRow`1.#ctor(System.String,`0)">
            <summary>
            构造函数，为名称赋值。默认为空。
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Geo.IdFloatRow">
            <summary>
            双精度浮点数单行
            </summary>
        </member>
        <member name="M:Geo.IdFloatRow.#ctor(System.String,System.Double)">
            <summary>
            构造函数，为名称赋值。默认为空。
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Geo.TwoValueRow`1">
            <summary>
            双值行，只有名称和2个数值
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Geo.TwoValueRow`1.#ctor(System.String,`0,`0)">
            <summary>
            构造函数，为名称赋值。默认为空。
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Geo.TwoValueRow`1.Value2">
            <summary>
            第二个值
            </summary>
        </member>
        <member name="T:Geo.IdTwoFloatRow">
            <summary>
            双精度浮点数单行
            </summary>
        </member>
        <member name="M:Geo.IdTwoFloatRow.#ctor(System.String,System.Double,System.Double)">
            <summary>
            构造函数，为名称赋值。默认为空。
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Geo.ThreeValueRow`1">
            <summary>
            3值行，只有名称和3个值
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Geo.ThreeValueRow`1.#ctor(System.String,`0,`0,`0)">
            <summary>
            构造函数，为名称赋值。默认为空。
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Geo.ThreeValueRow`1.Value3">
            <summary>
            第3个值
            </summary>
        </member>
        <member name="T:Geo.IdThreeFloatRow">
            <summary>
            3个双精度浮点数单行
            </summary>
        </member>
        <member name="M:Geo.IdThreeFloatRow.#ctor(System.String,System.Double,System.Double,System.Double)">
            <summary>
            构造函数，为名称赋值。默认为空。
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Geo.IComment">
            <summary>
            包含 Comment备注。
            </summary>
        </member>
        <member name="T:Geo.InfoCode">
            <summary>
            信息码，通常是错误码。
            </summary>
        </member>
        <member name="F:Geo.InfoCode.Unkown">
            <summary>
            位置
            </summary>
        </member>
        <member name="F:Geo.InfoCode.ShortageOfCount">
            <summary>
            数量不足
            </summary>
        </member>
        <member name="T:Geo.IInfoMessage">
            <summary>
            分类类型 信息接口
            </summary>
        </member>
        <member name="T:Geo.AbstractEnumer`1">
            <summary>
            提供一个抽象的枚举器。
            </summary>
            <typeparam name="TMaterial"></typeparam>
        </member>
        <member name="M:Geo.AbstractEnumer`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.AbstractEnumer`1.SetEnumIndex(System.Int32,System.Int32)">
            <summary>
            设置遍历数量
            </summary>
            <param name="StartIndex"></param>
            <param name="EnumCount"></param>
        </member>
        <member name="M:Geo.AbstractEnumer`1.GetEnumerator">
            <summary>
            本身
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractEnumer`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            本身
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractEnumer`1.Dispose">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:Geo.AbstractEnumer`1.MoveNext">
            <summary>
            移动
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractEnumer`1.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="P:Geo.AbstractEnumer`1.IsCancel">
            <summary>
            外部指定，是否取消
            </summary>
        </member>
        <member name="P:Geo.AbstractEnumer`1.CurrentIndex">
            <summary>
            当前编号，从 0 开始。
            </summary>
        </member>
        <member name="P:Geo.AbstractEnumer`1.StartIndex">
            <summary>
            起始编号，从0开始。
            </summary>
        </member>
        <member name="P:Geo.AbstractEnumer`1.EnumCount">
            <summary>
            遍历数量，默认为最大值的一半。
            </summary>
        </member>
        <member name="P:Geo.AbstractEnumer`1.IsSkipCurrent">
            <summary>
            是否该略过当前，如果当前编号小于起始编号，则略过。
            </summary>
        </member>
        <member name="P:Geo.AbstractEnumer`1.MaxEnumIndex">
            <summary>
            最大的循环编号
            </summary>
        </member>
        <member name="P:Geo.AbstractEnumer`1.Current">
            <summary>
            当前
            </summary>
        </member>
        <member name="P:Geo.AbstractEnumer`1.System#Collections#IEnumerator#Current">
            <summary>
            当前
            </summary>
        </member>
        <member name="P:Geo.AbstractEnumer`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:Geo.IMessage">
            <summary>
            文本信息接口
            </summary>
        </member>
        <member name="P:Geo.IMessage.Message">
            <summary>
            对象信息
            </summary>
        </member>
        <member name="T:Geo.IEnabledMessage">
            <summary>
            对象信息，如果对象停用了，一般给出其原因。这样便于调试。
            </summary>
        </member>
        <member name="T:Geo.EnabledMessage">
            <summary>
            对象信息，如果对象停用了，一般给出其原因。
            </summary>
        </member>
        <member name="M:Geo.EnabledMessage.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.EnabledMessage.#ctor(System.Boolean,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="enabled"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Geo.EnabledMessage.Parse(System.String)">
            <summary>
            解析字符串。 如 1OK。首字符表示成功或失败。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.EnabledMessage.Message">
            <summary>
            对象信息，如果对象停用了，一般给出其原因。
            </summary>
        </member>
        <member name="P:Geo.EnabledMessage.Enabled">
            <summary>
            是否可用，是否启用。
            </summary>
        </member>
        <member name="P:Geo.EnabledMessage.Ok">
            <summary>
            消息为 OK，且 Enalbed = true.
            </summary>
        </member>
        <member name="T:Geo.IIntNode`1">
            <summary>
            标识是一个节点，可以具有父亲，父可以为Null
            </summary>
        </member>
        <member name="T:Geo.IStringNode`1">
            <summary>
            标识是一个节点，可以具有父亲，父可以为Null
            </summary>
        </member>
        <member name="T:Geo.ITypeIndex">
            <summary>
            具有一个标识属性，可以转换为Enum枚举，主要用于数据库
            </summary>
        </member>
        <member name="T:Geo.INullableTypeIndex">
            <summary>
            具有一个整型标识属性，可以转换为Enum枚举，主要用于数据库
            </summary>
        </member>
        <member name="T:Geo.IProgressCounter">
            <summary>
            进度条计数器。分为分类步骤和步骤的进度。
            一次任务分为多个分类步骤，每个分类步骤又有不同的进度。
            </summary>
        </member>
        <member name="M:Geo.IProgressCounter.Init(System.Collections.Generic.List{System.String},System.Int64)">
            <summary>
            具有多次分类进度的初始化，并且直接设置第一个分类的个数。
            </summary>
            <param name="classfies">进度</param>
            <param name="firstProcessCount">第一个分类的个数</param>
        </member>
        <member name="M:Geo.IProgressCounter.PerformClassifyStep(System.Int32)">
            <summary>
            当前分类向前一步,重新设置进度为0开始。
            </summary>
        </member>
        <member name="E:Geo.IProgressCounter.ClassifyValueChanged">
            <summary>
            分类进度值改变事件。
            </summary>
        </member>
        <member name="P:Geo.IProgressCounter.Classifies">
            <summary>
            分类进度列表。
            </summary>
        </member>
        <member name="P:Geo.IProgressCounter.ClassifyIndex">
            <summary>
            当前分类步骤编号 从 0 开始。
            </summary>
        </member>
        <member name="P:Geo.IProgressCounter.ClassifyCount">
            <summary>
            总共分类步骤数量
            </summary>
        </member>
        <member name="T:Geo.Common.ISolver">
            <summary>
            算法计算器。
            </summary>
        </member>
        <member name="M:Geo.Common.ISolver.Solve">
            <summary>
            执行计算。
            </summary>
        </member>
        <member name="T:Geo.Common.AbstractSolver">
            <summary>
            一个抽象的算法计算器实现
            </summary>
        </member>
        <member name="M:Geo.Common.AbstractSolver.Solve">
            <summary>
            执行计算。
            </summary>
        </member>
        <member name="T:Geo.ProcessState">
            <summary>
            数据处理状态
            </summary>
        </member>
        <member name="F:Geo.ProcessState.Failed">
            <summary>
            数据处理失败
            </summary>
        </member>
        <member name="F:Geo.ProcessState.Sucessed">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:Geo.ProcessState.Warning">
            <summary>
            处理通过，但是带有警告
            </summary>
        </member>
        <member name="F:Geo.ProcessState.Processing">
            <summary>
            正在处理
            </summary>
        </member>
        <member name="T:Geo.StatedMessageProducedEventHandler">
            <summary>
            处理过程中的信息
            </summary>
            <param name="StatedMessage"></param>
        </member>
        <member name="T:Geo.IStatedMessage">
            <summary>
            对象信息，如果对象停用了，一般给出其原因。这样便于调试。
            </summary>
        </member>
        <member name="P:Geo.IStatedMessage.ProcessState">
            <summary>
            处理状态
            </summary>
        </member>
        <member name="T:Geo.StatedMessage">
            <summary>
            对象信息，如果对象停用了，一般给出其原因。
            </summary>
        </member>
        <member name="M:Geo.StatedMessage.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.StatedMessage.#ctor(Geo.ProcessState,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="ProcessState"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Geo.StatedMessage.Parse(System.String)">
            <summary>
            解析字符串。 如 1OK。首字符表示成功或失败。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.StatedMessage.ToString">
            <summary>
            字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.StatedMessage.Equals(System.Object)">
            <summary>
            判断相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.StatedMessage.GetHashCode">
            <summary>
            哈希数
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.StatedMessage.Message">
            <summary>
            对象信息，如果对象停用了，一般给出其原因。
            </summary>
        </member>
        <member name="P:Geo.StatedMessage.ProcessState">
            <summary>
            是否可用，是否启用。
            </summary>
        </member>
        <member name="P:Geo.StatedMessage.Faild">
            <summary>
            失败实例
            </summary>
        </member>
        <member name="P:Geo.StatedMessage.Ok">
            <summary>
            消息为 OK，且 Enalbed = true.
            </summary>
        </member>
        <member name="T:Geo.Manager`1">
            <summary>
            管理器负责对一个对象反复折腾。管理器。管理器模式，将对一个类的所有对象的管理封装到一个单独的管理器类中。
            这使得管理职责的变化独立于类本身，并且管理器还可以为不同的类进行重用。
            </summary>
            <typeparam name="TMaster">待处理类型</typeparam>
        </member>
        <member name="F:Geo.Manager`1.log">
            <summary>
            日志记录。错误信息记录在日志里面。
            </summary>
        </member>
        <member name="P:Geo.Manager`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Geo.Manager`1.Message">
            <summary>
            执行信息
            </summary>
        </member>
        <member name="T:Geo.EnumerableWalker`1">
            <summary>
            数据遍历处理器
            </summary>
            <typeparam name="TMaster">要访问的数据类型</typeparam>
        </member>
        <member name="T:Geo.IWalker">
            <summary>
            游走接口
            </summary>
        </member>
        <member name="M:Geo.IWalker.Walk">
            <summary>
            游走
            </summary>
        </member>
        <member name="M:Geo.EnumerableWalker`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            数据遍历处理器，构造函数。
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Geo.EnumerableWalker`1.Walk">
            <summary>
            遍历数据
            </summary> 
        </member>
        <member name="P:Geo.EnumerableWalker`1.EnumerableData">
            <summary>
            可遍历的数据源。
            </summary>
        </member>
        <member name="P:Geo.EnumerableWalker`1.ProcessorChain">
            <summary>
            处理器。访问者设计模式。一个责任链。
            </summary>
        </member>
        <member name="T:Geo.IReviser`1">
            <summary>
            矫正器，输入对象本身改变对象内部结构，属于构造函数的延续。
            或者用于遍历数据。访问者设计模式的一种实现。
            </summary>
            <typeparam name="TMaster">待处理类型</typeparam>
        </member>
        <member name="M:Geo.IReviser`1.Revise(`0@)">
            <summary>
            处理数据,这里添加 ref 标记，是提醒：对象内容将会改变。成功则返回 true，发生无法继续进行错误，则返回 false。
            </summary>
            <param name="obj">待处理对象</param>
        </member>
        <member name="P:Geo.IReviser`1.Message">
            <summary>
            执行过程信息回馈
            </summary>
        </member>
        <member name="P:Geo.IReviser`1.Buffers">
            <summary>
            支持前端缓存数据
            </summary>
        </member>
        <member name="T:Geo.Reviser`1">
            <summary>
            处理器，输入对象本身改变对象内部结构，属于构造函数的延续。
            或者用于遍历数据。访问者设计模式的一种实现。
            </summary>
            <typeparam name="TMaster">待处理(主人，访问者)类型</typeparam>
        </member>
        <member name="M:Geo.Reviser`1.#ctor(System.String)">
            <summary>
            访问处理器， 默认构造函数
            </summary> 
            <param name="name">处理器名称，推荐写上</param>
        </member>
        <member name="F:Geo.Reviser`1.log">
            <summary>
            日志记录。错误信息记录在日志里面。
            </summary>
        </member>
        <member name="M:Geo.Reviser`1.Revise(`0@)">
            <summary>
            处理数据
            </summary>
            <param name="obj">待处理对象</param>
        </member>
        <member name="P:Geo.Reviser`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Geo.Reviser`1.Message">
            <summary>
            执行信息
            </summary>
        </member>
        <member name="P:Geo.Reviser`1.Buffers">
            <summary>
            支持前端缓存数据
            </summary>
        </member>
        <member name="T:Geo.ITwinsReviser`1">
            <summary>
             双对象处理器，输入对象本身改变对象内部结构，属于构造函数的延续。
            或者用于遍历数据。访问者设计模式的一种实现。
            </summary>
            <typeparam name="TMaster">待处理类型</typeparam>
        </member>
        <member name="M:Geo.ITwinsReviser`1.Revise(`0@,`0@)">
            <summary>
            处理数据,这里添加 ref 标记，是提醒：对象内容将会改变。成功则返回 true，发生无法继续进行错误，则返回 false。
            </summary>
            <param name="objA">待处理对象 A</param>
            <param name="objB">待处理对象 B</param>
        </member>
        <member name="P:Geo.ITwinsReviser`1.Message">
            <summary>
            执行过程信息回馈
            </summary>
        </member>
        <member name="T:Geo.TwinsReviser`1">
            <summary>
            双对象处理器，输入对象本身改变对象内部结构，属于构造函数的延续。
            或者用于遍历数据。访问者设计模式的一种实现。
            </summary>
            <typeparam name="TMaster">待处理(主人，访问者)类型</typeparam>
        </member>
        <member name="M:Geo.TwinsReviser`1.#ctor(System.String)">
            <summary>
            访问处理器， 默认构造函数
            </summary> 
            <param name="name">处理器名称，推荐写上</param>
        </member>
        <member name="F:Geo.TwinsReviser`1.log">
            <summary>
            日志记录。错误信息记录在日志里面。
            </summary>
        </member>
        <member name="M:Geo.TwinsReviser`1.Revise(`0@,`0@)">
            <summary>
            处理数据
            </summary>
            <param name="objA">待处理对象 A</param>
            <param name="objB">待处理对象 B</param>
        </member>
        <member name="P:Geo.TwinsReviser`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Geo.TwinsReviser`1.Message">
            <summary>
            执行信息
            </summary>
        </member>
        <member name="T:Geo.ReviserManager`1">
            <summary>
            数据矫正管理器
            </summary> 
            <typeparam name="TMaster">待处理(主人，访问者)类型</typeparam>
        </member>
        <member name="M:Geo.ReviserManager`1.#ctor">
            <summary>
            数据处理链条
            </summary>
        </member>
        <member name="M:Geo.ReviserManager`1.GetReviser``1">
            <summary>
            获取修正器
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Geo.ReviserManager`1.Revise(`0@)">
            <summary>
            遍历数据
            </summary> 
        </member>
        <member name="M:Geo.ReviserManager`1.InsertProcessor(System.Int32,Geo.IReviser{`0})">
            <summary>
            添加一个历元信息处理器。
            </summary>
            <param name="index">编号</param>
            <param name="processor">历元信息处理器</param>
        </member>
        <member name="M:Geo.ReviserManager`1.AddProcessor(Geo.IReviser{`0})">
            <summary>
            添加一个历元信息处理器。
            </summary>
            <param name="processor">历元信息处理器</param>
        </member>
        <member name="M:Geo.ReviserManager`1.AddProcessor(System.Collections.Generic.IEnumerable{Geo.IReviser{`0}})">
            <summary>
            批量添加历元处理器
            </summary>
            <param name="processor">批量历元信息处理器</param>
        </member>
        <member name="M:Geo.ReviserManager`1.Clear">
            <summary>
            清除所有的处理器
            </summary>
        </member>
        <member name="P:Geo.ReviserManager`1.Precessors">
            <summary>
            处理器。访问者设计模式。
            </summary>
        </member>
        <member name="T:Geo.TwinsReviserManager`1">
            <summary>
            数据遍历处理器
            </summary>
            <typeparam name="TMaster">待处理(主人，访问者)类型</typeparam>
        </member>
        <member name="M:Geo.TwinsReviserManager`1.#ctor">
            <summary>
            数据处理链条
            </summary>
        </member>
        <member name="M:Geo.TwinsReviserManager`1.Revise(`0@,`0@)">
            <summary>
            遍历数据
            </summary> 
        </member>
        <member name="M:Geo.TwinsReviserManager`1.InsertProcessor(System.Int32,Geo.ITwinsReviser{`0})">
            <summary>
            添加一个历元信息处理器。
            </summary>
            <param name="index">编号</param>
            <param name="processor">历元信息处理器</param>
        </member>
        <member name="M:Geo.TwinsReviserManager`1.AddProcessor(Geo.ITwinsReviser{`0})">
            <summary>
            添加一个历元信息处理器。
            </summary>
            <param name="processor">历元信息处理器</param>
        </member>
        <member name="M:Geo.TwinsReviserManager`1.AddProcessor(System.Collections.Generic.List{Geo.ITwinsReviser{`0}})">
            <summary>
            批量添加历元处理器
            </summary>
            <param name="processor">批量历元信息处理器</param>
        </member>
        <member name="M:Geo.TwinsReviserManager`1.Clear">
            <summary>
            清除所有的处理器
            </summary>
        </member>
        <member name="P:Geo.TwinsReviserManager`1.Precessors">
            <summary>
            处理器。访问者设计模式。
            </summary>
        </member>
        <member name="T:Geo.TwoEnumerableWalker`1">
            <summary>
            两个数据源的数据遍历处理器
            </summary>
            <typeparam name="TMaster">要访问的数据类型</typeparam>
        </member>
        <member name="M:Geo.TwoEnumerableWalker`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            数据遍历处理器，构造函数。
            </summary>
            <param name="dataA">数据源A</param>
            <param name="dataB">数据源B</param>
        </member>
        <member name="M:Geo.TwoEnumerableWalker`1.Walk">
            <summary>
            遍历数据
            </summary> 
        </member>
        <member name="P:Geo.TwoEnumerableWalker`1.EnumerableDataA">
            <summary>
            可遍历的数据源A
            </summary>
        </member>
        <member name="P:Geo.TwoEnumerableWalker`1.EnumerableDataB">
            <summary>
            可遍历的数据源B 
            </summary>
        </member>
        <member name="P:Geo.TwoEnumerableWalker`1.ProcessorChain">
            <summary>
            处理器。访问者设计模式。一个责任链。
            </summary>
        </member>
        <member name="T:Geo.Units">
            <summary>
            单位枚举
            </summary>
        </member>
        <member name="F:Geo.Units.M">
            <summary>
            米
            </summary>
        </member>
        <member name="T:Geo.UnitHelper">
            <summary>
            帮助类
            </summary>
        </member>
        <member name="M:Geo.UnitHelper.ParseUnitEnum(System.String)">
            <summary>
            解析为枚举
            </summary>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.UnitHelper.ParseUnitEnum(Geo.Unit)">
            <summary>
            解析为枚举
            </summary>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.UnitHelper.GetUnitByName(System.String)">
            <summary>
            通过名称获取单位对象。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.UnitType">
            <summary>
            单位类型
            </summary>
        </member>
        <member name="F:Geo.UnitType.Length">
            <summary>
            长度
            </summary>
        </member>
        <member name="F:Geo.UnitType.Angle">
            <summary>
            角度
            </summary>
        </member>
        <member name="F:Geo.UnitType.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="T:Geo.Unit">
            <summary>
            单位,如米
            </summary>
        </member>
        <member name="M:Geo.Unit.#ctor(System.String,Geo.UnitType,System.Double)">
            <summary>
            构造方法,默认为单位简称
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Geo.Unit.#ctor(System.String,System.String,Geo.UnitType,System.Double)">
            <summary>
            构造方法
            </summary>
            <param name="name"></param>
            <param name="Abbreviation"></param>
            <param name="UnitType"></param>
        </member>
        <member name="M:Geo.Unit.Equals(System.Object)">
            <summary>
            只要有个全称相等，则相等。否则比较简称，有一个则相等。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Unit.Gauge">
            <summary>
            转换因子，选择一个基本的转换单位，以其为中心，进行转换。
             [geɪdʒ]   美 [gedʒ]  习n. 计量器；标准尺寸；容量规格vt. 测量；估计；给…定规格
            </summary>
        </member>
        <member name="P:Geo.Unit.UnitType">
            <summary>
            单位类型
            </summary>
        </member>
        <member name="P:Geo.Unit.Name">
            <summary>
            名称,获取则为第一个匹配的。设置则添加。
            </summary>
        </member>
        <member name="P:Geo.Unit.Abbreviation">
            <summary>
            简称,获取则为第一个匹配的。设置则添加。
            </summary>
        </member>
        <member name="P:Geo.Unit.Names">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Geo.Unit.Abbreviations">
            <summary>
            简称，如M
            </summary>
        </member>
        <member name="P:Geo.Unit.Meter">
            <summary>
            米 Meter
            </summary>
        </member>
        <member name="P:Geo.Unit.Decimeter">
            <summary>
            分米 Decimeter
            </summary>
        </member>
        <member name="P:Geo.Unit.Centimeter">
            <summary>
            厘米 Meter
            </summary>
        </member>
        <member name="P:Geo.Unit.Millimeter">
            <summary>
            毫米 Millimeter
            </summary>
        </member>
        <member name="P:Geo.Unit.Micrometer">
            <summary>
            微米 Micrometer
            </summary>
        </member>
        <member name="P:Geo.Unit.Nanometer">
            <summary>
            纳米 Nanometer
            </summary>
        </member>
        <member name="P:Geo.Unit.Day">
            <summary>
            天，时间单位
            </summary>
        </member>
        <member name="P:Geo.Unit.Hour">
            <summary>
            小时，时间单位
            </summary>
        </member>
        <member name="P:Geo.Unit.Minute">
            <summary>
            分，分钟，时间单位
            </summary>
        </member>
        <member name="P:Geo.Unit.Second">
            <summary>
            单位为秒，时间
            </summary>
        </member>
        <member name="P:Geo.Unit.Rad">
            <summary>
            弧度 Rad，角度单位
            </summary>
        </member>
        <member name="P:Geo.Unit.Degree">
            <summary>
            度 Deree，角度单位
            </summary>
        </member>
        <member name="P:Geo.Unit.DMS_S">
            <summary>
            度分秒小数，如123456.78为123°45′56.78″
            </summary>
        </member>
        <member name="P:Geo.Unit.HMS_S">
            <summary>
            时角，天文单位
            </summary>
        </member>
        <member name="T:Geo.BufferedSegment`2">
            <summary>
            具有前后缓冲的一段，由两个标量组成。
            </summary>
        </member>
        <member name="T:Geo.IBufferedSegment`2">
            <summary>
            具有缓冲的一维段接口
            </summary>
            <typeparam name="TValue">数值</typeparam>
            <typeparam name="TSpan">范围</typeparam>
        </member>
        <member name="M:Geo.IBufferedSegment`2.BufferedContains(`0)">
            <summary>
            完全包含或相等才返回true，包含缓冲部分。
            </summary>
            <param name="currentVal">待判断时段</param>
            <returns></returns>
        </member>
        <member name="M:Geo.IBufferedSegment`2.BufferedContains(Geo.ISegment{`0,`1})">
            <summary>
            是否包含这段
            </summary>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IBufferedSegment`2.BufferedContains(Geo.IBufferedSegment{`0,`1})">
            <summary>
            是否包含这段
            </summary>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IBufferedSegment`2.BufferedIntersect(Geo.ISegment{`0,`1})">
            <summary>
            是否相交
            </summary>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IBufferedSegment`2.BufferedIntersect(Geo.IBufferedSegment{`0,`1})">
            <summary> 
            是否相交，包含缓冲部分。
            </summary>
            <param name="segment">另一个段</param> 
            <returns></returns>
        </member>
        <member name="P:Geo.IBufferedSegment`2.BufferedStart">
            <summary>
            含缓冲后起始
            </summary>
        </member>
        <member name="P:Geo.IBufferedSegment`2.BufferedEnd">
            <summary>
            含缓冲后的终止
            </summary>
        </member>
        <member name="P:Geo.IBufferedSegment`2.BufferedSpan">
            <summary>
            包含起始缓冲后的范围
            </summary>
        </member>
        <member name="P:Geo.IBufferedSegment`2.StartBuffer">
            <summary>
            起始段的缓冲大小
            </summary>
        </member>
        <member name="P:Geo.IBufferedSegment`2.EndBuffer">
            <summary>
            结束端的缓冲大小
            </summary>
        </member>
        <member name="M:Geo.BufferedSegment`2.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.BufferedSegment`2.#ctor(`0,`0,`1)">
            <summary>
            段的构造函数
            </summary>
            <param name="start">开始</param>
            <param name="end">结束</param>
            <param name="buffer">缓冲</param>
        </member>
        <member name="M:Geo.BufferedSegment`2.#ctor(`0,`0,`1,`1)">
            <summary>
            段的构造函数
            </summary>
            <param name="start">开始</param>
            <param name="end">结束</param>
            <param name="startBuffer">前端的缓冲</param>
            <param name="endBuffer">后端的缓冲</param>
        </member>
        <member name="M:Geo.BufferedSegment`2.SetSameBuffer(`1)">
            <summary>
            两边缓冲设置为相同
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Geo.BufferedSegment`2.BufferedContains(`0)">
            <summary>
            完全包含或相等才返回true，包含缓冲部分。
            </summary>
            <param name="currentVal">待判断时段</param>
            <returns></returns>
        </member>
        <member name="M:Geo.BufferedSegment`2.BufferedContains(Geo.ISegment{`0,`1})">
            <summary>
            完全包含或相等才返回true，包含缓冲部分。
            </summary>
            <param name="segment">待判断时段</param>
            <returns></returns>
        </member>
        <member name="M:Geo.BufferedSegment`2.BufferedContains(Geo.IBufferedSegment{`0,`1})">
            <summary>
            完全包含或相等才返回true，包含缓冲部分。
            </summary>
            <param name="segment">待判断时段</param>
            <returns></returns>
        </member>
        <member name="M:Geo.BufferedSegment`2.BufferedIntersect(Geo.ISegment{`0,`1})">
            <summary> 
            是否相交，包含缓冲部分。
            </summary>
            <param name="segment">另一个段</param> 
            <returns></returns>
        </member>
        <member name="M:Geo.BufferedSegment`2.BufferedIntersect(Geo.IBufferedSegment{`0,`1})">
            <summary> 
            是否相交，包含缓冲部分。
            </summary>
            <param name="segment">另一个段</param> 
            <returns></returns>
        </member>
        <member name="P:Geo.BufferedSegment`2.BufferedSpan">
            <summary>
            含缓冲的长度
            </summary>
        </member>
        <member name="P:Geo.BufferedSegment`2.EndBuffer">
            <summary>
             缓冲，如 即可推估的时间。单位：秒。
             一般设为2倍间距，导航文件为2*2=4小时，Sp3为30分钟。
            </summary>
        </member>
        <member name="P:Geo.BufferedSegment`2.StartBuffer">
            <summary>
             缓冲，如 即可推估的时间。单位：秒。
             一般设为2倍间距，导航文件为2*2=4小时，Sp3为30分钟。
            </summary>
        </member>
        <member name="P:Geo.BufferedSegment`2.BufferedStart">
            <summary>
            缓冲后的开始
            </summary>
        </member>
        <member name="P:Geo.BufferedSegment`2.BufferedEnd">
            <summary>
            缓冲后的结束
            </summary>
        </member>
        <member name="T:Geo.BufferedSuccessiveSegment`3">
            <summary>
            断断续续的分段。
            </summary>
            <typeparam name="TSegment">区段</typeparam>
            <typeparam name="TValue">数值</typeparam>
            <typeparam name="TSpan">长度</typeparam>
        </member>
        <member name="M:Geo.BufferedSuccessiveSegment`3.#ctor">
            <summary>
            段的构造函数 
            </summary> 
        </member>
        <member name="M:Geo.BufferedSuccessiveSegment`3.Add(`0)">
            <summary>
            增加
            </summary>
            <param name="segment">分段</param>
        </member>
        <member name="M:Geo.BufferedSuccessiveSegment`3.Remove(`0)">
            <summary>
            移除
            </summary>
            <param name="segment">段落</param>
        </member>
        <member name="M:Geo.BufferedSuccessiveSegment`3.Contains(`1)">
            <summary>
            是否包含
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.BufferedSuccessiveSegment`3.GetSegment(`1)">
            <summary>
            返回时段。若没有则返回默认值。
            </summary>
            <param name="time">指定时间</param>
            <returns>若没有则返回null</returns>
        </member>
        <member name="M:Geo.BufferedSuccessiveSegment`3.ToString">
            <summary>
            显示
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.BufferedSuccessiveSegment`3.GetEnumerator">
            <summary>
            IEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.BufferedSuccessiveSegment`3.Count">
            <summary>
            独立时段数量。
            </summary>
        </member>
        <member name="P:Geo.BufferedSuccessiveSegment`3.Segments">
            <summary>
            数据，核心存储
            </summary>
        </member>
        <member name="P:Geo.BufferedSuccessiveSegment`3.BufferedStart">
            <summary>
            具有缓冲的起始
            </summary>
        </member>
        <member name="P:Geo.BufferedSuccessiveSegment`3.BufferedEnd">
            <summary>
            具有缓冲的结束
            </summary>
        </member>
        <member name="P:Geo.BufferedSuccessiveSegment`3.Start">
            <summary>
            起始
            </summary>
        </member>
        <member name="P:Geo.BufferedSuccessiveSegment`3.End">
            <summary>
            结束
            </summary>
        </member>
        <member name="T:Geo.SuccessiveSegment`3">
            <summary>
            断断续续的分段。
            </summary>
            <typeparam name="TSegment">区段</typeparam>
            <typeparam name="TValue">数值</typeparam>
            <typeparam name="TSpan">长度</typeparam>
        </member>
        <member name="M:Geo.SuccessiveSegment`3.#ctor">
            <summary>
            段的构造函数 
            </summary> 
        </member>
        <member name="M:Geo.SuccessiveSegment`3.Add(`0)">
            <summary>
            增加
            </summary>
            <param name="segment">分段</param>
        </member>
        <member name="M:Geo.SuccessiveSegment`3.Remove(`0)">
            <summary>
            移除
            </summary>
            <param name="segment">段落</param>
        </member>
        <member name="M:Geo.SuccessiveSegment`3.Contains(`1)">
            <summary>
            是否包含
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.SuccessiveSegment`3.GetSegment(`1)">
            <summary>
            返回第一个匹配的时段。若没有则返回默认值。
            </summary>
            <param name="time">指定时间</param>
            <returns>若没有则返回null</returns>
        </member>
        <member name="M:Geo.SuccessiveSegment`3.ToString">
            <summary>
            显示
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.SuccessiveSegment`3.GetEnumerator">
            <summary>
            IEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.SuccessiveSegment`3.Count">
            <summary>
            独立时段数量。
            </summary>
        </member>
        <member name="P:Geo.SuccessiveSegment`3.Segments">
            <summary>
            数据，核心存储
            </summary>
        </member>
        <member name="P:Geo.SuccessiveSegment`3.Start">
            <summary>
            起始
            </summary>
        </member>
        <member name="P:Geo.SuccessiveSegment`3.End">
            <summary>
            结束
            </summary>
        </member>
        <member name="T:Geo.IntFractionNumber">
            <summary>
            一个数字，分成了整数部分和小数部分。
            小数部分不一定在0到1之间。可以手动指定。
            </summary>
        </member>
        <member name="T:Geo.NumeralValue">
            <summary>
            具有一个双精度Value属性。
            </summary>
        </member>
        <member name="T:Geo.INumeralValue">
            <summary>
            具有一个双精度Value属性。
            </summary>
        </member>
        <member name="P:Geo.INumeralValue.IsZero">
            <summary>
            值是否为 0 
            </summary>
        </member>
        <member name="M:Geo.NumeralValue.#ctor(System.Double)">
            <summary>
            构造函数。
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="P:Geo.NumeralValue.IsZero">
            <summary>
            是否值为 0 
            </summary>
        </member>
        <member name="P:Geo.NumeralValue.Zero">
            <summary>
            值为0。
            </summary>
        </member>
        <member name="M:Geo.IntFractionNumber.#ctor(System.Double,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="fraction"></param>
            <param name="integer"></param>
        </member>
        <member name="M:Geo.IntFractionNumber.#ctor(System.Double,System.Boolean)">
            <summary>
            默认构造函数
            </summary>
            <param name="currentVal"></param>
            <param name="IsPositiveFraction"></param>
        </member>
        <member name="P:Geo.IntFractionNumber.Int">
            <summary>
            整数部分
            </summary>
        </member>
        <member name="P:Geo.IntFractionNumber.Fraction">
            <summary>
            小数部分
            </summary>
        </member>
        <member name="T:Geo.SmoothTimeExceededEventHandler">
            <summary>
            时间超过了最大允许的间隙
            </summary>
        </member>
        <member name="T:Geo.SmoothTimeValue">
            <summary>
            平滑数据
             a class used to store filter data for a SV.
            </summary>
        </member>
        <member name="T:Geo.SmoothValue">
            <summary>
            平滑数据.一定数量的平均值。
            规则：
            如果第二个数据超限，则采用第二个数据。
            </summary>
        </member>
        <member name="M:Geo.SmoothValue.#ctor(System.Double,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            默认构造函数，具有超限判断重置能力
            </summary>
            <param name="maxValueDiffer"></param>
            <param name="isResetWhenExceeded"></param>
            <param name="isPercentMaxDifferValue"></param>
            <param name="IsWindowSizeFixed"></param>
            <param name="IndicatedWindowSize"></param>
        </member>
        <member name="M:Geo.SmoothValue.#ctor(System.Int32)">
            <summary>
            专门针对平滑数值，认为数据已经经过判断，比较良好。
            </summary>
            <param name="IndicatedWindowSize"></param>
        </member>
        <member name="M:Geo.SmoothValue.GetValueDiffer(System.Double)">
            <summary>
            获取一个数值与当前平滑值的偏差，用以判断是否超限。
            若是第一个值，则返回本身。
            </summary>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.SmoothValue.IsValueAdaptable(System.Double)">
            <summary>
            数值是否复合限差，每次获取时都计算一次。
            </summary>
        </member>
        <member name="M:Geo.SmoothValue.Regist(System.Double)">
            <summary>
            新增一个数据，重新计算平滑值。如果超限，则返回false，如果正常则返回true
            </summary>
            <param name="newVal"></param>
        </member>
        <member name="M:Geo.SmoothValue.AddAndCaculateSmoothValue(System.Double)">
            <summary>
            添加一个新值，并计算平滑值。通常在质量检核之后调用。
            </summary>
            <param name="newVal"></param>
        </member>
        <member name="M:Geo.SmoothValue.SetNewValue(System.Double)">
            <summary>
            设置值
            </summary>
            <param name="newVal"></param>
        </member>
        <member name="M:Geo.SmoothValue.UpdateSmoothValue">
            <summary>
            更新并平滑数据，增加窗口。
            </summary>
        </member>
        <member name="M:Geo.SmoothValue.ResetWindowSize">
            <summary>
            重置，窗口重置为0.重新开始统计和计算。
            </summary>
        </member>
        <member name="M:Geo.SmoothValue.OnValueReseted(Geo.SmoothValue)">
            <summary>
            平滑数据终端，重新统计。
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.SmoothValue.OnValueExceeded(Geo.SmoothValue)">
            <summary>
            数据超出限制了。
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.SmoothValue.ToString">
            <summary>
            字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="E:Geo.SmoothValue.ValueReseted">
            <summary>
            平滑数据超限制，重新计数
            </summary>
        </member>
        <member name="E:Geo.SmoothValue.ValueExceeded">
            <summary>
            数据超出了。但不一定中断。
            </summary>
        </member>
        <member name="P:Geo.SmoothValue.IsWindowSizeFixed">
            <summary>
            是否固定窗口大小。如滑动窗口。
            </summary>
        </member>
        <member name="P:Geo.SmoothValue.Values">
            <summary>
            数值，在滑动窗口时使用。
            </summary>
        </member>
        <member name="P:Geo.SmoothValue.IndicatedWindowSize">
            <summary>
            指定的窗口大小。
            </summary>
        </member>
        <member name="P:Geo.SmoothValue.Name">
            <summary>
            名称，如卫星编号。
            </summary>
        </member>
        <member name="P:Geo.SmoothValue.IsPercentMaxDifferValue">
            <summary>
            最大偏差值，是否实时百分比值（相对误差），如0.5表示50%，对于相位，以周为单位，适用。
            </summary>
        </member>
        <member name="P:Geo.SmoothValue.MaxAllowedValueDiffer">
            <summary>
            允许最大的数值差
            </summary>
        </member>
        <member name="P:Geo.SmoothValue.LastValue">
            <summary>
            最后一个原始值。
            </summary>
        </member>
        <member name="P:Geo.SmoothValue.IsResetWhenExceeded">
            <summary>
            当前超限时，是否继续统计ture，或者重新设置统计窗口false.
            </summary>
        </member>
        <member name="P:Geo.SmoothValue.LastValueDiffer">
            <summary>
            最后两历元数值差绝对值，如果指定采用百分比形式，则返回分数数值。
            </summary>
        </member>
        <member name="P:Geo.SmoothValue.Value">
            <summary>
            平滑值。
            </summary>
        </member>
        <member name="P:Geo.SmoothValue.CurrentWindowSize">
            <summary>
            当前窗口大小,有一个数据是一个，如果没有重置，窗口逐渐递增。
            aboutSize of current window, in samples.
            </summary>
        </member>
        <member name="P:Geo.SmoothValue.StdOrRms">
            <summary>
            平滑值的中误差,为正数。如果没有数据，则返回 0。
            </summary>
        </member>
        <member name="M:Geo.SmoothTimeValue.#ctor(System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="maxTimeDiffer"></param>
            <param name="maxValueDiffer"></param>
            <param name="isResetWhenExceeded"></param>
            <param name="isPercentMaxDifferValue"></param>
        </member>
        <member name="M:Geo.SmoothTimeValue.OnTimeExceeded(Geo.SmoothTimeValue)">
            <summary>
            由于时间超限，平滑数据中断。
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.SmoothTimeValue.Regist(Geo.Times.Time,System.Double)">
            <summary>
            更新时间和数值,数值许可，则返回true，数值超限则重置并返回false。
            </summary>
            <param name="time"></param>
            <param name="newVal"></param>
        </member>
        <member name="M:Geo.SmoothTimeValue.Regist(Geo.Times.Time)">
            <summary>
            更新时间,如果超限，则返回false，如果正常则返回true。
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.SmoothTimeValue.Set(Geo.Times.Time)">
            <summary>
            更新时间
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Geo.SmoothTimeValue.ToString">
            <summary>
            字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="E:Geo.SmoothTimeValue.TimeExceeded">
            <summary>
            平滑数据改变
            </summary>
        </member>
        <member name="P:Geo.SmoothTimeValue.LastTime">
            <summary>
            最后一个时间。
            </summary>
        </member>
        <member name="P:Geo.SmoothTimeValue.LastTimeDiffer">
            <summary>
            最后两历元时间差，秒,返回为绝对值
            </summary>
        </member>
        <member name="P:Geo.SmoothTimeValue.MaxAllowedTimeDiffer">
            <summary>
            允许最大的时间差，时间秒.
            需要构造时赋值，或在Add前赋值。
            </summary>
        </member>
        <member name="P:Geo.SmoothTimeValue.IsTimeExceeded">
            <summary>
            当前时间是否超出了最大允许的时间差。每次获取时计算。
            </summary>
        </member>
        <member name="T:Geo.WindowDataManager`3">
            <summary>
            窗口数据管理器
            </summary>
            <typeparam name="Tkey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Geo.WindowDataManager`3.#ctor(System.Int32)">
            <summary>
            默认构造函数。
            </summary>
            <param name="WindowSize"></param>
        </member>
        <member name="M:Geo.WindowDataManager`3.Create(`0)">
            <summary>
            创建一个。
            </summary>
            <param name="keyPrev"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.WindowDataManager`3.WindowSize">
            <summary>
            窗口大小。
            </summary>
        </member>
        <member name="T:Geo.WindowDataManager`2">
            <summary>
            窗口数据管理器
            </summary>
            <typeparam name="Tkey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Geo.WindowDataManager`2.#ctor(System.Int32)">
            <summary>
            窗口数据管理器
            </summary>
            <param name="WindowSize"></param>
        </member>
        <member name="M:Geo.WindowDataManager`2.Create(`0)">
            <summary>
            创建一个。
            </summary>
            <param name="keyPrev"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.WindowDataManager`2.WindowSize">
            <summary>
            窗口大小。
            </summary>
        </member>
        <member name="P:Geo.WindowDataManager`2.HasFull">
            <summary>
            是否已经具有满窗口。
            </summary>
        </member>
        <member name="T:Geo.SmoothValueEventHandler">
            <summary>
            平滑数据发生了中断。
            </summary>
        </member>
        <member name="T:Geo.ISurveyValue">
            <summary>
            具有误差的数值接口
            </summary>
        </member>
        <member name="P:Geo.ISurveyValue.Error">
            <summary>
            标准差。中误差。
            </summary>
        </member>
        <member name="T:Geo.ISurveyTwoValue">
            <summary>
            具有2个测量值接口
            </summary>
        </member>
        <member name="P:Geo.ISurveyTwoValue.ValueB">
            <summary>
            测量B值
            </summary>
        </member>
        <member name="P:Geo.ISurveyTwoValue.ErrorB">
            <summary>
            标准差B。中误差B。
            </summary>
        </member>
        <member name="T:Geo.ISurveyTriValue">
             <summary>
            具有3个测量值接口
             </summary>
        </member>
        <member name="P:Geo.ISurveyTriValue.ValueC">
            <summary>
            测量C值
            </summary>
        </member>
        <member name="P:Geo.ISurveyTriValue.ErrorC">
            <summary>
            标准差C。中误差C。
            </summary>
        </member>
        <member name="T:Geo.IParamNameBuilder">
            <summary>
            参数命名器,生成接口
            </summary>
        </member>
        <member name="T:Geo.ParamNameBuilder">
            <summary>
            参数名称生成器
            </summary>
        </member>
        <member name="M:Geo.ParamNameBuilder.GetParamName(System.Object)">
            <summary>
            获取名称
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.ParamNameBuilder.Build">
            <summary>
            生成。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Geo.IRmsed`1">
            <summary>
            具有权值 Rms 属性。
            </summary>
        </member>
        <member name="P:Geo.IRmsed`1.Rms">
            <summary>
            Rms 属性
            </summary>
        </member>
        <member name="T:Geo.RawSmoothValue">
            <summary>
            同时具有平滑数据和原始数据
            </summary>
        </member>
        <member name="M:Geo.RawSmoothValue.#ctor(System.Double,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="value"></param>
            <param name="smoothValue"></param>
        </member>
        <member name="P:Geo.RawSmoothValue.SmoothValue">
            <summary>
            平滑数据
            </summary>
        </member>
        <member name="T:Geo.RatedValue">
            <summary>
            值与速度。
            </summary>
        </member>
        <member name="M:Geo.RatedValue.#ctor(System.Double,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="value"></param>
            <param name="rate"></param>
        </member>
        <member name="P:Geo.RatedValue.Rate">
            <summary>
            变化
            </summary>
        </member>
        <member name="M:Geo.NamedRatedValue.#ctor(System.String,System.Double,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="rate"></param>
        </member>
        <member name="T:Geo.NamedRmsedNumeral`1">
            <summary>
            具有名称的加权数字。
            </summary>
        </member>
        <member name="T:Geo.RmsedNumeral">
            <summary>
            具有权值的双精度数值。
            </summary>
        </member>
        <member name="T:Geo.RmsedValue`1">
            <summary>
            具有权值的值。
            </summary>
        </member>
        <member name="M:Geo.RmsedValue`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.RmsedValue`1.#ctor(`0,`0)">
            <summary>
            构造函数。
            </summary>
            <param name="currentVal">数值</param>
            <param name="weight">每个分量的均方根</param>
        </member>
        <member name="M:Geo.RmsedValue`1.Equals(System.Object)">
            <summary>
            是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.RmsedValue`1.Rms">
            <summary>
            RMS 属性
            </summary>
        </member>
        <member name="F:Geo.RmsedNumeral.TabPlaceHolder">
            <summary>
            表
            </summary>
        </member>
        <member name="M:Geo.RmsedNumeral.#ctor(System.Double,System.Double)">
            <summary>
            构造函数。
            </summary>
            <param name="currentVal"></param>
            <param name="rmsOrStdDev"></param>
        </member>
        <member name="M:Geo.RmsedNumeral.op_Addition(Geo.RmsedNumeral,Geo.RmsedNumeral)">
            <summary>
            加上
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.RmsedNumeral.op_Subtraction(Geo.RmsedNumeral,Geo.RmsedNumeral)">
            <summary>
            加上
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.RmsedNumeral.IsValid(Geo.RmsedNumeral)">
            <summary>
            是否有效
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.RmsedNumeral.IsZeroOrNotValid(Geo.RmsedNumeral)">
            <summary>
            是否为 0 或则无效
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.RmsedNumeral.IsZero(Geo.RmsedNumeral)">
            <summary>
            是否为 0
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.RmsedNumeral.Variance">
            <summary>
            方差值
            </summary>
        </member>
        <member name="P:Geo.RmsedNumeral.Zero">
            <summary>
            值全为 0 。
            </summary>
        </member>
        <member name="P:Geo.RmsedNumeral.NaN">
            <summary>
            NaN
            </summary>
        </member>
        <member name="M:Geo.NamedRmsedNumeral`1.#ctor(`0,System.Double,System.Double)">
            <summary>
            构造函数。
            </summary>
            <param name="name"></param>
            <param name="currentVal"></param>
            <param name="rms"></param>
        </member>
        <member name="P:Geo.NamedRmsedNumeral`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:Geo.RmsedNumberalDictionary">
            <summary>
            具有名称的参数和中误差。
            </summary>
        </member>
        <member name="T:Geo.NamedRmsedNumeral">
            <summary>
            具有名称的加权数字。
            </summary>
        </member>
        <member name="M:Geo.NamedRmsedNumeral.#ctor(System.String,System.Double,System.Double)">
            <summary>
            构造函数。
            </summary>
            <param name="name"></param>
            <param name="currentVal"></param>
            <param name="rms"></param>
        </member>
        <member name="T:Geo.NumeralWindowDataManager">
            <summary>
            窗口数据管理器
            </summary>
        </member>
        <member name="M:Geo.NumeralWindowDataManager.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="jugedWindowSize"></param>
        </member>
        <member name="M:Geo.NumeralWindowDataManager.Create(System.String)">
            <summary>
            创建
            </summary>
            <param name="keyPrev"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.NumeralWindowDataManager.WindowSize">
            <summary>
            窗口大小
            </summary>
        </member>
        <member name="T:Geo.Correction.AbstractCorrectable`2">
            <summary>
            可以改正的对象，对象与改正数不必是同一种类型
            </summary>
        </member>
        <member name="T:Geo.Correction.ICorrectable`2">
            <summary>
            最基本的，可以改正的泛型接口，对象与改正数不必是同一种类型
            </summary>
        </member>
        <member name="P:Geo.Correction.ICorrectable`2.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Geo.Correction.ICorrectable`2.Correction">
            <summary>
            改正数
            </summary>
        </member>
        <member name="P:Geo.Correction.ICorrectable`2.CorrectedValue">
            <summary>
            改正后的值。其类型与值的类型相同。
            </summary>
        </member>
        <member name="M:Geo.Correction.AbstractCorrectable`2.#ctor(`0)">
            <summary>
            构造函数。
            </summary>
            <param name="Value">值</param>
        </member>
        <member name="M:Geo.Correction.AbstractCorrectable`2.GetTabValues">
            <summary>
            以 Tab 字符分开的元素数值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Correction.AbstractCorrectable`2.GetTabTitles">
            <summary>
            以 Tab 字符分开的元素标题。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Correction.AbstractCorrectable`2.GetTabTitles``1(``0,System.String)">
            <summary>
            获取表格分开的标题
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="t">对象</param>
            <param name="defalutTitle">默认题目</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Correction.AbstractCorrectable`2.GetTabValues``1(``0)">
            <summary>
            获取表格分开的项目
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Correction.AbstractCorrectable`2.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Geo.Correction.AbstractCorrectable`2.Correction">
            <summary>
            改正数
            </summary>
        </member>
        <member name="P:Geo.Correction.AbstractCorrectable`2.CorrectedValue">
            <summary>
            改正后的值
            </summary>
        </member>
        <member name="T:Geo.Correction.AbstractCorrectionDic`1">
            <summary>
            详细的改正数表抽象类。
            </summary>
        </member>
        <member name="T:Geo.Correction.ICorrectionDic`1">
            <summary>
            详细的改正数表。
            </summary>
        </member>
        <member name="M:Geo.Correction.ICorrectionDic`1.SetCorrection(System.String,`0)">
            <summary>
            添加一个改正数。
            </summary>
            <param name="type">改正数类型</param>
            <param name="correction">改正数</param>
        </member>
        <member name="M:Geo.Correction.ICorrectionDic`1.SetCorrection(System.Collections.Generic.Dictionary{System.String,`0})">
            <summary>
            添加一个改正数。
            </summary>
            <param name="corrections">改正数集合</param> 
        </member>
        <member name="M:Geo.Correction.ICorrectionDic`1.ClearCorrections">
            <summary>
            清楚所有改正。
            </summary>
        </member>
        <member name="M:Geo.Correction.ICorrectionDic`1.ContainsCorrection(System.String)">
            <summary>
            是否包含改正数。
            </summary>
            <param name="type">改正数类型</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Correction.ICorrectionDic`1.TotalCorrection">
            <summary>
            所有改正数之和。
            </summary>
        </member>
        <member name="P:Geo.Correction.ICorrectionDic`1.Count">
            <summary>
            详细的改正数表。
            </summary>
        </member>
        <member name="M:Geo.Correction.AbstractCorrectionDic`1.#ctor">
            <summary>
            默认构造函数。
            </summary>
        </member>
        <member name="M:Geo.Correction.AbstractCorrectionDic`1.ContainsCorrection(System.String)">
            <summary>
            是否包含改正数。
            </summary>
            <param name="type">改正数类型</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Correction.AbstractCorrectionDic`1.SetCorrection(System.String,`0)">
            <summary>
            添加一个改正数。
            </summary>
            <param name="type">改正数类型</param>
            <param name="correction">改正数</param>
        </member>
        <member name="M:Geo.Correction.AbstractCorrectionDic`1.SetCorrection(System.Collections.Generic.Dictionary{System.String,`0})">
            <summary>
            添加一个改正数。
            </summary>
            <param name="corrections">改正数集合</param> 
        </member>
        <member name="M:Geo.Correction.AbstractCorrectionDic`1.ClearCorrections">
            <summary>
            清理完所有的改正数。
            </summary>
        </member>
        <member name="M:Geo.Correction.AbstractCorrectionDic`1.GetTabValues">
            <summary>
            以Tab分开的项。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Correction.AbstractCorrectionDic`1.GetTabTitles">
            <summary>
            Tab 分开项目的标题
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Correction.AbstractCorrectionDic`1.FormatProvider">
            <summary>
            格式器
            </summary>
        </member>
        <member name="P:Geo.Correction.AbstractCorrectionDic`1.Corrections">
            <summary>
            详细的改正数表。
            </summary>
        </member>
        <member name="P:Geo.Correction.AbstractCorrectionDic`1.Count">
            <summary>
            改正数的数量。
            </summary>
        </member>
        <member name="P:Geo.Correction.AbstractCorrectionDic`1.TotalCorrection">
            <summary>
            改正数的集合。
            </summary>
        </member>
        <member name="T:Geo.Correction.AbstractDetailedCorrectable`2">
            <summary>
            可以改正的对象，对象与改正数不必是同一种类型, 显示改正数的详细情况
            </summary>
        </member>
        <member name="T:Geo.Correction.IDetailedCorrectable`2">
            <summary>
            可以改正的对象，对象与改正数不必是同一种类型, 显示改正数的详细情况
            </summary>
            <typeparam name="TValue">原数值类型</typeparam>
            <typeparam name="TCorrection">改正数类型</typeparam> 
        </member>
        <member name="M:Geo.Correction.AbstractDetailedCorrectable`2.#ctor(`0)">
            <summary>
            观测量构造函数。
            </summary>
            <param name="currentVal">改正值</param> 
        </member>
        <member name="M:Geo.Correction.AbstractDetailedCorrectable`2.SetCorrection(System.String,`1)">
            <summary>
            设置改正数，如果之前有，则覆盖之。
            </summary>
            <param name="type">改正类型</param>
            <param name="currentVal">改正值</param>
        </member>
        <member name="M:Geo.Correction.AbstractDetailedCorrectable`2.SetCorrection(System.Collections.Generic.Dictionary{System.String,`1})">
            <summary>
            添加改正数列表。
            </summary>
            <param name="corrections">改正数列表</param>
        </member>
        <member name="M:Geo.Correction.AbstractDetailedCorrectable`2.ContainsCorrection(System.String)">
            <summary>
            是否具有指定类型的改正数。
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Correction.AbstractDetailedCorrectable`2.ClearCorrections">
            <summary>
            清除改正数。
            </summary>
        </member>
        <member name="M:Geo.Correction.AbstractDetailedCorrectable`2.GetTabValues">
            <summary>
            以Tab分开的项。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Correction.AbstractDetailedCorrectable`2.GetTabTitles">
            <summary>
            Tab 分开项目的标题
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Correction.AbstractDetailedCorrectable`2.TotalCorrection">
            <summary>
            所有改正数之和。
            </summary>
        </member>
        <member name="P:Geo.Correction.AbstractDetailedCorrectable`2.Corrections">
            <summary>
            详细的改正数列表。
            </summary>
        </member>
        <member name="P:Geo.Correction.AbstractDetailedCorrectable`2.Count">
            <summary>
            改正数列表数量。
            </summary>
        </member>
        <member name="T:Geo.Correction.ICorrectableNumeral">
            <summary>
            基础的具有改正数的数值接口。
            </summary>
        </member>
        <member name="T:Geo.Correction.ICorrectable`1">
            <summary>
            需要改正的值。由值和改正数都是同一种类型。
            </summary>
        </member>
        <member name="T:Geo.Correction.CorrectableNumeral">
            <summary>
            基础的具有改正数的数值类。
            </summary>
        </member>
        <member name="M:Geo.Correction.CorrectableNumeral.#ctor(System.Double)">
            <summary>
            观测量构造函数。
            </summary>
            <param name="currentVal">改正值</param> 
        </member>
        <member name="P:Geo.Correction.CorrectableNumeral.Correction">
            <summary>
            改正数的总和。需要由Corrector来赋值。后继赋值。
            </summary>
        </member>
        <member name="P:Geo.Correction.CorrectableNumeral.CorrectedValue">
            <summary>
            改正后的数值，方便访问
            </summary>
        </member>
        <member name="P:Geo.Correction.CorrectableNumeral.Value">
            <summary>
            数值。
            </summary>
        </member>
        <member name="T:Geo.Correction.DetailedCorrectableNumeral">
            <summary>
            基础的具有改正数的数值类。具有详情改正数列表
            </summary> 
        </member>
        <member name="M:Geo.Correction.DetailedCorrectableNumeral.#ctor(System.Double)">
            <summary>
            观测量构造函数。
            </summary>
            <param name="currentVal">改正值</param> 
        </member>
        <member name="P:Geo.Correction.DetailedCorrectableNumeral.TotalCorrection">
            <summary>
            所有详细的改正数之和。
            </summary>
        </member>
        <member name="P:Geo.Correction.DetailedCorrectableNumeral.Correction">
            <summary>
            改正数
            </summary>
        </member>
        <member name="P:Geo.Correction.DetailedCorrectableNumeral.CorrectedValue">
            <summary>
            改正后的数值
            </summary>
        </member>
        <member name="P:Geo.Correction.DetailedCorrectableNumeral.Zero">
            <summary>
            值为 0
            </summary>
        </member>
        <member name="T:Geo.Correction.NumerialCorrectionDic">
            <summary>
            改正数为双精度数字的改正数字典。
            </summary>
        </member>
        <member name="M:Geo.Correction.NumerialCorrectionDic.#ctor">
            <summary>
            默认构造函数。改正数为双精度数字的改正数字典。
            </summary>
        </member>
        <member name="P:Geo.Correction.NumerialCorrectionDic.TotalCorrection">
            <summary>
            总的改正数。
            </summary>
        </member>
        <member name="T:Geo.Correction.AbstractCorrector`2">
            <summary>
            指定了改正数类型的改正器。
            </summary>
            <typeparam name="TValue">改正数类型</typeparam>
            <typeparam name="TInput">需要计算的类型</typeparam>
        </member>
        <member name="T:Geo.Correction.ICorrector`2">
            <summary>
            改正器.改正器的执行方法为：计算改正值，而不直接改变数值。
            </summary>
            <typeparam name="TCorrection">改正数类型</typeparam>
            <typeparam name="TInput">改正时需要输入的对象类型</typeparam>
        </member>
        <member name="T:Geo.Correction.ICorrector`1">
            <summary>
            改正器.改正器的执行方法为：计算改正值，而不直接改变数值。
            </summary>
            <typeparam name="TCorrection">改正数类型</typeparam>
        </member>
        <member name="T:Geo.Correction.ICorrector">
            <summary>
            改正器顶层接口
            </summary>
        </member>
        <member name="P:Geo.Correction.ICorrector.Name">
            <summary>
            改正器的名称，便于调试查看。
            </summary>
        </member>
        <member name="P:Geo.Correction.ICorrector`1.Correction">
            <summary>
            改正数
            </summary>
        </member>
        <member name="M:Geo.Correction.ICorrector`2.Correct(`1)">
            <summary>
            执行改正。
            </summary>
        </member>
        <member name="M:Geo.Correction.AbstractCorrector`2.Correct(`1)">
            <summary>
            执行改正。
            </summary>
        </member>
        <member name="M:Geo.Correction.AbstractCorrector`2.ToString">
            <summary>
            字符显示
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Correction.AbstractCorrector`2.Correction">
            <summary>
            改正数
            </summary>
        </member>
        <member name="P:Geo.Correction.AbstractCorrector`2.Name">
            <summary>
            改正器或改正数的名称
            </summary>
        </member>
        <member name="T:Geo.Correction.CorrectorChain`2">
            <summary>
            改正器顶层接口.责任链,是一组改正对象的组合。一般采用此类将各种改正进行组合。
            </summary>
            <typeparam name="TCorrection">改正数类型</typeparam>
            <typeparam name="TInput">改正时需要输入的对象类型</typeparam>
        </member>
        <member name="T:Geo.Correction.ICorrectorChian`2">
            <summary>
            改正器链，用于作用在改正数载体上。
            </summary>
            <typeparam name="TCorrection">改正数类型</typeparam>
            <typeparam name="TInput">改正时需要输入的对象类型</typeparam>
        </member>
        <member name="M:Geo.Correction.ICorrectorChian`2.Add(Geo.Correction.ICorrector{`0,`1})">
            <summary>
            通过这种方法添加责任链的后继者。
            </summary>
            <param name="correctorNode">改正器</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Correction.ICorrectorChian`2.Correctors">
            <summary>
            改正器。
            </summary>
        </member>
        <member name="P:Geo.Correction.ICorrectorChian`2.Corrections">
            <summary>
            改正数字典，记录改正数细节，便于调试。
            </summary>
        </member>
        <member name="M:Geo.Correction.CorrectorChain`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Correction.CorrectorChain`2.Correct(`1)">
            <summary>
            执行改正
            </summary>
            <param name="input">输入对象</param>
        </member>
        <member name="M:Geo.Correction.CorrectorChain`2.Add(Geo.Correction.ICorrector{`0,`1})">
            <summary>
            通过这种方法添加责任链的后继者。
            </summary>
            <param name="node">改正器</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Correction.CorrectorChain`2.Correctors">
            <summary>
            改正器。
            </summary>
        </member>
        <member name="P:Geo.Correction.CorrectorChain`2.Corrections">
            <summary>
            改正数字典，记录改正数细节，便于调试。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.AngularTransformer">
            <summary>
            角度转换
            </summary>
        </member>
        <member name="M:Geo.Coordinates.AngularTransformer.DegToRad(System.Double)">
            <summary>
            度转换为弧度
            </summary>
            <param name="deg"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.AngularTransformer.RadToDeg(System.Double)">
            <summary>
            弧度转换为度.
            </summary>
            <param name="rad"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.AngularTransformer.Dms_sToDeg(System.Double)">
            <summary>
            度分秒转换为度。1093000表示109°30′00″
            </summary>
            <param name="lon"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.AngularTransformer.D_msToDeg(System.Double)">
            <summary>
            度分秒转换为度。
            </summary>
            <param name="lon"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Coordinates.CoordinateFactory">
            <summary>
            坐标创建工厂默认实例。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.ICoordinateFactory">
            <summary>
            坐标创建工厂
            </summary>
        </member>
        <member name="M:Geo.Coordinates.ICoordinateFactory.Create1D(System.Double,System.Double)">
            <summary>
            创建一个一维坐标。如高程。
            </summary>
            <param name="value">坐标轴的值</param>
            <param name="weight">权值</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ICoordinateFactory.Create1D(System.Double[])">
            <summary>
            创建一个一维坐标。如高程。
            </summary>
            <param name="coordinates">数组，第一个为坐标值，第二个为权值</param>
            <returns>一个一维坐标实例</returns>
        </member>
        <member name="M:Geo.Coordinates.ICoordinateFactory.Create2D(System.Double,System.Double,System.Double)">
            <summary>
            创建一个二维坐标。
            数值顺序按照坐标系统定义的坐标轴的顺序赋值。一般为 x、y、z 或 lon、 lat、height。
            </summary>
            <param name="valOfAxis1">第一个坐标轴的值</param>
            <param name="valOfAxis2">第二个坐标轴的值</param>
            <param name="weight">权值</param>
            <returns>一个二维坐标实例</returns>
        </member>
        <member name="M:Geo.Coordinates.ICoordinateFactory.Create2D(System.Double[])">
            <summary>
            创建一个二维坐标。
            数值顺序按照坐标系统定义的坐标轴的顺序赋值。一般为 x、y、z 或 lon、 lat、height。
            </summary>
            <param name="coordinates">数组，第1、2个为坐标值，第3个为权值</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ICoordinateFactory.Create3D(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            创建一个3维坐标。
            数值顺序按照坐标系统定义的坐标轴的顺序赋值。一般为 x、y、z 或 lon、 lat、height。
            </summary>
            <param name="valOfAxis1">第1个坐标轴的值</param>
            <param name="valOfAxis2">第2个坐标轴的值</param>
            <param name="valOfAxis3">第3个坐标轴的值</param>
            <param name="weight">权值</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ICoordinateFactory.Create3D(System.Double[])">
            <summary>
            创建一个3维坐标。
            数值顺序按照坐标系统定义的坐标轴的顺序赋值。一般为 x、y、z 或 lon、 lat、height。
            </summary>
            <param name="coordinates">数组，第1、2、3个为坐标值，第4个为权值</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ICoordinateFactory.CreateGeodeticCoord(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            创建一个大地坐标
            </summary>
            <param name="lon">经度</param>
            <param name="lat">维度</param>
            <param name="height">高程</param>
            <param name="weight">权值</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ICoordinateFactory.CreateLonLatCoord(System.Double,System.Double,System.Double)">
            <summary>
            创建一个经纬度坐标。
            </summary>
            <param name="lon">经度</param>
            <param name="lat">维度</param> 
            <param name="weight">权值</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ICoordinateFactory.CreateXyCoord(System.Double,System.Double,System.Double)">
            <summary>
            创建XY坐标
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="weight">权值</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ICoordinateFactory.CreateXyzCoord(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            创建一个XYZ分量的坐标。
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="weight">权值</param>
            <param name="z">Z</param> 
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.ICoordinateFactory.ReferenceSystem">
            <summary>
            坐标参考系统
            </summary>
        </member>
        <member name="M:Geo.Coordinates.CoordinateFactory.#ctor(Geo.Referencing.ICoordinateReferenceSystem)">
            <summary>
            实例化一个坐标工厂。
            </summary>
            <param name="reference">坐标参考系</param>
        </member>
        <member name="M:Geo.Coordinates.CoordinateFactory.Create1D(System.Double,System.Double)">
            <summary>
            创建一个一维坐标。如高程。
            </summary>
            <param name="value">坐标轴的值</param>
            <param name="weight">权值</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordinateFactory.Create1D(System.Double[])">
            <summary>
            创建一个一维坐标。如高程。
            </summary>
            <param name="coordinates">数组，第一个为坐标值，第二个为权值</param>
            <returns>一个一维坐标实例</returns>
        </member>
        <member name="M:Geo.Coordinates.CoordinateFactory.Create2D(System.Double,System.Double,System.Double)">
            <summary>
            创建一个二维坐标。
            数值顺序按照坐标系统定义的坐标轴的顺序赋值。一般为 x、y、z 或 lon、 lat、height。
            </summary>
            <param name="valOfAxis1">第一个坐标轴的值</param>
            <param name="valOfAxis2">第二个坐标轴的值</param>
            <param name="weight">权值</param>
            <returns>一个二维坐标实例</returns>
        </member>
        <member name="M:Geo.Coordinates.CoordinateFactory.Create2D(System.Double[])">
            <summary>
            创建一个二维坐标。
            数值顺序按照坐标系统定义的坐标轴的顺序赋值。一般为 x、y、z 或 lon、 lat、height。
            </summary>
            <param name="coordinates">数组，第1、2个为坐标值，第3个为权值</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordinateFactory.Create3D(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            创建一个3维坐标。
            数值顺序按照坐标系统定义的坐标轴的顺序赋值。一般为 x、y、z 或 lon、 lat、height。
            </summary>
            <param name="valOfAxis1">第1个坐标轴的值</param>
            <param name="valOfAxis2">第2个坐标轴的值</param>
            <param name="valOfAxis3">第3个坐标轴的值</param>
            <param name="weight">权值</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordinateFactory.Create3D(System.Double[])">
            <summary>
            创建一个3维坐标。
            数值顺序按照坐标系统定义的坐标轴的顺序赋值。一般为 x、y、z 或 lon、 lat、height。
            </summary>
            <param name="coordinates">数组，第1、2、3个为坐标值，第4个为权值</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordinateFactory.CreateGeodeticCoord(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            创建一个大地坐标
            </summary>
            <param name="lon">经度</param>
            <param name="lat">维度</param>
            <param name="height">高程</param>
            <param name="weight">权值</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordinateFactory.CreateLonLatCoord(System.Double,System.Double,System.Double)">
            <summary>
            创建一个经纬度坐标。
            </summary>
            <param name="lon">经度</param>
            <param name="lat">维度</param> 
            <param name="weight">权值</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordinateFactory.CreateXyCoord(System.Double,System.Double,System.Double)">
            <summary>
            创建XY坐标
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="weight">权值</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordinateFactory.CreateXyzCoord(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            创建一个XYZ分量的坐标。
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="weight">权值</param>
            <param name="z">Z</param> 
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.CoordinateFactory.ReferenceSystem">
            <summary>
            坐标参考系统
            </summary>
        </member>
        <member name="T:Geo.Coordinates.CoordinateSequence">
            <summary>
            同一参考系下的坐标序列。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.ICoordinateSequence">
            <summary>
            同一参考系下的坐标序列。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.ICoordinateSequence.ToArray">
            <summary>
            转换为 <see name="ICoordinate"/> 的数组。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.ICoordinateSequence.Add(Geo.Coordinates.ICoordinate)">
            <summary>
            添加一个到序列末尾。
            </summary>
            <param name="coord"></param>
        </member>
        <member name="M:Geo.Coordinates.ICoordinateSequence.Insert(System.Int32,Geo.Coordinates.ICoordinate)">
            <summary>
            添加到指定位置。
            </summary>
            <param name="index"></param>
            <param name="coord"></param>
        </member>
        <member name="M:Geo.Coordinates.ICoordinateSequence.Merge(Geo.Coordinates.ICoordinateSequence)">
            <summary>
            合并坐标序列
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ICoordinateSequence.Clone">
            <summary>
            克隆坐标序列
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ICoordinateSequence.Equals(Geo.Coordinates.ICoordinateSequence,Geo.Coordinates.Tolerance)">
            <summary>
            在指定精度下，坐标是否相等。
            </summary>
            <param name="other">待比较的坐标序列</param>
            <param name="tolerance">若为空则值为 0 </param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ICoordinateSequence.Reverse">
            <summary>
            本身反序
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.ICoordinateSequence.Dimension">
            <summary>
            坐标的维数。默认坐标处于同一参考系下，所以坐标的维数相同。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ICoordinateSequence.Item(System.Int32,Geo.Referencing.Ordinate)">
            <summary>
            获取或设置某坐标轴的坐标值。      
            </summary>
            <param name="index">序列中的坐标编号</param>
            <param name="ordinate"> 坐标的坐标轴 </param>
            <returns></returns>       
        </member>
        <member name="P:Geo.Coordinates.ICoordinateSequence.ReferenceSystem">
            <summary>
            坐标所使用的参考系统。没有参考系统的坐标是没有意义的。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ICoordinateSequence.Item(System.Int32)">
            <summary>
            获取或设置序列中指定编号的坐标。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.ICoordinateSequence.First">
            <summary>
            序列中的第一个
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ICoordinateSequence.Last">
            <summary>
            序列中的最后一个
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ICoordinateSequence.Count">
            <summary>
            序列大小
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ICoordinateSequence.Maximum">
            <summary>
            距离远点最远的坐标。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ICoordinateSequence.Minimum">
            <summary>
            距离原点最近的坐标。
            </summary>
        </member>
        <member name="E:Geo.Coordinates.ICoordinateSequence.SequenceChanged">
            <summary>
            序列改变了。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.CoordinateSequence.#ctor">
            <summary>
            默认构造函数。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.CoordinateSequence.#ctor(System.Collections.Generic.IEnumerable{Geo.Coordinates.ICoordinate})">
            <summary>
            默认构造函数。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.CoordinateSequence.ToArray">
            <summary>
            转换为 <see name="ICoordinate"/> 的数组。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.CoordinateSequence.Add(Geo.Coordinates.ICoordinate)">
            <summary>
            添加一个到序列末尾。
            </summary>
            <param name="coord"></param>
        </member>
        <member name="M:Geo.Coordinates.CoordinateSequence.Insert(System.Int32,Geo.Coordinates.ICoordinate)">
            <summary>
            添加到指定位置。
            </summary>
            <param name="index"></param>
            <param name="coord"></param>
        </member>
        <member name="M:Geo.Coordinates.CoordinateSequence.Merge(Geo.Coordinates.ICoordinateSequence)">
            <summary>
            合并坐标序列
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordinateSequence.Clone">
            <summary>
            克隆坐标序列
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordinateSequence.Equals(Geo.Coordinates.ICoordinateSequence,Geo.Coordinates.Tolerance)">
            <summary>
            在指定精度下，坐标是否相等。
            </summary>
            <param name="other">待比较的坐标序列</param>
            <param name="tolerance">若为空则值为 0 </param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordinateSequence.Reverse">
            <summary>
            本身反序
            </summary>
            <returns></returns>
        </member>
        <member name="E:Geo.Coordinates.CoordinateSequence.SequenceChanged">
            <summary>
            序列改变了。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.CoordinateSequence.Coords">
            <summary>
            存储实体。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.CoordinateSequence.Dimension">
            <summary>
            坐标的维数。默认坐标处于同一参考系下，所以坐标的维数相同。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.CoordinateSequence.Item(System.Int32,Geo.Referencing.Ordinate)">
            <summary>
            获取或设置某坐标轴的坐标值。      
            </summary>
            <param name="index">序列中的坐标编号</param>
            <param name="ordinate"> 坐标的坐标轴 </param>
            <returns></returns>       
        </member>
        <member name="P:Geo.Coordinates.CoordinateSequence.ReferenceSystem">
            <summary>
            坐标所使用的参考系统。没有参考系统的坐标是没有意义的。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.CoordinateSequence.Item(System.Int32)">
            <summary>
            获取或设置序列中指定编号的坐标。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.CoordinateSequence.First">
            <summary>
            序列中的第一个
            </summary>
        </member>
        <member name="P:Geo.Coordinates.CoordinateSequence.Last">
            <summary>
            序列中的最后一个
            </summary>
        </member>
        <member name="P:Geo.Coordinates.CoordinateSequence.Count">
            <summary>
            序列大小
            </summary>
        </member>
        <member name="P:Geo.Coordinates.CoordinateSequence.Maximum">
            <summary>
            距离远点最远的坐标。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.CoordinateSequence.Minimum">
            <summary>
            距离原点最近的坐标。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.CoordinateSequenceFactory">
            <summary>
            同一参考系下的坐标序列的创建。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.ICoordinateSequenceFactory">
            <summary>
            坐标序列工厂。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.ICoordinateSequenceFactory.Create(System.Collections.Generic.IEnumerable{Geo.Coordinates.ICoordinate})">
            <summary>
            创建一个坐标序列。
            </summary>
            <param name="coordinates"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordinateSequenceFactory.Create(System.Collections.Generic.IEnumerable{Geo.Coordinates.ICoordinate})">
            <summary>
            创建一个坐标序列。
            </summary>
            <param name="coordinates"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Coordinates.GeodeticCoord">
            <summary>
            具有 X Y 分量的坐标。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.LonLatCoord">
            <summary>
            具有 X Y 分量的坐标。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.ILonLatCoord">
            <summary>
            二维经纬度坐标。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.ILonLat">
            <summary>
            二维经纬度坐标。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IAngleUnit.Unit">
            <summary>
            角度的单位
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ILonLat.Lat">
            <summary>
            维度
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ILonLat.Lon">
            <summary>
            经度
            </summary>
        </member>
        <member name="M:Geo.Coordinates.LonLatCoord.#ctor">
            <summary>
            默认构造函数。初始化为 Coordinate.Empty。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.LonLatCoord.#ctor(Geo.Coordinates.ICoordinate)">
            <summary>
            将一个隐含有 Lon, Lat 的坐标转换为 Lonlat 坐标。
            </summary>
            <param name="coord">含有 Lon, Lat的坐标转换</param>
        </member>
        <member name="M:Geo.Coordinates.LonLatCoord.#ctor(Geo.Referencing.ICoordinateReferenceSystem,System.Double,System.Double,System.Double)">
            <summary>
            由参考系统实例化坐标。
            </summary>
            <param name="referenceSystem">参考系统</param>
        </member>
        <member name="P:Geo.Coordinates.LonLatCoord.Lon">
            <summary>
            Lon 轴分量值。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.LonLatCoord.Lat">
            <summary>
            Lat 轴分量值。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.LonLatCoord.Unit">
            <summary>
            角度单位
            </summary>
        </member>
        <member name="T:Geo.Coordinates.IGeodeticCoord">
            <summary>
            3 维大地坐标。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IGeodeticCoord.Height">
            <summary>
            高程，包括大地高，正高等。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.GeodeticCoord.#ctor">
            <summary>
            默认构造函数。初始化为 Coordinate.Empty。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.GeodeticCoord.#ctor(Geo.Coordinates.ICoordinate)">
            <summary>
            将一个隐含有 Lon, Lat, height的坐标转换为大地坐标。
            </summary>
            <param name="coord">含有 Lon, Lat, height的坐标转换</param>
        </member>
        <member name="M:Geo.Coordinates.GeodeticCoord.#ctor(Geo.Referencing.ICoordinateReferenceSystem,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            由参考系统实例化坐标。
            </summary>
            <param name="referenceSystem">参考系统</param>
        </member>
        <member name="P:Geo.Coordinates.GeodeticCoord.Height">
            <summary>
            Lon 轴分量值。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.Xy">
            <summary>
            最轻量级的 IXY  的实现。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.IXY">
            <summary>
            二维平面坐标接口，以X、Y分量表示。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IXY.X">
            <summary>
            X 坐标分量
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IXY.Y">
            <summary>
            Y 坐标分量
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IXY.IsZero">
            <summary>
            坐标值是否全为 0。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.Xy.#ctor(System.Double,System.Double)">
            <summary>
            创建一个 Xy 实例。
            </summary>
            <param name="x">X 分量</param>
            <param name="y">Y 分量</param>
        </member>
        <member name="M:Geo.Coordinates.Xy.ToString">
            <summary>
            字符串表达
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Xy.Equals(System.Object)">
            <summary>
            数值是否相等
            </summary>
            <param name="obj">待比较对象</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Xy.GetHashCode">
            <summary>
            哈希数
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.Xy.X">
            <summary>
            X 分量
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Xy.Y">
            <summary>
            Y 分量
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Xy.IsZero">
            <summary>
            值是否全为 0.
            </summary>
        </member>
        <member name="T:Geo.Coordinates.XyCoord">
            <summary>
            具有 X Y 分量的坐标。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.IXyCoord">
            <summary>
            二维平面坐标接口，以X、Y分量表示。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.XyCoord.#ctor">
            <summary>
            默认构造函数。初始化为 Coordinate.Empty。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.XyCoord.#ctor(Geo.Coordinates.ICoordinate)">
            <summary>
            将一个隐含有 X, Y 的坐标转换为 XY 坐标。
            </summary>
            <param name="coord">含有 Lon, Lat的坐标转换</param>
        </member>
        <member name="M:Geo.Coordinates.XyCoord.#ctor(Geo.Referencing.ICoordinateReferenceSystem,System.Double,System.Double,System.Double)">
            <summary>
            由参考系统实例化坐标。
            </summary>
            <param name="referenceSystem">参考系统</param>
        </member>
        <member name="P:Geo.Coordinates.XyCoord.X">
            <summary>
            X 轴分量值。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.XyCoord.Y">
            <summary>
            Y 轴分量值。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.XyCoord.IsZero">
            <summary>
            值是否全为 0.
            </summary>
        </member>
        <member name="T:Geo.Coordinates.Xyz">
            <summary>
            最轻量级的 IXYZ  的实现。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.IXYZ">
            <summary>
            三维坐标标接口，以 X、 Y、 Z 表示。 
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IXYZ.Z">
            <summary>
            Z 轴坐标值。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.Xyz.ToString">
            <summary>
            字符串表达
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Xyz.Equals(System.Object)">
            <summary>
            数值是否相等
            </summary>
            <param name="obj">待比较对象</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.Xyz.GetHashCode">
            <summary>
             哈希数
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.Xyz.Z">
            <summary>
            Z 分量
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Xyz.IsZero">
            <summary>
            值是否全为 0.
            </summary>
        </member>
        <member name="T:Geo.Coordinates.XyzCoord">
            <summary>
            具有 X Y 分量的坐标。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.IXyzCoord">
            <summary>
            三维坐标标接口，以 X、 Y、 Z 表示。 
            </summary>
        </member>
        <member name="M:Geo.Coordinates.XyzCoord.#ctor">
            <summary>
            默认构造函数。初始化为 Coordinate.Empty。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.XyzCoord.#ctor(Geo.Coordinates.ICoordinate)">
            <summary>
            将顶层坐标转换为XYZ坐标。
            </summary>
            <param name="coord">顶层坐标</param>
        </member>
        <member name="M:Geo.Coordinates.XyzCoord.#ctor(Geo.Referencing.ICoordinateReferenceSystem,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            由参考系统实例化坐标。
            </summary>
            <param name="referenceSystem">参考系统</param>
        </member>
        <member name="P:Geo.Coordinates.XyzCoord.Z">
            <summary>
            Z 轴分量值。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.GeoCoord">
            <summary>
            大地坐标, 三维地理坐标,由经度Lon、维度Lat和高程Height组成。
            具体是所属何种地球参考系，需要依据上下文判断。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.LonLat">
            <summary>
            Coordinate of longitude and latitude.
            二维经纬度坐标。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.TwoDimVector">
            <summary>
            二维坐标向量
            </summary>
        </member>
        <member name="M:Geo.Coordinates.TwoDimVector.#ctor(System.Double,System.Double)">
            <summary>
            构建一个二维向量
            </summary>
            <param name="prevObj">第一元素</param>
            <param name="second">第二元素</param>
        </member>
        <member name="M:Geo.Coordinates.TwoDimVector.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            构建一个三维向量
            </summary>
            <param name="prevObj">第一元素</param>
            <param name="second">第二元素</param>
            <param name="third">第3元素</param>
        </member>
        <member name="M:Geo.Coordinates.TwoDimVector.#ctor(System.Int32,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="dimension">维数</param>
            <param name="initVal">初始数据</param>
        </member>
        <member name="M:Geo.Coordinates.TwoDimVector.#ctor(System.Double[])">
            <summary>
            构造函数
            </summary>
            <param name="vector">一维数组</param>
        </member>
        <member name="M:Geo.Coordinates.TwoDimVector.GetAzimuth(System.Boolean)">
             <summary>
            以 第二个 轴为起点相对于坐标原点顺时针的方位角 0-360。
            右手直角坐标系。
            X lon Y  lat
             </summary> 
             <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.TwoDimVector.Quadrant">
            <summary>
            坐标系的象限。象限从 1 开始。右手空间直角坐标系。象限逆时针顺序。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.LonLat.#ctor">
            <summary>
            默认构造函数。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.LonLat.#ctor(System.Double,System.Double,Geo.Coordinates.AngleUnit)">
            <summary>
            构造函数
            </summary>
            <param name="lon">经度</param>
            <param name="lat">纬度</param>
            <param name="unit">角度单位类型</param>
        </member>
        <member name="M:Geo.Coordinates.LonLat.Rotate(System.Double)">
            <summary>
            逆时针旋转。
            </summary>
            <param name="degree"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.LonLat.Equals(System.Object)">
            <summary>
            数值是否相等。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.LonLat.Parse(System.String)">
            <summary>
            Parse the string like (X,Y)
            </summary>
            <param name="toString"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.LonLat.ToCompactString">
            <summary>
            紧凑的数字，用逗号分隔。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.LonLat.GetUniqueKey(System.Double)">
            <summary>
            按照指定精度生成一个唯一的键
            </summary>
            <param name="resolution"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.LonLat.Unit">
            <summary>
            角度单位类型。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.LonLat.Lon">
            <summary>
            经度
            </summary>
        </member>
        <member name="P:Geo.Coordinates.LonLat.Lat">
            <summary>
            纬度
            </summary>
        </member>
        <member name="M:Geo.Coordinates.GeoCoord.#ctor">
            <summary>
            默认构造函数。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.GeoCoord.#ctor(System.Double,System.Double,System.Double,Geo.Coordinates.AngleUnit)">
            <summary>
            创建一个实例。
            </summary>
            <param name="lon">经度</param>
            <param name="lat">维度</param>
            <param name="height">高程</param>
        </member>
        <member name="M:Geo.Coordinates.GeoCoord.GetUniqueKey(System.Double)">
            <summary>
            获取一个唯一的识别键。不同的精度不同的键。
            </summary>
            <param name="resolution">默认以米为单位</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.GeoCoord.ToDmsString(System.String)">
            <summary>
            保存为度分秒字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.GeoCoord.ToSecondsString(System.String)">
            <summary>
            秒小数，提供高精度秒对比
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.GeoCoord.ToString">
            <summary>
            字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.GeoCoord.Parse(System.String,Geo.Coordinates.AngleUnit,Geo.Coordinates.AngleUnit,Geo.Coordinates.AngleUnit)">
            <summary>
            解析字符串为实例。
            </summary>
            <param name="toString"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.GeoCoord.ToXyzVector(System.Double,System.Double)">
            <summary>
            当前大地坐标按照指定椭球转换为空间直角坐标。 单位：米
            Position vector [m] from geodetic coordinates
            </summary>
            <param name="raduisOfEquator">Equator radius [m]</param>
            <param name="flattening"> Flattening</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.GeoCoord.ToLocalNez_Matrix">
            <summary>
            Transformation to local tangent coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.GeoCoord.ToLocalNez_Matrix(System.Double,System.Double)">
            <summary>
            Transformation from Greenwich meridian system to local tangent coordinates
            </summary>
            <param name="lon">Geodetic East longitude [rad]</param>
            <param name="lat"> Geodetic latitude [rad]</param>
            <returns>Rotation matrix from the Earth equator and Greenwich meridian
            to the local tangent (East-North-Zenith) coordinate system
            </returns>
        </member>
        <member name="M:Geo.Coordinates.GeoCoord.LocalEnzToPolar(Geo.Algorithm.Vector,System.Double@,System.Double@,System.Double@)">
            <summary>
            本地空间直角坐标到极坐标的转换. Computes azimuth and elevation from local tangent coordinates
            </summary>
            <param name="localEnz"> s   Topocentric local tangent coordinates (East-North-Zenith frame)</param>
            <param name="azimuthRad">  A   Azimuth [rad]</param>
            <param name="elevationRad">  E   Elevation [rad]</param>
            <param name="Range">   Range [m]</param>
        </member>
        <member name="M:Geo.Coordinates.GeoCoord.LocalEnzToPolar(Geo.Algorithm.Vector,System.Double@,System.Double@,Geo.Algorithm.Vector@,Geo.Algorithm.Vector@)">
            <summary>
             本地空间直角坐标到极坐标的转换，结果包括微分。 AzEl Computes azimuth, elevation and partials from local tangent coordinates
            </summary>
            <param name="localEnz">本地水平坐标ENZ， Topocentric local tangent coordinates (East-North-Zenith frame)</param>
            <param name="azimuthRad"> A Azimuth [rad] </param>
            <param name="elevationRad"> E Elevation [rad]</param>
            <param name="dAds">  dAds   Partials of azimuth w.r.t. s</param>
            <param name="dEds"> dEds   Partials of elevation w.r.t. s</param>
        </member>
        <member name="M:Geo.Coordinates.GeoCoord.XyzToGeoCoord(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            空间直角坐标转换成大地坐标
            </summary>
            <param name="X">X分量， 米</param>
            <param name="Y">Y分量， 米</param>
            <param name="Z">Z分量， 米</param>
            <param name="raduisOfEquator">赤道半径</param>
            <param name="f">地球扁率</param>
            <param name="lon">经度-弧度</param>
            <param name="lat">纬度-弧度</param>
            <param name="height">高程-米</param>
        </member>
        <member name="P:Geo.Coordinates.GeoCoord.Height">
            <summary>
            高程。若是大地高，则为点沿着法线到椭球面的距离。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.GeoCoord.Altitude">
            <summary>
            高程，同 Height
            </summary>
        </member>
        <member name="T:Geo.Coordinates.HEN">
            <summary>
            仪器坐标
            </summary>
        </member>
        <member name="M:Geo.Coordinates.HEN.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:Geo.Coordinates.HEN.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            构造
            </summary>
            <param name="h"></param>
            <param name="n"></param>
            <param name="e"></param>
        </member>
        <member name="M:Geo.Coordinates.HEN.op_Addition(Geo.Coordinates.HEN,Geo.Coordinates.HEN)">
            <summary>
            +
            </summary>
            <param name="prevObj"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.HEN.op_Subtraction(Geo.Coordinates.HEN,Geo.Coordinates.HEN)">
            <summary>
            坐标平移。
            </summary>
            <param name="prevObj"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.HEN.ToString">
            <summary>
            字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.HEN.TryParse(System.String,System.String,System.String)">
            <summary>
            解析
            </summary>
            <param name="hStr"></param>
            <param name="nStr"></param>
            <param name="eStr"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.HEN.ToRnxString">
            <summary>
            0.0780 0.0000 0.0000
            1X,F6.4
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.HEN.ToRnxString(System.Double)">
            <summary>
            8.2 = 12345.78
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.HEN.GetTabTitles">
            <summary>
            题目
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.HEN.GetTabValues">
            <summary>
            表格值
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.HEN.H">
            <summary>
            高度
            </summary>
        </member>
        <member name="P:Geo.Coordinates.HEN.E">
            <summary>
            东方
            </summary>
        </member>
        <member name="P:Geo.Coordinates.HEN.N">
            <summary>
            北方
            </summary>
        </member>
        <member name="T:Geo.Coordinates.NEU">
            <summary>
            站心坐标系.左手坐标系。或卫星坐标系。地方坐标系。当地左手笛卡尔坐标系
            N 北方
            E 东方
            U 头顶
            </summary>
        </member>
        <member name="M:Geo.Coordinates.NEU.#ctor">
            <summary>
            北东天坐标。卫星坐标，局部坐标，测站坐标。当地左手笛卡尔坐标系
            </summary>
        </member>
        <member name="M:Geo.Coordinates.NEU.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            北东天坐标。卫星坐标，局部坐标，测站坐标。当地左手笛卡尔坐标系
            </summary>
            <param name="n">北方向，X</param>
            <param name="e">东方向，Y</param>
            <param name="u">向上，Z</param>
        </member>
        <member name="M:Geo.Coordinates.NEU.ToRnxString">
            <summary>
            0.0780 0.0000 0.0000
            1X,F6.4
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.NEU.ToRnxString(System.Double)">
            <summary>
            8.2 = 12345.78
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.NEU.Distance(Geo.Coordinates.NEU)">
            <summare>
            欧式距离。
            </summare>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.NEU.GetNEU(Geo.Coordinates.NEU,System.Double,Geo.Coordinates.NEU,System.Double)">
            <summare>
            按权拟合。
            </summare>
            <param name="neuA"></param>
            <param name="weightA"></param>
            <param name="neuB"></param>
            <param name="weightB"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.NEU.Dot(Geo.Coordinates.XYZ)">
            <summary>
            T是单位向量
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.NEU.Dot(Geo.Coordinates.NEU)">
            <summary>
            T是单位向量
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.NEU.Parse(System.String)">
            <summary>
            解析字符串，可以解析空格、分号、换行符、回车符、Tab为分隔符的字符串
            </summary>
            <param name="toString"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.NEU.Parse(System.String,System.Char[])">
            <summary>
            (x,y) (x,y,z) (x y z) x y z
            </summary>
            <param name="toString"></param>
            <param name="separaters"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.NEU.Parse(System.Double[])">
            <summary>
            从一维数组中解析。
            </summary>
            <param name="result">计算结果</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.NEU.N">
            <summary>
            北方向
            </summary>
        </member>
        <member name="P:Geo.Coordinates.NEU.E">
            <summary>
            东方向
            </summary>
        </member>
        <member name="P:Geo.Coordinates.NEU.U">
            <summary>
            上方向
            </summary>
        </member>
        <member name="P:Geo.Coordinates.NEU.ENU">
            <summary>
            站心坐标系
            </summary>
        </member>
        <member name="P:Geo.Coordinates.NEU.Zero">
            <summary>
            0 0 0
            </summary>
        </member>
        <member name="P:Geo.Coordinates.NEU.Array">
            <summary>
            转为一维数组
            </summary>
        </member>
        <member name="T:Geo.Coordinates.PlanePolar">
            <summary>
            极坐标。
            
            </summary>
        </member>
        <member name="T:Geo.Coordinates.IPlanePolar">
            <summary>
            平面极坐标
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IPlanePolar.Unit">
            <summary>
            角度单位
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IPlanePolar.Azimuth">
            <summary>
            方位角
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IPlanePolar.Range">
            <summary>
            半径
            </summary>
        </member>
        <member name="M:Geo.Coordinates.PlanePolar.RotateAzimuth(System.Double,Geo.Coordinates.AngleUnit)">
            <summary>
            旋转方位角
            </summary>
            <param name="currentVal"></param>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.PlanePolar.Unit">
            <summary>
            角度单位
            </summary>
        </member>
        <member name="P:Geo.Coordinates.PlanePolar.Range">
            <summary>
            距离 [0, +oo]
            </summary>
        </member>
        <member name="P:Geo.Coordinates.PlanePolar.Azimuth">
            <summary>
            方位角[0,360]
            </summary>
        </member>
        <member name="T:Geo.Coordinates.Polar">
            <summary>
            极坐标。
            
            </summary>
        </member>
        <member name="T:Geo.Coordinates.IPolar">
            <summary>
            三维极坐标。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IPolar.Elevation">
            <summary>
            高度角
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IPolar.Zenith">
            <summary>
            天顶距角
            </summary>
        </member>
        <member name="M:Geo.Coordinates.Polar.RotateAzimuth(System.Double,Geo.Coordinates.AngleUnit)">
            <summary>
            旋转方位角
            </summary>
            <param name="currentVal"></param>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.Polar.Unit">
            <summary>
            角度单位
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Polar.Range">
            <summary>
            距离 [0, +oo]
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Polar.Azimuth">
            <summary>
            方位角[0,360]
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Polar.Zenith">
            <summary>
            天顶角[0,180]
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Polar.Elevation">
            <summary>
            高度角 elevationAngle。[-90,90]
            </summary>
        </member>
        <member name="T:Geo.Coordinates.NamedRmsXyz">
            <summary>
            具有权值和名称的坐标
            </summary>
        </member>
        <member name="T:Geo.Coordinates.NamedXyzEnu">
            <summary>
            新增一个坐标计算类，用于显示NEU方向的偏差。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.NamedXyz">
            <summary>
            XYZ 坐标文件读取
            </summary>
        </member>
        <member name="M:Geo.Coordinates.NamedXyz.ReadNamedXyz(System.String)">
            <summary>
            读取命名的文件。第一行为头部描述，以下为以tab按键分割的文字，其中，头部含name的为名字，第一个含x的为x，依次为y，z。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.NamedXyz.ReadNamedXyztxt(System.String)">
            <summary>
            读取命名的文件。第一行为头部描述，以下为以tab按键分割的文字，其中，头部含name的为名字，第一个含x的为x，依次为y，z。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.NamedXyzEnu.Get(System.String,Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            坐标转换获取
            </summary>
            <param name="name"></param>
            <param name="localXyz"></param>
            <param name="siteXyz"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.NamedXyzEnu.N">
            <summary>
            北方向
            </summary>
        </member>
        <member name="P:Geo.Coordinates.NamedXyzEnu.E">
            <summary>
            东方向
            </summary>
        </member>
        <member name="P:Geo.Coordinates.NamedXyzEnu.U">
            <summary>
            上方向
            </summary>
        </member>
        <member name="T:Geo.Coordinates.NamedXyzEnuAndTime">
            <summary>
            新增一个坐标计算类，用于显示NEU方向的偏差。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.NamedXyzEnuAndTime.Get(System.String,System.String,Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            坐标转换获取
            </summary>
            <param name="name"></param>
            <param name="localXyz"></param>
            <param name="siteXyz"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.NamedXyzEnuAndTime.N">
            <summary>
            北方向
            </summary>
        </member>
        <member name="P:Geo.Coordinates.NamedXyzEnuAndTime.E">
            <summary>
            东方向
            </summary>
        </member>
        <member name="P:Geo.Coordinates.NamedXyzEnuAndTime.U">
            <summary>
            上方向
            </summary>
        </member>
        <member name="T:Geo.Coordinates.RmsedXYZ">
            <summary>
            X,Y,Z 三维坐标。三维空间的 3 个双精度分量。
            </summary> 
        </member>
        <member name="M:Geo.Coordinates.RmsedXYZ.#ctor(Geo.Coordinates.XYZ)">
            <summary>
            加权坐标
            </summary>
            <param name="xyz"></param>
        </member>
        <member name="M:Geo.Coordinates.RmsedXYZ.#ctor(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            构造函数。
            </summary>
            <param name="xyz">坐标</param>
            <param name="rms">精度信息</param>
        </member>
        <member name="T:Geo.Coordinates.SphereCoord">
            <summary>
            Sphere Coordinate
            </summary>
        </member>
        <member name="T:Geo.Coordinates.TopoCoord">
             <summary>
             Class to encapsulate topo-centric coordinates.
            1.站心坐标
             2.以观测站为原点或天球中心的天体坐标
             </summary>
        </member>
        <member name="M:Geo.Coordinates.TopoCoord.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new instance of the class from the given components.
            </summary>
            <param name="radAz">Azimuth, in radians.</param>
            <param name="radEl">Elevation, in radians.</param>
            <param name="range">Range, in kilometers.</param>
            <param name="rangeRate">Range rate, in kilometers per second. A negative
            range rate means "towards the observer".</param>
        </member>
        <member name="P:Geo.Coordinates.TopoCoord.RangeRate">
            <summary>
            The range rate, in kilometers per second. 
            A negative value means "towards observer".
            </summary>
        </member>
        <member name="T:Geo.Coordinates.UEN">
            <summary>
            站心坐标系.左手坐标系。或卫星坐标系。
            N 北方
            E 东方
            U 头顶
            </summary>
        </member>
        <member name="M:Geo.Coordinates.UEN.#ctor">
            <summary>
            北东天坐标。卫星坐标，局部坐标，测站坐标。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.UEN.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            北东天坐标。卫星坐标，局部坐标，测站坐标。
            </summary>
            <param name="n"></param>
            <param name="e"></param>
            <param name="u"></param>
        </member>
        <member name="M:Geo.Coordinates.UEN.Distance(Geo.Coordinates.UEN)">
            <summare>
            欧式距离。
            </summare>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.UEN.GetNEU(Geo.Coordinates.UEN,System.Double,Geo.Coordinates.UEN,System.Double)">
            <summare>
            按权拟合。
            </summare>
            <param name="neuA"></param>
            <param name="weightA"></param>
            <param name="neuB"></param>
            <param name="weightB"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.UEN.dot(Geo.Coordinates.XYZ)">
            <summary>
            T是单位向量
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Coordinates.XY">
            <summary>
            X，Y分量标识的二维坐标。
            笛卡尔坐标，平面坐标。最常用的坐标。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.XY.#ctor(System.Double[])">
            <summary>
            以数组初始化，只取前两个。
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:Geo.Coordinates.XY.#ctor">
            <summary>
            默认构造函数。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.XY.#ctor(System.Double,System.Double)">
            <summary>
            构造函数，对XY两个分类赋值。
            </summary>
            <param name="x">X 分量</param>
            <param name="y">Y 分量</param>
        </member>
        <member name="M:Geo.Coordinates.XY.GetXInverted">
            <summary>
            返回X轴翻转后的坐标值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XY.GetYInverted">
            <summary>
            返回Y轴翻转后的坐标值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XY.Radius">
            <summary>
            与原点的距离半径。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XY.Distance(Geo.Coordinates.XY)">
            <summary>
            欧式距离。
            </summary>
            <param name="xy">另一个坐标</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XY.Rotate(System.Double,Geo.Coordinates.AngleUnit)">
            <summary>
            坐标旋转。逆时针为正。
            </summary>
            <param name="angle">旋转角度</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XY.GetDirectionIncrease(System.Double,Geo.Coordinates.Direction)">
            <summary>
            右手直角坐标系，按照方向增加，Y为北方向，X为东方向。
            </summary>
            <param name="adder">增加量</param>
            <param name="direction">方向</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XY.Clone">
            <summary>
            返回一个值一样的对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XY.CompareTo(System.Object)">
            <summary>
            比较圆心距离。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XY.op_Multiply(Geo.Coordinates.XY,System.Double)">
            <summary>
            相对于本坐标为原点的象限。从 1 开始。
            </summary>
            <param name="other">另一个坐标</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XY.GetIncludedAngle(Geo.Coordinates.XY,Geo.Coordinates.XY)">
            <summary>
            计算两个向量夹角，即旋转角度，单位弧度
            </summary>
            <param name="vectorA"></param>
            <param name="vectorB"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XY.Parse(System.String)">
            <summary>
            Parse the string like (X,Y)
            </summary>
            <param name="toString"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XY.Dot(Geo.Coordinates.XY)">
            <summary>
            向量的点积/数量积
            </summary>
            <param name="right">另一个向量</param>
        </member>
        <member name="M:Geo.Coordinates.XY.GetTabTitles">
            <summary>
            "X\tY\tZ"
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.XY.X">
            <summary>
            X 分量
            </summary>
        </member>
        <member name="P:Geo.Coordinates.XY.Y">
            <summary>
            Y 分量
            </summary>
        </member>
        <member name="P:Geo.Coordinates.XY.XInt">
            <summary>
            X分量的整数部分
            </summary>
        </member>
        <member name="P:Geo.Coordinates.XY.YInt">
            <summary>
            Y分量的整数部分
            </summary>
        </member>
        <member name="P:Geo.Coordinates.XY.Norm">
            <summary>
            向量的模/范数/长度/元素平方和的根
            </summary>
        </member>
        <member name="P:Geo.Coordinates.XY.IsZero">
            <summary>
            值是否全为 0.
            </summary>
        </member>
        <member name="T:Geo.Coordinates.XYZ">
            <summary>
            X,Y,Z 三维坐标。三维空间的 3 个双精度分量。
            也是向量。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.XYZ.#ctor(Geo.Coordinates.XY)">
            <summary>
            以一个二维坐标初始化
            </summary>
            <param name="xy"></param>
        </member>
        <member name="M:Geo.Coordinates.XYZ.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            最常用的构造函数，分别初始化三个分量。
            </summary>
            <param name="x">X 坐标分量</param>
            <param name="y">Y 坐标分量</param>
            <param name="z">Z 坐标分量</param>
        </member>
        <member name="M:Geo.Coordinates.XYZ.#ctor(System.Double[])">
            <summary>
            以一个三个元素的一维数组初始化
            </summary>
            <param name="array">三个元素的一维数组</param>
        </member>
        <member name="M:Geo.Coordinates.XYZ.Mul(System.Double)">
            <summary>
            Multiply each component in the vector by a given factor.
            </summary>
            <param name="factor">The factor.</param>
        </member>
        <member name="M:Geo.Coordinates.XYZ.Distance(Geo.Coordinates.XYZ)">
            <summary>
            与一点的欧式距离
            </summary>
            <param name="xyz"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.Magnitude">
            <summary>
            Calculates the magnitude of the vector.
            长度，标量
            </summary>
            <returns>The vector magnitude.</returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.Angle(Geo.Coordinates.XYZ,Geo.Coordinates.AngleUnit)">
            <summary>
            计算两个矢量的角度。 单位默认为度
            </summary>
            <param name="vec">The second vector.</param>
            <returns>
            The angle between the two vectors.
            </returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.RotateX(System.Double)">
            <summary>
            Rotates the XYZ coordinates around the X-axis.
            </summary>
        </member>
        <member name="M:Geo.Coordinates.XYZ.RotateY(System.Double)">
            <summary>
            Rotates the XYZ coordinates around the Y-axis.
            </summary>
        </member>
        <member name="M:Geo.Coordinates.XYZ.RotateZ(System.Double)">
            <summary>
            Rotates the XYZ coordinates around the Z-axis.
            </summary>
        </member>
        <member name="M:Geo.Coordinates.XYZ.GetRotateXAngle(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            计算旋转角度，单位弧度
            </summary>
            <param name="oldXyz"></param>
            <param name="newXyz"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.GetRotateYAngle(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            计算旋转角度，单位弧度
            </summary>
            <param name="oldXyz"></param>
            <param name="newXyz"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.GetRotateZAngle(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            计算旋转角度，单位弧度
            </summary>
            <param name="oldXyz"></param>
            <param name="newXyz"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.GetIncludedAngle(Geo.Coordinates.XYZ)">
            <summary>
            计算两个向量夹角
            </summary>
            <param name="vector"></param> 
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.GetIncludedAngle(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            计算两个向量夹角
            </summary>
            <param name="vectorA"></param>
            <param name="vectorB"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.Rotate(Geo.Coordinates.XYZ,Geo.Coordinates.AngleUnit)">
            <summary>
            坐标旋转。
            </summary>
            <param name="angle">在三个轴的旋转角度</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.Rotate(System.Double,System.Double,System.Double,Geo.Coordinates.AngleUnit)">
            <summary>
            坐标旋转。
            </summary>
            <param name="alphaX">绕 X 轴旋转的角度</param>
            <param name="alphaY">绕 Y 轴旋转的角度</param>
            <param name="alphaZ">绕 Z 轴旋转的角度</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.op_Multiply(Geo.Coordinates.XYZ,System.Double)">
            <summary>
            坐标缩放
            </summary>
            <param name="prevObj"></param>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.op_Division(Geo.Coordinates.XYZ,System.Double)">
            <summary>
            坐标缩放
            </summary>
            <param name="prevObj"></param>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.op_Addition(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            坐标平移
            </summary>
            <param name="prevObj"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.op_Subtraction(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            坐标平移。
            </summary>
            <param name="prevObj"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.op_Multiply(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            叉乘
            </summary>
            <param name="prevObj"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.Equals(System.Object)">
            <summary>
            三个数字相等则为True。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.DeepClone">
            <summary>
            深度克隆
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.Dot(Geo.Coordinates.XYZ)">
            <summary>
            向量点乘
            returns the dot product of the two vectors
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.Cross(Geo.Coordinates.XYZ)">
            <summary>
            向量叉乘。
            retuns v1 x v2 , vector cross product
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.UnitVector">
            <summary>
            单位向量
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.Amalgamation(Geo.Coordinates.XYZ)">
            <summary>
            点的融合。加权平均。
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:Geo.Coordinates.XYZ.Distance(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            该点到任意两点线段的距离。
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.DistanceOfBeeline(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            与直线的距离（不是线段）。
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.GetVerticalPoint(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            点在直线上的垂点。
            </summary>
            <param name="one"></param>
            <param name="another"></param>
            <param name="outer"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.GetXYZ(Geo.Coordinates.XYZ,System.Double,Geo.Coordinates.XYZ,System.Double)">
            <summary>
            按权拟合。
            </summary>
            <param name="xyzA"></param>
            <param name="weightA"></param>
            <param name="xyzB"></param>
            <param name="weightB"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.DeepCone">
            <summary>
            new XYZ(X, Y, Z);
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.Parse(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            解析三维浮点数数组
            </summary>
            <param name="array">三维浮点数数组</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.Parse(System.Double[])">
            <summary>
            解析三维浮点数数组
            </summary>
            <param name="array">三维浮点数数组</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.Parse(System.String)">
            <summary>
            解析字符串，可以解析空格、分号、换行符、回车符、Tab为分隔符的字符串
            </summary>
            <param name="toString"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.Parse(System.String,System.Char[])">
            <summary>
            (x,y) (x,y,z) (x y z) x y z
            </summary>
            <param name="toString"></param>
            <param name="separaters"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.Parse(System.String[])">
            <summary>
            解析字符串数组，支持二维和三维
            </summary>
            <param name="strs"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.ParseList(System.String,System.Char[],System.Char[])">
            <summary>
            解析坐标组
            </summary>
            <param name="str">字符串</param>
            <param name="outerSeparaters">坐标之间的分隔号</param>
            <param name="innerSeparaters">坐标内部分隔号</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.ToArray">
            <summary>
            转换为数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.ParseList(System.String,System.Char,System.Char)">
            <summary>
            解析坐标组
            </summary>
            <param name="str">字符串</param>
            <param name="outerSeparater">坐标之间的分隔号</param>
            <param name="innerSeparater">坐标内部分隔号</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.GetTabTitles">
            <summary>
            "X\tY\tZ"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.ParseSnx(System.String)">
            <summary>
            Z.ZZZZ X.XXXX Y.YYYY
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.ToSnxString">
            <summary>
            Z.ZZZZ X.XXXX Y.YYYY
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.RotateX(Geo.Coordinates.XYZ,System.Double,Geo.Coordinates.AngleUnit)">
            <summary>
            围绕 X 坐标的旋转，X坐标不变。Computes rotation about axis X
            </summary>
            <param name="Triple"></param>
            <param name="alphaX">angle to rotate, in degrees</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.RotateY(Geo.Coordinates.XYZ,System.Double,Geo.Coordinates.AngleUnit)">
            <summary>
            围绕 Y 坐标的旋转，Y坐标不变。Computes rotation about axis Y
            </summary>
            <param name="Triple"></param>
            <param name="alphaY">angle to rotate, in degrees</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.RotateZ(Geo.Coordinates.XYZ,System.Double,Geo.Coordinates.AngleUnit)">
            <summary>
            围绕 Z 坐标的旋转，Z坐标不变。Computes rotation about axis Z
            </summary>
            <param name="Triple"></param>
            <param name="alphaZ">angle to rotate, in degrees</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.IsZeroOrEmpty(Geo.Coordinates.XYZ)">
            <summary>
            坐标是否为 0，或null。
            </summary>
            <param name="xyz"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XYZ.IsValueValid(Geo.Coordinates.XYZ)">
            <summary>
            坐标是否有效, 
            </summary>
            <param name="xyz"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.XYZ.Norm">
            <summary>
            向量的模/范数/长度/元素平方和的根
            </summary>
        </member>
        <member name="P:Geo.Coordinates.XYZ.Z">
            <summary>
            Z 分量
            </summary>
        </member>
        <member name="P:Geo.Coordinates.XYZ.Site">
            <summary>
            测站
            </summary>
        </member>
        <member name="P:Geo.Coordinates.XYZ.CosX">
            <summary>
            X / Length
            </summary>
        </member>
        <member name="P:Geo.Coordinates.XYZ.CosY">
            <summary>
            Y / Length
            </summary>
        </member>
        <member name="P:Geo.Coordinates.XYZ.CosZ">
            <summary>
            Z / Length
            </summary>
        </member>
        <member name="P:Geo.Coordinates.XYZ.Length">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:Geo.Coordinates.XYZ.IsZero">
            <summary>
            是否在原点。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.XYZ.Zero">
            <summary>
            （0,0,0）
            </summary>
        </member>
        <member name="T:Geo.Coordinates.IAstroCoord">
            <summary>
            天文坐标。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IAstroCoord.Azimuth">
            <summary>
            North clockwise
            </summary>
        </member>
        <member name="P:Geo.Coordinates.IAstroCoord.Zenith">
            <summary>
            angle between the the vertical and the radius
            </summary>
        </member>
        <member name="T:Geo.Coordinates.ILBH">
            <summary>
            三维大地坐标标接口，以L、B、H 表示。 
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ILBH.L">
            <summary>
            经度。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ILBH.B">
            <summary>
            经度。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ILBH.H">
            <summary>
            高程。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.LineSegment`1">
            <summary>
            二维平面坐标接口，以X、Y分量表示。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.LineSegment`1.#ctor(`0,`0)">
            <summary>
            构造函数。
            </summary>
            <param name="CoordA">第一个坐标</param>
            <param name="CoordB">第二个坐标</param>
        </member>
        <member name="P:Geo.Coordinates.LineSegment`1.Box">
            <summary>
            盒子。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.LineSegment`1.CoordA">
            <summary>
            CoordA 坐标分量
            </summary>
        </member>
        <member name="P:Geo.Coordinates.LineSegment`1.CoordB">
            <summary>
            CoordB 坐标分量
            </summary>
        </member>
        <member name="T:Geo.Coordinates.TwoDLineSegment`1">
            <summary>
            2 维直线。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.TwoDLineSegment`1.#ctor(`0,`0)">
            <summary>
            构造函数。
            </summary>
            <param name="xyA">第1个坐标</param>
            <param name="xyB">第2个坐标</param>
        </member>
        <member name="M:Geo.Coordinates.TwoDLineSegment`1.GetIntersectionCoord(Geo.Coordinates.TwoDLineSegment{`0})">
            <summary>
            计算两线段的交点。如果不相交，则返回null。
            </summary>
            <param name="other">另一条线段</param>
            <returns></returns>
        </member>
        <member name="T:Geo.Coordinates.XyLineSegment">
            <summary>
            2 维直线。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.XyLineSegment.#ctor(Geo.Coordinates.XY,Geo.Coordinates.XY)">
            <summary>
            构造函数。
            </summary>
            <param name="xyA">第1个坐标</param>
            <param name="xyB">第2个坐标</param>
        </member>
        <member name="M:Geo.Coordinates.XyLineSegment.GetIntersectionCoord(Geo.Coordinates.TwoDLineSegment{Geo.Coordinates.XY})">
            <summary>
            计算两线段的交点。如果不相交，则返回null。
            </summary>
            <param name="other">另一条线段</param>
            <returns></returns>
        </member>
        <member name="T:Geo.Coordinates.Direction">
            <summary>
            方向，8个方向。
            </summary>
        </member>
        <member name="F:Geo.Coordinates.Direction.UnKnown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:Geo.Coordinates.Direction.East">
            <summary>
            东
            </summary>
        </member>
        <member name="F:Geo.Coordinates.Direction.South">
            <summary>
            南
            </summary>
        </member>
        <member name="F:Geo.Coordinates.Direction.West">
            <summary>
            西
            </summary>
        </member>
        <member name="F:Geo.Coordinates.Direction.North">
            <summary>
            北
            </summary>
        </member>
        <member name="F:Geo.Coordinates.Direction.SouthEast">
            <summary>
            东南
            </summary>
        </member>
        <member name="F:Geo.Coordinates.Direction.SouthWest">
            <summary>
            西南
            </summary>
        </member>
        <member name="F:Geo.Coordinates.Direction.NorthEast">
            <summary>
            东北
            </summary>
        </member>
        <member name="F:Geo.Coordinates.Direction.NorthWest">
            <summary>
            西北
            </summary>
        </member>
        <member name="T:Geo.Coordinates.DrivenDirection">
            <summary>
            行走方向，趋势。
            </summary>
        </member>
        <member name="F:Geo.Coordinates.DrivenDirection.Ahead">
            <summary>
            向前
            </summary>
        </member>
        <member name="F:Geo.Coordinates.DrivenDirection.Back">
            <summary>
            向后
            </summary>
        </member>
        <member name="F:Geo.Coordinates.DrivenDirection.Right">
            <summary>
            向右
            </summary>
        </member>
        <member name="F:Geo.Coordinates.DrivenDirection.Left">
            <summary>
            向左
            </summary>
        </member>
        <member name="T:Geo.Coordinates.DirectionHelper">
            <summary>
            方向判断。可以重构 2015.04.16, czs
            </summary>
        </member>
        <member name="M:Geo.Coordinates.DirectionHelper.GetDirectionString(Geo.Coordinates.LonLat,Geo.Coordinates.LonLat)">
            <summary>
            得到两个坐标点的相对方向。
            第二个相对于第一个。
            </summary>
            <param name="me"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.DirectionHelper.GetDirectionString(Geo.Coordinates.Direction)">
            <summary>
            获取字符串表示的方向
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.DirectionHelper.GetDrivenDirection(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            驾驶方向
            </summary>
            <param name="pre"></param>
            <param name="now"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.DirectionHelper.GetDrivenDirection(Geo.Coordinates.LonLat,Geo.Coordinates.LonLat,Geo.Coordinates.LonLat)">
            <summary>
            驾驶方向
            </summary>
            <param name="pre"></param>
            <param name="now"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.DirectionHelper.GetDirection(Geo.Coordinates.LonLat,Geo.Coordinates.LonLat)">
            <summary>
            方向获取
            </summary>
            <param name="me"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.DirectionHelper.GetDirection(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            方向获取
            </summary>
            <param name="me"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.DirectionHelper.GetAngleDeg(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            获取两点连线的角度，逆时针，以X轴起算,单位全为度。
            </summary>
            <param name="me"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.DirectionHelper.GetAngleDeg(Geo.Coordinates.LonLat,Geo.Coordinates.LonLat)">
            <summary>
            两个坐标的角度
            </summary>
            <param name="me"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.DirectionHelper.GetAngleDeg(System.Double,System.Double)">
            <summary>
            逆时针角度
            </summary>
            <param name="latDifferDeg"></param>
            <param name="lonDifferDeg"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.DirectionHelper.GetAngleRad(System.Double,System.Double)">
            <summary>
            通过坐标差求角度。单位为弧度。
            </summary>
            <param name="yDiffer"></param>
            <param name="xDiffer"></param>
            <returns></returns>
        </member>
        <member name="T:GeodeticX.AstronomicCoordinate">
            <summary>
            天文坐标
            </summary>
        </member>
        <member name="F:GeodeticX.AstronomicCoordinate.latitude">
            <summary>
            天文纬度 (－90～90)
            </summary>
        </member>
        <member name="F:GeodeticX.AstronomicCoordinate.longitude">
            <summary>
            天文经度 (-180～180)
            </summary>
        </member>
        <member name="F:GeodeticX.AstronomicCoordinate.azimuth">
            <summary>
            天文方位角
            </summary>
        </member>
        <member name="F:GeodeticX.AstronomicCoordinate.blIsNull">
            <summary>
            是否设定了坐标值的标记
            </summary>
        </member>
        <member name="M:GeodeticX.AstronomicCoordinate.#ctor(System.Double,System.Double)">
            <summary>
            带坐标值的初始化函数
            </summary>
            <param name="λ">天文经度</param>
            <param name="φ">天文纬度</param>
        </member>
        <member name="M:GeodeticX.AstronomicCoordinate.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            带坐标值的初始化函数
            </summary>
            <param name="λ">纬度</param>
            <param name="φ">经度</param>
            <param name="A">大地方位角</param>
        </member>
        <member name="P:GeodeticX.AstronomicCoordinate.λ">
            <summary>
            获取/设置天文经度
            </summary>
        </member>
        <member name="P:GeodeticX.AstronomicCoordinate.φ">
            <summary>
            获取/设置天文纬度
            </summary>
        </member>
        <member name="P:GeodeticX.AstronomicCoordinate.A">
            <summary>
            获取/设置大地方位角
            </summary>
        </member>
        <member name="T:GeodeticX.GaussCoordinate">
            <summary>
            点的高斯平面坐标
            </summary>
        </member>
        <member name="F:GeodeticX.GaussCoordinate.m_x">
            <summary>
            高斯平面纵坐标
            </summary>
        </member>
        <member name="F:GeodeticX.GaussCoordinate.m_y">
            <summary>
            高斯平面横坐标
            </summary>
        </member>
        <member name="F:GeodeticX.GaussCoordinate.m_h">
            <summary>
            正常高
            </summary>
        </member>
        <member name="F:GeodeticX.GaussCoordinate.m_AssumedCoord">
            <summary>
            是否是假定坐标
            </summary>
        </member>
        <member name="F:GeodeticX.GaussCoordinate.m_BeltWidh">
            <summary>
            高斯投影的带宽
            </summary>
        </member>
        <member name="F:GeodeticX.GaussCoordinate.xyIsNull">
            <summary>
            是否已赋值的标记
            </summary>
        </member>
        <member name="M:GeodeticX.GaussCoordinate.#ctor(System.Double,System.Double)">
            <summary>
            带坐标值的初始化函数，由于xy必须成对出现，因此只能在此设置坐标值，不能分开设置
            </summary>
            <param name="x">纵坐标值</param>
            <param name="y">横坐标值</param>
        </member>
        <member name="M:GeodeticX.GaussCoordinate.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            带坐标值的初始化函数
            </summary>
            <param name="x">纵坐标值</param>
            <param name="y">横坐标值</param>
            <param name="h">正常高值</param>
        </member>
        <member name="M:GeodeticX.GaussCoordinate.#ctor(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            带坐标值的初始化函数
            </summary>
            <param name="x">纵坐标值</param>
            <param name="y">横坐标值</param>
            <param name="h">正常高值</param>
            <param name="beltWidth">投影分带的带宽</param>
        </member>
        <member name="P:GeodeticX.GaussCoordinate.x">
            <summary>
            获取纵坐标值
            </summary>
        </member>
        <member name="P:GeodeticX.GaussCoordinate.y">
            <summary>
            获取横坐标值
            </summary>
        </member>
        <member name="P:GeodeticX.GaussCoordinate.y0">
            <summary>
            获取横坐标值（自然坐标）
            </summary>
        </member>
        <member name="P:GeodeticX.GaussCoordinate.h">
            <summary>
            获取正常高值
            </summary>
        </member>
        <member name="P:GeodeticX.GaussCoordinate.AssumedCoord">
            <summary>
            获取/设置是否为假定坐标
            </summary>
        </member>
        <member name="P:GeodeticX.GaussCoordinate.BeltWidth">
            <summary>
            获取/设置投影分带的带宽
            </summary>
        </member>
        <member name="P:GeodeticX.GaussCoordinate.BeltNumber">
            <summary>
            获取/设置投影分带的带号
            </summary>
        </member>
        <member name="T:GeodeticX.Geodetic">
            <summary>
            封装常用坐标转换的实用类
            </summary>
        </member>
        <member name="M:GeodeticX.Geodetic.BLH_XYZ(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double,System.Double)">
            <summary>
            从大地坐标到空间直角坐标的转换
            </summary>
            <param name="B">大地纬度</param>
            <param name="L">大地经度</param>
            <param name="H">大地高</param>
            <param name="X">空间直角坐标X分量</param>
            <param name="Y">空间直角坐标Y分量</param>
            <param name="Z">空间直角坐标Z分量</param>
            <param name="a">参考椭球长半轴</param>
            <param name="f">参考椭球扁率倒数</param>
        </member>
        <member name="M:GeodeticX.Geodetic.XYZ_BLH(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double,System.Double)">
            <summary>
            从空间直角坐标到大地坐标的转换，返回角度单位 为度小数
            </summary>
            <param name="X">空间直角坐标X分量</param>
            <param name="Y">空间直角坐标Y分量</param>
            <param name="Z">空间直角坐标Z分量</param>
            <param name="B">大地纬度</param>
            <param name="L">大地经度</param>
            <param name="H">大地高</param>
            <param name="a">参考椭球长半轴</param>
            <param name="f">参考椭球扁率倒数</param>
        </member>
        <member name="M:GeodeticX.Geodetic.BL_xy(System.Double,System.Double,System.Double@,System.Double@,System.Double,System.Double)">
            <summary>
            从大地坐标到平面坐标的高斯正算
            
            默认的是使用假定坐标的六度带投影
            </summary>
            <param name="B">大地纬度</param>
            <param name="L">大地经度</param>
            <param name="x">平面纵轴</param>
            <param name="y">平面横轴</param>
            <param name="a">参考椭球长半轴</param>
            <param name="f">参考椭球扁率倒数</param>
        </member>
        <member name="M:GeodeticX.Geodetic.BL_xy(System.Double,System.Double,System.Double@,System.Double@,System.Double,System.Double,System.Int32)">
            <summary>
            从大地坐标到平面坐标的高斯正算
            
            默认的是使用假定坐标
            </summary>
            <param name="B">大地纬度</param>
            <param name="L">大地经度</param>
            <param name="x">平面纵轴</param>
            <param name="y">平面横轴</param>
            <param name="a">参考椭球长半轴</param>
            <param name="f">参考椭球扁率倒数</param>
            <param name="beltWidth">投影分带的带宽</param>
        </member>
        <member name="M:GeodeticX.Geodetic.BL_xy(System.Double,System.Double,System.Double@,System.Double@,System.Double,System.Double,System.Boolean)">
            <summary>
            从大地坐标到平面坐标的高斯正算
            
            默认的是六度带投影
            </summary>
            <param name="B">大地纬度</param>
            <param name="L">大地经度</param>
            <param name="x">平面纵轴</param>
            <param name="y">平面横轴</param>
            <param name="a">参考椭球长半轴</param>
            <param name="f">参考椭球扁率倒数</param>
            <param name="assumedCoord">是否使用假定坐标</param>
        </member>
        <member name="M:GeodeticX.Geodetic.BL_xy(System.Double,System.Double,System.Double@,System.Double@,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            从大地坐标到平面坐标的高斯正算
            </summary>
            <param name="B">大地纬度</param>
            <param name="L">大地经度</param>
            <param name="x">平面纵轴</param>
            <param name="y">平面横轴</param>
            <param name="a">参考椭球长半轴</param>
            <param name="f">参考椭球扁率倒数</param>
            <param name="beltWidth">投影分带的带宽</param>
            <param name="assumedCoord">是否使用假定坐标</param>
        </member>
        <member name="M:GeodeticX.Geodetic.Bl_xy(System.Double,System.Double,System.Double@,System.Double@,System.Double,System.Double,System.Int32)">
            <summary>
            从大地坐标到平面坐标的高斯正算
            
            指定中央子午线，用于进行邻带换算，此时必不使用假定坐标
            </summary>
            <param name="B">大地纬度</param>
            <param name="L">大地经度</param>
            <param name="CenterL">中央子午线</param>
            <param name="x">平面纵轴</param>
            <param name="y">平面横轴</param>
            <param name="a">参考椭球长半轴</param>
            <param name="f">参考椭球扁率倒数</param>
            <param name="beltWidth">投影分带的带宽</param>
        </member>
        <member name="M:GeodeticX.Geodetic.xy_BL(System.Double,System.Double,System.Double@,System.Double@,System.Double,System.Double)">
            <summary>
            平面坐标（自然坐标或假定坐标）到大地坐标的高斯反算
            
            默认使用六度带
            </summary>
            <param name="x">平面纵轴</param>
            <param name="y">平面横轴</param>
            <param name="B">大地纬度</param>
            <param name="L">大地经度</param>
            <param name="a">参考椭球长半轴</param>
            <param name="f">参考椭球扁率倒数</param>
        </member>
        <member name="M:GeodeticX.Geodetic.xy_BL(System.Double,System.Double,System.Double@,System.Double@,System.Double,System.Double,System.Int32)">
            <summary>
            平面坐标（自然坐标或假定坐标）到大地坐标的高斯反算
            </summary>
            <param name="x">平面纵轴</param>
            <param name="y">平面横轴</param>
            <param name="B">大地纬度</param>
            <param name="L">大地经度</param>
            <param name="a">参考椭球长半轴</param>
            <param name="f">参考椭球扁率倒数</param>
            <param name="beltWidth">投影分带的带宽</param>
        </member>
        <member name="M:GeodeticX.Geodetic.xy_Bl(System.Double,System.Double,System.Double@,System.Double@,System.Double,System.Double,System.Int32)">
            <summary>
            平面坐标（自然坐标）到大地坐标的高斯反算
            </summary>
            <param name="x">平面纵轴</param>
            <param name="y">平面横轴</param>
            <param name="B">大地纬度</param>
            <param name="l">经度差</param>
            <param name="a">参考椭球长半轴</param>
            <param name="f">参考椭球扁率倒数</param>
            <param name="beltWidth">投影分带的带宽</param>
        </member>
        <member name="M:GeodeticX.Geodetic.PointToWestBelt(System.Double,System.Double,System.Double@,System.Double@,System.Double,System.Double,System.Int32)">
            <summary>
            向西投影带的邻带换算
            </summary>
            <param name="x0">东投影带的x坐标</param>
            <param name="y0">东投影带的y坐标</param>
            <param name="x1">西投影带的x坐标</param>
            <param name="y1">西投影带的y坐标</param>
            <param name="a">参考椭球长半轴</param>
            <param name="f">参考椭球的扁率倒数</param>
            <param name="beltWidth">带宽</param>
        </member>
        <member name="M:GeodeticX.Geodetic.PointToEastBelt(System.Double,System.Double,System.Double@,System.Double@,System.Double,System.Double,System.Int32)">
            <summary>
            向东投影带的邻带换算
            </summary>
            <param name="x0">西投影带的x坐标</param>
            <param name="y0">西投影带的y坐标</param>
            <param name="x1">东投影带的x坐标</param>
            <param name="y1">东投影带的y坐标</param>
            <param name="a">参考椭球长半轴</param>
            <param name="f">参考椭球的扁率倒数</param>
            <param name="beltWidth">带宽</param>
        </member>
        <member name="M:GeodeticX.Geodetic.PointBeltWidthChanged(System.Double,System.Double,System.Double@,System.Double@,System.Double,System.Double,System.Int32)">
            <summary>
            三度带与六度带之间的坐标转换
            </summary>
            <param name="x0">原始x坐标</param>
            <param name="y0">原始y坐标</param>
            <param name="x1">目标x坐标</param>
            <param name="y1">目标y坐标</param>
            <param name="a">参考椭球长半轴</param>
            <param name="f">参考椭球扁率倒数</param>
            <param name="beltWidth">目标坐标带宽，此参数同时也指明了原始坐标的带宽</param>
        </member>
        <member name="M:GeodeticX.Geodetic.CoordinateTransform(Geo.Coordinates.IXYZ,GeodeticX.TransformParameters)">
             <summary>
             布尔莎七参数模型坐标转换，从空间直角坐标到空间直角坐标
             </summary>
             <param name="old"></param>
             <param name="info"></param>
             <returns></returns>
            坐标转换时都是转XYZ，然后再将XYZ转换成BLH和xy
             WGS-84 --> BJZ54
            -15.415, 157.025, 94.74,   0.312, 0.08,  0.102, -1.465e-6        /*全国*/
            -14.756, 145.798, 100.886, 0.618, 0.255, 0.302, -0.439e-6        /*东南局部*/
              BJZ54 --> DXZ88
            16.5,    -152.9,  -91.8,   -0.226, -0.003, 0.0, 1.22e-6
        </member>
        <member name="M:GeodeticX.Geodetic.CoordinateTransform(GeodeticX.GeodeticCoordinate,GeodeticX.ReferenceEllipsoid,GeodeticX.ReferenceEllipsoid,GeodeticX.TransformParameters)">
            <summary>
            布尔莎七参数模型坐标转换，从大地坐标到大地坐标
            </summary>
            <param name="pntBLH"></param>
            <param name="eOld"></param>
            <param name="eNew"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:GeodeticX.Geodetic.CoordinateTransform(System.Double[],System.Double[],GeodeticX.TransformParameters)">
            <summary>
            坐标转换
            </summary>
            <param name="xyzOld">旧坐标</param>
            <param name="xyzNew">新坐标</param>
            <param name="param">转换参数</param>
        </member>
        <member name="M:GeodeticX.Geodetic.ParameterCompute(GeodeticX.SpatialRectCoordinate[],GeodeticX.SpatialRectCoordinate[],System.Double[],System.Int32)">
            <summary>
            利用布尔莎坐标转换模型求解转换参数
            </summary>
            <param name="oldPoint">旧坐标系下点的坐标集合</param>
            <param name="newPoint">新坐标系下点的坐标集合</param>
            <param name="weight">权阵</param>
            <param name="paraCount">转换参数个数，可以为3、4、7等</param>
            <returns></returns>
        </member>
        <member name="M:GeodeticX.Geodetic.Bessel_PntSA_Pnt(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double,System.Double)">
            <summary>
            贝赛尔大地问题正解
            </summary>
            <param name="B1">已知点纬度</param>
            <param name="L1">已知点经度</param>
            <param name="S">大地线长</param>
            <param name="A1">大地方位角</param>
            <param name="B2">待求点纬度</param>
            <param name="L2">待求点经度</param>
            <param name="A2">大地反方位角</param>
            <param name="a">参考椭球长半轴</param>
            <param name="f">参考椭球扁率倒数</param>
        </member>
        <member name="M:GeodeticX.Geodetic.Bessel_BL_A(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            由两点大地坐标求解大地方位角
            </summary>
            <param name="B1">起点纬度</param>
            <param name="L1">起点经度</param>
            <param name="B2">末点纬度</param>
            <param name="L2">末点经度</param>
            <param name="a">参考椭球长半轴</param>
            <param name="f">参考椭球扁率倒数</param>
            <returns>两点间的大地方位角</returns>
        </member>
        <member name="M:GeodeticX.Geodetic.Bessel_BL_S(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            由大地坐标计算大地线长
            </summary>
            <param name="B1">起点纬度</param>
            <param name="L1">起点经度</param>
            <param name="B2">末点纬度</param>
            <param name="L2">末点经度</param>
            <param name="a">参考椭球长半轴</param>
            <param name="f">参考椭球扁率倒数</param>
            <returns>两点间的大地线长</returns>
        </member>
        <member name="M:GeodeticX.Geodetic.Missile_XYZ_A(GeodeticX.SpatialRectCoordinate,GeodeticX.SpatialRectCoordinate,System.Double,System.Double)">
            <summary>
            二炮阵地方位计算中由两点的空间直角坐标求解方位角
            </summary>
            <param name="pntA">起点空间直角坐标</param>
            <param name="pntB">末点空间直角坐标</param>
            <param name="a">参考椭球长半轴</param>
            <param name="f">参考椭球扁率倒数</param>
            <returns>两点点的大地方位角</returns>
        </member>
        <member name="M:GeodeticX.Geodetic.MeridianLength(System.Double,System.Double,System.Double)">
            <summary>
            由纬度求解子午线弧长
            </summary>
            <param name="B">纬度</param>
            <param name="a">长半轴</param>
            <param name="f">扁率倒数</param>
            <returns>子午线弧长</returns>
        </member>
        <member name="T:GeodeticX.GeodeticCoordinate">
            <summary>
            点的大地坐标
            </summary>
        </member>
        <member name="F:GeodeticX.GeodeticCoordinate.longitude">
            <summary>
            经度 (-180～180)
            </summary>
        </member>
        <member name="F:GeodeticX.GeodeticCoordinate.latitude">
            <summary>
            纬度 (－90～90)
            </summary>
        </member>
        <member name="F:GeodeticX.GeodeticCoordinate.geoidHeight">
            <summary>
            大地高
            </summary>
        </member>
        <member name="F:GeodeticX.GeodeticCoordinate.blIsNull">
            <summary>
            是否设定了坐标值的标记
            </summary>
        </member>
        <member name="M:GeodeticX.GeodeticCoordinate.#ctor(System.Double,System.Double)">
            <summary>
            带坐标值的初始化函数
            </summary>
            <param name="B">纬度</param>
            <param name="L">经度</param>
        </member>
        <member name="M:GeodeticX.GeodeticCoordinate.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            带坐标值的初始化函数
            </summary>
            <param name="B">纬度</param>
            <param name="L">经度</param>
            <param name="H">大地高</param>
        </member>
        <member name="P:GeodeticX.GeodeticCoordinate.B">
            <summary>
            获取/设置纬度
            </summary>
        </member>
        <member name="P:GeodeticX.GeodeticCoordinate.L">
            <summary>
            获取/设置经度
            </summary>
        </member>
        <member name="P:GeodeticX.GeodeticCoordinate.H">
            <summary>
            获取/设置大地高
            </summary>
        </member>
        <member name="T:GeodeticX.GeoPoint">
            <summary>
            Point 的摘要说明。
            </summary>
        </member>
        <member name="F:GeodeticX.GeoPoint.ellipsoid">
            <summary>
            坐标系
            </summary>
        </member>
        <member name="F:GeodeticX.GeoPoint.gaussCoord">
            <summary>
            高斯平面坐标
            </summary>
        </member>
        <member name="F:GeodeticX.GeoPoint.geodeticCoord">
            <summary>
            大地坐标
            </summary>
        </member>
        <member name="F:GeodeticX.GeoPoint.spatialCoord">
            <summary>
            空间直角坐标
            </summary>
        </member>
        <member name="F:GeodeticX.GeoPoint.dimension">
            <summary>
            坐标维数，三维还是二维，0表示未赋值
            </summary>
        </member>
        <member name="F:GeodeticX.GeoPoint.dH">
            <summary>
            高程异常
            </summary>
        </member>
        <member name="M:GeodeticX.GeoPoint.CoordinateConvert(GeodeticX.TransformParameters)">
            <summary>
            给定参数的七参数坐标转换
            </summary>
            <param name="info">转换参数</param>
            <returns>转换后的空间直角坐标</returns>
        </member>
        <member name="P:GeodeticX.GeoPoint.ReferenceEllipsoid">
            <summary>
            获取/设置坐标系属性
            </summary>
        </member>
        <member name="P:GeodeticX.GeoPoint.GaussCoordinate">
            <summary>
            获取/设置高斯平面坐标属性
            </summary>
        </member>
        <member name="P:GeodeticX.GeoPoint.GeodeticCoordinate">
            <summary>
            获取/设置大地坐标属性
            </summary>
        </member>
        <member name="P:GeodeticX.GeoPoint.SpatialRectCoordinate">
            <summary>
            获取/设置空间直角坐标属性
            </summary>
        </member>
        <member name="P:GeodeticX.GeoPoint.AbnormalHeight">
            <summary>
            获取/设置高程异常
            </summary>
        </member>
        <member name="P:GeodeticX.GeoPoint.Dimension">
            <summary>
            获取坐标的维数
            </summary>
        </member>
        <member name="P:GeodeticX.GeoPoint.CurvatureRadiusR">
            <summary>
            平均曲率半径
            </summary>
        </member>
        <member name="P:GeodeticX.GeoPoint.CurvatureRadiusM">
            <summary>
            子午圈曲率半径
            </summary>
        </member>
        <member name="P:GeodeticX.GeoPoint.CurvatureRadiusN">
            <summary>
            卯酉圈曲率半径
            </summary>
        </member>
        <member name="P:GeodeticX.GeoPoint.LengthScale">
            <summary>
            长度比公式
            </summary>        
        </member>
        <member name="P:GeodeticX.GeoPoint.ConvergenceAngle">
            <summary>
            子午线收敛角
            </summary>        
        </member>
        <member name="T:GeodeticX.GeoPoints">
            <summary>
            大地坐标集合
            </summary>
        </member>
        <member name="M:GeodeticX.GeoPoints.Add(System.Double,System.Double)">
            <summary>
            添加
            </summary>
            <param name="B"></param>
            <param name="L"></param>
        </member>
        <member name="M:GeodeticX.GeoPoints.Add(System.Double,System.Double,System.Double)">
            <summary>
            添加
            </summary>
            <param name="B"></param>
            <param name="L"></param>
            <param name="H"></param>
        </member>
        <member name="M:GeodeticX.GeoPoints.Add(GeodeticX.GeodeticCoordinate)">
            <summary>
            添加
            </summary>
            <param name="BLH"></param>
        </member>
        <member name="M:GeodeticX.GeoPoints.Add(GeodeticX.SpatialRectCoordinate)">
            <summary>
            添加
            </summary>
            <param name="XYZ"></param>
        </member>
        <member name="M:GeodeticX.GeoPoints.Add(GeodeticX.GaussCoordinate)">
            <summary>
            添加 
            </summary>
            <param name="xyh"></param>
        </member>
        <member name="T:GeodeticX.ReferenceEllipsoid">
             <summary>
             参考椭球类
            
             
            常用参考椭球参数
            a84 6378137
            f84 298.257223563
             
            a54 6378245
            f54 298.3
             
            a88 6378140
            f88 298.257
             
             </summary>
        </member>
        <member name="F:GeodeticX.ReferenceEllipsoid.m_name">
            <summary>
             坐标系名称
            </summary>
        </member>
        <member name="F:GeodeticX.ReferenceEllipsoid.m_a">
            <summary>
            参考椭球的长半轴
            </summary>
        </member>
        <member name="F:GeodeticX.ReferenceEllipsoid.m_f">
            <summary>
            参考椭球的扁率倒数
            </summary>
        </member>
        <member name="M:GeodeticX.ReferenceEllipsoid.#ctor(System.Double,System.Double)">
            <summary>
            指定信息的坐标系初始化函数
            </summary>
            <param name="a">长半轴</param>
            <param name="f">扁率倒数</param>
        </member>
        <member name="M:GeodeticX.ReferenceEllipsoid.#ctor(System.Double,System.Double,System.String)">
            <summary>
            指定信息的坐标系初始化函数
            </summary>
            <param name="name">坐标系名称</param>
            <param name="a">长半轴</param>
            <param name="f">扁率倒数</param>
        </member>
        <member name="P:GeodeticX.ReferenceEllipsoid.Name">
            <summary>
            获取/设置坐标系名称属性
            </summary>
        </member>
        <member name="P:GeodeticX.ReferenceEllipsoid.a">
            <summary>
            获取/设置参考椭球长半轴
            </summary>
        </member>
        <member name="P:GeodeticX.ReferenceEllipsoid.f">
            <summary>
            获取/设置参考椭球的便率倒数
            </summary>
        </member>
        <member name="P:GeodeticX.ReferenceEllipsoid.b">
            <summary>
            获取参考椭球的短半轴
            </summary>
        </member>
        <member name="P:GeodeticX.ReferenceEllipsoid.c">
            <summary>
            获取极曲率半径
            </summary>
        </member>
        <member name="P:GeodeticX.ReferenceEllipsoid.e">
            <summary>
            获取第一偏心率
            </summary>
        </member>
        <member name="P:GeodeticX.ReferenceEllipsoid.e2">
            <summary>
            获取第二偏心率
            </summary>
        </member>
        <member name="T:GeodeticX.SpatialRectCoordinate">
            <summary>
            点在空间直角坐标系下的坐标值，通常以(X,Y,Z)来表示。
            </summary>
        </member>
        <member name="M:GeodeticX.SpatialRectCoordinate.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            带坐标值的初始化函数
            </summary>
            <param name="X">X分量</param>
            <param name="Y">Y分量</param>
            <param name="Z">Z分量</param>
        </member>
        <member name="P:GeodeticX.SpatialRectCoordinate.IsZero">
            <summary>
            值是否全为 0.
            </summary>
        </member>
        <member name="T:GeodeticX.SurveySide">
            <summary>
            测量中的一条边，包含两个点对象，一个为测站点，一个为照准点。
            一条边将包含一些相对信息，如边长，方位角，大地线长等。
            </summary>
        </member>
        <member name="F:GeodeticX.SurveySide.standPoint">
            <summary>
            测站点
            </summary>
        </member>
        <member name="F:GeodeticX.SurveySide.instrumentHeight">
            <summary>
            测站点的仪器高
            </summary>
        </member>
        <member name="F:GeodeticX.SurveySide.standEccentricAngle">
            <summary>
            测站点偏心的偏心角
            </summary>
        </member>
        <member name="F:GeodeticX.SurveySide.standEccentricDistance">
            <summary>
            测站点偏心的偏心距
            </summary>
        </member>
        <member name="F:GeodeticX.SurveySide.sightPoint">
            <summary>
            照准点
            </summary>
        </member>
        <member name="F:GeodeticX.SurveySide.targetHeight">
            <summary>
            照准点的目标高
            </summary>
        </member>
        <member name="F:GeodeticX.SurveySide.sightEccentricAngle">
            <summary>
            照准点偏心的偏心角
            </summary>
        </member>
        <member name="F:GeodeticX.SurveySide.sightEccentricDistance">
            <summary>
            照准点偏心的偏心距
            </summary>
        </member>
        <member name="M:GeodeticX.SurveySide.VerticalAngle">
            <summary>
            由平面坐标和大地高求解垂直角，单位度
            </summary>
        </member>
        <member name="M:GeodeticX.SurveySide.VerticalAngle(System.Double)">
            <summary>
            由平面坐标和大地高求解垂直角，单位度
            </summary>
            <param name="k">大气常数</param>
            <returns>垂直角，单位度</returns>
        </member>
        <member name="P:GeodeticX.SurveySide.StationPoint">
            <summary>
            测站点
            </summary>
        </member>
        <member name="P:GeodeticX.SurveySide.InstrumentHeight">
            <summary>
            测站点的仪器高
            </summary>
        </member>
        <member name="P:GeodeticX.SurveySide.StandEccentricAngle">
            <summary>
            测站点的偏心角
            </summary>
        </member>
        <member name="P:GeodeticX.SurveySide.StandEccentricDistance">
            <summary>
            测站点的偏心距
            </summary>
        </member>
        <member name="P:GeodeticX.SurveySide.SightPoint">
            <summary>
            照准点
            </summary>
        </member>
        <member name="P:GeodeticX.SurveySide.TargetHeight">
            <summary>
            照准点的目标高
            </summary>
        </member>
        <member name="P:GeodeticX.SurveySide.SightEccentricAngle">
            <summary>
            照准点的偏心角
            </summary>
        </member>
        <member name="P:GeodeticX.SurveySide.SightEccentricDistance">
            <summary>
            照准点的偏心距
            </summary>
        </member>
        <member name="P:GeodeticX.SurveySide.GeodeticAzimuth_Bessel">
            <summary>
            贝赛尔求解大地方位角
            </summary>
        </member>
        <member name="P:GeodeticX.SurveySide.GeodeticInverseAzimuth_Bessel">
            <summary>
            贝赛尔求解大地反方位角
            </summary>
        </member>
        <member name="P:GeodeticX.SurveySide.GeodeticAzimuth_xy">
            <summary>
            由高斯平面坐标通过坐标方位角、曲率改正、子午线收敛角反解大地方位角
            </summary>
        </member>
        <member name="P:GeodeticX.SurveySide.GeodeticInverseAzimuth_xy">
            <summary>
            由高斯平面坐标通过坐标方位角、曲率改正、子午线收敛角反解大地反方位角
            </summary>
        </member>
        <member name="P:GeodeticX.SurveySide.GeodeticAzimuth_XYZ">
            <summary>
            二炮阵地测量的由空间直角坐标求解方位角
            </summary>
        </member>
        <member name="P:GeodeticX.SurveySide.GeodesicLength_Bessel">
            <summary>
            贝赛尔求解大地线长（球面距离）
            </summary>
        </member>
        <member name="P:GeodeticX.SurveySide.FlatAzimuth">
            <summary>
            由高斯坐标计算坐标方位角
            </summary>
        </member>
        <member name="P:GeodeticX.SurveySide.FlatDistance">
            <summary>
            由高斯坐标计算平面距离
            </summary>
        </member>
        <member name="P:GeodeticX.SurveySide.SlopeDistance">
            <summary>
            由平面坐标和大地高求解斜距
            </summary>
        </member>
        <member name="P:GeodeticX.SurveySide.CurvatureCorrection">
            <summary>
            曲率改正，单位：秒
            </summary>
        </member>
        <member name="P:GeodeticX.SurveySide.DistanceCoorection">
            <summary>
            距离改正
            </summary>
        </member>
        <member name="T:GeodeticX.TransformParameters">
            <summary>
            转换
            </summary>
        </member>
        <member name="F:GeodeticX.TransformParameters.m_Dx">
            <summary>
            三个平移参数
            </summary>
        </member>
        <member name="F:GeodeticX.TransformParameters.m_Dy">
            <summary>
            三个平移参数
            </summary>
        </member>
        <member name="F:GeodeticX.TransformParameters.m_Dz">
            <summary>
            三个平移参数
            </summary>
        </member>
        <member name="F:GeodeticX.TransformParameters.m_Ex">
            <summary>
            三个旋转参数
            </summary>
        </member>
        <member name="F:GeodeticX.TransformParameters.m_Ey">
            <summary>
            三个旋转参数
            </summary>
        </member>
        <member name="F:GeodeticX.TransformParameters.m_Ez">
            <summary>
            三个旋转参数
            </summary>
        </member>
        <member name="F:GeodeticX.TransformParameters.m_m">
            <summary>
            尺度因子
            </summary>
        </member>
        <member name="M:GeodeticX.TransformParameters.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:GeodeticX.TransformParameters.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            构造
            </summary>
            <param name="Dx"></param>
            <param name="Dy"></param>
            <param name="Dz"></param>
        </member>
        <member name="M:GeodeticX.TransformParameters.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            构造
            </summary>
            <param name="Dx"></param>
            <param name="Dy"></param>
            <param name="Dz"></param>
            <param name="m"></param>
        </member>
        <member name="M:GeodeticX.TransformParameters.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            构造
            </summary>
            <param name="Dx"></param>
            <param name="Dy"></param>
            <param name="Dz"></param>
            <param name="Ex"></param>
            <param name="Ey"></param>
            <param name="Ez"></param>
            <param name="m"></param>
        </member>
        <member name="M:GeodeticX.TransformParameters.SetParameters(System.Double,System.Double,System.Double)">
            <summary>
            设置
            </summary>
            <param name="Dx"></param>
            <param name="Dy"></param>
            <param name="Dz"></param>
        </member>
        <member name="M:GeodeticX.TransformParameters.SetParameters(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            设置
            </summary>
            <param name="Dx"></param>
            <param name="Dy"></param>
            <param name="Dz"></param>
            <param name="m"></param>
        </member>
        <member name="M:GeodeticX.TransformParameters.SetParameters(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            设置
            </summary>
            <param name="Dx"></param>
            <param name="Dy"></param>
            <param name="Dz"></param>
            <param name="Ex"></param>
            <param name="Ey"></param>
            <param name="Ez"></param>
            <param name="m"></param>
        </member>
        <member name="M:GeodeticX.TransformParameters.ToString">
            <summary>
            字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:GeodeticX.TransformParameters.Dx">
            <summary>
            DX
            </summary>
        </member>
        <member name="P:GeodeticX.TransformParameters.Dy">
            <summary>
            DY
            </summary>
        </member>
        <member name="P:GeodeticX.TransformParameters.Dz">
            <summary>
            DZ
            </summary>
        </member>
        <member name="P:GeodeticX.TransformParameters.Ex">
            <summary>
            EX
            </summary>
        </member>
        <member name="P:GeodeticX.TransformParameters.Ey">
            <summary>
            EY
            </summary>
        </member>
        <member name="P:GeodeticX.TransformParameters.Ez">
            <summary>
            EZ
            </summary>
        </member>
        <member name="P:GeodeticX.TransformParameters.m">
            <summary>
            尺度因子
            </summary>
        </member>
        <member name="P:GeodeticX.TransformParameters.Count">
            <summary>
            /数量
            </summary>
        </member>
        <member name="T:Geo.Coordinates.GeoDistance">
            <summary>
            采用贝塞尔大地算法计算大地线长
            </summary>
        </member>
        <member name="M:Geo.Coordinates.GeoDistance.GetDistanceInMeter(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            采用贝塞尔大地算法计算大地线长。
            </summary>
            <param name="coord1"></param>
            <param name="coord2"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.GeoDistance.GetDistanceInMeter(Geo.Coordinates.LonLat,Geo.Coordinates.LonLat)">
            <summary>
            采用贝塞尔大地算法计算大地线长。
            </summary>
            <param name="lonLat1"></param>
            <param name="lonLat2"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Coordinates.ICoordTransformer">
            <summary>
            转换接口
            </summary>
        </member>
        <member name="T:Geo.Coordinates.ITransformer`1">
            <summary>
            转换接口
            </summary>
        </member>
        <member name="M:Geo.Coordinates.ITransformer`1.Trans(`0)">
            <summary>
            执行转换
            </summary>
            <param name="old">原对象</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ICoordTransformer.Trans(Geo.Coordinates.XYZ)">
            <summary>
            执行转换
            </summary>
            <param name="old">原坐标</param>
            <returns></returns>
        </member>
        <member name="T:Geo.Referencing.CoordinateSystemWktReader">
            <summary>
            Well Known Text (WKT) 坐标系统读取器。
            </summary>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystemWktReader.Parse(System.String)">
            <summary>
            读取并解析 WKT格式的空间参考系统字符串。
            
            Reads and parses a WKT-formatted projection string.
            </summary>
            <param name="wkt">String containing WKT.</param>
            <returns>Object representation of the WKT.</returns>
            <exception cref="T:System.ArgumentException">If a token is not recognised.</exception>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystemWktReader.ReadUnit(Geo.Referencing.WktStreamTokenizer)">
            <summary>
            Returns a IUnit given a piece of WKT.
            </summary>
            <param name="tokenizer">WktStreamTokenizer that has the WKT.</param>
            <returns>An object that implements the IUnit interface.</returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystemWktReader.ReadLinearUnit(Geo.Referencing.WktStreamTokenizer)">
            <summary>
            Returns a <see cref="T:Geo.Referencing.LinearUnit"/> given a piece of WKT.
            </summary>
            <param name="tokenizer">WktStreamTokenizer that has the WKT.</param>
            <returns>An object that implements the IUnit interface.</returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystemWktReader.ReadAngularUnit(Geo.Referencing.WktStreamTokenizer)">
            <summary>
            Returns a <see cref="T:Geo.Referencing.AngularUnit"/> given a piece of WKT.
            </summary>
            <param name="tokenizer">WktStreamTokenizer that has the WKT.</param>
            <returns>An object that implements the IUnit interface.</returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystemWktReader.ReadAxis(Geo.Referencing.WktStreamTokenizer)">
            <summary>
            Returns a <see cref="T:Geo.Referencing.Axis"/> given a piece of WKT.
            </summary>
            <param name="tokenizer">WktStreamTokenizer that has the WKT.</param>
            <returns>An Axis object.</returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystemWktReader.ReadCoordinateSystem(System.String,Geo.Referencing.WktStreamTokenizer)">
            <summary>
            
            </summary>
            <param name="coordinateSystem"></param>
            <param name="tokenizer"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystemWktReader.ReadWGS84ConversionInfo(Geo.Referencing.WktStreamTokenizer)">
            <summary>
            Reads either 3, 6 or 7 parameter Bursa-Wolf values from TOWGS84 token
            </summary>
            <param name="tokenizer"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystemWktReader.ReadEllipsoid(Geo.Referencing.WktStreamTokenizer)">
            <summary>
            
            </summary>
            <param name="tokenizer"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystemWktReader.ReadProjection(Geo.Referencing.WktStreamTokenizer)">
            <summary>
            
            </summary>
            <param name="tokenizer"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystemWktReader.ReadProjectedCoordinateSystem(Geo.Referencing.WktStreamTokenizer)">
            <summary>
            
            </summary>
            <param name="tokenizer"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystemWktReader.ReadGeographicCoordinateSystem(Geo.Referencing.WktStreamTokenizer)">
            <summary>
            
            </summary>
            <param name="tokenizer"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystemWktReader.ReadHorizontalDatum(Geo.Referencing.WktStreamTokenizer)">
            <summary>
            读取 HorizontalDatum
            </summary>
            <param name="tokenizer"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystemWktReader.ReadPrimeMeridian(Geo.Referencing.WktStreamTokenizer)">
            <summary>
            
            </summary>
            <param name="tokenizer"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Referencing.SridReader">
            <summary>
            SRID 读
            </summary>
        </member>
        <member name="M:Geo.Referencing.SridReader.GetSRIDs(System.String)">
            <summary>
            Enumerates all SRID's in the SRID.csv file.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:Geo.Referencing.SridReader.GetCSbyID(System.String,System.Int32)">
            <summary>
            Gets a coordinate system from the SRID.csv file
            </summary>
            <param name="id">EPSG ID</param>
            <returns>Coordinate system, or null if SRID was not found.</returns>
        </member>
        <member name="T:Geo.Referencing.SridReader.WktString">
            <summary>
            构造
            </summary>
        </member>
        <member name="F:Geo.Referencing.SridReader.WktString.WKID">
            <summary>
            Well-known ID
            </summary>
        </member>
        <member name="F:Geo.Referencing.SridReader.WktString.WKT">
            <summary>
            Well-known Text
            </summary>
        </member>
        <member name="T:Geo.Referencing.WktStreamTokenizer">
            <summary>
            读取解析一个 WKT文本流。
            </summary>
        </member>
        <member name="T:Geo.Common.IO.StreamTokenizer">
            <summary>
            本类将输入流以指定的字符（令牌、标记、记号等）进行解析，每一次读取一个令牌。
            本类可以识别令牌包括：数字、单词、引号中的字符串。
            </summary>
            <remarks>
            
             这是参照Java StreamTokenizer的实现。
            </remarks>
        </member>
        <member name="M:Geo.Common.IO.StreamTokenizer.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            初始化一个 StreamTokenizer 类实例。
            </summary>
            <param name="reader">A TextReader with some text to read.</param>
            <param name="ignoreWhitespace">Flag indicating whether whitespace should be ignored.</param>
        </member>
        <member name="M:Geo.Common.IO.StreamTokenizer.ReadToken(System.String)">
            <summary>
            读取一个令牌，并检查是否是期望中的类型，如果不是则报错。
            </summary>
            <param name="expectedToken">The expected token.</param>
        </member>
        <member name="M:Geo.Common.IO.StreamTokenizer.ReadDoubleQuotedWord">
            <summary>
            读取双引号中的字符串。
            </summary>
            <remarks>
            White space inside quotes is preserved.
            </remarks>
            <returns>The string inside the double quotes.</returns>
        </member>
        <member name="M:Geo.Common.IO.StreamTokenizer.GetNumericValue">
            <summary>
            若当前令牌为数字类型，则返回该数值。
            </summary>
            <exception cref="T:System.FormatException">Current token is not a number in a valid format.</exception>
        </member>
        <member name="M:Geo.Common.IO.StreamTokenizer.GetStringValue">
            <summary>
            若当前令牌为字符串类型，则返回该字符串。 
            </summary>
        </member>
        <member name="M:Geo.Common.IO.StreamTokenizer.GetTokenType">
            <summary>
            当前令牌类型。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Common.IO.StreamTokenizer.NextToken(System.Boolean)">
            <summary>
            读取下一个令牌，返回下一个令牌类型。
            </summary>
            <param name="ignoreWhitespace">是否忽略空白符</param>
            <returns>The TokenType of the next token.</returns>
        </member>
        <member name="M:Geo.Common.IO.StreamTokenizer.NextToken">
            <summary>
             Returns the next token.
            </summary>
            <returns>The TokenType of the next token.</returns>
        </member>
        <member name="M:Geo.Common.IO.StreamTokenizer.NextTokenAny">
            <summary>
            读取下一个令牌，并返回其类型。
            </summary>
            <remarks>
            实现方法：一个一个字符的读取，判断令牌是否一致，若不一致则停止读取。
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Geo.Common.IO.StreamTokenizer.GetType(System.Char)">
            <summary>
            通过输入字符，判断字符令牌类型（支持的令牌，此处包括字母、数字、空白、换行符，除此之外的认为是Symbol记号）。
            </summary>
            <param name="character">The character to determine.</param>
            <returns>The TokenType the character is.</returns>
        </member>
        <member name="M:Geo.Common.IO.StreamTokenizer.NextNonWhitespaceToken">
            <summary>
            读取下一个令牌，返回下一个令牌类型。忽略空白。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Common.IO.StreamTokenizer.LineNumber">
            <summary>
            当前行的编号，从 1 开始。
            </summary>
        </member>
        <member name="P:Geo.Common.IO.StreamTokenizer.Column">
            <summary>
            当前行的列号（即令牌号），从 1 开始。
            </summary>
        </member>
        <member name="M:Geo.Referencing.WktStreamTokenizer.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the WktStreamTokenizer class.
            </summary>
            <remarks>The WktStreamTokenizer class ais in reading WKT streams.</remarks>
            <param name="reader">A TextReader that contains </param>
        </member>
        <member name="M:Geo.Referencing.WktStreamTokenizer.ReadAuthority(System.String@,System.Int64@)">
            <summary>
            Reads the authority and authority code.
            </summary>
            <param name="authority">String to place the authority in.</param>
            <param name="authorityCode">String to place the authority code in.</param>
        </member>
        <member name="T:Geo.Coordinates.MercatorProjection">
            <summary>
            Provide Coordinate Convertion Of Google Maps between LonLat and Tile number.
            </summary>
        </member>
        <member name="M:Geo.Coordinates.MercatorProjection.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Coordinates.MercatorProjection.#ctor(System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="mecatorRange"></param>
        </member>
        <member name="M:Geo.Coordinates.MercatorProjection.Test(System.Int32)">
            <summary>
            测试
            </summary>
            <param name="zoom"></param>
        </member>
        <member name="M:Geo.Coordinates.MercatorProjection.LonLatToTileXy(Geo.Coordinates.LonLat,System.Int32)">
            <summary>
            得到Google Tile 编号。
            </summary>
            <param name="lonLat"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.MercatorProjection.TileXyToLonLat(Geo.Coordinates.XY,System.Int32)">
            <summary>
            瓦片坐标 To LonLat
            </summary>
            <param name="tileXy"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.MercatorProjection.LonLatToMecatorXy(Geo.Coordinates.LonLat)">
            <summary>
            World Coordinate
            </summary>
            <param name="lonLat"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.MercatorProjection.MecatorXyToLonLat(Geo.Coordinates.XY)">
            <summary>
            MecatorXyToLonLat
            </summary>
            <param name="mecatorXy"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.MercatorProjection.Bound(System.Double,System.Double,System.Double)">
            <summary>
            使数字不超过界限。
            </summary>
            <param name="value"></param>
            <param name="opt_min"></param>
            <param name="opt_max"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.MercatorProjection.DegreesToRadians(System.Double)">
            <summary>
            转换
            </summary>
            <param name="deg"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.MercatorProjection.RadiansToDegrees(System.Double)">
            <summary>
            转换
            </summary>
            <param name="rad"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Coordinates.MotionState">
            <summary>
            空间直角坐标系中的运动状态，包含位置和速度
            </summary>
        </member>
        <member name="M:Geo.Coordinates.MotionState.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Coordinates.MotionState.#ctor(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            构造函数
            </summary>
            <param name="pos"></param>
            <param name="vel"></param>
        </member>
        <member name="M:Geo.Coordinates.MotionState.ScalePosVector(System.Double)">
            <summary>
            Scale the position vector by a factor.
            </summary>
        </member>
        <member name="M:Geo.Coordinates.MotionState.ScaleVelVector(System.Double)">
            <summary>
            Scale the velocity vector by a factor.
            </summary>
        </member>
        <member name="M:Geo.Coordinates.MotionState.op_Subtraction(Geo.Coordinates.MotionState,Geo.Coordinates.MotionState)">
            <summary>
            减法
            </summary>
            <param name="left">左边</param>
            <param name="right">右边</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.MotionState.op_Addition(Geo.Coordinates.MotionState,Geo.Coordinates.MotionState)">
            <summary>
            加法
            </summary>
            <param name="left">左边</param>
            <param name="right">右边</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.MotionState.ToString">
            <summary>
            Returns a string representation of the coordinate and 
            velocity XYZ values.
            </summary>
            <returns>The formatted string.</returns>
        </member>
        <member name="P:Geo.Coordinates.MotionState.Position">
            <summary>
            位置
            </summary>
        </member>
        <member name="P:Geo.Coordinates.MotionState.Velocity">
            <summary>
            速度
            </summary>
        </member>
        <member name="T:Geo.Referencing.CrsFactory">
            <summary>
            坐标参考系统工厂。坐标参考系统，通常由坐标系统和坐标基准构成。
            </summary>
        </member>
        <member name="T:Geo.Referencing.ICrsFactory">
            <summary>
            坐标参考系工厂接口
            </summary>
        </member>
        <member name="M:Geo.Referencing.ICrsFactory.Create(Geo.Referencing.ICoordinateSystem,Geo.Referencing.IDatum)">
            <summary>
            创建一个坐标参考系。
            </summary>
            <param name="coordinateSystem">坐标系统</param>
            <param name="datum">基准</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.CrsFactory.#ctor">
            <summary>
            创建一个坐标参考系统工厂
            </summary>
        </member>
        <member name="M:Geo.Referencing.CrsFactory.Create(Geo.Referencing.ICoordinateSystem,Geo.Referencing.IDatum)">
            <summary>
            创建一个坐标参考系。
            </summary>
            <param name="coordinateSystem">坐标系统</param>
            <param name="datum">基准</param>
            <returns></returns>
        </member>
        <member name="T:Geo.Referencing.ICoordinateReferenceSystem">
            <summary>
            坐标参考系统，通常由坐标系统和坐标基准构成。
            </summary>
        </member>
        <member name="P:Geo.Referencing.ICoordinateReferenceSystem.CoordinateSystem">
            <summary>
            坐标系统，计量表达。
            </summary>
        </member>
        <member name="P:Geo.Referencing.ICoordinateReferenceSystem.Datum">
            <summary>
            基准，计量参照。
            </summary>
        </member>
        <member name="T:Geo.Referencing.CelestialCrs">
            <summary>
            天球参照系统，也称为空固系，用于定义天体的位置。
            </summary>
        </member>
        <member name="T:Geo.Referencing.SingleCrs">
            <summary>
            单个坐标参考系统，与复合相对。
            </summary>
        </member>
        <member name="T:Geo.Referencing.CoordinateReferenceSystem">
            <summary>
            坐标参照系统，通常由坐标系统和坐标基准构成。
            由于坐标参照系的实现虽然严密，但是非常抽象，不易于使用，因而采用参考框架进行实现。
            坐标参照系的实现——参考框架，即一组具有相应参照系下坐标及其时间演变的点。
            只有提供了坐标参照系的坐标系统的坐标采用意义。
            提供原点、尺度、定向及其时间演变的一组协议、算法和常数（IERS）。
            相比基准（Datum），参考系的内涵和外延更广。
            </summary>
        </member>
        <member name="T:Geo.Referencing.IdentifiedObject">
            <summary>
            通用基础信息，包含名称、ID等。
            </summary>
        </member>
        <member name="M:Geo.Referencing.IdentifiedObject.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.Referencing.IdentifiedObject.#ctor(System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="id">ID</param>
            <param name="name">Name</param>
            <param name="abbreviation">简称</param>
        </member>
        <member name="M:Geo.Referencing.CoordinateReferenceSystem.#ctor">
            <summary>
             创建一个实例。需要随后指定坐标系统和基准。
            </summary>
        </member>
        <member name="M:Geo.Referencing.CoordinateReferenceSystem.#ctor(Geo.Referencing.ICoordinateSystem,Geo.Referencing.IDatum,System.String,System.String)">
            <summary>
            创建一个实例。
            </summary>
            <param name="coordinateSystem"></param>
            <param name="datum"></param>
        </member>
        <member name="M:Geo.Referencing.CoordinateReferenceSystem.Equals(System.Object)">
            <summary>
            内容是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateReferenceSystem.GetHashCode">
            <summary>
            哈希数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateReferenceSystem.ToString">
            <summary>
            可读描述
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Referencing.CoordinateReferenceSystem.CoordinateSystem">
            <summary>
            坐标系统
            </summary>
        </member>
        <member name="P:Geo.Referencing.CoordinateReferenceSystem.Datum">
            <summary>
            基准，计量参照。
            </summary>
        </member>
        <member name="P:Geo.Referencing.CoordinateReferenceSystem.Wgs72XyzCs">
            <summary>
            以WGS72基准的空间直角坐标参考系。
            </summary>
        </member>
        <member name="P:Geo.Referencing.CoordinateReferenceSystem.Wgs72GeodeticCs">
            <summary>
            以WGS72基准的大地坐标参考系。
            </summary>
        </member>
        <member name="P:Geo.Referencing.CoordinateReferenceSystem.Wgs84XyzCs">
            <summary>
            以WGS84基准的空间直角坐标参考系。
            </summary>
        </member>
        <member name="P:Geo.Referencing.CoordinateReferenceSystem.Wgs84GeodeticCs">
            <summary>
            以WGS84基准的大地坐标参考系。
            </summary>
        </member>
        <member name="P:Geo.Referencing.CoordinateReferenceSystem.NeuCrs">
            <summary>
            站心坐标的参考系
            </summary>
        </member>
        <member name="P:Geo.Referencing.CoordinateReferenceSystem.HenCrs">
            <summary>
            站心坐标的参考系
            </summary>
        </member>
        <member name="P:Geo.Referencing.CoordinateReferenceSystem.EnuCrs">
            <summary>
            站心坐标Enu的参考系
            </summary>
        </member>
        <member name="P:Geo.Referencing.CoordinateReferenceSystem.SphereCrs">
            <summary>
            站心坐标的参考系
            </summary>
        </member>
        <member name="P:Geo.Referencing.CoordinateReferenceSystem.PolorCrs">
            <summary>
            站心坐标的参考系
            </summary>
        </member>
        <member name="P:Geo.Referencing.CoordinateReferenceSystem.PlanePolorCrs">
            <summary>
            站心坐标的参考系
            </summary>
        </member>
        <member name="M:Geo.Referencing.SingleCrs.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:Geo.Referencing.SingleCrs.#ctor(Geo.Referencing.ICoordinateSystem,Geo.Referencing.IDatum,System.String,System.String)">
            <summary>
            构造
            </summary>
            <param name="coordinateSystem"></param>
            <param name="datum"></param>
            <param name="name"></param>
            <param name="id"></param>
        </member>
        <member name="T:Geo.Referencing.CompoundCrs">
            <summary>
            由一些列坐标参考系统组成。
            </summary>
        </member>
        <member name="P:Geo.Referencing.CompoundCrs.Components">
            <summary>
            参考系分量列表
            </summary>
        </member>
        <member name="T:Geo.Referencing.GeocentricCrs">
            <summary>
            地心大地坐标系的参考系统。
            </summary>
        </member>
        <member name="T:Geo.Referencing.GeodeticCrs">
            <summary>
            地固系，Terrestrial Reference System， Earth-fiexd
            基于大地基准的坐标系统参照系，通常有地理坐标参照系和地心坐标参照系。
            </summary>
        </member>
        <member name="M:Geo.Referencing.GeodeticCrs.#ctor">
            <summary>
            初始化一个实例。
            </summary>
        </member>
        <member name="M:Geo.Referencing.GeodeticCrs.#ctor(Geo.Referencing.ICoordinateSystem,Geo.Referencing.IGeodeticDatum,System.String)">
            <summary>
            初始化大地参考系。
            </summary>
            <param name="coordSys">坐标系统</param>
            <param name="datum">基准</param>
            <param name="name">名称</param>
        </member>
        <member name="P:Geo.Referencing.GeodeticCrs.Datum">
            <summary>
            大地基准。
            </summary>
        </member>
        <member name="P:Geo.Referencing.GeodeticCrs.WGS84">
            <summary>
            WGS84 坐标参考系
            </summary>
        </member>
        <member name="T:Geo.Referencing.GeographicCrs">
            <summary>
            基于大地水准面的地理坐标系的参照系统，由于是曲面上，因此不适用于制图，制图用平面坐标系。
            </summary>
        </member>
        <member name="P:Geo.Referencing.GeographicCrs.EllipsoidalCs">
            <summary>
            椭球地理坐标系统
            </summary>
        </member>
        <member name="T:Geo.Referencing.TimeCrs">
            <summary>
            时间参照系统，记录一维时间的参考系。
            </summary>
        </member>
        <member name="P:Geo.Referencing.TimeCrs.Datum">
            <summary>
            基准。
            </summary>
        </member>
        <member name="T:Geo.Referencing.CoordinateSystemFactory">
            <summary>
            坐标系统创建工厂。
            </summary>
            <remarks>
            工厂设计模式。
            </remarks>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystemFactory.CreateEllipsoid(System.String,System.Double,System.Double,Geo.Referencing.LinearUnit)">
            <summary>
            Creates an <see cref="T:Geo.Referencing.Ellipsoid"/> from radius values.
            </summary>
            <seealso cref="M:Geo.Referencing.CoordinateSystemFactory.CreateFlattenedSphere(System.String,System.Double,System.Double,Geo.Referencing.LinearUnit)"/>
            <param name="name">Name of ellipsoid</param>
            <param name="semiMajorAxis"></param>
            <param name="semiMinorAxis"></param>
            <param name="linearUnit"></param>
            <returns>Ellipsoid</returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystemFactory.CreateFlattenedSphere(System.String,System.Double,System.Double,Geo.Referencing.LinearUnit)">
            <summary>
            Creates an <see cref="T:Geo.Referencing.Ellipsoid"/> from an major radius, and inverse flattening.
            </summary>
            <seealso cref="M:Geo.Referencing.CoordinateSystemFactory.CreateEllipsoid(System.String,System.Double,System.Double,Geo.Referencing.LinearUnit)"/>
            <param name="name">Name of ellipsoid</param>
            <param name="semiMajorAxis">Semi major-axis</param>
            <param name="inverseFlattening">Inverse flattening</param>
            <param name="linearUnit">Linear unit</param>
            <returns>Ellipsoid</returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystemFactory.CreateProjectedCs(System.String,Geo.Referencing.GeographicCs,Geo.Referencing.Projection,Geo.Referencing.LinearUnit,Geo.Referencing.Axis,Geo.Referencing.Axis)">
            <summary>
            Creates a <see cref="T:Geo.Referencing.ProjectedCs"/> using a projection object.
            </summary>
            <param name="name">Name of projected coordinate system</param>
            <param name="gcs">Geographic coordinate system</param>
            <param name="projection">Projection</param>
            <param name="linearUnit">Linear unit</param>
            <param name="axis0">Primary axis</param>
            <param name="axis1">Secondary axis</param>
            <returns>Projected coordinate system</returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystemFactory.CreateProjection(System.String,System.String,System.Collections.Generic.List{Geo.Referencing.ProjectionParameter})">
            <summary>
            Creates a <see cref="T:Geo.Referencing.Projection"/>.
            </summary>
            <param name="name">Name of projection</param>
            <param name="wktProjectionClass">Projection class</param>
            <param name="parameters">Projection parameters</param>
            <returns>Projection</returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystemFactory.CreateHorizontalDatum(System.String,Geo.Referencing.DatumType,Geo.Referencing.Ellipsoid,Geo.Referencing.BursaTransParams)">
            <summary>
            Creates <see cref="T:Geo.Referencing.HorizontalDatum"/> from ellipsoid and Bursa-World parameters.
            </summary>
            <remarks>
            Since this method contains a set of Bursa-Wolf parameters, the created 
            datum will always have a relationship to WGS84. If you wish to create a
            horizontal datum that has no relationship with WGS84, then you can 
            either specify a <see cref="T:Geo.Referencing.DatumType">horizontalDatumType</see> of <see cref="F:Geo.Referencing.DatumType.HD_Other"/>, or create it via WKT.
            </remarks>
            <param name="name">Name of ellipsoid</param>
            <param name="datumType">Type of datum</param>
            <param name="ellipsoid">Ellipsoid</param>
            <param name="toWgs84">Wgs84 conversion parameters</param>
            <returns>Horizontal datum</returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystemFactory.CreatePrimeMeridian(System.String,Geo.Referencing.AngularUnit,System.Double)">
            <summary>
            Creates a <see cref="T:Geo.Referencing.PrimeMeridian"/>, relative to Greenwich.
            </summary>
            <param name="name">Name of prime meridian</param>
            <param name="angularUnit">Angular unit</param>
            <param name="longitude">Longitude</param>
            <returns>Prime meridian</returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystemFactory.CreateGeographicCs(System.String,Geo.Referencing.AngularUnit,Geo.Referencing.HorizontalDatum,Geo.Referencing.PrimeMeridian,Geo.Referencing.Axis,Geo.Referencing.Axis)">
            <summary>
            Creates a <see cref="T:Geo.Referencing.GeographicCs"/>, which could be Lat/Lon or Lon/Lat.
            </summary>
            <param name="name">Name of geographical coordinate system</param>
            <param name="angularUnit">Angular units</param>
            <param name="datum">Horizontal datum</param>
            <param name="primeMeridian">Prime meridian</param>
            <param name="axis0">First axis</param>
            <param name="axis1">Second axis</param>
            <returns>Geographic coordinate system</returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystemFactory.CreateGeocentricCs(System.String,Geo.Referencing.HorizontalDatum,Geo.Referencing.LinearUnit,Geo.Referencing.PrimeMeridian)">
            <summary>
            Creates a <see cref="M:Geo.Referencing.CoordinateSystemFactory.CreateGeocentricCs(System.String,Geo.Referencing.HorizontalDatum,Geo.Referencing.LinearUnit,Geo.Referencing.PrimeMeridian)"/> from a <see cref="T:Geo.Referencing.HorizontalDatum">datum</see>, 
            <see cref="T:Geo.Referencing.LinearUnit">linear unit</see> and <see cref="T:Geo.Referencing.PrimeMeridian"/>.
            </summary>
            <param name="name">Name of geocentric coordinate system</param>
            <param name="datum">Horizontal datum</param>
            <param name="linearUnit">Linear unit</param>
            <param name="primeMeridian">Prime meridian</param>
            <returns>Geocentric Coordinate System</returns>
        </member>
        <member name="T:Geo.Referencing.CoordinateType">
            <summary>
            坐标分量常用类型组合。
            </summary>
        </member>
        <member name="F:Geo.Referencing.CoordinateType.Other">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:Geo.Referencing.CoordinateType.XY">
            <summary>
            具有 X 和 Y　坐标组合
            </summary>
        </member>
        <member name="F:Geo.Referencing.CoordinateType.XYZ">
            <summary>
            X Y Z
            </summary>
        </member>
        <member name="F:Geo.Referencing.CoordinateType.LonLat">
            <summary>
            Lon Lat
            </summary>
        </member>
        <member name="F:Geo.Referencing.CoordinateType.LonLatHeight">
            <summary>
            Lon Lat Height
            </summary>
        </member>
        <member name="F:Geo.Referencing.CoordinateType.NEU">
            <summary>
            North East up
            </summary>
        </member>
        <member name="F:Geo.Referencing.CoordinateType.LonLatRadius">
            <summary>
            Lon Lat Radius 球心坐标
            </summary>
        </member>
        <member name="F:Geo.Referencing.CoordinateType.HEN">
            <summary>
            Height East North
            </summary>
        </member>
        <member name="F:Geo.Referencing.CoordinateType.RadiusAzimuthElevation">
            <summary>
            Radius Azimuth ZenithAngle
            </summary>
        </member>
        <member name="F:Geo.Referencing.CoordinateType.RadiusAzimuth">
            <summary>
            Radius Azimuth ZenithAngle
            </summary>
        </member>
        <member name="F:Geo.Referencing.CoordinateType.UEN">
            <summary>
            UP East North
            </summary>
        </member>
        <member name="T:Geo.Referencing.Direction">
            <summary>
            方向。暂时借用Proj.Net
            </summary>
        </member>
        <member name="F:Geo.Referencing.Direction.Other">
            <summary>
            Unknown or unspecified axis orientation.
            This can be used for local or fitted coordinate systems.
            </summary>
        </member>
        <member name="F:Geo.Referencing.Direction.North">
            <summary>
            Increasing ordinates values go North. 
            This is usually used for Grid Y coordinates and Latitude.
            </summary>
        </member>
        <member name="F:Geo.Referencing.Direction.South">
            <summary>
            Increasing ordinates values go South. 
            This is rarely used.
            </summary>
        </member>
        <member name="F:Geo.Referencing.Direction.East">
            <summary>
            Increasing ordinates values go East. 
            This is rarely used.
            </summary>
        </member>
        <member name="F:Geo.Referencing.Direction.West">
            <summary>
            Increasing ordinates values go West.
            This is usually used for Grid X coordinates and Longitude.
            </summary>
        </member>
        <member name="F:Geo.Referencing.Direction.Up">
            <summary>
            Increasing ordinates values go up. 
            This is used for vertical coordinate systems.
            </summary>
        </member>
        <member name="F:Geo.Referencing.Direction.Down">
            <summary>
            Increasing ordinates values go down. 
            This is used for vertical coordinate systems.
            </summary>
        </member>
        <member name="T:Geo.Referencing.IAxis">
            <summary>
            坐标轴。
            </summary>
        </member>
        <member name="P:Geo.Referencing.IAxis.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Geo.Referencing.IAxis.Ordinate">
            <summary>
            坐标轴
            </summary>
        </member>
        <member name="P:Geo.Referencing.IAxis.Orientation">
            <summary>
            坐标轴指向
            </summary>
        </member>
        <member name="P:Geo.Referencing.IAxis.Unit">
            <summary>
            单位
            </summary>
        </member>
        <member name="T:Geo.Referencing.ICartesianCs">
            <summary>
            笛卡尔坐标系。
            </summary>
        </member>
        <member name="T:Geo.Referencing.ICoordinateSystem">
            <summary>
            坐标系统是描述物质存在的空间位置（坐标）的参照系，
            通过定义特定基准及其参数形式来实现。
            空间位置用坐标实现，坐标系统是由一个或多个坐标轴组成的集合。
            </summary>
        </member>
        <member name="M:Geo.Referencing.ICoordinateSystem.Contains(Geo.Referencing.Ordinate)">
            <summary>
            是否包含指定坐标轴。
            </summary>
            <param name="ordinate">坐标轴</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.ICoordinateSystem.Contains(Geo.Referencing.Ordinate[])">
            <summary>
            是否包含指定坐标轴。
            </summary>
            <param name="ordinates">坐标轴</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Referencing.ICoordinateSystem.Dimension">
            <summary>
            坐标系统维数。
            </summary>
        </member>
        <member name="P:Geo.Referencing.ICoordinateSystem.CoordinateType">
            <summary>
            坐标分量的组合类型。
            </summary>
        </member>
        <member name="P:Geo.Referencing.ICoordinateSystem.Axes">
            <summary>
            坐标轴集合。
            </summary>
        </member>
        <member name="P:Geo.Referencing.ICoordinateSystem.Item(System.Int32)">
            <summary>
            坐标轴检索。
            </summary>
            <param name="axisIndex">编号，从0开始</param>
            <returns></returns>
        </member>
        <member name="T:Geo.Referencing.CartesianCs">
            <summary>
            笛卡尔（Cartesian）坐标系是直角坐标系和斜角坐标系的统称.
            坐标轴度量值相同。
            此处为坐标轴相互垂直的直角坐标系。
            </summary>
        </member>
        <member name="T:Geo.Referencing.CoordinateSystem">
            <summary>
            坐标系统是描述物质存在的空间位置（坐标）的参照系，通过定义特定基准及其参数形式来实现。
            为了方便书写，其子类简称为CS。
            </summary>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystem.#ctor">
            <summary>
            坐标系统。默认构造函数
            </summary>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystem.#ctor(System.Collections.Generic.IEnumerable{Geo.Referencing.IAxis},System.String,System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="axes">坐标轴</param>
            <param name="name">坐标系统名称</param>
            <param name="id">坐标系统编号</param>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystem.Contains(Geo.Referencing.Ordinate)">
            <summary>
            是否包含指定坐标轴。
            </summary>
            <param name="ordinate">坐标轴</param>
            <returns>返回真相</returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystem.Contains(Geo.Referencing.Ordinate[])">
            <summary>
            是否包含指定坐标轴。
            </summary>
            <param name="ordinates">坐标轴</param>
            <returns>返回真相</returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystem.Equals(System.Object)">
            <summary>
            坐标系统是否相等，主要比较坐标轴。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystem.GetHashCode">
            <summary>
            哈希数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystem.ToString">
            <summary>
            默认以逗号隔开的字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystem.GetEnumerator">
            <summary>
            返回循环访问的枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.CoordinateSystem.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回循环访问的枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="F:Geo.Referencing.CoordinateSystem.XyCs">
            <summary>
            坐标轴分别为 X Y 的 2 维坐标系统。 尺度为米。
            </summary>
        </member>
        <member name="F:Geo.Referencing.CoordinateSystem.XyzCs">
            <summary>
            坐标轴分别为 X Y Z 的三维坐标系统。 尺度为米。
            </summary>
        </member>
        <member name="F:Geo.Referencing.CoordinateSystem.LonLatCs">
            <summary>
            坐标轴分别为 Lon Lat 的 2 维坐标系统。 尺度为度。
            </summary>
        </member>
        <member name="F:Geo.Referencing.CoordinateSystem.GeodeticCs">
            <summary>
            坐标轴分别为 Lon Lat Heigt 的 3 维坐标系统。 Lon Lat 尺度为度, Height 为米。
            </summary>
        </member>
        <member name="F:Geo.Referencing.CoordinateSystem.SphereCs">
            <summary>
            球面坐标
            </summary>
        </member>
        <member name="F:Geo.Referencing.CoordinateSystem.NeuCs">
            <summary>
            站心坐标 NEU
            </summary>
        </member>
        <member name="F:Geo.Referencing.CoordinateSystem.HenCs">
            <summary>
            测站坐标 HEN
            </summary>
        </member>
        <member name="F:Geo.Referencing.CoordinateSystem.PolorCs">
            <summary>
            RadiusAzimuthZenithAngle
            </summary>
        </member>
        <member name="F:Geo.Referencing.CoordinateSystem.PlanePolorCs">
            <summary>
            RadiusAzimuth
            </summary>
        </member>
        <member name="P:Geo.Referencing.CoordinateSystem.CoordinateType">
            <summary>
            坐标分量的组合类型。
            </summary>
        </member>
        <member name="P:Geo.Referencing.CoordinateSystem.Item(System.Int32)">
            <summary>
            坐标轴检索。
            </summary>
            <param name="axisIndex">编号，从0开始</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Referencing.CoordinateSystem.Dimension">
            <summary>
            坐标系统维数。
            </summary>
        </member>
        <member name="P:Geo.Referencing.CoordinateSystem.Axes">
            <summary>
            坐标轴集合。
            </summary>
        </member>
        <member name="P:Geo.Referencing.CartesianCs.IsRightHand">
            <summary>
            左右手坐标系。
            在空间直角坐标系中，让右手拇指指向x轴的正方向，食指指向y轴的正方向，如果中指能指向z轴的正方向，则称这个坐标系为右手直角坐标系．
            同理左手直角坐标系。
            </summary>
        </member>
        <member name="P:Geo.Referencing.CartesianCs.SpaceRectangularCs">
            <summary>
            空间直角坐标系
            </summary>
        </member>
        <member name="T:Geo.Referencing.EllipsoidalCs">
            <summary>
            椭球坐标系统。
            由大地纬度，大地经度，和椭球高度（在三维情况下）的两维或三维坐标系。
            一个EllipsoidalCS应当有两个（椭球面坐标）或三个轴（三维坐标）。
            </summary>
        </member>
        <member name="T:Geo.Referencing.GeocentricCs">
            <summary>
            地心三维坐标系。
            </summary>
        </member>
        <member name="M:Geo.Referencing.GeocentricCs.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Referencing.GeocentricCs.#ctor(Geo.Referencing.PrimeMeridian,Geo.Referencing.HorizontalDatum,Geo.Referencing.LinearUnit,System.Collections.Generic.List{Geo.Referencing.IAxis},System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="PrimeMeridian">首子午线</param>
            <param name="HorizontalDatum">基准</param>
            <param name="LinearUnit">尺度计量单位</param>
            <param name="axes">坐标轴</param>
            <param name="name">坐标系统名称</param>
            <param name="id">坐标系统编号</param>
        </member>
        <member name="M:Geo.Referencing.GeocentricCs.GetHashCode">
            <summary>
            哈希数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.GeocentricCs.Equals(System.Object)">
            <summary>
            是否相等
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="P:Geo.Referencing.GeocentricCs.HorizontalDatum">
            <summary>
            Returns the HorizontalDatum. The horizontal datum is used to determine where
            the centre of the Earth is considered to be. All coordinate points will be 
            measured from the centre of the Earth, and not the surface.
            </summary>
        </member>
        <member name="P:Geo.Referencing.GeocentricCs.LinearUnit">
            <summary>
            坐标轴的线性计量单位.
            </summary>
        </member>
        <member name="P:Geo.Referencing.GeocentricCs.PrimeMeridian">
            <summary>
            初始子午线。
            </summary>
        </member>
        <member name="P:Geo.Referencing.GeocentricCs.WGS84">
            <summary>
            Creates a geocentric coordinate system based on the WGS84 ellipsoid, suitable for GPS measurements
            </summary>
        </member>
        <member name="T:Geo.Referencing.GeodeticCs">
            <summary>
            大地坐标系，有经纬度和大地高组成的三维坐标系统。
            大地测量中以参考椭球面（水平面）为基准面的坐标。
            </summary>
        </member>
        <member name="P:Geo.Referencing.GeodeticCs.Ellipsoid">
            <summary>
            参考椭球。
            </summary>
        </member>
        <member name="T:Geo.Referencing.GeographicCs">
            <summary>
            基于经纬度的地理坐标系统。
            </summary>
            <remarks>
            一些坐标系统为 Lat/Lon 格式，而一些事 Lon/Lat，另外，有些是角度，而有些是弧度。
            使用前需要判断确定。
            </remarks>
        </member>
        <member name="T:Geo.Referencing.HorizontalCs">
            <summary>
            地球表面的二维的水平坐标系。经过投影后的平面坐标，也成为格网坐标（Grid Coordinate）
            </summary>
        </member>
        <member name="M:Geo.Referencing.HorizontalCs.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Referencing.HorizontalCs.#ctor(Geo.Referencing.HorizontalDatum,System.Collections.Generic.List{Geo.Referencing.IAxis},System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="HorizontalDatum">平面基准</param>
            <param name="axes">坐标轴</param>
            <param name="name">坐标系统名称</param>
            <param name="id">坐标系统编号</param>
        </member>
        <member name="P:Geo.Referencing.HorizontalCs.HorizontalDatum">
            <summary>
            水平基准。
            </summary>
        </member>
        <member name="M:Geo.Referencing.GeographicCs.#ctor(Geo.Referencing.AngularUnit,Geo.Referencing.HorizontalDatum,Geo.Referencing.PrimeMeridian,System.Collections.Generic.List{Geo.Referencing.IAxis},System.String,System.String)">
            <summary>
            建立一个实例。
            </summary>
            <param name="angularUnit">Angular units</param>
            <param name="horizontalDatum">Horizontal datum</param>
            <param name="primeMeridian">Prime meridian</param>
            <param name="Axis">Axis info</param>
            <param name="name">Name</param> 
            <param name="authorityCode">Authority-specific identification code.</param>
        </member>
        <member name="M:Geo.Referencing.GeographicCs.Wgs84ConversionInfo(System.Int32)">
            <summary>
            Gets details on a conversion to WGS84.
            </summary>
        </member>
        <member name="M:Geo.Referencing.GeographicCs.GetHashCode">
            <summary>
            哈希代码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.GeographicCs.Equals(System.Object)">
            <summary>
            是否相等。
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="P:Geo.Referencing.GeographicCs.WGS84">
            <summary>
            Creates a decimal degrees geographic coordinate system based on the WGS84 ellipsoid, suitable for GPS measurements
            </summary>
        </member>
        <member name="P:Geo.Referencing.GeographicCs.AngularUnit">
            <summary>
            Gets or sets the angular units of the geographic coordinate system.
            </summary>
        </member>
        <member name="P:Geo.Referencing.GeographicCs.PrimeMeridian">
            <summary>
            首子午线。
            </summary>
        </member>
        <member name="P:Geo.Referencing.GeographicCs.NumConversionToWGS84">
            <summary>
            Gets the number of available conversions to WGS84 coordinates.
            </summary>
        </member>
        <member name="T:Geo.Referencing.LocalCs">
            <summary>
            本地坐标系统，其基准比较随意。
            </summary>
            <remarks>In general, a local coordinate system cannot be related to other coordinate 
            systems. However, if two objects supporting this interface have the same dimension, 
            axes, units and datum then client code is permitted to assume that the two coordinate
            systems are identical. This allows several datasets from a common source (e.g. a CAD
            system) to be overlaid. In addition, some implementations of the Coordinate 
            Transformation (CT) package may have a mechanism for correlating local datums. (E.g. 
            from a database of transformations, which is created and maintained from real-world 
            measurements.)
            </remarks>
        </member>
        <member name="M:Geo.Referencing.LocalCs.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Referencing.LocalCs.#ctor(Geo.Referencing.LocalDatum,System.Collections.Generic.List{Geo.Referencing.IAxis},System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="LocalDatum">基准</param>
            <param name="axes">坐标轴</param>
            <param name="name">坐标系统名称</param>
            <param name="id">坐标系统编号</param>
            <param name="abbrev">坐标系统简称</param>
        </member>
        <member name="P:Geo.Referencing.LocalCs.LocalDatum">
            <summary>
             本地基准
            </summary>
        </member>
        <member name="T:Geo.Referencing.ProjectedCs">
            <summary>
            2D投影坐标系统
            </summary>
        </member>
        <member name="M:Geo.Referencing.ProjectedCs.#ctor(Geo.Referencing.HorizontalDatum,Geo.Referencing.GeographicCs,Geo.Referencing.LinearUnit,Geo.Referencing.Projection,System.Collections.Generic.List{Geo.Referencing.IAxis},System.String,System.String)">
            <summary>
            初始化一个  2D投影坐标系统 实例。
            </summary>
            <param name="datum">Horizontal datum</param>
            <param name="geographicCs">Geographic coordinate system</param>
            <param name="linearUnit">Linear unit</param>
            <param name="projection">Projection</param>
            <param name="Axis">Axis info</param>
            <param name="name">Name</param>
            <param name="id">Authority-specific identification code.</param>
        </member>
        <member name="M:Geo.Referencing.ProjectedCs.WGS84_UTM(System.Int32,System.Boolean)">
            <summary>
            Universal Transverse Mercator - WGS84
            </summary>
            <param name="Zone">UTM zone</param>
            <param name="ZoneIsNorth">true of Northern hemisphere, false if southern</param>
            <returns>UTM/WGS84 coordsys</returns>
        </member>
        <member name="M:Geo.Referencing.ProjectedCs.GetUnits(System.Int32)">
            <summary>
            Gets units for dimension within coordinate system. Each dimension in 
            the coordinate system has corresponding units.
            </summary>
            <param name="dimension">Dimension</param>
            <returns>Unit</returns>
        </member>
        <member name="M:Geo.Referencing.ProjectedCs.Equals(System.Object)">
            <summary>
            是否相等
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="M:Geo.Referencing.ProjectedCs.GetHashCode">
            <summary>
            哈希数值
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Referencing.ProjectedCs.GeographicCs">
            <summary>
            Gets or sets the GeographicCoordinateSystem.
            </summary>
        </member>
        <member name="P:Geo.Referencing.ProjectedCs.LinearUnit">
            <summary>
            Gets or sets the <see cref="P:Geo.Referencing.ProjectedCs.LinearUnit">LinearUnits</see>. The linear unit must be the same as the <see cref="T:Geo.Referencing.CoordinateSystem"/> units.
            </summary>
        </member>
        <member name="P:Geo.Referencing.ProjectedCs.Projection">
            <summary>
            Gets or sets the projection
            </summary>
        </member>
        <member name="T:Geo.Referencing.TimeCs">
            <summary>
            测量时间的一维坐标系统。 
            </summary>
        </member>
        <member name="M:Geo.Referencing.TimeCs.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:Geo.Referencing.TimeCs.#ctor(Geo.Referencing.IAxis,System.String,System.String)">
            <summary>
            构造
            </summary>
            <param name="axis"></param>
            <param name="name"></param>
            <param name="id"></param>
        </member>
        <member name="P:Geo.Referencing.TimeCs.TimeUnit">
            <summary>
            Gets the units used along the vertical axis.
            </summary>
        </member>
        <member name="T:Geo.Referencing.TopocentricCs">
            <summary>
            站心坐标系。以测站为原点的坐标系。
            </summary>
        </member>
        <member name="T:Geo.Referencing.TopocentricRectangularCs">
            <summary>
            站心直角坐标系。
            </summary>
        </member>
        <member name="P:Geo.Referencing.TopocentricRectangularCs.TopocentricRectCs">
            <summary>
            站心直角坐标系,左手系
            </summary>
        </member>
        <member name="T:Geo.Referencing.TopocentricPolarCs">
            <summary>
            站心极坐标系。
            </summary>
        </member>
        <member name="T:Geo.Referencing.VerticalCs">
            <summary>
            适用于垂直测量的一维坐标系统，如高程参考系。
            </summary>
        </member>
        <member name="P:Geo.Referencing.VerticalCs.VerticalDatum">
            <summary>
            Gets the vertical datum, which indicates the measurement method
            </summary>
        </member>
        <member name="P:Geo.Referencing.VerticalCs.VerticalUnit">
            <summary>
            Gets the units used along the vertical axis.
            </summary>
        </member>
        <member name="T:Geo.Referencing.IOrientation">
            <summary>
            指向。如坐标轴的指向。
            </summary>
        </member>
        <member name="P:Geo.Referencing.IOrientation.Name">
            <summary>
            方向名称或描述。有的时候枚举无法列出，如Other，就需要用此属性描述。
            </summary>
        </member>
        <member name="P:Geo.Referencing.IOrientation.Direction">
            <summary>
            方向枚举。
            </summary>
        </member>
        <member name="T:Geo.Referencing.IUnit">
            <summary>
            单位。如度，分，秒，弧度，角度，米，千米等。
            </summary>
        </member>
        <member name="P:Geo.Referencing.IUnit.Name">
            <summary>
            名称。
            </summary>
        </member>
        <member name="P:Geo.Referencing.IUnit.ConversionFactor">
            <summary>
            尺度转换因子。
            </summary>
        </member>
        <member name="T:Geo.Referencing.Ordinate">
            <summary>
            坐标轴名称。
            这是一个可以常常需要变化的文件，如果未包含制定类型，可以从这里添加。
            </summary>
        </member>
        <member name="F:Geo.Referencing.Ordinate.Other">
            <summary>
            未指定坐标。
            </summary>
        </member>
        <member name="F:Geo.Referencing.Ordinate.X">
            <summary>
            X 坐标
            </summary>
        </member>
        <member name="F:Geo.Referencing.Ordinate.Y">
            <summary>
            Y 坐标
            </summary>
        </member>
        <member name="F:Geo.Referencing.Ordinate.Z">
            <summary>
            Z 坐标
            </summary>
        </member>
        <member name="F:Geo.Referencing.Ordinate.Lon">
            <summary>
            Lon 坐标
            </summary>
        </member>
        <member name="F:Geo.Referencing.Ordinate.Lat">
            <summary>
            Lat 坐标
            </summary>
        </member>
        <member name="F:Geo.Referencing.Ordinate.Height">
            <summary>
            Height 坐标
            </summary>
        </member>
        <member name="F:Geo.Referencing.Ordinate.Time">
            <summary>
            Time 坐标
            </summary>
        </member>
        <member name="F:Geo.Referencing.Ordinate.Radius">
            <summary>
            半径 坐标。
            </summary>
        </member>
        <member name="F:Geo.Referencing.Ordinate.North">
             <summary>
            北方向 常用于站心坐标
             </summary>
        </member>
        <member name="F:Geo.Referencing.Ordinate.East">
             <summary>
            东方向 常用于站心坐标
             </summary>
        </member>
        <member name="F:Geo.Referencing.Ordinate.Up">
             <summary>
            上方向 常用于站心坐标
             </summary>
        </member>
        <member name="F:Geo.Referencing.Ordinate.Azimuth">
            <summary>
            方位角
            </summary>
        </member>
        <member name="F:Geo.Referencing.Ordinate.ElevatAngle">
            <summary>
            高度角 同 Lat ？
            </summary>
        </member>
        <member name="T:Geo.Referencing.BursaTransParams">
            <summary>
            布尔沙转换参数,具有 7 参数、 4 参数、 3 参数。
            </summary>
        </member>
        <member name="T:Geo.Referencing.IBursaTransParams">
            <summary>
            布尔莎七参数
            </summary>
        </member>
        <member name="M:Geo.Referencing.IBursaTransParams.GetInverse">
            <summary>
            七参数的反算参数。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Referencing.IBursaTransParams.Dx">
            <summary>
            平移参数，单位米。
            </summary>
        </member>
        <member name="P:Geo.Referencing.IBursaTransParams.Dy">
            <summary>
            平移参数，单位米。
            </summary>
        </member>
        <member name="P:Geo.Referencing.IBursaTransParams.Dz">
            <summary>
            平移参数，单位米。
            </summary>
        </member>
        <member name="P:Geo.Referencing.IBursaTransParams.Ex">
            <summary>
            旋转参数
            </summary>
        </member>
        <member name="P:Geo.Referencing.IBursaTransParams.Ey">
            <summary>
            旋转参数 
            </summary>
        </member>
        <member name="P:Geo.Referencing.IBursaTransParams.Ez">
            <summary>
            旋转参数
            </summary>
        </member>
        <member name="P:Geo.Referencing.IBursaTransParams.Scale_ppm">
            <summary>
            尺度因子，单位微米。
            </summary>
        </member>
        <member name="P:Geo.Referencing.IBursaTransParams.Scale_m">
            <summary>
            尺度因子，单位米。
            </summary>
        </member>
        <member name="P:Geo.Referencing.IBursaTransParams.Discription">
            <summary>
            描述。
            </summary>
        </member>
        <member name="M:Geo.Referencing.BursaTransParams.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            初始化一个七参数。
            </summary>
            <param name="dx_m">Bursa Wolf shift in meters.</param>
            <param name="dy_m">Bursa Wolf shift in meters.</param>
            <param name="dz_m">Bursa Wolf shift in meters.</param>
            <param name="ex_s">Bursa Wolf rotation in arc fraction.</param>
            <param name="ey_s">Bursa Wolf rotation in arc fraction.</param>
            <param name="ez_s">Bursa Wolf rotation in arc fraction.</param>
            <param name="scale_ppm">Bursa Wolf scaling in parts per million.</param>
            <param name="areaOfUse">Area of use for this transformation</param>
        </member>
        <member name="M:Geo.Referencing.BursaTransParams.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.BursaTransParams.GetHashCode">
            <summary>
            Returns a hash code for the specified object
            </summary>
            <returns>A hash code for the specified object</returns>
        </member>
        <member name="M:Geo.Referencing.BursaTransParams.Equals(Geo.Referencing.BursaTransParams)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="M:Geo.Referencing.BursaTransParams.ToString">
            <summary>
            字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.BursaTransParams.GetAffineTransform">
            <summary>
            Affine Bursa-Wolf matrix transformation
            </summary>
            <remarks>
            <para>Transformation of coordinates from one geographic coordinate system into another 
            (also colloquially known as a "datum transformation") is usually carried out as an 
            implicit concatenation of three transformations:</para>
            <para>[geographical to geocentric >> geocentric to geocentric >> geocentric to geographic</para>
            <para>
            The middle part of the concatenated transformation, from geocentric to geocentric, is usually 
            described as a simplified 7-parameter Helmert transformation, expressed in matrix form with 7 
            parameters, in what is known as the "Bursa-Wolf" formula:<br/>
            <code>
             S = 1 + Ppm/1000000
             [ Xt ]    [     S   -Ez*S   +Ey*S   Dx ]  [ Xs ]
             [ Yt ]  = [ +Ez*S       S   -Ex*S   Dy ]  [ Ys ]
             [ Zt ]    [ -Ey*S   +Ex*S       S   Dz ]  [ Zs ]
             [ 1  ]    [     0       0       0    1 ]  [ 1  ]
            </code><br/>
            The parameters are commonly referred to defining the transformation "from source coordinate system 
            to target coordinate system", whereby (XS, YS, ZS) are the coordinates of the point in the source 
            geocentric coordinate system and (XT, YT, ZT) are the coordinates of the point in the target 
            geocentric coordinate system. But that does not define the parameters uniquely; neither is the
            definition of the parameters implied in the formula, as is often believed. However, the 
            following definition, which is consistent with the "Position Vector Transformation" convention, 
            is common E&amp;P survey practice: 
            </para>	
            <para>(dX, dY, dZ): Translation vector, to be added to the point's position vector in the source 
            coordinate system in order to transform from source system to target system; also: the coordinates 
            of the origin of source coordinate system in the target coordinate system </para>
            <para>(RX, RY, RZ): Rotations to be applied to the point's vector. The sign convention is such that 
            a positive rotation about an axis is defined as a clockwise rotation of the position vector when 
            viewed from the origin of the Cartesian coordinate system in the positive direction of that axis;
            e.g. a positive rotation about the Z-axis only from source system to target system will result in a
            larger longitude value for the point in the target system. Although rotation angles may be quoted in
            any angular unit of measure, the formula as given here requires the angles to be provided in radians.</para>
            <para>: The scale correction to be made to the position vector in the source coordinate system in order 
            to obtain the correct scale in the target coordinate system. M = (1 + dS*10-6), whereby dS is the scale
            correction expressed in parts per million.</para>
            <para><see href="http://www.posc.org/Epicentre.2_2/DataModel/ExamplesofUsage/eu_cs35.html"/> for an explanation of the Bursa-Wolf transformation</para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.BursaTransParams.GetInverse">
            <summary>
            反相参数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.BursaTransParams.Transform(System.Double[])">
            <summary>
            椭球转换
            </summary>
            <param name="xyz"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.BursaTransParams.InverseTranseform(System.Double[])">
            <summary>
            反向转换,尺度不变。
            </summary>
            <param name="xyz"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Referencing.BursaTransParams.Dx">
            <summary>
            平移参数，单位米。
            </summary>
        </member>
        <member name="P:Geo.Referencing.BursaTransParams.Dy">
            <summary>
            平移参数，单位米。
            </summary>
        </member>
        <member name="P:Geo.Referencing.BursaTransParams.Dz">
            <summary>
            平移参数，单位米。
            </summary>
        </member>
        <member name="P:Geo.Referencing.BursaTransParams.Ex">
            <summary>
            旋转参数，单位角秒，又称弧秒，是量度角度的单位，即角分的六十分之一，符号为"。
            在不会引起混淆时，可简称作秒。
            </summary>
        </member>
        <member name="P:Geo.Referencing.BursaTransParams.Ey">
            <summary>
            旋转参数，单位角秒，又称弧秒，是量度角度的单位，即角分的六十分之一，符号为"。
            在不会引起混淆时，可简称作秒。
            </summary>
        </member>
        <member name="P:Geo.Referencing.BursaTransParams.Ez">
            <summary> 
            旋转参数，单位角秒，又称弧秒，是量度角度的单位，即角分的六十分之一，符号为"。
            在不会引起混淆时，可简称作秒。
            </summary>
        </member>
        <member name="P:Geo.Referencing.BursaTransParams.Scale_ppm">
            <summary>
            尺度因子，单位为百万分之一(ppm)，10^(-6)。
            Bursa Wolf scaling in parts per million.
            m = (S新 - S旧) / S旧
            </summary>
        </member>
        <member name="P:Geo.Referencing.BursaTransParams.Scale_m">
            <summary>
            尺度因子，单位米。
            </summary>
        </member>
        <member name="P:Geo.Referencing.BursaTransParams.Discription">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Geo.Referencing.BursaTransParams.IsZero">
            <summary>
            是否所有参数都为0
            </summary>
            <returns></returns>
        </member>
        <member name="T:Geo.Referencing.EllipsoidType">
            <summary>
            轻量级类型标识。可以不要？
            </summary>
        </member>
        <member name="F:Geo.Referencing.EllipsoidType.WGS84">
            <summary>
            WGS84 椭球
            </summary>
        </member>
        <member name="F:Geo.Referencing.EllipsoidType.PZ90">
            <summary>
            GLONASS 采用的椭球
            </summary>
        </member>
        <member name="F:Geo.Referencing.EllipsoidType.BJ54">
            <summary>
            北京54坐标系参数
            </summary>
        </member>
        <member name="F:Geo.Referencing.EllipsoidType.XA80">
            <summary>
            西安 80 坐标系
            </summary>
        </member>
        <member name="T:Geo.Referencing.IDatum">
            <summary>
            基准。一组计量参照标准，如时间基准、位置基准、质量基准等。
            </summary>
        </member>
        <member name="P:Geo.Referencing.IDatum.Name">
            <summary>
            基准名称
            </summary>
        </member>
        <member name="T:Geo.Referencing.IEllipsoid">
            <summary>
            椭球体。 同 Spheroid
            </summary>
        </member>
        <member name="P:Geo.Referencing.IEllipsoid.AxisUnit">
            <summary>
            Gets or sets the value of the axis unit.
            </summary>
        </member>
        <member name="P:Geo.Referencing.IEllipsoid.SemiMajorAxis">
            <summary>
            长半轴
            </summary>
        </member>
        <member name="P:Geo.Referencing.IEllipsoid.SemiMinorAxis">
            <summary>
            短半轴
            </summary>
        </member>
        <member name="P:Geo.Referencing.IEllipsoid.InverseFlattening">
            <summary>
            扁率的倒数
            </summary>
        </member>
        <member name="P:Geo.Referencing.IEllipsoid.Flattening">
            <summary>
            扁率
            </summary>
        </member>
        <member name="P:Geo.Referencing.IEllipsoid.PolarCurvatureSemiAxis">
            <summary>
            极曲率半径
            </summary>
        </member>
        <member name="P:Geo.Referencing.IEllipsoid.FirstEccentricity">
            <summary>
            第一偏心率
            </summary>
        </member>
        <member name="P:Geo.Referencing.IEllipsoid.SecondEccentricity">
            <summary>
            第二偏心率
            </summary>
        </member>
        <member name="P:Geo.Referencing.IEllipsoid.GM">
            <summary>
            gravitational constant
            </summary>
        </member>
        <member name="P:Geo.Referencing.IEllipsoid.AngleVelocity">
            <summary>
            earth angular velocity 
            </summary>
        </member>
        <member name="T:Geo.Referencing.IGeodeticDatum">
            <summary>
            大地基准
            </summary>
        </member>
        <member name="P:Geo.Referencing.IGeodeticDatum.Ellipsoid">
            <summary>
            参考椭球
            </summary>
        </member>
        <member name="P:Geo.Referencing.IGeodeticDatum.PrimeMeridian">
            <summary>
            首子午线。
            </summary>
        </member>
        <member name="P:Geo.Referencing.IGeodeticDatum.TransParamsToWgs84">
            <summary>
            向WGS84转换的七参数。
            </summary>
        </member>
        <member name="T:Geo.Referencing.CelestialDatum">
            <summary>
            天球基准。
            </summary>
        </member>
        <member name="T:Geo.Referencing.Datum">
            <summary>
            基准。一组计量参照标准，如时间基准、位置基准、质量基准等。
            </summary>
        </member>
        <member name="M:Geo.Referencing.Datum.#ctor">
            <summary>
            创建一个默认实例。
            </summary>
        </member>
        <member name="M:Geo.Referencing.Datum.#ctor(System.String,System.String)">
            <summary>
            创建一个实例。
            </summary>
            <param name="name"></param>
            <param name="id"></param>
        </member>
        <member name="M:Geo.Referencing.Datum.#ctor(Geo.Referencing.DatumType,System.String,System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="id"></param>
        </member>
        <member name="M:Geo.Referencing.Datum.GetHashCode">
            <summary>
            哈希数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.Datum.Equals(System.Object)">
            <summary>
            是否相等
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="M:Geo.Referencing.Datum.ToString">
            <summary>
            默认以逗号隔开的字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Referencing.Datum.DatumType">
            <summary>
            基准类型
            </summary>
        </member>
        <member name="T:Geo.Referencing.DatumType">
            <summary>
            暂时参考自 ProNet。这个有存在的意义吗？
            A vertical datum of geoid model derived heights, also called GPS-derived heights.
            These heights are approximations of orthometric heights (H), constructed from the
            ellipsoidal heights (h) by the use of the given geoid undulation model (N) through
            the equation: H=h-N.
            </summary>
        </member>
        <member name="F:Geo.Referencing.DatumType.Other">
            <summary>
            不支持DatumType的类型采用。
            </summary>
        </member>
        <member name="F:Geo.Referencing.DatumType.HD_Min">
            <summary>
            Lowest possible value for horizontal datum types
            </summary>
        </member>
        <member name="F:Geo.Referencing.DatumType.HD_Other">
            <summary>
            Unspecified horizontal datum type. Horizontal datums with this type should never
            supply a conversion to WGS84 using Bursa Wolf parameters.
            </summary>
        </member>
        <member name="F:Geo.Referencing.DatumType.HD_Classic">
            <summary>
            These datums, such as ED50, NAD27 and NAD83, have been designed to support
            horizontal positions on the ellipsoid as opposed to positions in 3-D space. These datums were designed mainly to support a horizontal component of a position in a domain of limited extent, such as a country, a region or a continent.
            </summary>
        </member>
        <member name="F:Geo.Referencing.DatumType.HD_Geocentric">
            <summary>
            A geocentric datum is a "satellite age" modern geodetic datum mainly of global
            extent, such as WGS84 (used in GPS), PZ90 (used in GLONASS) and ITRF. These
            datums were designed to support both a horizontal component of position and 
            a vertical component of position (through ellipsoidal heights). The regional
            realizations of ITRF, such as ETRF, are also included in this category.
            </summary>
        </member>
        <member name="F:Geo.Referencing.DatumType.HD_Max">
            <summary>
            Highest possible value for horizontal datum types.
            </summary>
        </member>
        <member name="F:Geo.Referencing.DatumType.VD_Min">
            <summary>
            Lowest possible value for vertical datum types.
            </summary>
        </member>
        <member name="F:Geo.Referencing.DatumType.VD_Other">
            <summary>
            Unspecified vertical datum type.
            </summary>
        </member>
        <member name="F:Geo.Referencing.DatumType.VD_Orthometric">
            <summary>
            A vertical datum for orthometric heights that are measured along the plumb line.
            </summary>
        </member>
        <member name="F:Geo.Referencing.DatumType.VD_Ellipsoidal">
            <summary>
            A vertical datum for ellipsoidal heights that are measured along the normal to
            the ellipsoid used in the definition of horizontal datum.
            </summary>
        </member>
        <member name="F:Geo.Referencing.DatumType.VD_AltitudeBarometric">
            <summary>
            The vertical datum of altitudes or heights in the atmosphere. These are
            approximations of orthometric heights obtained with the help of a barometer or
            a barometric altimeter. These values are usually expressed in one of the
            following units: meters, feet, millibars (used to measure pressure levels), or
            theta value (units used to measure geopotential height).
            </summary>
        </member>
        <member name="F:Geo.Referencing.DatumType.VD_Normal">
            <summary>
            A normal height system.
            </summary>
        </member>
        <member name="F:Geo.Referencing.DatumType.VD_GeoidModelDerived">
            <summary>
            A vertical datum of geoid model derived heights, also called GPS-derived heights.
            These heights are approximations of orthometric heights (H), constructed from the
            ellipsoidal heights (h) by the use of the given geoid undulation model (N) 
            through the equation: H=h-N.
            </summary>
        </member>
        <member name="F:Geo.Referencing.DatumType.VD_Depth">
            <summary>
            This attribute is used to support the set of datums generated for hydrographic
            engineering projects where depth measurements below sea level are needed. It is
            often called a hydrographic or a marine datum. Depths are measured in the 
            direction perpendicular (approximately) to the actual equipotential surfaces of
            the earth's gravity field, using such procedures as echo-sounding.
            </summary>
        </member>
        <member name="F:Geo.Referencing.DatumType.VD_Max">
            <summary>
            Highest possible value for vertical datum types.
            </summary>
        </member>
        <member name="F:Geo.Referencing.DatumType.LD_Min">
            <summary>
            Lowest possible value for local datum types.
            </summary>
        </member>
        <member name="F:Geo.Referencing.DatumType.LD_Max">
            <summary>
            Highest possible value for local datum types.
            </summary>
        </member>
        <member name="T:Geo.Referencing.GeodeticDatum">
            <summary>
            大地坐标系基准，定义了参考椭球和首子午线。
            </summary>
        </member>
        <member name="M:Geo.Referencing.GeodeticDatum.#ctor">
            <summary>
            默认构造函数。
            </summary>
        </member>
        <member name="M:Geo.Referencing.GeodeticDatum.#ctor(Geo.Referencing.Ellipsoid,Geo.Referencing.PrimeMeridian,Geo.Referencing.BursaTransParams,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="ellipsoid">椭球体</param>
            <param name="primeMeridian">首子午线</param>
            <param name="name">名称</param>
            <param name="bursaParamsToWGS84">转换参数</param>
            <param name="id">ID</param>
        </member>
        <member name="M:Geo.Referencing.GeodeticDatum.Equals(System.Object)">
            <summary>
            若椭球与基准相等则相等。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.GeodeticDatum.ToString">
            <summary>
            默认以逗号隔开的字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Referencing.GeodeticDatum.TransParamsToWgs84">
            <summary>
            向WGS84转换的七参数。
            </summary>
        </member>
        <member name="P:Geo.Referencing.GeodeticDatum.Ellipsoid">
            <summary>
            参考椭球。
            </summary>
        </member>
        <member name="P:Geo.Referencing.GeodeticDatum.PrimeMeridian">
            <summary>
            首子午线
            </summary>
        </member>
        <member name="P:Geo.Referencing.GeodeticDatum.WGS84">
            <summary>
            WGS 84
            </summary>
        </member>
        <member name="P:Geo.Referencing.GeodeticDatum.WGS72">
            <summary>
            WGS72大地基准
            </summary>
        </member>
        <member name="T:Geo.Referencing.HorizontalDatum">
            <summary>
            水平基准。
            </summary>
        </member>
        <member name="M:Geo.Referencing.HorizontalDatum.#ctor(Geo.Referencing.Ellipsoid,Geo.Referencing.BursaTransParams,Geo.Referencing.DatumType,System.String,System.String)">
            <summary>
            Initializes a new instance of a horizontal datum
            </summary>
            <param name="ellipsoid">Ellipsoid</param>
            <param name="toWgs84">Parameters for a Bursa Wolf transformation into WGS84</param>
            <param name="type">Datum type</param>
            <param name="name">Name</param> 
            <param name="id">Authority-specific identification code.</param>  
        </member>
        <member name="M:Geo.Referencing.HorizontalDatum.Equals(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="P:Geo.Referencing.HorizontalDatum.WGS84">
            <summary>
            EPSG's WGS 84 datum has been the then current realisation. No distinction is made between the original WGS 84 
            frame, WGS 84 (G730), WGS 84 (G873) and WGS 84 (G1150). Since 1997, WGS 84 has been maintained within 10cm of 
            the then current ITRF.
            </summary>
            <remarks>
            <para>Area of use: World</para>
            <para>Origin description: Defined through a consistent set of station coordinates. These have changed with time: by 0.7m 
            on 29/6/1994 [WGS 84 (G730)], a further 0.2m on 29/1/1997 [WGS 84 (G873)] and a further 0.06m on 
            20/1/2002 [WGS 84 (G1150)].</para>
            </remarks>
        </member>
        <member name="P:Geo.Referencing.HorizontalDatum.WGS72">
            <summary>
            World Geodetic System 1972
            </summary>
            <remarks>
            <para>Used by GPS before 1987. For Transit satellite positioning see also WGS 72BE. Datum code 6323 reserved for southern hemisphere ProjCS's.</para>
            <para>Area of use: World</para>
            <para>Origin description: Developed from a worldwide distribution of terrestrial and
            geodetic satellite observations and defined through a set of station coordinates.</para>
            </remarks>
        </member>
        <member name="P:Geo.Referencing.HorizontalDatum.ETRF89">
            <summary>
            European Terrestrial Reference System 1989
            </summary>
            <remarks>
            <para>Area of use: 
            Europe: Albania; Andorra; Austria; Belgium; Bosnia and Herzegovina; Bulgaria; Croatia; 
            Cyprus; Czech Republic; Denmark; Estonia; Finland; Faroe Islands; France; Germany; Greece; 
            Hungary; Ireland; Italy; Latvia; Liechtenstein; Lithuania; Luxembourg; Malta; Netherlands; 
            Norway; Poland; Portugal; Romania; San Marino; Serbia and Montenegro; Slovakia; Slovenia; 
            Spain; Svalbard; Sweden; Switzerland; United Kingdom (UK) including Channel Islands and 
            Isle of Man; Vatican City State.</para>
            <para>Origin description: Fixed to the stable part of the Eurasian continental 
            plate and consistent with ITRS at the epoch 1989.0.</para>
            </remarks>
        </member>
        <member name="P:Geo.Referencing.HorizontalDatum.ED50">
            <summary>
            European Datum 1950
            </summary>
            <remarks>
            <para>Area of use:
            Europe - west - Denmark; Faroe Islands; France offshore; Israel offshore; Italy including San 
            Marino and Vatican City State; Ireland offshore; Netherlands offshore; Germany; Greece (offshore);
            North Sea; Norway; Spain; Svalbard; Turkey; United Kingdom UKCS offshore. Egypt - Western Desert.
            </para>
            <para>Origin description: Fundamental point: Potsdam (Helmert Tower). 
            Latitude: 52 deg 22 min 51.4456 sec N; Longitude: 13 deg  3 min 58.9283 sec E (of Greenwich).</para>
            </remarks>
        </member>
        <member name="P:Geo.Referencing.HorizontalDatum.Ellipsoid">
            <summary>
            Gets or sets the ellipsoid of the datum
            </summary>
        </member>
        <member name="P:Geo.Referencing.HorizontalDatum.Wgs84Parameters">
            <summary>
            Gets preferred parameters for a Bursa Wolf transformation into WGS84
            </summary>
        </member>
        <member name="T:Geo.Referencing.ImageDatum">
            <summary>
            图像基准。
            </summary>
        </member>
        <member name="P:Geo.Referencing.ImageDatum.PiexInCell">
            <summary>
            
            </summary>
        </member>
        <member name="T:Geo.Referencing.PiexInCell">
            <summary>
            图像坐标和图像数据的关系。
            </summary>
        </member>
        <member name="P:Geo.Referencing.PiexInCell.CellCenter">
            <summary>
            图像坐标系统原点在中心。
            </summary>
        </member>
        <member name="T:Geo.Referencing.LocalDatum">
            <summary>
            Local datum. If two local datum objects have the same datum type and name, 
            then they can be considered equal. This means that coordinates can be
            transformed between two different local coordinate systems, as long as
            they are based on the same local datum.
            </summary>
        </member>
        <member name="T:Geo.Referencing.TemporalDatum">
            <summary>
            一个临时性的基准。
            </summary>
        </member>
        <member name="P:Geo.Referencing.TemporalDatum.TimeSpan">
            <summary>
            有效时间。
            </summary>
        </member>
        <member name="T:Geo.Referencing.TimeDatum">
            <summary>
            时间基准
            </summary>
        </member>
        <member name="T:Geo.Referencing.ITimeDatum">
            <summary>
            时间基准
            </summary>
        </member>
        <member name="P:Geo.Referencing.ITimeDatum.StartTime">
            <summary>
            起始时间
            </summary>
        </member>
        <member name="P:Geo.Referencing.TimeDatum.StartTime">
            <summary>
            开始计时的起点
            </summary>
        </member>
        <member name="T:Geo.Referencing.VerticalDatum">
            <summary>
            主要用于测量垂直距离。
            </summary>
        </member>
        <member name="T:Geo.Referencing.PrimeMeridian">
            <summary>
            首子午线。
            </summary>
        </member>
        <member name="M:Geo.Referencing.PrimeMeridian.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Referencing.PrimeMeridian.#ctor(System.Double,Geo.Referencing.AngularUnit,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="longitude"></param>
            <param name="angularUnit"></param>
            <param name="name"></param>
        </member>
        <member name="M:Geo.Referencing.PrimeMeridian.GetHashCode">
            <summary>
            继承重写
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.PrimeMeridian.Equals(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="P:Geo.Referencing.PrimeMeridian.AngularUnit">
            <summary>
            角度单位
            </summary>
        </member>
        <member name="P:Geo.Referencing.PrimeMeridian.Longitude">
            <summary>
            子午线的经度
            </summary>
        </member>
        <member name="P:Geo.Referencing.PrimeMeridian.Greenwich">
            <summary>
            格林尼治子午线。
            </summary>
        </member>
        <member name="P:Geo.Referencing.PrimeMeridian.Lisbon">
            <summary>
            Lisbon prime meridian
            </summary>
        </member>
        <member name="P:Geo.Referencing.PrimeMeridian.Paris">
            <summary>
            Paris prime meridian.
            Value adopted by IGN (Paris) in 1936. Equivalent to 2 deg 20min 14.025sec. Preferred by EPSG to earlier value of 2deg 20min 13.95sec (2.596898 grads) used by RGS London.
            </summary>
        </member>
        <member name="P:Geo.Referencing.PrimeMeridian.Bogota">
            <summary>
            Bogota prime meridian
            </summary>
        </member>
        <member name="P:Geo.Referencing.PrimeMeridian.Madrid">
            <summary>
            Madrid prime meridian
            </summary>
        </member>
        <member name="P:Geo.Referencing.PrimeMeridian.Rome">
            <summary>
            Rome prime meridian
            </summary>
        </member>
        <member name="P:Geo.Referencing.PrimeMeridian.Bern">
            <summary>
            Bern prime meridian.
            1895 value. Newer value of 7 deg 26 min 22.335 sec E determined in 1938.
            </summary>
        </member>
        <member name="P:Geo.Referencing.PrimeMeridian.Jakarta">
            <summary>
            Jakarta prime meridian
            </summary>
        </member>
        <member name="P:Geo.Referencing.PrimeMeridian.Ferro">
            <summary>
            Ferro prime meridian.
            Used in Austria and former Czechoslovakia.
            </summary>
        </member>
        <member name="P:Geo.Referencing.PrimeMeridian.Brussels">
            <summary>
            Brussels prime meridian
            </summary>
        </member>
        <member name="P:Geo.Referencing.PrimeMeridian.Stockholm">
            <summary>
            Stockholm prime meridian
            </summary>
        </member>
        <member name="P:Geo.Referencing.PrimeMeridian.Athens">
            <summary>
            Athens prime meridian.
            Used in Greece for older mapping based on Hatt projection.
            </summary>
        </member>
        <member name="P:Geo.Referencing.PrimeMeridian.Oslo">
            <summary>
            Oslo prime meridian.
            Formerly known as Kristiania or Christiania.
            </summary>
        </member>
        <member name="T:Geo.Referencing.Projection">
            <summary>
            投影。
            存储从 geographic coordinate system 到 projected coordinate system 的转换信息，具有一些列转换参数，如椭球信息。
            所有需要投影坐标转换的类都应该是本类的子类。
            </summary>
        </member>
        <member name="M:Geo.Referencing.Projection.#ctor(System.String,System.Collections.Generic.List{Geo.Referencing.ProjectionParameter},System.String,System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="className">分类名</param>
            <param name="parameters">参数</param>
            <param name="name">名称</param>
            <param name="id">代码</param>
        </member>
        <member name="M:Geo.Referencing.Projection.GetParameter(System.Int32)">
            <summary>
            Gets an indexed parameter of the projection.
            </summary>
            <param name="n">Index of parameter</param>
            <returns>n'th parameter</returns>
        </member>
        <member name="M:Geo.Referencing.Projection.GetParameter(System.String)">
            <summary>
            Gets an named parameter of the projection.
            </summary>
            <remarks>The parameter name is case insensitive</remarks>
            <param name="name">Name of parameter</param>
            <returns>parameter or null if not found</returns>
        </member>
        <member name="M:Geo.Referencing.Projection.Equals(System.Object)">
            <summary>
            数值上是否相等。
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="M:Geo.Referencing.Projection.GetHashCode">
            <summary>
            哈希数。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Referencing.Projection.ParamCount">
            <summary>
            Gets the number of parameters of the projection.
            </summary>
        </member>
        <member name="P:Geo.Referencing.Projection.Parameters">
            <summary>
            Gets or sets the parameters of the projection
            </summary>
        </member>
        <member name="P:Geo.Referencing.Projection.ClassName">
            <summary>
            Gets the projection classification name (e.g. "Transverse_Mercator").
            </summary>
        </member>
        <member name="T:Geo.Referencing.ProjectionParameter">
            <summary>
            A named projection parameter value.
            </summary>
            <remarks>
            The linear units of parameters' values match the linear units of the containing 
            projected coordinate system. The angular units of parameter values match the 
            angular units of the geographic coordinate system that the projected coordinate 
            system is based on. (Notice that this is different from <see cref="T:Geo.Referencing.Parameter"/>,
            where the units are always meters and degrees.)
            </remarks>
        </member>
        <member name="T:Geo.Referencing.Parameter">
            <summary>
            A named parameter value.
            </summary>
        </member>
        <member name="M:Geo.Referencing.Parameter.#ctor(System.String,System.Double)">
            <summary>
            Creates an instance of a parameter
            </summary>
            <remarks>Units are always either meters or degrees.</remarks>
            <param name="name">Name of parameter</param>
            <param name="value">Value</param>
        </member>
        <member name="P:Geo.Referencing.Parameter.Name">
            <summary>
            Parameter name
            </summary>
        </member>
        <member name="P:Geo.Referencing.Parameter.Value">
            <summary>
            Parameter value
            </summary>
        </member>
        <member name="M:Geo.Referencing.ProjectionParameter.#ctor(System.String,System.Double)">
            <summary>
            Initializes an instance of a ProjectionParameter
            </summary>
            <param name="name">Name of parameter</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="T:Geo.Referencing.Axis">
            <summary>
            坐标轴。
            空间参考系统的坐标轴方向，如果没有指定，就使用默认的，默认的指定方向如下：
            地理坐标系统: AXIS[“Lon”,EAST],AXIS[“Lat”,NORTH]
            投影坐标系统: AXIS[“X”,EAST],AXIS[“Y”,NORTH]
            地心坐标系统: AXIS[“X”,OTHER],AXIS[“Y”,EAST],AXIS[“Z”,NORTH]
            </summary>
        </member>
        <member name="M:Geo.Referencing.Axis.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Referencing.Axis.#ctor(System.String,Geo.Referencing.Ordinate,Geo.Referencing.Unit)">
            <summary>
            构造函数。
            </summary>
            <param name="name"></param>
            <param name="ordinate"></param>
        </member>
        <member name="M:Geo.Referencing.Axis.#ctor(System.String,Geo.Referencing.Direction,Geo.Referencing.Ordinate,Geo.Referencing.Unit)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
            <param name="Direction"></param>
        </member>
        <member name="M:Geo.Referencing.Axis.#ctor(System.String,Geo.Referencing.Orientation,Geo.Referencing.Ordinate,Geo.Referencing.Unit)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
            <param name="Orientation"></param>
            <param name="ordinate"></param>
            <param name="Unit"></param>
        </member>
        <member name="M:Geo.Referencing.Axis.Equals(System.Object)">
            <summary>
            比较其内容是否相等。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:Geo.Referencing.Axis.X">
            <summary>
            X 轴，单位为米。
            </summary>
        </member>
        <member name="F:Geo.Referencing.Axis.Y">
            <summary>
            Y 轴，单位为米。
            </summary>
        </member>
        <member name="F:Geo.Referencing.Axis.Z">
            <summary>
            Z 轴，单位为米。
            </summary>
        </member>
        <member name="F:Geo.Referencing.Axis.Height">
            <summary>
            Height 轴，单位为米。
            </summary>
        </member>
        <member name="F:Geo.Referencing.Axis.Lon">
            <summary>
            Lon 轴，单位为度。
            </summary>
        </member>
        <member name="F:Geo.Referencing.Axis.Lat">
            <summary>
            Lat 轴，单位为度。
            </summary>
        </member>
        <member name="F:Geo.Referencing.Axis.Time">
            <summary>
            Time 轴，单位为秒。
            </summary>
        </member>
        <member name="F:Geo.Referencing.Axis.Radius">
            <summary>
            Radius 轴，主要是球面坐标中，单位米。
            </summary>
        </member>
        <member name="F:Geo.Referencing.Axis.Up">
            <summary>
            上方向 轴 米
            </summary>
        </member>
        <member name="F:Geo.Referencing.Axis.North">
            <summary>
            北方向轴 米
            </summary>
        </member>
        <member name="F:Geo.Referencing.Axis.East">
            <summary>
            东方向轴 米
            </summary>
        </member>
        <member name="F:Geo.Referencing.Axis.Azimuth">
            <summary>
            东方向轴 米
            </summary>
        </member>
        <member name="F:Geo.Referencing.Axis.ElevatAngle">
            <summary>
            高度角 度
            </summary>
        </member>
        <member name="P:Geo.Referencing.Axis.Unit">
            <summary>
            坐标轴尺度
            </summary>
        </member>
        <member name="P:Geo.Referencing.Axis.Ordinate">
            <summary>
            坐标轴类型。
            </summary>
        </member>
        <member name="P:Geo.Referencing.Axis.Orientation">
             <summary>
            指向，坐标轴的指向。
             </summary>
        </member>
        <member name="T:Geo.Referencing.Ellipsoid">
            <summary>
            椭球体。
            </summary>
        </member>
        <member name="F:Geo.Referencing.Ellipsoid.MeanRaduis">
            <summary>
            地球平均半径  6371000
            </summary>
        </member>
        <member name="M:Geo.Referencing.Ellipsoid.#ctor">
            <summary>
            默认构造函数。什么都没有。
            </summary>
        </member>
        <member name="M:Geo.Referencing.Ellipsoid.#ctor(System.Double,System.Double,Geo.Referencing.LinearUnit,System.String)">
            <summary>
            椭球体
            </summary>
            <param name="semiMajorAxis">长半轴</param>
            <param name="flatteningOrInverse">扁率或其倒数，根据数据大小程序自动判断</param>
            <param name="axisUnit">坐标轴计量单位</param>
        </member>
        <member name="M:Geo.Referencing.Ellipsoid.GetSemiMinorAxis(System.Double,System.Double)">
            <summary>
            由长半轴和扁率求短半轴
            </summary>
            <param name="semiMajorAxis"></param>
            <param name="flattening"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.Ellipsoid.GetFlattening(System.Double,System.Double)">
            <summary>
            求扁率。 e = (a-b)/a
            </summary>
            <param name="semiMajorAxis"></param>
            <param name="semiMinorAxis"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.Ellipsoid.GetHashCode">
            <summary>
            返回哈希代码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.Ellipsoid.Equals(System.Object)">
            <summary>
            从数值上判断是否相等。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.Ellipsoid.ToString">
            <summary>
            字符串
            </summary>
            <returns></returns>
        </member>
        <member name="F:Geo.Referencing.Ellipsoid.CGCS2000">
            <summary>
            CGCS 2000，中国2000国家大地坐标系采用的椭球。
            以ITRF97参考框架为基准，参考历元为2000.
            </summary>
        </member>
        <member name="F:Geo.Referencing.Ellipsoid.PZ90">
            <summary>
            Glonass
            </summary>
        </member>
        <member name="F:Geo.Referencing.Ellipsoid.BeiJing54">
            <summary>
            北京54坐标系
            </summary>
        </member>
        <member name="F:Geo.Referencing.Ellipsoid.XiAn80">
            <summary>
            西安 80 坐标系
            </summary>
        </member>
        <member name="F:Geo.Referencing.Ellipsoid.WGS84">
            <summary>
            WGS 84 ellipsoid
            </summary>
            <remarks>
            Inverse flattening derived from four defining parameters 
            (semi-major axis;
            C20 = -484.16685*10e-6;
            earth's angular velocity w = 7292115e11 rad/sec;
            gravitational constant GM = 3986005e8 m*m*m/s/s).
            </remarks>
        </member>
        <member name="F:Geo.Referencing.Ellipsoid.WGS72">
            <summary>
            WGS 72 Ellipsoid
            </summary>
        </member>
        <member name="F:Geo.Referencing.Ellipsoid.GRS80">
            <summary>
            GRS 1980 / International 1979 ellipsoid
            </summary>
            <remarks>
            Adopted by IUGG 1979 Canberra.
            Inverse flattening is derived from
            geocentric gravitational constant GM = 3986005e8 m*m*m/s/s;
            dynamic form factor J2 = 108263e8 and Earth's angular velocity = 7292115e-11 rad/s.")
            </remarks>
        </member>
        <member name="F:Geo.Referencing.Ellipsoid.International1924">
            <summary>
            International 1924 / Hayford 1909 ellipsoid
            </summary>
            <remarks>
            Described as a=6378388 m. and b=6356909m. from which 1/f derived to be 296.95926. 
            The figure was adopted as the International ellipsoid in 1924 but with 1/f taken as
            297 exactly from which b is derived as 6356911.946m.
            </remarks>
        </member>
        <member name="F:Geo.Referencing.Ellipsoid.Clarke1880">
            <summary>
            Clarke 1880
            </summary>
            <remarks>
            Clarke gave a and b and also 1/f=293.465 (to 3 decimal places).  1/f derived from a and b = 293.4663077
            </remarks>
        </member>
        <member name="F:Geo.Referencing.Ellipsoid.Clarke1866">
            <summary>
            Clarke 1866
            </summary>
            <remarks>
            Original definition a=20926062 and b=20855121 (British) feet. Uses Clarke's 1865 inch-metre ratio of 39.370432 to obtain metres. (Metric value then converted to US survey feet for use in the United States using 39.37 exactly giving a=20925832.16 ft US).
            </remarks>
        </member>
        <member name="F:Geo.Referencing.Ellipsoid.Sphere">
            <summary>
            Sphere
            </summary>
            <remarks>
            Authalic sphere derived from GRS 1980 ellipsoid (code 7019).  (An authalic sphere is
            one with a surface area equal to the surface area of the ellipsoid). 1/f is infinite.
            </remarks>
        </member>
        <member name="M:Geo.Referencing.Ellipsoid.GetEllipsoid(Geo.Referencing.EllipsoidType)">
            <summary>
            根据类型，获取指定的椭球。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.Ellipsoid.GetEllipsoids">
            <summary>
            根据类型，获取指定的椭球。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Referencing.Ellipsoid.AxisUnit">
            <summary>
            长度单位
            </summary>
        </member>
        <member name="P:Geo.Referencing.Ellipsoid.SemiMajorAxis">
            <summary>
            长半轴
            </summary>
        </member>
        <member name="P:Geo.Referencing.Ellipsoid.SemiMinorAxis">
            <summary>
            短半轴
            </summary>
        </member>
        <member name="P:Geo.Referencing.Ellipsoid.InverseFlattening">
            <summary>
            扁率的倒数
            </summary>
        </member>
        <member name="P:Geo.Referencing.Ellipsoid.Flattening">
            <summary>
            扁率
            </summary>
        </member>
        <member name="P:Geo.Referencing.Ellipsoid.PolarCurvatureSemiAxis">
            <summary>
            极曲率半径
            </summary>
        </member>
        <member name="P:Geo.Referencing.Ellipsoid.FirstEccentricity">
            <summary>
            第一偏心率
            </summary>
        </member>
        <member name="P:Geo.Referencing.Ellipsoid.SecondEccentricity">
            <summary>
            第二偏心率
            </summary>
        </member>
        <member name="P:Geo.Referencing.Ellipsoid.GM">
            <summary>
            gravitational constant
            </summary>
        </member>
        <member name="P:Geo.Referencing.Ellipsoid.AngleVelocity">
            <summary>
            earth angular velocity (rad)
            </summary>
        </member>
        <member name="T:Geo.Referencing.Orientation">
            <summary>
            指向，坐标轴的指向。
            </summary>
        </member>
        <member name="M:Geo.Referencing.Orientation.#ctor(Geo.Referencing.Direction,System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="Direction">方向枚举</param>
            <param name="name">方向名称或描述</param>
        </member>
        <member name="M:Geo.Referencing.Orientation.Equals(System.Object)">
            <summary>
            同时比较名称和方向
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.Orientation.GetHashCode">
            <summary>
            哈希数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.Orientation.ToString">
            <summary>
            字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Referencing.Orientation.Name">
            <summary>
            方向名称或描述。有的时候枚举无法列出，如Other，就需要用此属性描述。
            </summary>
        </member>
        <member name="P:Geo.Referencing.Orientation.Direction">
            <summary>
            方向
            </summary>
        </member>
        <member name="T:Geo.Referencing.AngularUnit">
            <summary>
            以角度为单位。
            默认以弧度作为转换基准。
            </summary>
        </member>
        <member name="T:Geo.Referencing.Unit">
            <summary>
            计量单位。如米、弧度、度等。
            </summary>
        </member>
        <member name="M:Geo.Referencing.Unit.#ctor(System.Double)">
            <summary>
            创建一个实例。
            </summary>
            <param name="ConversionFactor">尺度转换因子</param>
        </member>
        <member name="M:Geo.Referencing.Unit.ToString">
            <summary>
            默认以分号隔开的字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.Unit.Equals(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="M:Geo.Referencing.Unit.GetHashCode">
            <summary>
            哈稀数
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Referencing.Unit.ConversionFactor">
            <summary>
            与标准尺寸的转换。
            对于特定的转换，如时间转换，采用的名称是 SecondPerUnit，其值是一样的。
            </summary>
        </member>
        <member name="M:Geo.Referencing.AngularUnit.#ctor(System.Double)">
            <summary>
            创建一个实例。
            </summary>
            <param name="RadiansPerUnit">尺度转换因子</param>
        </member>
        <member name="P:Geo.Referencing.AngularUnit.RadiansPerUnit">
            <summary>
            以弧度为基准。
            一个单位具有多少弧度。
            </summary>
        </member>
        <member name="P:Geo.Referencing.AngularUnit.Radian">
            <summary>
            弧度。以弧度作为转换基准。
            </summary>
        </member>
        <member name="P:Geo.Referencing.AngularUnit.Degree">
            <summary>
            度。°以弧度作为转换基准。
            </summary>
        </member>
        <member name="P:Geo.Referencing.AngularUnit.Grad">
             <summary>
            以弧度作为转换基准。百分度制角度单位 定义 Gon，百分度制(GRAD)角度单位，用G表示。1G = 直角的1%。 
            与其他角度单位制换算关系 角度制(DEG) 1G = 0.9° 弧度制(RAD) 
             Pi / 200 = 0.015707963267948966192313216916398 radians
             </summary>
        </member>
        <member name="P:Geo.Referencing.AngularUnit.Gon">
             <summary>
            以弧度作为转换基准。百分度制角度单位 定义 Gon，百分度制(GRAD)角度单位，用G表示。1G = 直角的1%。 
            与其他角度单位制换算关系 角度制(DEG) 1G = 0.9° 弧度制(RAD) 
             Pi / 200 = 0.015707963267948966192313216916398 radians
             </summary>		
        </member>
        <member name="T:Geo.Referencing.DistanceUnit">
            <summary>
            距离的单位
            </summary>
        </member>
        <member name="M:Geo.Referencing.DistanceUnit.#ctor(System.Double,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="scale">尺度</param>
            <param name="name">名称，通常为简称</param>
            <param name="fullName">名称</param>
        </member>
        <member name="F:Geo.Referencing.DistanceUnit.Scale">
            <summary>
            尺度，以米为基准。
            </summary>
        </member>
        <member name="F:Geo.Referencing.DistanceUnit.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:Geo.Referencing.DistanceUnit.FullName">
            <summary>
            全称，英文，如 KiloMeter。
            </summary>
        </member>
        <member name="M:Geo.Referencing.DistanceUnit.ToString">
            <summary>
            名称，单位简称如 m。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.DistanceUnit.Equals(System.Object)">
            <summary>
            是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.DistanceUnit.GetHashCode">
            <summary>
            哈希数
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Referencing.DistanceUnit.Kilometer">
            <summary>
            千米
            </summary>
        </member>
        <member name="P:Geo.Referencing.DistanceUnit.Meter">
            <summary>
            米
            </summary>
        </member>
        <member name="P:Geo.Referencing.DistanceUnit.Decimeter">
            <summary>
            分米
            </summary>
        </member>
        <member name="P:Geo.Referencing.DistanceUnit.Centimeter">
            <summary>
            厘米
            </summary>
        </member>
        <member name="P:Geo.Referencing.DistanceUnit.Millimeter">
            <summary>
            毫米
            </summary>
        </member>
        <member name="P:Geo.Referencing.DistanceUnit.MicroMeter">
            <summary>
            微米
            </summary>
        </member>
        <member name="P:Geo.Referencing.DistanceUnit.NanoMeter">
            <summary>
            纳米
            </summary>
        </member>
        <member name="P:Geo.Referencing.DistanceUnit.Picometer">
            <summary>
            皮米
            </summary>
        </member>
        <member name="P:Geo.Referencing.DistanceUnit.Femtometer">
            <summary>
            飞米
            </summary>
        </member>
        <member name="P:Geo.Referencing.DistanceUnit.Ameter">
            <summary>
            阿米（英文待更正）
            </summary>
        </member>
        <member name="T:Geo.Referencing.LinearUnit">
            <summary>
            线性计量单位。有米、厘米、英尺等
            </summary>
        </member>
        <member name="M:Geo.Referencing.LinearUnit.#ctor(System.Double)">
            <summary>
            创建一个实例。
            </summary>
            <param name="MetersPerUnit">尺度转换因子</param>
        </member>
        <member name="M:Geo.Referencing.LinearUnit.Equals(System.Object)">
            <summary>
            内容是否相等。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.LinearUnit.GetHashCode">
            <summary>
            重写。
            </summary>
            <returns></returns>
        </member>
        <member name="F:Geo.Referencing.LinearUnit.Metre">
            <summary>
            米
            </summary>
        </member>
        <member name="F:Geo.Referencing.LinearUnit.Foot">
            <summary>
            英尺.(1ft = 0.3048 m).
            </summary>
        </member>
        <member name="F:Geo.Referencing.LinearUnit.UsFoot">
            <summary>
            美国英尺. (1ftUS = 0.304800609601219m).
            </summary>
        </member>
        <member name="F:Geo.Referencing.LinearUnit.NauticalMile">
            <summary>
            Returns the Nautical Mile linear unit (1NM = 1852m).
            </summary>
        </member>
        <member name="F:Geo.Referencing.LinearUnit.ClarkesFoot">
            <summary>
            Returns Clarke's foot.
            </summary>
            <remarks>
            Assumes Clarke's 1865 ratio of 1 British foot = 0.3047972654 French legal metres applies to the international metre. 
            Used in older Australian, southern African &amp; British West Indian mapping.
            </remarks>
        </member>
        <member name="P:Geo.Referencing.LinearUnit.MetersPerUnit">
            <summary>
             一个单位具有多少米。与米之间的换算。
            </summary>
        </member>
        <member name="T:Geo.Referencing.TimeUnit">
            <summary>
            时间计量单位。有秒、小时、天、年等
            </summary>
        </member>
        <member name="M:Geo.Referencing.TimeUnit.#ctor(System.Double)">
            <summary>
            创建一个实例。
            </summary>
            <param name="LinearUnit">尺度转换因子</param>
        </member>
        <member name="M:Geo.Referencing.TimeUnit.Equals(System.Object)">
            <summary>
            内容是否相等。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Referencing.TimeUnit.GetHashCode">
            <summary>
            重写。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Referencing.TimeUnit.SecondPerUnit">
            <summary>
            以秒为基准。
            一个单位具有多少弧度。
            </summary>
        </member>
        <member name="P:Geo.Referencing.TimeUnit.Second">
            <summary>
            秒
            </summary>
        </member>
        <member name="P:Geo.Referencing.TimeUnit.MiliSecond">
            <summary>
            毫秒
            </summary>
        </member>
        <member name="P:Geo.Referencing.TimeUnit.Hour">
            <summary>
            小时
            </summary>
        </member>
        <member name="P:Geo.Referencing.TimeUnit.Minute">
            <summary>
            分
            </summary>
        </member>
        <member name="P:Geo.Referencing.TimeUnit.Day">
            <summary>
            天
            </summary>
        </member>
        <member name="P:Geo.Referencing.TimeUnit.Week">
            <summary>
            星期
            </summary>
        </member>
        <member name="T:Geo.Coordinates.ScreenCoordTransformer">
            <summary>
            坐标转换器。
            此处使用的转换工具为 ProjNet，其要求高度也要有值，否则转换误差较大。有机会仔细研究之。2010.11.13
            昨晚刚考查 Google map  和 Google Earch 之间的转换也相差 几十米，看来这是一个老问题。
            
            为减少多次读取对墨卡托的赋值，采用非静态类。
            </summary>
        </member>
        <member name="F:Geo.Coordinates.ScreenCoordTransformer.MaxLat">
            <summary>
            墨卡托投影的维度死角
            </summary>
        </member>
        <member name="F:Geo.Coordinates.ScreenCoordTransformer.tileSideCounts">
            <summary>
            缩放等级对应的瓦片数。采用静态存储不用每次计算。
            </summary>
        </member>
        <member name="F:Geo.Coordinates.ScreenCoordTransformer.Resolutions_DegPerPiex">
            <summary>
            一个像素对应的度数。只适用于经度。
            </summary>
        </member>
        <member name="F:Geo.Coordinates.ScreenCoordTransformer.Resolutions_MeterPerPiex">
            <summary>
            一个像素对应的米数，设地球半径为6371Km。只适用于经度。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.ScreenCoordTransformer.GetMercatorY(System.Double)">
            <summary>
            由大地坐标的纬度获取墨卡托投影的Y坐标。原始公式。
            </summary>
            <param name="lat_deg"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ScreenCoordTransformer.GetMercatorXyFromLonLat(Geo.Coordinates.LonLat)">
            <summary>
            经纬度所标转化为墨卡托投影坐标。没有Y或经度方向大小限制。
            </summary>
            <param name="lonLat"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ScreenCoordTransformer.GetLonLatFromMercatorXy(Geo.Coordinates.XY)">
            <summary>
            墨卡托投影坐标转换为经纬度坐标。没有Y或经度方向大小限制。
            </summary>
            <param name="xy"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ScreenCoordTransformer.GetScreenPointFromMercatorXy(Geo.Coordinates.XY,Geo.Coordinates.XY,Geo.Coordinates.XY,System.Int32)">
            <summary>
            墨卡托坐标转换为屏幕坐标。只是放缩不同。
            </summary>
            <param name="mecatorXy">待转墨卡托坐标</param>
            <param name="centerXy">显示区域中心墨卡托坐标</param>
            <param name="screenSize">屏幕大小</param>
            <param name="zoom">缩放级别</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ScreenCoordTransformer.GetScreenPointFromMercatorXy(Geo.Coordinates.XY,System.Int32)">
            <summary>
            墨卡托XY与屏幕坐标只是坐标旋转和放缩的关系。
            </summary>
            <param name="mecatorXy"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ScreenCoordTransformer.GetMecatorXyFromScreenXy(System.Drawing.Point,Geo.Coordinates.XY,Geo.Coordinates.XY,System.Int32)">
            <summary>
            屏幕坐标转换为墨卡托坐标。
            </summary>
            <param name="location"></param>
            <param name="centerXy"></param>
            <param name="screenSize"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ScreenCoordTransformer.GetGoogleTileNumberFromLonLat(Geo.Coordinates.LonLat,System.Int32)">
            <summary>
            经纬度转换为Google瓦片编号。
            </summary>
            <param name="lonLat"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ScreenCoordTransformer.GetMercatorXyFromGoogleTileNumber(Geo.Coordinates.XY,System.Int32)">
            <summary>
            由Google瓦片编号转换为Mercater坐标。
            </summary>
            <param name="tileXy"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ScreenCoordTransformer.GetLonLatFromGoogleTileNumber(Geo.Coordinates.XY,System.Int32)">
            <summary>
            Google瓦片编号转换为经纬度。
            </summary>
            <param name="tileXy"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ScreenCoordTransformer.GetScreenXyFromLonLat(Geo.Coordinates.LonLat,Geo.Coordinates.LonLat,Geo.Coordinates.XY,System.Int32)">
            <summary>
            经纬度坐标转换为屏幕坐标。
            </summary>
            <param name="lonLat"></param>
            <param name="center"></param>
            <param name="screenSize"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ScreenCoordTransformer.GetLonLatFromScreenXy(System.Drawing.Point,Geo.Coordinates.LonLat,System.Drawing.Size,System.Int32)">
            <summary>
            屏幕坐标转换为经纬度坐标。
            </summary>
            <param name="location"></param>
            <param name="center"></param>
            <param name="screenSize"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Coordinates.SimpleTransformer">
            <summary>
            简单的坐标转换。
            假设 坐标的单位一致，坐标轴平行（方向可能相反）。
            需要转换的是平移，放缩以及坐标翻转。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.SimpleTransformer.#ctor(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            构造函数
            </summary>
            <param name="sourseCoord"></param>
            <param name="targetCoord"></param>
        </member>
        <member name="M:Geo.Coordinates.SimpleTransformer.#ctor(System.Double,Geo.Coordinates.XYZ)">
            <summary>
            构造函数
            </summary>
            <param name="scale"></param>
            <param name="differCoord"></param>
        </member>
        <member name="M:Geo.Coordinates.SimpleTransformer.Trans(Geo.Coordinates.XYZ)">
            <summary>
            转换
            </summary>
            <param name="old"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.SimpleTransformer.Scale">
            <summary>
            尺度因子
            </summary>
        </member>
        <member name="P:Geo.Coordinates.SimpleTransformer.DifferCoord">
            <summary>
            坐标差
            </summary>
        </member>
        <member name="T:Geo.Coordinates.TimedMotionState">
            <summary>
            Encapsulates an Earth Centered Inertial coordinate and 
            associated time.
            </summary>
        </member>
        <member name="M:Geo.Coordinates.TimedMotionState.#ctor(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ,Geo.Times.Julian)">
            <summary>
            Creates an instance of the class with the given position, velocity, and time.
            </summary>
            <param name="pos">The position vector.</param>
            <param name="vel">The velocity vector.</param>
            <param name="date">The time associated with the position.</param>
        </member>
        <member name="P:Geo.Coordinates.TimedMotionState.Date">
            <summary>
            The time associated with the ECI coordinates.
            </summary>
        </member>
        <member name="T:Geo.Times.Calendar">
            <summary>
            高精度， 日历型时间类。
            </summary>
        </member>
        <member name="T:Geo.Times.ICalendar">
            <summary>
            日历接口。日历，将时间进行年月日分段表示。
            </summary>
        </member>
        <member name="P:Geo.Times.ICalendar.Date">
            <summary>
            只有日期部分，没有小时以下部分。
            </summary>
        </member>
        <member name="P:Geo.Times.ICalendar.DateTime">
            <summary>
            系统时间，精度在100纳秒。
            </summary>
        </member>
        <member name="P:Geo.Times.ICalendar.JulianDay">
            <summary>
            儒略日。
            </summary>
        </member>
        <member name="P:Geo.Times.ICalendar.MJulianDay">
            <summary>
            平儒略日
            </summary>
        </member>
        <member name="P:Geo.Times.ICalendar.Year">
            <summary>
            年
            </summary>
        </member>
        <member name="P:Geo.Times.ICalendar.Month">
            <summary>
            月 1-12
            </summary>
        </member>
        <member name="P:Geo.Times.ICalendar.Day">
            <summary>
            月内日。1-31
            </summary>
        </member>
        <member name="P:Geo.Times.ICalendar.Hour">
            <summary>
            小时，0-23
            </summary>
        </member>
        <member name="P:Geo.Times.ICalendar.Minute">
            <summary>
            分钟
            </summary>
        </member>
        <member name="P:Geo.Times.ICalendar.Second">
            <summary>
            秒
            </summary>
        </member>
        <member name="P:Geo.Times.ICalendar.MilliSeconds">
            <summary>
            毫秒。0-999
            </summary>
        </member>
        <member name="P:Geo.Times.ICalendar.IsLeapYear">
            <summary>
            是否闰年
            </summary>
        </member>
        <member name="P:Geo.Times.ICalendar.DayOfWeek">
            <summary>
            周几
            </summary>
        </member>
        <member name="P:Geo.Times.ICalendar.DayOfYear">
            <summary>
            年纪日
            </summary>
        </member>
        <member name="P:Geo.Times.ICalendar.Seconds">
            <summary>
            秒小数
            </summary>
        </member>
        <member name="P:Geo.Times.ICalendar.TimeOfDay">
            <summary>
             获取此实例的当天的时间。   System.TimeSpan，它表示当天自午夜以来已经过时间的部分。
            </summary>
        </member>
        <member name="M:Geo.Times.Calendar.#ctor(System.Decimal)">
            <summary>
            以儒略日初始化
            </summary>
            <param name="JulianDay">儒略日</param>
        </member>
        <member name="M:Geo.Times.Calendar.#ctor(System.DateTime,System.Decimal)">
            <summary>
            以系时间类初始化。
            </summary>
            <param name="time">系统时间，可以精确表示到100毫微秒（10 ^-7秒）即0.1毫秒</param>
            <param name="milliseconds">如果指定，则采用本毫秒(1000毫秒 = 1秒 )</param>
        </member>
        <member name="M:Geo.Times.Calendar.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Decimal)">
            <summary>
            以日历数字进行初始化
            </summary>
            <param name="Year">年</param>
            <param name="Month">月</param>
            <param name="Day">日</param>
            <param name="Hour">时</param>
            <param name="Minute">分</param>
            <param name="Second">秒</param>
            <param name="milliSeconds">毫秒（秒的小数部分）</param>
        </member>
        <member name="M:Geo.Times.Calendar.Equals(System.Object)">
            <summary>
            是否相等. 比较到皮秒(10^-12)级别。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Calendar.ToString">
            <summary>
            2002-05-23 12:00:00.000
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Calendar.op_Subtraction(Geo.Times.Calendar,Geo.Times.Calendar)">
            <summary>
            将指定的日期和时间与另一个指定的日期和时间相减，返回一个时间间隔。
            </summary>
            <param name="d1">System.Calendar（被减数）。</param>
            <param name="d2"> System.Calendar（减数）。</param>
            <returns>CalendarSpan，它是 d1 和 d2 之间的时间间隔，即 d1 减去 d2。</returns>
        </member>
        <member name="M:Geo.Times.Calendar.op_Subtraction(Geo.Times.Calendar,System.TimeSpan)">
            <summary>
            从指定的日期和时间减去指定的时间间隔，返回新的日期和时间。
            </summary>
            <param name="d">Calendar</param>
            <param name="t">TimeSpan</param>
            <returns>Calendar，它的值为 d 的值减去 t 的值。</returns>
        </member>
        <member name="M:Geo.Times.Calendar.op_Addition(Geo.Times.Calendar,System.TimeSpan)">
            <summary>
             将指定的时间间隔加到指定的日期和时间以生成新的日期和时间。
            </summary>
            <param name="d">Calendar</param>
            <param name="t">TimeSpan</param>
            <returns>它是 d 和 t 值的和。</returns>
        </member>
        <member name="M:Geo.Times.Calendar.op_Addition(Geo.Times.Calendar,Geo.Times.CalendarSpan)">
            <summary>
             将指定的时间间隔加到指定的日期和时间以生成新的日期和时间。
            </summary>
            <param name="d">Calendar</param>
            <param name="t">CalendarSpan</param>
            <returns>它是 d 和 t 值的和。</returns>
        </member>
        <member name="M:Geo.Times.Calendar.op_LessThan(Geo.Times.Calendar,Geo.Times.Calendar)">
            <summary>
            确定指定的 System.Calendar 是否小于另一个指定的 System.Calendar。
            </summary>
            <param name="t1">Calendar</param>
            <param name="t2">Calendar</param>
            <returns>如果 t1 小于 t2，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Geo.Times.Calendar.op_LessThanOrEqual(Geo.Times.Calendar,Geo.Times.Calendar)">
            <summary>
            确定指定的 Calendar 是否小于或等于另一个指定的 Calendar。
            </summary>
            <param name="t1">Calendar</param>
            <param name="t2">Calendar</param>
            <returns>如果 t1 小于或等于 t2，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Geo.Times.Calendar.op_GreaterThan(Geo.Times.Calendar,Geo.Times.Calendar)">
            <summary>
            确定指定的 System.Calendar 是否大于另一个指定的 Calendar。
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns>如果 t1 大于 t2，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Geo.Times.Calendar.op_GreaterThanOrEqual(Geo.Times.Calendar,Geo.Times.Calendar)">
            <summary>
            确定指定的 Calendar 是否大于等于另一个指定的 Calendar。
            </summary>
            <param name="t1">Calendar</param>
            <param name="t2">Calendar</param>
            <returns>如果 t1 大于等于 t2，则为 true；否则为 false。</returns>
        </member>
        <member name="P:Geo.Times.Calendar.Year">
            <summary>
            年
            </summary>
        </member>
        <member name="P:Geo.Times.Calendar.Month">
            <summary>
            月
            </summary>
        </member>
        <member name="P:Geo.Times.Calendar.Day">
            <summary>
            天
            </summary>
        </member>
        <member name="P:Geo.Times.Calendar.Hour">
            <summary>
            小时
            </summary>
        </member>
        <member name="P:Geo.Times.Calendar.Minute">
            <summary>
            分钟
            </summary>
        </member>
        <member name="P:Geo.Times.Calendar.Second">
            <summary>
            秒
            </summary>
        </member>
        <member name="P:Geo.Times.Calendar.Seconds">
            <summary>
            秒
            </summary>
        </member>
        <member name="P:Geo.Times.Calendar.MilliSecond">
            <summary>
            微秒
            </summary>
        </member>
        <member name="P:Geo.Times.Calendar.MilliSeconds">
            <summary>
            毫秒（秒的小数部分）
            </summary>
        </member>
        <member name="P:Geo.Times.Calendar.SecondFraction">
            <summary>
            小数部分的高精度表示。
            </summary>
        </member>
        <member name="P:Geo.Times.Calendar.DayOfWeek">
            <summary>
            周几
            </summary>
        </member>
        <member name="P:Geo.Times.Calendar.DayOfYear">
            <summary>
            年纪日
            </summary>
        </member>
        <member name="P:Geo.Times.Calendar.IsLeapYear">
            <summary>
            是否闰年
            </summary>
        </member>
        <member name="P:Geo.Times.Calendar.JulianDay">
            <summary>
            儒略日
            </summary>
        </member>
        <member name="P:Geo.Times.Calendar.MJulianDay">
            <summary>
            平儒略日
            </summary>
        </member>
        <member name="P:Geo.Times.Calendar.DateTimeTicks">
            <summary>
            系统时间核心计数。精度是 0.1 微秒， 即 100 纳秒
            </summary>
        </member>
        <member name="P:Geo.Times.Calendar.DateTime">
            <summary>
            返回系统时间，精度到微秒。
            </summary>
        </member>
        <member name="P:Geo.Times.Calendar.Date">
            <summary>
            年月日部分。
            </summary>
        </member>
        <member name="P:Geo.Times.Calendar.TimeOfDay">
            <summary>
            从 0 时开始的时间段。
            </summary>
        </member>
        <member name="P:Geo.Times.Calendar.Zero">
            <summary>
            公元元年 0001年 01 月 01 日。没有 10 天的跳变。是理想的格里历。
            </summary>
        </member>
        <member name="P:Geo.Times.Calendar.Now">
            <summary>
            当前系统时间。
            </summary>
        </member>
        <member name="T:Geo.Times.CalendarSpan">
            <summary>
            一个时间段。采用 Decimal TotalDays 维持。
            最大可表示
            </summary>
        </member>
        <member name="M:Geo.Times.CalendarSpan.#ctor(System.Decimal)">
            <summary>
            以天初始化
            </summary>
            <param name="days"></param>
        </member>
        <member name="M:Geo.Times.CalendarSpan.#ctor(Geo.Times.Calendar,Geo.Times.Calendar)">
            <summary>
            初始化一个时间段。
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Geo.Times.CalendarSpan.ToString">
            <summary>
            字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.CalendarSpan.Equals(System.Object)">
            <summary>
            比较
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.CalendarSpan.GetHashCode">
            <summary>
            哈希数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.CalendarSpan.op_UnaryNegation(Geo.Times.CalendarSpan)">
            <summary>
            返回其值为指定实例的相反值的 Gnsser.CalendarSpan。
            </summary>
            <param name="t"> 要求反的时间间隔。</param>
            <returns>与此实例的数值相同，但符号相反的对象。</returns>
        </member>
        <member name="M:Geo.Times.CalendarSpan.op_UnaryPlus(Geo.Times.CalendarSpan)">
            <summary>
            正号。
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.CalendarSpan.op_Subtraction(Geo.Times.CalendarSpan,Geo.Times.CalendarSpan)">
            <summary>
             从另一个指定的 Gnsser.CalendarSpan 中减去指定的 Gnsser.CalendarSpan。
            </summary>
            <param name="t1"> 被减数。</param>
            <param name="t2">减数。</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.CalendarSpan.op_Inequality(Geo.Times.CalendarSpan,Geo.Times.CalendarSpan)">
            <summary>
            指示两个 Gnsser.CalendarSpan 实例是否不相等。
            </summary>
            <param name="t1">要比较的第一个时间间隔。</param>
            <param name="t2">  要比较的第二个时间间隔。</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.CalendarSpan.op_Addition(Geo.Times.CalendarSpan,Geo.Times.CalendarSpan)">
            <summary>
            添加两个指定的 Gnsser.CalendarSpan 实例。
            </summary>
            <param name="t1">要加上的第一个时间间隔。</param>
            <param name="t2"> 要加上的第二个时间间隔。</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.CalendarSpan.op_LessThan(Geo.Times.CalendarSpan,Geo.Times.CalendarSpan)">
            <summary>
            指示指定的 Gnsser.CalendarSpan 是否小于另一个指定的 Gnsser.CalendarSpan。
            </summary>
            <param name="t1">要比较的第一个时间间隔。</param>
            <param name="t2">  要比较的第二个时间间隔。</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.CalendarSpan.op_LessThanOrEqual(Geo.Times.CalendarSpan,Geo.Times.CalendarSpan)">
            <summary>
            指示指定的 Gnsser.CalendarSpan 是否小于或等于另一个指定的 Gnsser.CalendarSpan。
            </summary>
            <param name="t1">要比较的第一个时间间隔。</param>
            <param name="t2">  要比较的第二个时间间隔。</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.CalendarSpan.op_Equality(Geo.Times.CalendarSpan,Geo.Times.CalendarSpan)">
            <summary>
            指示两个 Gnsser.CalendarSpan 实例是否相等。
            </summary>
            <param name="t1">要比较的第一个时间间隔。</param>
            <param name="t2">  要比较的第二个时间间隔。</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.CalendarSpan.op_GreaterThan(Geo.Times.CalendarSpan,Geo.Times.CalendarSpan)">
            <summary>
            指示指定的 Gnsser.CalendarSpan 是否大于另一个指定的 Gnsser.CalendarSpan。
            </summary>
            <param name="t1"> 要比较的第一个时间间隔。</param>
            <param name="t2"> 要比较的第二个时间间隔。</param>
            <returns>如果 t1 的值大于 t2 的值，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Geo.Times.CalendarSpan.op_GreaterThanOrEqual(Geo.Times.CalendarSpan,Geo.Times.CalendarSpan)">
            <summary>
            指示指定的 Gnsser.CalendarSpan 是否大于或等于另一个指定的 Gnsser.CalendarSpan。
            </summary>
            <param name="t1"> 要比较的第一个时间间隔。</param>
            <param name="t2">要比较的第二个时间间隔。</param>
            <returns> 如果 t1 的值大于或等于 t2 的值，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Geo.Times.CalendarSpan.Add(Geo.Times.CalendarSpan)">
            <summary>
            将指定的 Gnsser.CalendarSpan 添加到此实例中。
            </summary>
            <param name="ts">要加上的时间间隔。</param>
            <returns>一个对象，表示此实例的值加 ts 的值。</returns>
        </member>
        <member name="M:Geo.Times.CalendarSpan.Compare(Geo.Times.CalendarSpan,Geo.Times.CalendarSpan)">
            <summary>
            比较两个 Gnsser.CalendarSpan 值，并返回一个整数，该整数指示第一个值是短于、等于还是长于第二个值。
            </summary>
            <param name="t1"> 要比较的第一个时间间隔。</param>
            <param name="t2"> 要比较的第二个时间间隔。</param>
            <returns>以下值之一。值说明-1t1 短于 t2。0t1 等于 t2。1t1 长于 t2。</returns>
        </member>
        <member name="M:Geo.Times.CalendarSpan.CompareTo(System.Object)">
            <summary>
             将此实例与指定对象进行比较，并返回一个整数，该整数指示此实例是短于、等于还是长于指定对象。
            </summary>
            <param name="value">要比较的对象，或为 null。</param>
            <returns>以下值之一。值说明-1此实例短于 value。0此实例等于 value。1此实例长于 value。- 或 -value 为 null。</returns>
        </member>
        <member name="M:Geo.Times.CalendarSpan.CompareTo(Geo.Times.CalendarSpan)">
            <summary>
            将此实例与指定的 Gnsser.CalendarSpan 对象进行比较，并返回一个整数，该整数指示此实例是短于、等于还是长于 Gnsser.CalendarSpan对象。
            </summary>
            <param name="value"> 要与此实例进行比较的对象。</param>
            <returns>一个有符号数字，该数字指示此实例与 value 的相对值。值说明负整数此实例短于 value。零此实例等于 value。正整数此实例长于 value。</returns>
        </member>
        <member name="M:Geo.Times.CalendarSpan.Duration">
            <summary>
            返回新的 Gnsser.CalendarSpan 对象，其值是当前 Gnsser.CalendarSpan 对象的绝对值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.CalendarSpan.Equals(Geo.Times.CalendarSpan)">
            <summary>
            返回一个值，该值指示此实例是否与指定的 Gnsser.CalendarSpan 对象相等。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.CalendarSpan.Equals(Geo.Times.CalendarSpan,Geo.Times.CalendarSpan)">
            <summary>
            返回一个值，该值指示 Gnsser.CalendarSpan 的两个指定实例是否相等。
            </summary>
            <param name="t1">要比较的第一个时间间隔。</param>
            <param name="t2">要比较的第二个时间间隔。</param>
            <returns>如果 t1 和 t2 的值相等，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Geo.Times.CalendarSpan.FromDays(System.Decimal)">
            <summary>
             返回表示指定天数的 Gnsser.CalendarSpan
            </summary>
            <param name="value">天数</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.CalendarSpan.FromHours(System.Decimal)">
            <summary>
            返回表示指定小时数的 Gnsser.CalendarSpan
            </summary>
            <param name="value">小时数</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.CalendarSpan.FromMilliseconds(System.Decimal)">
            <summary>
             返回表示指定毫秒数的 Gnsser.CalendarSpa
            </summary>
            <param name="value">毫秒数</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.CalendarSpan.FromMinutes(System.Decimal)">
            <summary>
            返回表示指定分钟数的 Gnsser.CalendarSpan
            </summary>
            <param name="value">分钟数</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.CalendarSpan.FromSeconds(System.Decimal)">
            <summary>
            返回表示指定秒数的 Gnsser.CalendarSpan
            </summary>
            <param name="value">秒数</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Times.CalendarSpan.Days">
            <summary>
              获取当前 Gnsser.CalendarSpan 结构所表示的时间间隔的天数部分。此实例的天数部分。返回值可以是正数也可以是负数。
            </summary>
        </member>
        <member name="P:Geo.Times.CalendarSpan.Hours">
            <summary>
             获取当前 Gnsser.CalendarSpan 结构所表示的时间间隔的小时数部分。 
            当前 Gnsser.CalendarSpan 结构的小时分量。返回值的范围为 -23 到 23。
            </summary>
        </member>
        <member name="P:Geo.Times.CalendarSpan.Milliseconds">
            <summary>
             获取当前 Gnsser.CalendarSpan 结构所表示的时间间隔的毫秒数部分。   当前 Gnsser.CalendarSpan 结构的毫秒分量。返回值的范围为 -999 到 999。
            </summary>
        </member>
        <member name="P:Geo.Times.CalendarSpan.Minutes">
            <summary>
             获取当前 Gnsser.CalendarSpan 结构所表示的时间间隔的分钟数部分。当前 Gnsser.CalendarSpan 结构的分钟分量。返回值的范围为 -59 到 59。
            </summary>
        </member>
        <member name="P:Geo.Times.CalendarSpan.Seconds">
            <summary>
            获取当前 Gnsser.CalendarSpan 结构所表示的时间间隔的秒数部分。 当前 Gnsser.CalendarSpan 结构的秒分量。返回值的范围为 -59 到 59。
            </summary>
        </member>
        <member name="P:Geo.Times.CalendarSpan.TotalDays">
            <summary>
              获取以整天数和天的小数部分表示的当前 Gnsser.CalendarSpan 结构的值。
            </summary>
        </member>
        <member name="P:Geo.Times.CalendarSpan.TotalHours">
            <summary>
            获取以整小时数和小时的小数部分表示的当前 Gnsser.CalendarSpan 结构的值。
            </summary>
        </member>
        <member name="P:Geo.Times.CalendarSpan.TotalMilliseconds">
            <summary>
             获取以整毫秒数和毫秒的小数部分表示的当前 Gnsser.CalendarSpan 结构的值。
            </summary>
        </member>
        <member name="P:Geo.Times.CalendarSpan.TotalMinutes">
            <summary>
             获取以整分钟数和分钟的小数部分表示的当前 Gnsser.CalendarSpan 结构的值。 
            </summary>
        </member>
        <member name="P:Geo.Times.CalendarSpan.TotalSeconds">
            <summary>
            获取以整秒数和秒的小数部分表示的当前 Gnsser.CalendarSpan 结构的值。
            </summary>
        </member>
        <member name="T:Geo.Times.JulianDay">
            <summary>
            以日为基本单位表示时间，如 儒略日，新儒略日。天文历法。
            儒略日比回归年长0.0078日。 400年多3.12日。闰月不同，一年12月，大小月交替，4年一闰。
            儒略日以 “儒略历”公元前4713年1月1日GMT正午为第0日的开始。
            而简化儒略日以 公历 1858年11月17日 GMT 0时开始。
            提供整形和双精度访问接口，精度表示到纳秒以下。
            内部采用 Decimal 维持，以保证精度。
            如果都采用Decimal计算，则不需要采用此类。
            </summary>
        </member>
        <member name="T:Geo.Times.IJulianDay">
            <summary>
            以日为基本单位表示时间，如 儒略日，新儒略日。
            提供整形和双精度访问接口，精度表示到纳秒以下。
            内部采用 Decimal 维持，以保证精度。
            如果都采用Decimal计算，则不需要采用此类。
            </summary>
        </member>
        <member name="P:Geo.Times.IJulianDay.DecimalDays">
            <summary>
            Decimal 表示，具有高精度。
            </summary>
        </member>
        <member name="P:Geo.Times.IJulianDay.Day">
            <summary>
            整数日.
            </summary>
        </member>
        <member name="P:Geo.Times.IJulianDay.SecondOfDay">
            <summary>
            日内秒。
            </summary>
        </member>
        <member name="P:Geo.Times.IJulianDay.DoubleDays">
            <summary>
            最直接的表示，但是精度差很多。
            </summary>
        </member>
        <member name="M:Geo.Times.JulianDay.#ctor(System.Decimal)">
            <summary>
            通过decimal实例化。。
            </summary>
            <param name="days">decimal表示的日</param>
        </member>
        <member name="M:Geo.Times.JulianDay.#ctor(System.Double)">
            <summary>
            通过双精度日实例化。精度可能有损失。
            </summary>
            <param name="days">双精度表示的日</param>
        </member>
        <member name="M:Geo.Times.JulianDay.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            实例化高精度对象。
            </summary>
            <param name="Day">日</param>
            <param name="SecondOfDay">日内秒</param>
            <param name="Milliseconds">毫秒</param>
        </member>
        <member name="M:Geo.Times.JulianDay.Equals(System.Object)">
            <summary>
            是否相等。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.JulianDay.GetHashCode">
            <summary>
            哈希数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.JulianDay.ToString">
            <summary>
            字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Times.JulianDay.DecimalDays">
            <summary>
            Decimal 表示，具有高精度。
            </summary>
        </member>
        <member name="P:Geo.Times.JulianDay.DoubleDays">
            <summary>
            最直接的表示，但是精度差很多。
            </summary>
        </member>
        <member name="P:Geo.Times.JulianDay.Day">
            <summary>
            日
            </summary>
        </member>
        <member name="P:Geo.Times.JulianDay.SecondOfDay">
            <summary>
            秒
            </summary>
        </member>
        <member name="T:Geo.Times.Second">
            <summary>
            高精度秒表示，整数部分和小数部分分开表示。
            提供通用类型（整型和双精度）表示，方面与外部程序对接。 
            </summary>
        </member>
        <member name="T:Geo.Times.ISecond">
            <summary>
            高精度秒表示，整数部分和小数部分分开表示。
            提供通用类型（整型和双精度）表示，方面与外部程序对接。 
            </summary>
        </member>
        <member name="P:Geo.Times.ISecond.Int">
            <summary>
            秒的整数部分。
            </summary>
        </member>
        <member name="P:Geo.Times.ISecond.SecondFraction">
            <summary>
            秒的小数部分
            </summary>
        </member>
        <member name="P:Geo.Times.ISecond.DoubleFraction">
            <summary>
            秒的小数部分。以Double表示。
            </summary>
        </member>
        <member name="P:Geo.Times.ISecond.DecimalFraction">
            <summary>
            秒的小数部分。以Decimal表示。
            </summary>
        </member>
        <member name="P:Geo.Times.ISecond.DoubleValue">
            <summary>
            秒值，以Double表示。
            </summary>
        </member>
        <member name="P:Geo.Times.ISecond.DecimalValue">
            <summary>
            秒值，以Decimal表示。
            </summary>
        </member>
        <member name="M:Geo.Times.Second.#ctor(System.Double)">
            <summary>
            以秒初始化
            </summary>
            <param name="second">秒</param>
        </member>
        <member name="M:Geo.Times.Second.#ctor(System.Decimal)">
            <summary>
            以秒初始化
            </summary>
            <param name="second">秒</param>
        </member>
        <member name="M:Geo.Times.Second.#ctor(System.Int64,System.Double)">
            <summary>
            以整数和小数初始化。
            </summary>
            <param name="Int">整数部分</param>
            <param name="fraction">小数部分</param>
        </member>
        <member name="M:Geo.Times.Second.#ctor(System.Int64,System.Decimal)">
            <summary>
            以整数和小数初始化。
            </summary>
            <param name="Int">整数部分</param>
            <param name="fraction">小数部分</param>
        </member>
        <member name="M:Geo.Times.Second.#ctor(System.Int64,Geo.Times.ISecondFraction)">
            <summary>
            以整数和小数初始化。
            </summary>
            <param name="Int">整数部分</param>
            <param name="fraction">小数部分</param>
        </member>
        <member name="F:Geo.Times.Second.Tolerance">
            <summary>
            秒的精度
            </summary>
        </member>
        <member name="M:Geo.Times.Second.Equals(System.Object)">
            <summary>
            是否相等。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Second.Equals(Geo.Times.Second)">
            <summary>
             是否相等。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Second.GetHashCode">
            <summary>
            哈希数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Second.ToString">
            <summary>
            字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Second.CompareTo(Geo.Times.Second)">
            <summary>
            比较
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Times.Second.Int">
            <summary>
            秒的整数部分。
            </summary>
        </member>
        <member name="P:Geo.Times.Second.SecondFraction">
            <summary>
            秒的小数部分
            </summary>
        </member>
        <member name="P:Geo.Times.Second.DoubleFraction">
            <summary>
            秒的小数部分。以Double表示。
            </summary>
        </member>
        <member name="P:Geo.Times.Second.DecimalFraction">
            <summary>
            秒的小数部分。以Decimal表示。
            </summary>
        </member>
        <member name="P:Geo.Times.Second.DoubleValue">
            <summary>
            秒值，以Double表示。
            </summary>
        </member>
        <member name="P:Geo.Times.Second.DecimalValue">
            <summary>
            秒值，以Decimal表示。
            </summary>
        </member>
        <member name="T:Geo.Times.SecondFraction">
            <summary>
            表示秒以下部分， 最小单元采用双精度维持的高精度时间接口。
            以通用类型（整型和双精度）表示，方面与外部程序对接。 
            </summary>
        </member>
        <member name="T:Geo.Times.ISecondFraction">
            <summary>
            表示秒以下部分， 最小单元采用双精度维持的高精度时间接口。
            以通用类型（整型和双精度）表示，方面与外部程序对接。 
            </summary>
        </member>
        <member name="P:Geo.Times.ISecondFraction.DecimalValue">
            <summary>
            秒的小数部分。以Decimal表示。
            </summary>
        </member>
        <member name="P:Geo.Times.ISecondFraction.DoubleValue">
            <summary>
            秒的小数部分。以Double表示。
            </summary>
        </member>
        <member name="P:Geo.Times.ISecondFraction.MilliSecond">
            <summary>
            微秒
            </summary>
        </member>
        <member name="P:Geo.Times.ISecondFraction.MicroSecond">
            <summary>
            毫秒
            </summary>
        </member>
        <member name="P:Geo.Times.ISecondFraction.NanoSeconds">
            <summary>
            纳秒
            </summary>
        </member>
        <member name="M:Geo.Times.SecondFraction.#ctor(System.Double)">
            <summary>
            以 Double 类型表示的秒小数初始化。
            </summary>
            <param name="fractionOfSecond">秒小数</param>
        </member>
        <member name="M:Geo.Times.SecondFraction.#ctor(System.Decimal)">
            <summary>
            以 Decimal 类型表示的秒小数初始化。
            </summary>
            <param name="fractionOfSecond">秒小数</param>
        </member>
        <member name="M:Geo.Times.SecondFraction.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            初始化一个实例。
            </summary>
            <param name="MilliSeconds">毫秒</param>
            <param name="MicroSeconds">微秒</param>
            <param name="NanoSeconds">纳秒</param>
        </member>
        <member name="M:Geo.Times.SecondFraction.Equals(System.Object)">
            <summary>
            是否相等。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondFraction.GetHashCode">
            <summary>
            哈希数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondFraction.ToString">
            <summary>
            字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Times.SecondFraction.DecimalValue">
            <summary>
            秒的小数部分。
            </summary>
        </member>
        <member name="P:Geo.Times.SecondFraction.DoubleValue">
            <summary>
            秒的小数部分。精度可达小数位后15位，飞母托 femto 量级。
            </summary>
        </member>
        <member name="P:Geo.Times.SecondFraction.MilliSecond">
            <summary>
            毫秒
            </summary>
        </member>
        <member name="P:Geo.Times.SecondFraction.MicroSecond">
            <summary>
            微秒
            </summary>
        </member>
        <member name="P:Geo.Times.SecondFraction.NanoSeconds">
            <summary>
            纳秒
            </summary>
        </member>
        <member name="T:Geo.Times.ITime">
            <summary>
            时间接口
            </summary>
        </member>
        <member name="M:Geo.Times.ITime.ToTimeString">
            <summary>
            时间字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Times.ITime.Date">
            <summary>
            日期部分
            </summary>
        </member>
        <member name="P:Geo.Times.ITime.DateTime">
            <summary>
            系统时间
            </summary>
        </member>
        <member name="P:Geo.Times.ITime.DayOfWeek">
            <summary>
            周几
            </summary>
        </member>
        <member name="P:Geo.Times.ITime.DayOfYear">
            <summary>
            年积日
            </summary>
        </member>
        <member name="P:Geo.Times.ITime.GpsWeek">
            <summary>
            GPS 周
            </summary>
        </member>
        <member name="P:Geo.Times.ITime.Hour">
            <summary>
            小时
            </summary>
        </member>
        <member name="P:Geo.Times.ITime.MilliSeconds">
            <summary>
            毫秒
            </summary>
        </member>
        <member name="P:Geo.Times.ITime.Minute">
            <summary>
            分
            </summary>
        </member>
        <member name="P:Geo.Times.ITime.Second">
            <summary>
            秒
            </summary>
        </member>
        <member name="P:Geo.Times.ITime.Seconds">
            <summary>
            秒 [0, 60)
            </summary>
        </member>
        <member name="P:Geo.Times.ITime.SecondsOfDay">
            <summary>
            日秒
            </summary>
        </member>
        <member name="P:Geo.Times.ITime.SecondsOfWeek">
            <summary>
            周秒
            </summary>
        </member>
        <member name="P:Geo.Times.ITime.TotalDays">
            <summary>
            总共天
            </summary>
        </member>
        <member name="P:Geo.Times.ITime.TotalHours">
            <summary>
            总共小时
            </summary>
        </member>
        <member name="P:Geo.Times.ITime.TotalMinutes">
            <summary>
            总共分钟
            </summary>
        </member>
        <member name="P:Geo.Times.ITime.TotalWeeks">
             <summary>
            总周数
             </summary>
        </member>
        <member name="P:Geo.Times.ITime.Week">
            <summary>
            周
            </summary>
        </member>
        <member name="T:Geo.Times.Julian">
            <summary>
            Encapsulates a Julian date.
            </summary>
        </member>
        <member name="M:Geo.Times.Julian.#ctor(System.DateTime)">
            <summary>
            Create a Julian date object from a DateTime object. The time
            contained in the DateTime object is assumed to be UTC.
            </summary>
            <param name="utc">The UTC time to funcKeyToDouble.</param>
        </member>
        <member name="M:Geo.Times.Julian.#ctor(System.Int32,System.Double)">
            <summary>
            Create a Julian date object given a year and day-of-year.
            </summary>
            <param name="year">The year, including the century (i.e., 2012).</param>
            <param name="doy">Day of year (1 means January 1, etc.).</param>
            <remarks>
            The fractional part of the day value is the fractional portion of
            the day.
            Examples: 
               day = 1.0  Jan 1 00h
               day = 1.5  Jan 1 12h
               day = 2.0  Jan 2 00h
            </remarks>
        </member>
        <member name="M:Geo.Times.Julian.Diff(Geo.Times.Julian)">
            <summary>
            Calculates the time difference between two Julian dates.
            </summary>
            <param name="date">Julian date.</param>
            <returns>
            A TimeSpan representing the time difference between the two dates.
            </returns>
        </member>
        <member name="M:Geo.Times.Julian.Initialize(System.Int32,System.Double)">
            <summary>
            Initialize the Julian date object.
            </summary>
            <param name="year">The year, including the century.</param>
            <param name="doy">Day of year (1 means January 1, etc.)</param>
            <remarks>
            The prevObj day of the year, Jan 1, is day 1.0. Noon on Jan 1 is 
            represented by the day value of 1.5, etc.
            </remarks>
        </member>
        <member name="M:Geo.Times.Julian.GetGreenwichMeanSiderealTime(System.Boolean)">
            <summary>
            格里尼兹平恒心时时间。
            返回从春分点向东与首子午线的夹角，默认单位弧度。
            Calculate Greenwich Mean Sidereal Time for the Julian date.
            </summary>
            <returns>
            The angle, in radians, measuring eastward from the Vernal Equinox（春分点） to
            the prime meridian. This angle is also referred to as "ThetaG" 
            (Theta GMST).
            </returns>
        </member>
        <member name="M:Geo.Times.Julian.GetLocalMeanSiderealTime(System.Double,System.Boolean)">
            <summary>
            计算本地平恒星时。
            Calculate Local Mean Sidereal Time for this Julian date at the given longitude.
            </summary>
            <param name="lon">The longitude, in radians, measured west from Greenwich.</param>
            <returns>
            The angle, in radians, measuring eastward from the Vernal Equinox to
            the given longitude.
            </returns>
        </member>
        <member name="M:Geo.Times.Julian.ToTime">
            <summary>
            Returns a UTC DateTime object that corresponds to this Julian date.
            </summary>
            <returns>A DateTime object in UTC.</returns>
        </member>
        <member name="T:Geo.Times.MinuteTime">
            <summary>
            高精度轻量级时间表示法，采用分钟和秒维持， 精度达1e-13秒。
            此类并没有定义起始时间，只是一个一维时间表示方法。
            </summary>
        </member>
        <member name="F:Geo.Times.MinuteTime.SECOND_PER_WEEK">
            <summary>
            604800, 一周秒数量
            </summary>
        </member>
        <member name="F:Geo.Times.MinuteTime.MINUTE_PER_WEEK">
            <summary>
            10080, 一周的分钟数量
            </summary>
        </member>
        <member name="F:Geo.Times.MinuteTime.SECOND_PER_DAY">
            <summary>
            86400, 一天的秒数量
            </summary>
        </member>
        <member name="F:Geo.Times.MinuteTime.SECOND_PER_HOUR">
            <summary>
            一个小时的秒数量
            </summary>
        </member>
        <member name="F:Geo.Times.MinuteTime.MINUTE_PER_HOUR">
            <summary>
            60, 一小时的分钟数量
            </summary>
        </member>
        <member name="F:Geo.Times.MinuteTime.MINUTE_PER_DAY">
            <summary>
            1440, 一天的分钟数量
            </summary>
        </member>
        <member name="F:Geo.Times.MinuteTime.SECOND_PER_MINUTE">
            <summary>
            60,  一个小时的秒数量
            </summary>
        </member>
        <member name="F:Geo.Times.MinuteTime.HOUR_PER_DAY">
            <summary>
            24, 一天的小时数量
            </summary>
        </member>
        <member name="F:Geo.Times.MinuteTime.TOLERANCE">
            <summary>
            精度范围，认为精度在 1e-12 为相同，可达 1e-5 米级别的精度。
            </summary>
        </member>
        <member name="M:Geo.Times.MinuteTime.#ctor(System.DateTime)">
            <summary>
            构造函数。
            </summary>
            <param name="dateTime">系统时间</param>
        </member>
        <member name="M:Geo.Times.MinuteTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            以日历初始化
            </summary>
            <param name="year">年</param>
            <param name="month">月</param>
            <param name="day">日</param>
            <param name="hour">小时</param>
            <param name="minute">分钟</param>
            <param name="seconds">秒钟</param>
        </member>
        <member name="M:Geo.Times.MinuteTime.#ctor(System.Double)">
            <summary>
            以秒赋值。 
            </summary>
        </member>
        <member name="M:Geo.Times.MinuteTime.#ctor(System.Int32)">
            <summary>
            以秒赋值。 整数秒赋值。
            </summary>
        </member>
        <member name="M:Geo.Times.MinuteTime.#ctor(System.Int64,System.Double)">
            <summary>
            构造函数。赋值后，做判断将其调整到合适位置。
            </summary>
            <param name="second">分钟</param> 
            <param name="fraction">秒</param>
        </member>
        <member name="M:Geo.Times.MinuteTime.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            构造函数。赋值后，做判断将其调整到合适位置。
            </summary>
            <param name="hour">小时</param> 
            <param name="second">分钟</param> 
            <param name="fraction">秒</param>
        </member>
        <member name="M:Geo.Times.MinuteTime.Legitimize">
            <summary>
            使合法。检查各个参数的范围，并设置在合理范围内。
            </summary>
        </member>
        <member name="F:Geo.Times.MinuteTime.MinuteTicks">
            <summary>
            分，一分钟等于60秒。
            </summary>
        </member>
        <member name="F:Geo.Times.MinuteTime.FloatSeconds">
            <summary>
            秒的小数部分。此数值应该在 [0 60) 区间。
            </summary>
        </member>
        <member name="M:Geo.Times.MinuteTime.op_Subtraction(Geo.Times.MinuteTime,System.Double)">
            <summary>
            减
            </summary>
            <param name="left"></param>
            <param name="fraction"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.MinuteTime.op_Addition(Geo.Times.MinuteTime,System.Double)">
            <summary>
            加
            </summary>
            <param name="left"></param>
            <param name="fraction"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.MinuteTime.op_UnaryNegation(Geo.Times.MinuteTime)">
            <summary>
            取负数
            </summary>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.MinuteTime.op_Subtraction(Geo.Times.MinuteTime,Geo.Times.MinuteTime)">
            <summary>
            减去
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.MinuteTime.op_Addition(Geo.Times.MinuteTime,Geo.Times.MinuteTime)">
            <summary>
            加上
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.MinuteTime.op_GreaterThanOrEqual(Geo.Times.MinuteTime,Geo.Times.MinuteTime)">
            <summary>
            大于等于
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.MinuteTime.op_LessThanOrEqual(Geo.Times.MinuteTime,Geo.Times.MinuteTime)">
            <summary>
            小于等于
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.MinuteTime.op_GreaterThan(Geo.Times.MinuteTime,Geo.Times.MinuteTime)">
            <summary>
            大于
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.MinuteTime.op_LessThan(Geo.Times.MinuteTime,Geo.Times.MinuteTime)">
            <summary>
            小于
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.MinuteTime.op_Equality(Geo.Times.MinuteTime,Geo.Times.MinuteTime)">
            <summary>
            是否相等
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.MinuteTime.op_Inequality(Geo.Times.MinuteTime,Geo.Times.MinuteTime)">
            <summary>
            是否相等
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.MinuteTime.Equals(System.Object)">
            <summary>
            是否相等，重写后执行效率会提高。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.MinuteTime.GetHashCode">
            <summary>
            哈希数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.MinuteTime.ToString">
            <summary>
            周 周秒.秒秒
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.MinuteTime.ToTimeString">
            <summary>
            从日开始。 60 12:00:00.012 345 678 901
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.MinuteTime.Equals(Geo.Times.MinuteTime)">
            <summary>
            是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.MinuteTime.CompareTo(Geo.Times.MinuteTime)">
            <summary>
            比较
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.MinuteTime.Plus(Geo.Times.MinuteTime)">
            <summary>
            加上
            </summary>
            <param name="right">右边</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.MinuteTime.Minus(Geo.Times.MinuteTime)">
            <summary>
            减去
            </summary>
            <param name="right">右边</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.MinuteTime.FromWeek(System.Double)">
            <summary>
            从周解析，精度不高。
            </summary>
            <param name="weeks">日</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.MinuteTime.FromDay(System.Int32)">
            <summary>
            从日解析，精度不高。
            </summary>
            <param name="day">日</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.MinuteTime.FromDay(System.Double)">
            <summary>
            从日解析
            </summary>
            <param name="days">日</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.MinuteTime.FromHour(System.Double)">
            <summary>
            从小时解析
            </summary>
            <param name="hours">小时</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.MinuteTime.FromMinute(System.Double)">
            <summary>
            从分钟解析
            </summary>
            <param name="minutes">分钟</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.MinuteTime.FromSecond(System.Double)">
            <summary>
            从秒解析
            </summary>
            <param name="fraction">秒</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Times.MinuteTime.MilliSeconds">
            <summary>
            毫秒部分 1e-3 秒
            </summary>
        </member>
        <member name="P:Geo.Times.MinuteTime.SecondsOfDay">
            <summary>
            日秒。
            </summary>
        </member>
        <member name="P:Geo.Times.MinuteTime.Seconds">
            <summary>
            秒 [0, 60)
            </summary>
        </member>
        <member name="P:Geo.Times.MinuteTime.DayOfYear">
            <summary>
            年积日
            </summary>
        </member>
        <member name="P:Geo.Times.MinuteTime.Week">
            <summary>
            周整数。
            </summary>
        </member>
        <member name="P:Geo.Times.MinuteTime.TotalWeeks">
            <summary>
            总周
            </summary>
        </member>
        <member name="P:Geo.Times.MinuteTime.TotalDays">
            <summary>
            总天数
            </summary>
        </member>
        <member name="P:Geo.Times.MinuteTime.TotalHours">
            <summary>
            总小时
            </summary>
        </member>
        <member name="P:Geo.Times.MinuteTime.TotalMinutes">
            <summary>
            总分钟
            </summary>
        </member>
        <member name="P:Geo.Times.MinuteTime.MinValue">
            <summary> 
            本结构分钟可表示的最小日期
            </summary>
        </member>
        <member name="P:Geo.Times.MinuteTime.MaxValue">
            <summary>
            本结构分钟可表示的最大日期
            </summary>
        </member>
        <member name="P:Geo.Times.MinuteTime.Zero">
            <summary>
            起始时间。时间 0 点。
            00:00.000 000 000 000
            </summary>
        </member>
        <member name="P:Geo.Times.MinuteTime.StartOfGpsT">
            <summary>
            计算刻度起始点。起始/参考历元，设为GPS起始时间： 1980-1-6 00:00:00。
            若从0年开始计算，则计算闰年将花费较长时间，从而影响效率。
            </summary>
        </member>
        <member name="P:Geo.Times.MinuteTime.GpsWeek">
            <summary>
            GPS周
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Times.MinuteTime.SecondsOfWeek">
            <summary>
            周秒
            </summary>
        </member>
        <member name="P:Geo.Times.MinuteTime.Date">
            <summary>
            返回年月日
            </summary>
        </member>
        <member name="P:Geo.Times.MinuteTime.DayOfWeek">
            <summary>
            周几啊
            </summary>
        </member>
        <member name="P:Geo.Times.MinuteTime.Hour">
            <summary>
            小时 [0-24)
            </summary>
        </member>
        <member name="P:Geo.Times.MinuteTime.Minute">
            <summary>
            分钟 [0-60)
            </summary>
        </member>
        <member name="P:Geo.Times.MinuteTime.Second">
            <summary>
            秒
            </summary>
        </member>
        <member name="P:Geo.Times.MinuteTime.DateTime">
            <summary>
            返回系统兼容时间格式
            </summary>
        </member>
        <member name="T:Geo.Times.SecondTime">
            <summary>
            高精度轻量级时间表示法，采用秒维持， 精度达1e-15秒。
            此类并没有定义起始时间，只是一个一维时间表示方法。
            采用公元0年开始计时的，以整秒和秒小数标识的时间类。
            </summary>
        </member>
        <member name="F:Geo.Times.SecondTime.SECOND_PER_WEEK">
            <summary>
            604800, 一周秒数量
            </summary>
        </member>
        <member name="F:Geo.Times.SecondTime.MINUTE_PER_WEEK">
            <summary>
            10080, 一周的分钟数量
            </summary>
        </member>
        <member name="F:Geo.Times.SecondTime.SECOND_PER_DAY">
            <summary>
            86400, 一天的秒数量
            </summary>
        </member>
        <member name="F:Geo.Times.SecondTime.SECOND_PER_HOUR">
            <summary>
            3600 一个小时的秒数量
            </summary>
        </member>
        <member name="F:Geo.Times.SecondTime.MINUTE_PER_HOUR">
            <summary>
            60, 一小时的分钟数量
            </summary>
        </member>
        <member name="F:Geo.Times.SecondTime.MINUTE_PER_DAY">
            <summary>
            1440, 一天的分钟数量
            </summary>
        </member>
        <member name="F:Geo.Times.SecondTime.SECOND_PER_MINUTE">
            <summary>
            60,  一个小时的秒数量
            </summary>
        </member>
        <member name="F:Geo.Times.SecondTime.HOUR_PER_DAY">
            <summary>
            24, 一天的小时数量
            </summary>
        </member>
        <member name="F:Geo.Times.SecondTime.TOLERANCE">
            <summary>
            精度范围，认为精度在 1e-12 为相同，可达 1e-15 米级别的精度。
            </summary>
        </member>
        <member name="M:Geo.Times.SecondTime.#ctor(System.DateTime)">
            <summary>
            构造函数。
            </summary>
            <param name="dateTime">系统时间</param>
        </member>
        <member name="M:Geo.Times.SecondTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            以日历初始化
            </summary>
            <param name="year">年</param>
            <param name="month">月</param>
            <param name="day">日</param>
            <param name="hour">小时</param>
            <param name="minute">分钟</param>
            <param name="seconds">秒钟</param>
        </member>
        <member name="M:Geo.Times.SecondTime.#ctor(System.Double)">
            <summary>
            以秒赋值。 
            </summary>
        </member>
        <member name="M:Geo.Times.SecondTime.#ctor(System.Int64,System.Double)">
            <summary>
            构造函数。赋值后，做判断将其调整到合适位置。
            </summary>
            <param name="second">分钟</param> 
            <param name="fraction">秒</param>
        </member>
        <member name="M:Geo.Times.SecondTime.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            构造函数。赋值后，做判断将其调整到合适位置。
            </summary>
            <param name="hour">小时</param> 
            <param name="minute">分钟</param> 
            <param name="seconds">秒</param>
        </member>
        <member name="M:Geo.Times.SecondTime.Legitimize">
            <summary>
            使合法。检查各个参数的范围，并设置在合理范围内。
            </summary>
        </member>
        <member name="F:Geo.Times.SecondTime.SecondTicks">
            <summary>
            秒计数器，整数秒。
            </summary>
        </member>
        <member name="F:Geo.Times.SecondTime.Fraction">
            <summary>
            秒的小数部分。此数值应该在[0-1)。
            </summary>
        </member>
        <member name="F:Geo.Times.SecondTime.StartOfGpsT">
            <summary>
            计算刻度起始点。起始/参考历元，设为GPS起始时间： 1980-1-6 00:00:00。
            若从0年开始计算，则计算闰年将花费较长时间，从而影响效率。
            </summary>
        </member>
        <member name="F:Geo.Times.SecondTime.StartOfBdT">
            <summary>
            计算刻度起始点。起始/参考历元，设为GPS起始时间： 2006-1-1 00:00:00。
            若从0年开始计算，则计算闰年将花费较长时间，从而影响效率。
            </summary>
        </member>
        <member name="M:Geo.Times.SecondTime.op_Subtraction(Geo.Times.SecondTime,System.Double)">
            <summary>
            减
            </summary>
            <param name="left"></param>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondTime.op_Addition(Geo.Times.SecondTime,System.Double)">
            <summary>
            加
            </summary>
            <param name="left"></param>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondTime.op_UnaryNegation(Geo.Times.SecondTime)">
            <summary>
            取负数
            </summary>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondTime.op_Subtraction(Geo.Times.SecondTime,Geo.Times.SecondTime)">
            <summary>
            减去
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondTime.op_Addition(Geo.Times.SecondTime,Geo.Times.SecondTime)">
            <summary>
            加上
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondTime.op_GreaterThanOrEqual(Geo.Times.SecondTime,Geo.Times.SecondTime)">
            <summary>
            大于等于
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondTime.op_LessThanOrEqual(Geo.Times.SecondTime,Geo.Times.SecondTime)">
            <summary>
            小于等于
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondTime.op_GreaterThan(Geo.Times.SecondTime,Geo.Times.SecondTime)">
            <summary>
            大于
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondTime.op_LessThan(Geo.Times.SecondTime,Geo.Times.SecondTime)">
            <summary>
            小于
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondTime.op_Equality(Geo.Times.SecondTime,Geo.Times.SecondTime)">
            <summary>
            是否相等
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondTime.op_Inequality(Geo.Times.SecondTime,Geo.Times.SecondTime)">
            <summary>
            是否相等
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondTime.Equals(System.Object)">
            <summary>
            是否相等，重写后执行效率会提高。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondTime.GetHashCode">
            <summary>
            哈希数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondTime.ToString">
            <summary>
            周 周秒.秒秒
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondTime.ToTimeString">
            <summary>
            从日开始。 60 12:00:00.012 345 678 901
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondTime.Equals(Geo.Times.SecondTime)">
            <summary>
            是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondTime.CompareTo(Geo.Times.SecondTime)">
            <summary>
            比较
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondTime.Plus(Geo.Times.SecondTime)">
            <summary>
            加上
            </summary>
            <param name="right">右边</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondTime.Minus(Geo.Times.SecondTime)">
            <summary>
            减去
            </summary>
            <param name="right">右边</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondTime.FromWeek(System.Double)">
            <summary>
            从周解析，精度不高。
            </summary>
            <param name="weeks">日</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondTime.FromDay(System.Int32)">
            <summary>
            从日解析，精度不高。
            </summary>
            <param name="day">日</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondTime.FromDay(System.Double)">
            <summary>
            从日解析
            </summary>
            <param name="days">日</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondTime.FromHour(System.Double)">
            <summary>
            从小时解析
            </summary>
            <param name="hours">小时</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.SecondTime.FromMinute(System.Double)">
            <summary>
            从分钟解析
            </summary>
            <param name="minutes">分钟</param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Geo.Times.SecondTime.FromVal(System.Double,System.Int32)”忽略有格式错误的 XML 注释 -->
        <member name="M:Geo.Times.SecondTime.FromSecond(System.Double)">
            <summary>
            从秒解析
            </summary>
            <param name="fraction">秒</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Times.SecondTime.MilliSeconds">
            <summary>
            毫秒部分 1e-3 秒
            </summary>
        </member>
        <member name="P:Geo.Times.SecondTime.SecondsOfDay">
            <summary>
            日秒。
            </summary>
        </member>
        <member name="P:Geo.Times.SecondTime.SecondsOfYear">
            <summary>
            年秒。 
            </summary>
        </member>
        <member name="P:Geo.Times.SecondTime.SecondOfDay">
            <summary>
            日内秒
            </summary>
        </member>
        <member name="P:Geo.Times.SecondTime.DayOfYear">
            <summary>
            年积日.该年中的第几天，表示为 1 和 366 之间的一个值。
            </summary>
        </member>
        <member name="P:Geo.Times.SecondTime.Week">
            <summary>
            周整数。
            </summary>
        </member>
        <member name="P:Geo.Times.SecondTime.TotalWeeks">
            <summary>
            总周
            </summary>
        </member>
        <member name="P:Geo.Times.SecondTime.TotalDays">
            <summary>
            总天数
            </summary>
        </member>
        <member name="P:Geo.Times.SecondTime.TotalHours">
            <summary>
            总小时
            </summary>
        </member>
        <member name="P:Geo.Times.SecondTime.TotalMinutes">
            <summary>
            总分钟
            </summary>
        </member>
        <member name="P:Geo.Times.SecondTime.TotalSeconds">
            <summary>
            总秒钟
            </summary>
        </member>
        <member name="P:Geo.Times.SecondTime.MinValue">
            <summary> 
            本结构分钟可表示的最小日期
            </summary>
        </member>
        <member name="P:Geo.Times.SecondTime.MaxValue">
            <summary>
            本结构分钟可表示的最大日期
            </summary>
        </member>
        <member name="P:Geo.Times.SecondTime.Zero">
            <summary>
            起始时间。时间 0 点。实际为 1 年 1 月 1 日 0 时 0 分 0 秒
            00:00.000 000 000 000
            </summary>
        </member>
        <member name="P:Geo.Times.SecondTime.GpsWeek">
            <summary>
            GPS周
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Times.SecondTime.BdsWeek">
            <summary>
            GPS周
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Times.SecondTime.SecondsOfWeek">
            <summary>
            周秒
            </summary>
        </member>
        <member name="P:Geo.Times.SecondTime.WeekOfYear">
            <summary>
            年内周,定义：元旦大于等于周四，则为第0周，否则为第一周。
            </summary>
        </member>
        <member name="P:Geo.Times.SecondTime.NewYearDate">
            <summary>
            本年元旦日期
            </summary>
        </member>
        <member name="P:Geo.Times.SecondTime.Date">
            <summary>
            返回年月日
            </summary>
        </member>
        <member name="P:Geo.Times.SecondTime.DayOfWeek">
            <summary>
            周几啊
            </summary>
        </member>
        <member name="P:Geo.Times.SecondTime.Hour">
            <summary>
            小时 [0-24)
            </summary>
        </member>
        <member name="P:Geo.Times.SecondTime.Minute">
            <summary>
            分钟 [0-60)
            </summary>
        </member>
        <member name="P:Geo.Times.SecondTime.Second">
            <summary>
            秒
            </summary>
        </member>
        <member name="P:Geo.Times.SecondTime.Seconds">
            <summary>
            秒，[0, 60)连同所有
            </summary>
        </member>
        <member name="P:Geo.Times.SecondTime.DateTime">
            <summary>
            返回系统兼容时间格式
            </summary>
        </member>
        <member name="T:Geo.Times.TimeUnit">
            <summary>
            时间单位
            </summary>
        </member>
        <member name="T:Geo.Times.Time">
            <summary>
             时间类，是一个功能强大,集 Calendar、GnssTime、JulianDay 于一体的,以历元为基准的，便于使用的 GNSS 时间类。
             时间核心为 SecondTime 。
            </summary>
        </member>
        <member name="M:Geo.Times.Time.#ctor(System.DateTime,System.Double)">
            <summary>
            构造函数。
            </summary>
            <param name="utcNow">UTC 系统时间</param>
            <param name="secondsOfWeekOrDay">周内秒或日内秒</param>
        </member>
        <member name="M:Geo.Times.Time.#ctor(System.Int32,System.Double)">
            <summary>
            构造函数。
            </summary>
            <param name="gpsWeekNumber">GPS 周数</param>
            <param name="secondsOfWeek">周内秒</param>
        </member>
        <member name="M:Geo.Times.Time.#ctor(System.Int32,System.Int32)">
            <summary>
            以年，年积日初始化
            </summary>
            <param name="year">年</param>
            <param name="dayOfYear">年积日</param>
        </member>
        <member name="M:Geo.Times.Time.#ctor(System.DateTime)">
            <summary>
            C# DateTime初始化。精度为100纳秒。
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Geo.Times.Time.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            指定日历初始化
            </summary>
            <param name="year">年</param>
            <param name="month">月</param>
            <param name="day">日</param>
            <param name="hour">时</param>
            <param name="minute">分</param>
            <param name="second">秒</param> 
        </member>
        <member name="M:Geo.Times.Time.#ctor(Geo.Times.SecondTime)">
            <summary>
            以日历初始化
            </summary>
            <param name="time">日历</param>
        </member>
        <member name="F:Geo.Times.Time.TickTime">
            <summary>
            采用公元0年开始计时的，以整秒和秒小数标识的时间类。
            </summary>
        </member>
        <member name="F:Geo.Times.Time.Default">
            <summary>
            默认构造函数 1980-1-6 0:0:0
            </summary>
        </member>
        <member name="M:Geo.Times.Time.Max(Geo.Times.Time,Geo.Times.Time)">
            <summary>
            选择最大的时间，靠后的。
            </summary>
            <param name="a">时间1</param>
            <param name="b">时间2</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.Min(Geo.Times.Time,Geo.Times.Time)">
            <summary>
            选择最小的时间，靠前的。
            </summary>
            <param name="a">时间1</param>
            <param name="b">时间2</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.GetGpsWeekAndDay">
            <summary>
            IGS 产品常用表达方式。周后面加一个周内日。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.Clone">
            <summary>
            一个副本
            </summary>
            <returns></returns>
        </member>
        <member name="F:Geo.Times.Time.Zero">
            <summary>
            0，用于失败操作
            </summary>
        </member>
        <member name="F:Geo.Times.Time.MinValue">
            <summary>
            UTC 1980, 1, 6
            </summary>
        </member>
        <member name="F:Geo.Times.Time.StartOfGpsT">
            <summary>
             UTC 1980, 1, 6
            </summary>
        </member>
        <member name="F:Geo.Times.Time.StartOfBdT">
            <summary>
            北斗起始时间，UTC 2006.01.01有待确定。
            </summary>
        </member>
        <member name="F:Geo.Times.Time.StartOfMjd">
            <summary>
             1858, 11, 17。MJD相应的起点是1858年11月17日世界时0时,简化儒略日（MJD），其定义为 MJD = JD - 2400000.5。
             这里采用历元描述，可能有问题。
            </summary>
        </member>
        <member name="F:Geo.Times.Time.MaxValue">
            <summary>
            2079,12,31
            </summary>
        </member>
        <member name="M:Geo.Times.Time.Equals(Geo.Times.Time)">
            <summary>
            判断数值是否相等
            </summary>
            <param name="other">Time</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.Equals(System.Object)">
            <summary>
            判断数值是否相等
            </summary>
            <param name="obj">待判断</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.GetHashCode">
            <summary>
            哈希数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.CompareTo(Geo.Times.Time)">
            <summary>
            指示此实例和 value 参数的相对值。值说明小于零此实例早于 value。零此实例与 value 相同。大于零此实例晚于 value。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.ToLinePropertyString">
            <summary>
            以下划线分割的字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.ToPathString(System.Boolean,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            利于作为文件名称输出的字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.ParseLinePropertyString(System.String)">
            <summary>
            解析形如 2015_11_06_09_53_11_01.025 字符串的时间
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.Parse(System.String,System.Char)">
            <summary>
            解析指定分隔符的，形如 2015_11_06_09_53_11_01.025 字符串的时间，‘_’
            </summary>
            <param name="str"></param>
            <param name="spliter"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.Parse(System.String,System.Char[])">
            <summary>
            解析指定分隔符的，形如 2015_11_06_09_53_11_01.025 字符串的时间，‘_’
            </summary>
            <param name="str"></param>
            <param name="spliter"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.Parse(System.String[])">
            <summary>
            解析字符串数组为时间。
            </summary>
            <param name="timeItems"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.ToWeekDayString">
            <summary>
            GPS周日
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.ToYearDayString">
            <summary>
            年和年积日
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.ToYearDayHourMinuteSecondString">
            <summary>
            年和年积日
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.ToString">
            <summary>
            2002-05-23 12:00:00
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.ToDetailDateTimeString">
            <summary>
            2002-05-23 12:00:00.000
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.ToTimeString">
            <summary>
            12:20:30.000
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.ToShortTimeString">
            <summary>
            短时间。 15:20:30
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.ToDateString">
            <summary>
            2002-05-23  
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.ToDateAndHourPathString">
            <summary>
            2002-05-22_12
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.op_Subtraction(Geo.Times.Time,Geo.Times.Time)">
            <summary>
            返回秒小数
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.op_Addition(Geo.Times.Time,System.Double)">
            <summary>
            +
            </summary>
            <param name="left"></param>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.op_Subtraction(Geo.Times.Time,System.Double)">
            <summary>
            -
            </summary>
            <param name="left"></param>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.op_Addition(Geo.Times.Time,System.TimeSpan)">
            <summary>
            +
            </summary>
            <param name="d"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.op_Subtraction(Geo.Times.Time,System.TimeSpan)">
            <summary>
            -
            </summary>
            <param name="d"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Geo.Times.Time.op_LessThan(Geo.Times.Time,Geo.Times.Time)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Geo.Times.Time.op_LessThanOrEqual(Geo.Times.Time,Geo.Times.Time)”忽略有格式错误的 XML 注释 -->
        <member name="M:Geo.Times.Time.op_GreaterThan(Geo.Times.Time,Geo.Times.Time)">
            <summary>
            >
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.op_GreaterThanOrEqual(Geo.Times.Time,Geo.Times.Time)">
            <summary>
            >=
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.op_Equality(Geo.Times.Time,Geo.Times.Time)">
            <summary>
            ==
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.op_Inequality(Geo.Times.Time,Geo.Times.Time)">
            <summary>
            !=
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.UtcToGmst(Geo.Times.Time,System.Double)">
            <summary>
            UTC Time  转为 gmst Time (Greenwich mean sidereal time)
            gmst 以弧度rad表示
            </summary>
            <param name="gpsTime">UTC Time</param>
            <param name="ut1_utc">UT1_UTC, s</param> 
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.UtcToGpsT">
            <summary>
            UTC Time  转为 GPS Time
            由于两者之间只是差了若干秒，还是采用GPS类表示UTC类
            </summary> 
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.GpstToUtc">
            <summary>
            GPS Time 转为UTC TIME
            由于两者之间只是差了若干秒，还是采用GPS类表示UTC类
            </summary>
            <param name="gpsTime"></param>
            <returns></returns>
        </member>
        <member name="F:Geo.Times.Time.leaps">
            <summary>
            UTC 跳秒 GPTTime
            leap fraction{y,m,d,h,m,s,utc-gpst}
            2015年6月份闰秒，？？？//czs, 2015.05.11,这个应该采用一个数据文件记录。
            </summary>
        </member>
        <member name="M:Geo.Times.Time.IsNearToDayEdge(System.Double)">
            <summary>
            是否在日边界
            </summary>
            <param name="thresholdSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.IsNearToWeekEdge(System.Double)">
            <summary>
            是否在周边界
            </summary>
            <param name="thresholdSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.GetNearstWeekAndDay(Geo.Times.Time)">
            <summary>
            距离最近的天
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.GetMiddleDayDiffer(Geo.Times.Time)">
            <summary>
            与当天正午时间差。
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.GetNearstWeek(Geo.Times.Time)">
            <summary>
            距离最近的天
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.GetMiddleWeekDiffer(Geo.Times.Time)">
            <summary>
            当前时刻与周中间时刻时间差。即与周三正午差。
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.GetPrevWeekAndDay(System.Int32)">
            <summary>
            下一天 周+日
            </summary>
            <param name="week"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.GetNextWeekAndDay(System.Int32)">
            <summary>
            上一天 周+日
            </summary>
            <param name="week"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.ToYdsString">
            <summary>
            YY:DDD:SSSSS,Bernese时间表示。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.ToStringWithTag">
            <summary>
            保存字符串，附上标记。与 ParseWithTagString(string) 方法互为配对。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.ToShortTimeOfDayStringWithTag">
            <summary>
            保存字符串，附上标记。与 ParseWithTagString(string) 方法互为配对。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.ParseWithTagString(System.String)">
            <summary>
            解析字符串。同时解析附加的对象为字符串。 与 ToStringWithTag() 方法互为配对。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.ParseYearDayOfYear(System.String)">
            <summary>
            解析 YYYY DOY HOUR MINUTE SECOND
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.ParseYds(System.String)">
            <summary>
             YY:DDD:SSSSS.
            </summary>
            <param name="degStr"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.Parse(System.String)">
            <summary>
            解析以空格('-',':')分开的“年 月 日 时 分 秒”字符串，如 06 10 30  0  0  0.0000000 
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.Parse(System.DateTime)">
            <summary>
            以系统时间初始化。
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.GetNearst(System.Collections.Generic.IEnumerable{Geo.Times.Time},Geo.Times.Time,System.Double,System.Double)">
            <summary>
            找到最接近的时间。如果失败，返回 Zero
            </summary>
            <param name="times">待查找的时间序列</param>
            <param name="time">时间</param>
            <param name="maxDelta">允许最大的偏差，如果超出，查找失败</param>
            <param name="minDelta">最小的偏差，如果找到的在此范围内，则直接返回避免重复查找</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.GetDifferSecondOfWeek(System.Double,System.Double)">
            <summary>
            计算与参考历元之差，两个周内秒之差。考虑了周循环。
            </summary>
            <param name="secOfWeek">周内秒</param>
            <param name="referenceEpoch">参考历元（周内秒）</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.Time.GetNearst(System.Collections.Generic.List{Geo.Times.Time},Geo.Times.Time)">
            <summary>
            获取与指定对象最近的值。
            如果返回只有一个值，则是刚好等于，或最小或最大边界值。
            如果不是一个值，则返回为三个值。第一个为与指定对象最近的值，第二个为小于指定值的数，第三个为大于该值的数,如果数值为null默认值，则表示没有。
            </summary>
            <typeparam name="Time"></typeparam>
            <param name="list">从小到大已排序的列表</param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Times.Time.Tag">
            <summary>
            方便存储数据、标识等。
            </summary>
        </member>
        <member name="P:Geo.Times.Time.Calendar">
            <summary>
            日历型时间类。核心属性。
            </summary>
        </member>
        <member name="P:Geo.Times.Time.Year">
            <summary>
            四位数表示的年。
            如果赋值为两位数，则自动设置为四位数
            ，规则：
            80-99: 1980-1999，
            00-79: 2000-2079
            </summary>
        </member>
        <member name="P:Geo.Times.Time.SubYear">
            <summary>
            两位数的年。
            </summary>
        </member>
        <member name="P:Geo.Times.Time.Month">
            <summary>
            月：1-12
            </summary>
        </member>
        <member name="P:Geo.Times.Time.Day">
            <summary>
            1-31
            </summary>
        </member>
        <member name="P:Geo.Times.Time.Hour">
            <summary>
            小时：0-23
            </summary>
        </member>
        <member name="P:Geo.Times.Time.Minute">
            <summary>
            0-59
            </summary>
        </member>
        <member name="P:Geo.Times.Time.Second">
            <summary>
            以整数表示的秒 0-59
            </summary>
        </member>
        <member name="P:Geo.Times.Time.Seconds">
            <summary>
            秒， 0-59， 双精度表示。
            </summary>
        </member>
        <member name="P:Geo.Times.Time.Date">
            <summary>
            日期部分，年月日。
            </summary>
        </member>
        <member name="P:Geo.Times.Time.DateTime">
            <summary>
            返回 C# DateTime, 精确到0.1微秒（100纳秒）。
            </summary>
        </member>
        <member name="P:Geo.Times.Time.SecondsOfDay">
            <summary>
            日秒。
            </summary>
        </member>
        <member name="P:Geo.Times.Time.DayOfYear">
            <summary>
            年积日
            </summary>
        </member>
        <member name="P:Geo.Times.Time.DayOfWeek">
            <summary>
            一周中的第几天，周日为 0，以此类推。
            </summary>
        </member>
        <member name="P:Geo.Times.Time.WeekOfYear">
            <summary>
            年内周
            </summary>
        </member>
        <member name="P:Geo.Times.Time.GpsWeek">
            <summary>
            GPS 周。
            </summary>
        </member>
        <member name="P:Geo.Times.Time.BdsWeek">
            <summary>
            BDS 周。
            </summary>
        </member>
        <member name="P:Geo.Times.Time.SecondsOfWeek">
            <summary>
            周秒。
            </summary>
        </member>
        <member name="P:Geo.Times.Time.JulianDays">
            <summary>
            儒略日（Julian day，JD）：约定从公元前4713年1月1日格林尼治平子午(世界时12h)开始起算到某天格林尼治平子午所经过的日数。
            </summary>
        </member>
        <member name="P:Geo.Times.Time.MJulianDays">
            <summary>
            简化的儒略日：由于儒略日数字位数太多，国际天文学联合会于1973年采用简化儒略日（MJD），其定义为 MJD = JD - 2400000.5。
            MJD相应的起点是1858年11月17日世界时0时。 例如1979年10月1日零时儒略日数为2,444,147.5。 
            </summary>
        </member>
        <!-- 对于成员“P:Geo.Times.Time.FractionalMilliseconds”忽略有格式错误的 XML 注释 -->
        <member name="P:Geo.Times.Time.Now">
            <summary>
            系统当前时间转换为GpsTime
            </summary>
        </member>
        <member name="P:Geo.Times.Time.UtcNow">
            <summary>
            系统当前UTC时间转换为GpsTime
            </summary>
        </member>
        <member name="T:Geo.Times.TimeIoUtil">
            <summary>
            时间常用常数
            </summary>
        </member>
        <member name="M:Geo.Times.TimeIoUtil.ToRinexV3String(Geo.Times.Time)">
            <summary>
            2013 10 27 00 00 00
            </summary>
            <param name="gpsTime"></param>
        </member>
        <member name="M:Geo.Times.TimeIoUtil.Parse(System.String)">
            <summary>
            解析以空格('-',':')分开的“年 月 日 时 分 秒”字符串，如 06 10 30  0  0  0.0000000 
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeIoUtil.ToYdsString(Geo.Times.Time)">
            <summary>
            YY:DDD:SSSSS.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeIoUtil.ParseYds(System.String)">
            <summary>
             YY:DDD:SSSSS.
            </summary>
            <param name="degStr"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Times.BufferedSuccessiveTimePeriod">
            <summary>
            断断续续的时段。时段约定：各个时段不相接或者相交，否则认为是一个时段。
            </summary>
        </member>
        <member name="M:Geo.Times.BufferedSuccessiveTimePeriod.#ctor">
            <summary>
            断断续续的时段,构造函数。
            </summary>
        </member>
        <member name="M:Geo.Times.BufferedSuccessiveTimePeriod.Add(Geo.Times.BufferedTimePeriod)">
            <summary>
            添加到序列中，自动拼接。
            </summary>
            <param name="timePeriod">时段</param>
        </member>
        <member name="M:Geo.Times.BufferedSuccessiveTimePeriod.Remove(Geo.Times.BufferedTimePeriod)">
            <summary>
            移除一个时段。
            </summary>
            <param name="timePeriod">时段</param>
        </member>
        <member name="M:Geo.Times.BufferedSuccessiveTimePeriod.GetFilteredPeriods(System.Double,System.Boolean)">
            <summary>
            提取长度小于或大于指定参数的时段
            </summary>
            <param name="span">时段长度（含）</param>
            <param name="smallerOrLarger">小于或大于，true为小于（默认）</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Times.BufferedSuccessiveTimePeriod.Span">
            <summary>
            单位秒
            </summary>
        </member>
        <member name="P:Geo.Times.BufferedSuccessiveTimePeriod.Median">
            <summary>
            中间数
            </summary>
        </member>
        <member name="P:Geo.Times.BufferedSuccessiveTimePeriod.Oppersite">
            <summary>
            相反的时段，即有时段的为空，没有时段的为时段。
            </summary>
        </member>
        <member name="T:Geo.Times.BufferedTimePeriod">
            <summary>
            具有缓冲的时间段。包含了起始时间，中止时间，以及对应的缓冲时间。
            </summary>
        </member>
        <member name="M:Geo.Times.BufferedTimePeriod.#ctor(System.DateTime,System.DateTime)">
            <summary>
            时段构造函数，以系统时间初始化
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Geo.Times.BufferedTimePeriod.#ctor(Geo.Times.Time,Geo.Times.Time,System.Double)">
            <summary>
            时段构造函数
            </summary>
            <param name="start">起始时间</param>
            <param name="end">结束时间</param>
            <param name="buffer">前后缓冲，秒</param>
        </member>
        <member name="M:Geo.Times.BufferedTimePeriod.#ctor(Geo.Times.Time,Geo.Times.Time,System.Double,System.Double)">
            <summary>
            时段构造函数
            </summary>
            <param name="start">起始时间</param>
            <param name="end">结束时间</param>
            <param name="startBuffer">起始缓冲，秒</param>
            <param name="endBuffer">结束缓冲，秒</param>
        </member>
        <member name="M:Geo.Times.BufferedTimePeriod.CompareTo(Geo.Times.BufferedTimePeriod)">
            <summary>
            起始时间在前的为小。
            返回值的含义如下：值含义小于零此对象小于 other 参数。零此对象等于 other。大于零此对象大于 other。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.BufferedTimePeriod.Merge(Geo.Times.BufferedTimePeriod)">
            <summary>
            合并这两个时段
            </summary>
            <param name="other">另一个时段</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.BufferedTimePeriod.Merge(Geo.Times.BufferedTimePeriod,Geo.Times.BufferedTimePeriod)">
            <summary>
            合并两个时间段，不管中间是否具有间隙。
            </summary>
            <param name="prevObj">第一个时段</param>
            <param name="other">第二个时段</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.BufferedTimePeriod.Min(Geo.Times.BufferedTimePeriod,Geo.Times.BufferedTimePeriod)">
            <summary>
            返回起始时间最小的区段
            </summary>
            <param name="prevObj">时段1</param>
            <param name="other">时段2</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.BufferedTimePeriod.Max(Geo.Times.BufferedTimePeriod,Geo.Times.BufferedTimePeriod)">
            <summary>
            返回结束时间最大的区段
            </summary>
            <param name="prevObj">时段1</param>
            <param name="other">时段2</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.BufferedTimePeriod.Merge(System.Collections.Generic.List{Geo.Times.BufferedTimePeriod})">
            <summary>
             合并时段。如果有相交的时段，则合并。
            </summary>
            <param name="spans">时段集合</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Times.BufferedTimePeriod.BufferedEnd">
            <summary>
            缓冲的结束时间
            </summary>
        </member>
        <member name="P:Geo.Times.BufferedTimePeriod.BufferedStart">
            <summary>
            缓冲的起始时间
            </summary>
        </member>
        <member name="P:Geo.Times.BufferedTimePeriod.Span">
            <summary>
            长度，秒，不含缓冲
            </summary>
        </member>
        <member name="P:Geo.Times.BufferedTimePeriod.BufferedSpan">
            <summary>
            含缓冲的长度
            </summary>
        </member>
        <member name="P:Geo.Times.BufferedTimePeriod.Median">
            <summary>
            中间值
            </summary>
        </member>
        <member name="P:Geo.Times.BufferedTimePeriod.Zero">
            <summary>
            长度为0.
            </summary>
        </member>
        <member name="P:Geo.Times.BufferedTimePeriod.MaxPeriod">
            <summary>
            最大时段
            </summary>
        </member>
        <member name="T:Geo.Times.DateTimeScope">
            <summary>
            时间范围，采用系统时间 DateTime 描述
            </summary>
        </member>
        <member name="M:Geo.Times.DateTimeScope.#ctor(System.DateTime,System.DateTime)">
            <summary>
            构造函数
            </summary>
            <param name="StartTime"></param>
            <param name="EndTime"></param>
        </member>
        <member name="P:Geo.Times.DateTimeScope.Span">
            <summary>
            时间段
            </summary>
        </member>
        <member name="P:Geo.Times.DateTimeScope.Median">
            <summary>
            中间数
            </summary>
        </member>
        <member name="T:Geo.Times.SuccessiveDateTimeScope">
            <summary>
            时间范围，采用系统时间 DateTime 描述
            </summary>
        </member>
        <member name="P:Geo.Times.SuccessiveDateTimeScope.Span">
            <summary>
            时段信息。
            </summary>
        </member>
        <member name="P:Geo.Times.SuccessiveDateTimeScope.Median">
            <summary>
            中间数
            </summary>
        </member>
        <member name="T:Geo.Times.SuccessiveTimePeriod">
            <summary>
            多个时段的拼接。按照时间先后排列，如果获取，则返回匹配的第一个时段。
            </summary>
        </member>
        <member name="M:Geo.Times.SuccessiveTimePeriod.#ctor">
            <summary>
             多个时段的拼接。按照时间先后排列，如果获取，则返回匹配的第一个时段。
            </summary>
        </member>
        <member name="M:Geo.Times.SuccessiveTimePeriod.Parse(System.String)">
            <summary>
            解析
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Times.SuccessiveTimePeriod.Span">
            <summary>
            单位秒
            </summary>
        </member>
        <member name="P:Geo.Times.SuccessiveTimePeriod.Median">
            <summary>
            中间数
            </summary>
        </member>
        <member name="T:Geo.Times.TimePeriod">
            <summary>
            一个时间段。包含了起始时间和中止时间。
            </summary>
        </member>
        <member name="M:Geo.Times.TimePeriod.#ctor(System.DateTime,System.TimeSpan)">
            <summary>
            时段构造函数，以系统时间初始化
            </summary>
            <param name="start"></param>
            <param name="span"></param>
        </member>
        <member name="M:Geo.Times.TimePeriod.#ctor(System.DateTime,System.DateTime)">
            <summary>
            时段构造函数，以系统时间初始化
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Geo.Times.TimePeriod.#ctor(Geo.Times.Time,Geo.Times.Time)">
            <summary>
            时段构造函数，以时间初始化
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Geo.Times.TimePeriod.Split(System.Int32)">
            <summary>
            切割成等长的时段。
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimePeriod.CompareTo(Geo.Times.TimePeriod)">
            <summary>
            起始时间在前的为小。
            返回值的含义如下：值含义小于零此对象小于 other 参数。零此对象等于 other。大于零此对象大于 other。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimePeriod.Parse(System.String)">
            <summary>
            解析
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimePeriod.ToPathString(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            路径字符串。
            </summary>
            <param name="isWithDate"></param>
            <param name="isWithTime"></param>
            <param name="isWithSecond"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Times.TimePeriod.StartDateTime">
            <summary>
            起始时间
            </summary>
        </member>
        <member name="P:Geo.Times.TimePeriod.EndDateTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="P:Geo.Times.TimePeriod.TimeSpan">
            <summary>
            时段
            </summary>
        </member>
        <member name="P:Geo.Times.TimePeriod.Span">
            <summary>
            长度，不含缓冲.
            </summary>
        </member>
        <member name="P:Geo.Times.TimePeriod.Median">
            <summary>
            中间数
            </summary>
        </member>
        <member name="P:Geo.Times.TimePeriod.Zero">
            <summary>
            长度为0.
            </summary>
        </member>
        <member name="P:Geo.Times.TimePeriod.MaxPeriod">
            <summary>
            最大时段
            </summary>
        </member>
        <member name="T:Geo.Times.TimeConsts">
            <summary>
            时间常用常数
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.TICKS_PER_SECOND">
            <summary>
            1  秒 转化为 系统时间 TICK 的乘法因子
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.SECOND_PER_TICKS">
            <summary>
            1 系统时间 TICK 转化为 秒的乘法因子
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.SECOND_PER_HOUR">
            <summary>
            一个小时所包含的秒数
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.SECOND_PER_DAY">
            <summary>
            一天所包含的秒数
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.SECOND_PER_WEEK">
            <summary>
            一周所包含的秒数
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.GPS_ORIGIN_MJD_DAY">
            <summary>
             GPS 起始时间（基准为简化儒略日）。
             GPS-Wochenanfang MJD 44244.0 = 0 UT
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.GPS_ORIGIN_JD_DAY">
            <summary>
            GPS 起始时间儒略日
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.Beidou_ORIGIN_MJD_DAY">
            <summary>
            北斗与GPS相差 1356周 14秒
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.DAY_TO_MINUTE">
            <summary>
            天 转化到 分钟 的乘法因子
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.MINUTE_TO_DAY">
            <summary>
            分钟 转化到 天 的乘法因子
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.DAY_TO_SECOND">
            <summary>
            天 转化到 秒 的乘法因子
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.SECOND_TO_DAY">
            <summary>
            秒 转化到 天 的乘法因子
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.DAY_TO_MILLISECOND">
            <summary>
             天 转化到 毫秒 的乘法因子
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.DAY_TO_MICROSECOND">
            <summary>
             天 转化到 微秒 的乘法因子
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.MILLISECOND_TO_DAY">
            <summary>
            毫秒 转化到 天 的乘法因子
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.MJD_TO_JD">
            <summary>
            平儒略日 转换到 儒略日 的加法因子
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.JD_TO_MJD">
            <summary>
            儒略日 转换到 平儒略日的 加法因子
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.DAY_TO_MINUTE_DOUBLE">
            <summary>
            天 转化到 分钟 的乘法因子
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.MINUTE_TO_DAY_DOUBLE">
            <summary>
            分钟 转化到  天 的乘法因子
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.DAY_TO_SECOND_DOUBLE">
            <summary>
            天 转化到 秒 的乘法因子
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.SECOND_TO_DAY_DOUBLE">
            <summary>
            秒 转化到  天 的乘法因子
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.DAY_TO_MILLISECOND_DOUBLE">
            <summary>
            天 转化到 毫秒 的乘法因子
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.MILLISECOND_TO_DAY_DOUBLE">
            <summary>
            毫秒 转化到  天 的乘法因子
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.MJD_TO_JD_DOUBLE">
            <summary>
            平儒略日 转换到 儒略日 的加法因子
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConsts.JD_TO_MJD_DOUBLE">
            <summary>
            儒略日 转换到 平儒略日的 加法因子
            </summary>
        </member>
        <member name="T:Geo.Times.TimeConvert">
            <summary>
            时间转换算法。
            </summary>
        </member>
        <member name="F:Geo.Times.TimeConvert.DaysInMonthOfCommonYear">
             <summary>
            平年每月包含的天数。下标对应月，下标 0 只是占位。
            如 1 月对应 31
             </summary>
        </member>
        <member name="M:Geo.Times.TimeConvert.CalendarToJulianDay(System.Int32,System.Int32,System.Int32)">
            <summary>
            由日历计算儒略日。参照GpsTk。
            </summary>
            <param name="year">年</param>
            <param name="month">月</param>
            <param name="day">日</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.JulianDayToCalendar(System.Int64,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            儒略日转为日历。只有整数部分。
            </summary>
            <param name="jd"></param>
            <param name="iyear"></param>
            <param name="imonth"></param>
            <param name="iday"></param>
        </member>
        <member name="M:Geo.Times.TimeConvert.GetPassedDays(Geo.Times.Calendar,Geo.Times.Calendar)">
             <summary>
            计算日历差
             </summary>
             <param name="calenda"></param>
             <param name="origin"></param>
             <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.GetPassedDaysFromYearOne(Geo.Times.Calendar)">
            <summary>
            以 1-1-1 0:0:0 为基准, 连续的格力历，没有跳变。
            </summary>
            <param name="calenda"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.CalendarToMjd(Geo.Times.Calendar)">
            <summary>
            日历到平儒略日。
            </summary>
            <param name="calendar">日历</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.MjdToCalendar(System.Decimal)">
            <summary>
            平儒略日转换到日历。
            </summary>
            <param name="modifiedJulianDay">平儒略日</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.JdToCalendar(System.Decimal)">
            <summary>
            儒略日转换到日历。
            </summary>
            <param name="JulianDay">儒略日</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.JdToCalendar(System.Decimal,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Decimal@)">
            <summary>
            儒略日转换到日历。
            </summary>
            <param name="JulianDay">儒略日</param>
            <param name="Year">年</param>
            <param name="Month">月</param>
            <param name="Day">日</param>
            <param name="Hour">时</param>
            <param name="Minute">分</param>
            <param name="Second">秒</param>
            <param name="milliSeconds">毫秒（秒的小数部分）</param>
        </member>
        <member name="M:Geo.Times.TimeConvert.CalendarToMjd(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Decimal)">
            <summary>
            日历转换到儒略日。
            儒略日从公元前4713年1月1日GMT正午0时开始。
            MJD 从1858年11月17日GMT0时开始。
            </summary>
            <param name="year">年</param>
            <param name="month">月</param>
            <param name="day">日</param>
            <param name="hour">时</param>
            <param name="second">分</param>
            <param name="second">秒</param>
            <param name="milliSeconds">毫秒</param>
            <returns>儒略日</returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.CalendarToJulianDay(Geo.Times.Calendar)">
            <summary>
            日历转换到儒略日。
            </summary>
            <param name="calendar">日历</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.CalendarToJulianDay_2(Geo.Times.Calendar)">
            <summary>
            日历转换到儒略日。采用算法2 ，与 1 等价。
            
            从公元 1582 年 10月4日以前，都按照儒略历计算。
            </summary>
            <param name="calendar">日历</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.MjdToJd(System.Decimal)">
            <summary>
            平儒略日到儒略日
            </summary>
            <param name="modifiedJulianDay">平儒略日</param>
            <returns>儒略日</returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.JdToMjd(System.Decimal)">
            <summary>
            儒略日到平儒略日
            </summary>
            <param name="julianDay">儒略日</param>
            <returns>平儒略日</returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.CalendarToJd(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Decimal)">
            <summary>
            日历转换到儒略日。
            儒略日从公元前4713年1月1日GMT正午0时开始。
            MJD 从1858年11月17日GMT0时开始。
            </summary>
            <param name="year">年</param>
            <param name="month">月</param>
            <param name="day">日</param>
            <param name="hour">时</param>
            <param name="second">分</param>
            <param name="second">秒</param>
            <param name="milliSeconds">毫秒</param>
            <returns>儒略日</returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.CalendarToJd_2(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Decimal)">
            <summary>
            日历转换到儒略日。第二个公式，结果验证与前一个公式相同。2014.06.25,计算精度在亚纳秒以下级别。可满足要求。
            儒略日从公元前4713年1月1日GMT正午0时开始。
            MJD 从1858年11月17日GMT0时开始。
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <param name="hour"></param>
            <param name="second"></param>
            <param name="second"></param>
            <param name="milliSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.CalendarToJulianDay_3(Geo.Times.Calendar)">
            <summary>
            Jean Meeus 所介绍的方法的实际代码
            </summary>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.CalendarToGnssTime(Geo.Times.ICalendar,System.Decimal,System.Int32@,System.Decimal@)">
            <summary>
            日历时间转换为GNSS周周秒时间
            </summary>
            <param name="calendar">日历</param>
            <param name="gnssOriginMjdDay">GNSS时间起算点</param>
            <param name="Week">返回周</param>
            <param name="secondsOfWeek">返回秒</param>
        </member>
        <member name="M:Geo.Times.TimeConvert.GetPassedDaysFromYearOne(System.Int32,System.Int32,System.Int32)">
            <summary>
            从 1 年 1 月 1 日开始到前一天所经历的天数。以 1-1-1 0:0:0 为基准
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="dayInclude"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.GetYear(System.Int32)">
            <summary>
            计算年 ，从 1 年 1 月 1 日开始。
            </summary>
            <param name="totalDay">从 1 年 1 月 1 日开始</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.GetDate(System.Int32)">
            <summary>
            计算年 ，从 1 年 1 月 1 日开始。
            </summary>
            <param name="totalDay"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.GetDayCountBetweenYear(System.Int32,System.Int32)">
            <summary>
            计算指定起始年（含）到截止年（不含）两年之间经历的天数，默认起始年为 1 年。
            如截止年输入 1 则为 0 日，2 则为 365 日。是存储的天数统计。
            </summary>
            <param name="toYearExclude">不含（该年的前一年）</param>
            <param name="fromYearInclude">含</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.GetMonth(System.Int32,System.Int32)">
            <summary>
            由年积日获取当天所在的月份，从 1 开始，到 12 结束。
            </summary>
            <param name="year">年</param>
            <param name="dayOfYear">年积日，从0开始</param>
            <returns>月 [1,12] </returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.GetDayOfMonth(System.Int32,System.Int32)">
            <summary>
            获取月日。注意：月日的取值范围是 [1-28,29,30,31],不会出现 0 的情况。
            </summary>
            <param name="year">年</param>
            <param name="dayOfYear">年积日</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.GetDate(System.Int32,System.Int32)">
            <summary>
            根据年与年积日，返回日期。
            </summary>
            <param name="year">年</param>
            <param name="dayOfYear">年积日, 从 1 开始</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.GetGpsDay(System.Int32,System.Int32,System.Int32)">
            <summary>
            get the GPS Day form the Year 1980? or so.
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.GetYearMySelf(System.Int32)">
            <summary>
            计算年 ，从 1 年 1 月 1 日开始。
            </summary>
            <param name="totalDay">从 1 年 1 月 1 日开始</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.GetPassedDayOfYear(System.Int32,System.Int32,System.Int32)">
            <summary>
            所经历的年积日。从当年第一月到前一天所经过的天数，不含当天。
            </summary>
            <param name="year">年</param>
            <param name="month">月份</param>
            <param name="dayExclude">日（不含）</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.GetDayOfYear(System.Int32,System.Int32,System.Int32)">
            <summary>
            计算年积日，从当年 1 月 1 日 到 当天（含）。
            年积日从 1 到 365 或 366.
            </summary>
            <param name="year">年</param>
            <param name="month">月</param>
            <param name="dayInclude">日，若为 0 ，则表示上下月交接 0 点时分</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.GetDayOfYear(System.Int32,System.Int32)">
            <summary>
            所经历的年积日。从当年第一月到前一月底所经过的天数。等同于下月初的 GetPassedDayOfYear 
            </summary>
            <param name="year">年，输入年判断是否闰年</param>
            <param name="monthExclude">当前月（不含）</param>
            <returns>0或月日累计数量</returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.GetDayCountOfMonth(System.Int32,System.Int32)">
            <summary>
            获取一个月总共的天数。
            </summary>
            <param name="year">年</param>
            <param name="month">月(1-12)</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.GetDayCountOfYear(System.Int32)">
            <summary>
            一年的总天数，366 or 365
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.IsGregorianLeapYear(System.Int32)">
            <summary>
            格里历，公历 common，阳历， 新历 闰年，年长度365.2425日。 计算是否闰年。4年一闰，百年不闰，4百年再闰。
            </summary>
            <param name="year">年，4位数（含）以上</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.TimeConvert.IsJulianLeapYear(System.Int32)">
            <summary>
            儒略历  闰年，年长度365.25日。 计算是否闰年。4年一闰。
            </summary>
            <param name="year">年，4位数（含）以上</param>
            <returns></returns>
        </member>
        <member name="T:Geo.Times.WeekTime">
            <summary>
            高精度轻量级时间表示法，采用周，周秒和秒小数维持， 精度达1e-15秒，周-周秒表示法，或称GNSS/历元表示法。
            </summary>
        </member>
        <member name="F:Geo.Times.WeekTime.SECOND_PER_WEEK">
            <summary>
            一周秒数量
            </summary>
        </member>
        <member name="F:Geo.Times.WeekTime.SECOND_PER_DAY">
            <summary>
            一天的秒数量
            </summary>
        </member>
        <member name="F:Geo.Times.WeekTime.SECOND_PER_HOUR">
            <summary>
            一个小时的秒数量
            </summary>
        </member>
        <member name="F:Geo.Times.WeekTime.TOLERANCE">
            <summary>
            精度范围，认为精度在 1e-13 为相同，可达 1e-5 米级别的精度。
            </summary>
        </member>
        <member name="M:Geo.Times.WeekTime.#ctor(System.Double)">
            <summary>
            以秒赋值。 
            </summary>
        </member>
        <member name="M:Geo.Times.WeekTime.#ctor(System.Int32)">
            <summary>
            以秒赋值。 整数秒赋值。
            </summary>
        </member>
        <member name="M:Geo.Times.WeekTime.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            构造函数。赋值后，做判断将其调整到合适位置。
            </summary>
            <param name="week">GNSS 周</param>
            <param name="secondOfWeek">周秒整数</param>
            <param name="fractionOfSeconds">秒小数</param>
        </member>
        <member name="M:Geo.Times.WeekTime.Legitimize">
            <summary>
            使合法。检查各个参数的范围，并设置在合理范围内。
            </summary>
        </member>
        <member name="F:Geo.Times.WeekTime.Week">
            <summary>
            周，如 GPS 周.周的符号代表了时间的方向。
            </summary>
        </member>
        <member name="F:Geo.Times.WeekTime.SecondOfWeek">
            <summary>
            周秒，其值为 0-10080
            </summary>
        </member>
        <member name="F:Geo.Times.WeekTime.FractionOfSeconds">
            <summary>
            秒的小数部分。此数值应该在 [0 1) 区间。
            </summary>
        </member>
        <member name="M:Geo.Times.WeekTime.op_Subtraction(Geo.Times.WeekTime,System.Double)">
            <summary>
            减
            </summary>
            <param name="left"></param>
            <param name="fraction"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.op_Addition(Geo.Times.WeekTime,System.Int32)">
            <summary>
            加
            </summary>
            <param name="left"></param>
            <param name="fraction"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.op_Subtraction(Geo.Times.WeekTime,System.Int32)">
            <summary>
            减
            </summary>
            <param name="left"></param>
            <param name="fraction"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.op_Addition(Geo.Times.WeekTime,System.Double)">
            <summary>
            加
            </summary>
            <param name="left"></param>
            <param name="fraction"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.op_UnaryNegation(Geo.Times.WeekTime)">
            <summary>
            取负数
            </summary>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.op_Subtraction(Geo.Times.WeekTime,Geo.Times.WeekTime)">
            <summary>
            减去
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.op_Addition(Geo.Times.WeekTime,Geo.Times.WeekTime)">
            <summary>
            加上
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.op_GreaterThanOrEqual(Geo.Times.WeekTime,Geo.Times.WeekTime)">
            <summary>
            大于等于
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.op_LessThanOrEqual(Geo.Times.WeekTime,Geo.Times.WeekTime)">
            <summary>
            小于等于
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.op_GreaterThan(Geo.Times.WeekTime,Geo.Times.WeekTime)">
            <summary>
            大于
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.op_LessThan(Geo.Times.WeekTime,Geo.Times.WeekTime)">
            <summary>
            小于
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.op_Equality(Geo.Times.WeekTime,Geo.Times.WeekTime)">
            <summary>
            是否相等
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.op_Inequality(Geo.Times.WeekTime,Geo.Times.WeekTime)">
            <summary>
            是否相等
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.Equals(System.Object)">
            <summary>
            是否相等，重写后执行效率会提高。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.GetHashCode">
            <summary>
            哈希数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.ToString">
            <summary>
            周 周秒.秒秒
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.Equals(Geo.Times.WeekTime)">
            <summary>
            是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.CompareTo(Geo.Times.WeekTime)">
            <summary>
            比较
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.Plus(Geo.Times.WeekTime)">
            <summary>
            加上
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.Minus(Geo.Times.WeekTime)">
            <summary>
            减去
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.FromWeek(System.Double)">
            <summary>
            从周解析，精度不高。除非为整数。
            </summary>
            <param name="Weeks"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.FromWeek(System.Int32)">
            <summary>
            从周解析.
            </summary>
            <param name="week"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.FromDay(System.Int32)">
            <summary>
            从日解析
            </summary>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.FromDay(System.Double)">
            <summary>
            从日解析
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.FromHour(System.Double)">
            <summary>
            从日解析
            </summary>
            <param name="hours"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.FromMinute(System.Double)">
            <summary>
            从分钟解析
            </summary>
            <param name="minutes"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.FromSecond(System.Double)">
            <summary>
            从秒解析
            </summary>
            <param name="fraction"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Times.WeekTime.FromSecond(System.Int32)">
            <summary>
            从秒解析
            </summary>
            <param name="fraction"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Times.WeekTime.Zero">
            <summary>
            起始时间。时间 0 点。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.Tolerance">
            <summary>
            计算精度允许的误差范围。
            </summary>
        </member>
        <member name="F:Geo.Coordinates.Tolerance.Default">
            <summary>
            The default tolerance: 0.000000001 (1E-9).
            </summary>
        </member>
        <member name="F:Geo.Coordinates.Tolerance.Zero">
            <summary>
            A tolerance of zero.
            </summary>
        </member>
        <member name="M:Geo.Coordinates.Tolerance.UnregisterTolerance``1">
            <summary>
            Unregisters the tolerance value for a specific type.
            </summary>
            <typeparam name="TValue">
            The type to unregister a tolerance for.
            </typeparam>
        </member>
        <member name="M:Geo.Coordinates.Tolerance.Equal``1(System.Double,System.Double)">
            <summary>
            Compares two values for equality, using <typeparamref name="TValue"/>
            to lookup the tolerance registered for that type.
            </summary>
            <typeparam name="TValue">The type which may have a <see cref="T:Geo.Coordinates.Tolerance"/> value registered.</typeparam>
            <param name="leftHand">The left hand value in the comparison.</param>
            <param name="rightHand">The right hand value in the comparison.</param>
            <returns>
            True if the values are equal within the tolerance registered for <typeparamref name="TValue"/>
            or the <see cref="P:Geo.Coordinates.Tolerance.Global"/> tolerance if the type isn't registered; false otherwise.
            </returns>
        </member>
        <member name="M:Geo.Coordinates.Tolerance.Greater``1(System.Double,System.Double)">
            <summary>
            Compares if the <paramref name="leftHand">left hand</paramref> parameter is greater
            than the <paramref name="rightHand">right hand</paramref> parameter, using 
            <typeparamref name="TValue"/> to lookup the tolerance registered for that type.
            </summary>
            <typeparam name="TValue">The type which may have a <see cref="T:Geo.Coordinates.Tolerance"/> value registered.</typeparam>
            <param name="leftHand">The left hand value in the comparison.</param>
            <param name="rightHand">The right hand value in the comparison.</param>
            <returns>
            True if the left hand parameter is greater than the right hand parameter 
            within the tolerance registered for <typeparamref name="TValue"/>
            or the <see cref="P:Geo.Coordinates.Tolerance.Global"/> tolerance if the type isn't registered; false otherwise.
            </returns>
        </member>
        <member name="M:Geo.Coordinates.Tolerance.GreaterOrEqual``1(System.Double,System.Double)">
            <summary>
            Compares if the <paramref name="leftHand">left hand</paramref> parameter is greater
            than or equal to the <paramref name="rightHand">right hand</paramref> parameter, using 
            <typeparamref name="TValue"/> to lookup the tolerance registered for that type.
            </summary>
            <typeparam name="TValue">The type which may have a <see cref="T:Geo.Coordinates.Tolerance"/> value registered.</typeparam>
            <param name="leftHand">The left hand value in the comparison.</param>
            <param name="rightHand">The right hand value in the comparison.</param>
            <returns>
            True if the left hand parameter is greater than or equal to the right hand parameter 
            within the tolerance registered for <typeparamref name="TValue"/>
            or the <see cref="P:Geo.Coordinates.Tolerance.Global"/> tolerance if the type isn't registered; false otherwise.
            </returns>
        </member>
        <member name="M:Geo.Coordinates.Tolerance.Less``1(System.Double,System.Double)">
            <summary>
            Compares if the <paramref name="leftHand">left hand</paramref> parameter is less
            than the <paramref name="rightHand">right hand</paramref> parameter, using 
            <typeparamref name="TValue"/> to lookup the tolerance registered for that type.
            </summary>
            <typeparam name="TValue">The type which may have a <see cref="T:Geo.Coordinates.Tolerance"/> value registered.</typeparam>
            <param name="leftHand">The left hand value in the comparison.</param>
            <param name="rightHand">The right hand value in the comparison.</param>
            <returns>
            True if the left hand parameter is less than the right hand parameter 
            within the tolerance registered for <typeparamref name="TValue"/>
            or the <see cref="P:Geo.Coordinates.Tolerance.Global"/> tolerance if the type isn't registered; false otherwise.
            </returns>
        </member>
        <member name="M:Geo.Coordinates.Tolerance.LessOrEqual``1(System.Double,System.Double)">
            <summary>
            Compares if the <paramref name="leftHand">left hand</paramref> parameter is less
            than or equal to the <paramref name="rightHand">right hand</paramref> parameter, using 
            <typeparamref name="TValue"/> to lookup the tolerance registered for that type.
            </summary>
            <typeparam name="TValue">The type which may have a <see cref="T:Geo.Coordinates.Tolerance"/> value registered.</typeparam>
            <param name="leftHand">The left hand value in the comparison.</param>
            <param name="rightHand">The right hand value in the comparison.</param>
            <returns>
            True if the left hand parameter is less than or equal to the right hand parameter 
            within the tolerance registered for <typeparamref name="TValue"/>
            or the <see cref="P:Geo.Coordinates.Tolerance.Global"/> tolerance if the type isn't registered; false otherwise.
            </returns>
        </member>
        <member name="M:Geo.Coordinates.Tolerance.Compare``1(System.Double,System.Double)">
            <summary>
            Compares the <paramref name="leftHand">left hand</paramref> parameter 
            to the <paramref name="rightHand">right hand</paramref> parameter, using 
            <typeparamref name="TValue"/> to lookup the tolerance registered for that type.
            </summary>
            <typeparam name="TValue">The type which may have a <see cref="T:Geo.Coordinates.Tolerance"/> value registered.</typeparam>
            <param name="leftHand">The left hand value in the comparison.</param>
            <param name="rightHand">The right hand value in the comparison.</param>
            <returns>
            0 if the parameters differ within the tolerance registered for <typeparamref name="TValue"/>
            or the <see cref="P:Geo.Coordinates.Tolerance.Global"/> tolerance if the type isn't registered;
            1 if <paramref name="leftHand"/> is greater (right hand is less) within the tolerance;
            -1 if <paramref name="rightHand"/> is greater (left hand is less) within the tolerance.
            </returns>
        </member>
        <member name="M:Geo.Coordinates.Tolerance.#ctor(System.Double)">
            <summary>
            Initializes a new <see cref="T:Geo.Coordinates.Tolerance"/> with the value <paramref name="value"/>.
            </summary>
            <param name="value">The value of the tolerance.</param>
        </member>
        <member name="M:Geo.Coordinates.Tolerance.Equal(System.Double,System.Double)">
            <summary>
            Compares if the left value and right value are equal using the 
            <see cref="P:Geo.Coordinates.Tolerance.Value">tolerance value</see>.
            </summary>
            <param name="leftHand">Left hand side of comparison.</param>
            <param name="rightHand">Right hand side of comparison.</param>
            <returns>
            True if <paramref name="leftHand"/> is equal to <paramref name="rightHand"/> 
            (within the tolerance), false otherwise.
            </returns>
        </member>
        <member name="M:Geo.Coordinates.Tolerance.Greater(System.Double,System.Double)">
            <summary>
            Compares if the left value is greater than using the 
            <see cref="P:Geo.Coordinates.Tolerance.Value">tolerance value</see>.
            </summary>
            <param name="leftHand">Left hand side of comparison.</param>
            <param name="rightHand">Right hand side of comparison.</param>
            <returns>
            True if <paramref name="leftHand"/> is greater than <paramref name="rightHand"/> 
            (within the tolerance), false otherwise.
            </returns>
        </member>
        <member name="M:Geo.Coordinates.Tolerance.GreaterOrEqual(System.Double,System.Double)">
            <summary>
            Compares if the left value is greater than or equal using the 
            <see cref="P:Geo.Coordinates.Tolerance.Value">tolerance value</see>.
            </summary>
            <param name="leftHand">Left hand side of comparison.</param>
            <param name="rightHand">Right hand side of comparison.</param>
            <returns>
            True if <paramref name="leftHand"/> is greater than or equal to 
            <paramref name="rightHand"/> (within the tolerance), false otherwise.
            </returns>
        </member>
        <member name="M:Geo.Coordinates.Tolerance.Less(System.Double,System.Double)">
            <summary>
            Compares if the left value is less than using the 
            <see cref="P:Geo.Coordinates.Tolerance.Value">tolerance value</see>.
            </summary>
            <param name="leftHand">Left hand side of comparison.</param>
            <param name="rightHand">Right hand side of comparison.</param>
            <returns>
            True if <paramref name="leftHand"/> is less than <paramref name="rightHand"/> 
            (within the tolerance), false otherwise.
            </returns>
        </member>
        <member name="M:Geo.Coordinates.Tolerance.LessOrEqual(System.Double,System.Double)">
            <summary>
            Compares if the left value is less than or equal using the 
            <see cref="P:Geo.Coordinates.Tolerance.Value">tolerance value</see>.
            </summary>
            <param name="leftHand">Left hand side of comparison.</param>
            <param name="rightHand">Right hand side of comparison.</param>
            <returns>
            True if <paramref name="leftHand"/> is less than or equal to 
            <paramref name="rightHand"/> (within the tolerance), false otherwise.
            </returns>
        </member>
        <member name="M:Geo.Coordinates.Tolerance.Compare(System.Double,System.Double)">
            <summary>
            Compares two values using the <see cref="P:Geo.Coordinates.Tolerance.Value">tolerance value</see>.
            </summary>
            <param name="leftHand">Left hand side of comparison.</param>
            <param name="rightHand">Right hand side of comparison.</param>
            <returns>
            0 if the parameters differ by the tolerance value or less, 
            1 if <paramref name="leftHand"/> is greater,
            -1 if <paramref name="rightHand"/> is greater.
            </returns>
        </member>
        <member name="P:Geo.Coordinates.Tolerance.Global">
            <summary>
            The globally accessible tolerance. Used to change the tolerance computation
            for the entire AppDomain.
            </summary>
        </member>
        <member name="P:Geo.Coordinates.Tolerance.Value">
            <summary>
            Gets the value of the tolerance.
            </summary>
        </member>
        <member name="T:Geo.Coordinates.AbstractCompositCoordTranform">
            <summary>
            抽象坐标转换实现类,调用前需要指定坐标参考系。
            组合模式的父类。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.AbstractCoordTranform">
            <summary>
            抽象坐标转换实现类,调用前需要指定坐标参考系。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.ICrsTranform">
            <summary>
            坐标转换接口,调用前需要指定坐标参考系。
            这里采用责任链模式。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.ICoordinateTranform`2">
            <summary>
            坐标转换顶层接口,为轻量级坐标转换设计。
            </summary>
            <typeparam name="TSourceCoord">输入类型</typeparam>
            <typeparam name="TTargetCoord">输出类型</typeparam>
        </member>
        <member name="M:Geo.Coordinates.ICoordinateTranform`2.Trans(`0)">
            <summary>
            将旧坐标转换成新坐标
            </summary>
            <param name="oldCoord">待转换坐标</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ICoordinateTranform`2.Trans(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            将旧坐标数组转换成新坐标数组
            </summary>
            <param name="oldCoords">待转换坐标数组</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.ICrsTranform.GetInverse">
            <summary>
            得到逆向转换孪生兄弟，但有的可能不可逆。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ICrsTranform.SourceCrs">
            <summary>
            原参考系统
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ICrsTranform.TargetCrs">
            <summary>
            目标参考系统
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ICrsTranform.Successor">
            <summary>
            下一个转换器
            </summary>
        </member>
        <member name="P:Geo.Coordinates.ICrsTranform.IsMatched">
            <summary>
            匹配，是否是我的责任。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.AbstractCoordTranform.#ctor(Geo.Referencing.ICoordinateReferenceSystem,Geo.Referencing.ICoordinateReferenceSystem)">
            <summary>
            创建一个实例。
            </summary>
            <param name="sourceCrs">待转换参考系统</param>
            <param name="targetCrs">目标参考系统</param>
        </member>
        <member name="M:Geo.Coordinates.AbstractCoordTranform.Trans(Geo.Coordinates.ICoordinate)">
            <summary>
            坐标转换，包含责任链。
            </summary>
            <param name="oldCoord">待转坐标，只取其数字部分，参考系取自属性本对象的TargetCrs属性 </param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.AbstractCoordTranform.MatchedTrans(Geo.Coordinates.ICoordinate)">
            <summary>
            将坐标转换到目标参考系统.
            如果是本类的责任，则只用实现 Matches 方法和本方法 ，而不用实现 Trans 方法。
            可以直接调用本方法获取本实例的执行结果，这样不用每次做 IsMatched 比较，因而可以获得更快的执行速度。
            </summary>
            <param name="oldCoord">原坐标</param>
            <returns>转换后的坐标</returns>
        </member>
        <member name="M:Geo.Coordinates.AbstractCoordTranform.Trans(System.Collections.Generic.IEnumerable{Geo.Coordinates.ICoordinate})">
            <summary>
            将坐标批量转换到目标参考系统
            </summary>
            <param name="oldCoords">待转换坐标数组</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.AbstractCoordTranform.GetInverse">
            <summary>
            获取逆向转换
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.AbstractCoordTranform.CoordinateFactory">
            <summary>
            坐标工厂。用于创建坐标，在构造函数中，以目标参考系初始化。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.AbstractCoordTranform.Successor">
            <summary>
            下一个转换器,与本类是同类型（输入与输出）转换器
            </summary>
        </member>
        <member name="P:Geo.Coordinates.AbstractCoordTranform.SourceCrs">
            <summary>
            待转换参考系统
            </summary>
        </member>
        <member name="P:Geo.Coordinates.AbstractCoordTranform.TargetCrs">
            <summary>
            目标参考系统
            </summary>
        </member>
        <member name="P:Geo.Coordinates.AbstractCoordTranform.IsMatched">
            <summary>
            判断是否该我的责任
            </summary>
        </member>
        <member name="M:Geo.Coordinates.AbstractCompositCoordTranform.#ctor(Geo.Referencing.ICoordinateReferenceSystem,Geo.Referencing.ICoordinateReferenceSystem)">
            <summary>
            创建一个实例。
            </summary>
            <param name="sourceCrs">待转换参考系统</param>
            <param name="targetCrs">目标参考系统</param>
        </member>
        <member name="M:Geo.Coordinates.AbstractCompositCoordTranform.MatchedTrans(Geo.Coordinates.ICoordinate)">
            <summary>
            将坐标转换到目标参考系统.
            如果是本类的责任，则只用实现 Matches 方法和本方法 ，而不用实现 Trans 方法。
            可以直接调用本方法获取本实例的执行结果，这样不用每次做 IsMatched 比较，因而可以获得更快的执行速度。
            </summary>
            <param name="oldCoord">原坐标</param>
            <returns>转换后的坐标</returns>
        </member>
        <member name="P:Geo.Coordinates.AbstractCompositCoordTranform.TransformChain">
            <summary>
            责任链的首节点。在组合模式中，需要设置（在构造函数中设置）。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.AbstractCompositCoordTranform.IsMatched">
            <summary>
            子模式中都有判断，在这里可以默认为真，或添加更简便的实现，以节约时间。
            </summary>
        </member>
        <member name="T:Geo.Coordinates.CoordinateTransformFactory">
            <summary>
            通用坐标转换器。推荐采用此类创建坐标转换器。
            本类根据输入和输出参考系的类型，自动选择合适的转换器，并可以组成责任链。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.CoordinateTransformFactory.#ctor(Geo.Referencing.ICoordinateReferenceSystem,Geo.Referencing.ICoordinateReferenceSystem)">
            <summary>
            实例化一个通用坐标转换器，自动判断参考系的类型，组成责任链。
            </summary>
            <param name="sourceCrs">待转参考系</param>
            <param name="targetCrs">目标参考系</param>
        </member>
        <member name="M:Geo.Coordinates.CoordinateTransformFactory.Create(Geo.Referencing.ICoordinateReferenceSystem,Geo.Referencing.ICoordinateReferenceSystem)">
            <summary>
            由输入输出的参考系类型，自动选择合适的转换器，并可以组成责任链。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordinateTransformFactory.CreateXyzToGeodeticCsTransformOnDifferDatum(Geo.Referencing.ICoordinateReferenceSystem,Geo.Referencing.ICoordinateReferenceSystem)">
            <summary>
             大地基准不同，坐标系统也不同。源为空间直角坐标系，目标为大地坐标系。
            </summary>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Geo.Coordinates.CoordinateTransformFactory.CreateGeodeticToXyzCsTransformOnDifferDatum(Geo.Referencing.ICoordinateReferenceSystem,Geo.Referencing.ICoordinateReferenceSystem)”忽略有格式错误的 XML 注释 -->
        <member name="M:Geo.Coordinates.CoordinateTransformFactory.CreateGeodeticToXyzCsTranform(Geo.Referencing.ICoordinateReferenceSystem,Geo.Referencing.ICoordinateReferenceSystem)">
            <summary>
            大地坐标系向空间直角坐标系转换
            </summary>
            <param name="sourceCrs">待转参考系</param>
            <param name="targetCrs">目标参考系</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordinateTransformFactory.CreateXyzToGeodeticCsTranform(Geo.Referencing.ICoordinateReferenceSystem,Geo.Referencing.ICoordinateReferenceSystem)">
            <summary>
            空间直角坐标系转换为大地坐标系
            </summary>
            <param name="sourceCrs">待转参考系</param>
            <param name="targetCrs">目标参考系</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordinateTransformFactory.CreateGeodeticDatumTranform(Geo.Referencing.ICoordinateReferenceSystem,Geo.Referencing.ICoordinateReferenceSystem)">
            <summary>
            椭球基准的变换.
            </summary>
            <param name="sourceCrs">待转参考系</param>
            <param name="targetCrs">目标参考系</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.CoordinateTransformFactory.SourceCrs">
            <summary>
            待转参考系
            </summary>
        </member>
        <member name="P:Geo.Coordinates.CoordinateTransformFactory.TargetCrs">
            <summary>
            目标参考系
            </summary>
        </member>
        <member name="T:Geo.Coordinates.GeodeticDatumTranform">
            <summary>
            不同大地基准，相同坐标系（XYZ）的坐标转换。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.GeodeticDatumTranform.#ctor(Geo.Referencing.ICoordinateReferenceSystem,Geo.Referencing.ICoordinateReferenceSystem)">
            <summary>
            大地基准转换实例
            </summary>
            <param name="sourceDatum">原大地基准</param>
            <param name="targetCrs">目标大地基准</param>
        </member>
        <member name="M:Geo.Coordinates.GeodeticDatumTranform.GetInverse">
            <summary>
            得到逆向转换
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.GeodeticDatumTranform.MatchedTrans(Geo.Coordinates.ICoordinate)">
            <summary>
            只有基准不同的 XYZ 坐标转换,采用布尔沙 7 参数模型。
            以WGS84转换参数作为中间参数，共转换 2 次
            </summary>
            <param name="oldCoord">待转坐标，只取其数字部分，参考系取自属性本对象的TargetCrs属性 </param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.GeodeticDatumTranform.IsMatched">
            <summary>
            责任判断。
            1.必须为空间直角坐标；
            2.必须为大地基准
            </summary>
            <param name="sourceCrs"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Coordinates.GeodeticToXyzCsTranform">
            <summary>
            空间直角坐标系向大地坐标系统的转换,而椭球基准不变，不进行椭球的转换。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.GeodeticToXyzCsTranform.#ctor(Geo.Referencing.ICoordinateReferenceSystem,Geo.Referencing.ICoordinateReferenceSystem)">
            <summary>
            构造函数
            </summary>
            <param name="geodeticCrs">待转换坐标系统，类型必须是GeodeticCs</param>
            <param name="xyzCrs">目标坐标系统，类型必须是XyzCs</param>
        </member>
        <member name="M:Geo.Coordinates.GeodeticToXyzCsTranform.GetInverse">
            <summary>
            逆向转换
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.GeodeticToXyzCsTranform.MatchedTrans(Geo.Coordinates.ICoordinate)">
            <summary>
            转换操作。输入待转坐标，输出目标坐标。
            </summary>
            <param name="oldCoord">待转坐标，只取其数字部分，参考系取自属性本对象的TargetCrs属性 </param>
            <returns></returns>
        </member>
        <member name="T:Geo.Coordinates.GeodeticToXyzCsTranformOnDifferDatum">
            <summary>
            空间直角坐标系向大地坐标系统的转换,而椭球基准变，要进行椭球的转换。
            组合模式。具体实现采用责任链。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.GeodeticToXyzCsTranformOnDifferDatum.#ctor(Geo.Referencing.ICoordinateReferenceSystem,Geo.Referencing.ICoordinateReferenceSystem)">
            <summary>
            构造函数
            </summary>
            <param name="geodeticCrs">待转换坐标系统，类型必须是GeodeticCs</param>
            <param name="xyzCrs">目标坐标系统，类型必须是XyzCs</param>
        </member>
        <member name="M:Geo.Coordinates.GeodeticToXyzCsTranformOnDifferDatum.GetInverse">
            <summary>
            逆向转换
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.GeodeticToXyzCsTranformOnDifferDatum.MatchedTrans(Geo.Coordinates.ICoordinate)">
            <summary>
            转换操作。输入待转坐标，输出目标坐标。
            责任链。
            </summary>
            <param name="oldCoord">待转坐标，只取其数字部分，参考系取自属性本对象的TargetCrs属性 </param>
            <returns></returns>
        </member>
        <member name="T:Geo.Coordinates.XyzToGeodeticCsTranform">
            <summary>
            在同一椭球下，空间直角坐标系向大地坐标系统的转换（不进行椭球基准的转换）。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.XyzToGeodeticCsTranform.#ctor(Geo.Referencing.ICoordinateReferenceSystem,Geo.Referencing.ICoordinateReferenceSystem)">
            <summary>
            构造函数
            </summary>
            <param name="sourceCrs">待转换坐标系统，类型是XyzCs才符合</param>
            <param name="targetCrs">目标坐标系统，类型是GeodeticCs才符合</param>
        </member>
        <member name="M:Geo.Coordinates.XyzToGeodeticCsTranform.GetInverse">
            <summary>
            逆向转换
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XyzToGeodeticCsTranform.MatchedTrans(Geo.Coordinates.ICoordinate)">
            <summary>
            转换操作。输入待转坐标，输出目标坐标。
            </summary>
            <param name="oldCoord">待转坐标，只取其数字部分，参考系取自属性本对象的TargetCrs属性 </param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.XyzToGeodeticCsTranform.IsMatched">
            <summary>
            是否是我的菜。
            </summary> 
            <returns></returns>
        </member>
        <member name="T:Geo.Coordinates.XyzToGeodeticCsTranformOnDifferDatum">
            <summary>
            在不同椭球下，空间直角坐标系向大地坐标系统的转换（要进行椭球基准的转换）。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.XyzToGeodeticCsTranformOnDifferDatum.#ctor(Geo.Referencing.ICoordinateReferenceSystem,Geo.Referencing.ICoordinateReferenceSystem)">
            <summary>
            构造函数
            </summary>
            <param name="sourceCrs">待转换坐标系统，类型是XyzCs才符合</param>
            <param name="targetCrs">目标坐标系统，类型是GeodeticCs才符合</param>
        </member>
        <member name="M:Geo.Coordinates.XyzToGeodeticCsTranformOnDifferDatum.GetInverse">
            <summary>
            逆向转换
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XyzToGeodeticCsTranformOnDifferDatum.MatchedTrans(Geo.Coordinates.ICoordinate)">
            <summary>
            转换操作。输入待转坐标，输出目标坐标。
            </summary>
            <param name="oldCoord">待转坐标，只取其数字部分，参考系取自属性本对象的TargetCrs属性 </param>
            <returns></returns>
        </member>
        <member name="T:Geo.Coordinates.AngleUnit">
            <summary>
            角度单位。度和弧度。
            </summary>
        </member>
        <member name="F:Geo.Coordinates.AngleUnit.Radian">
            <summary>
            弧度
            </summary>
        </member>
        <member name="F:Geo.Coordinates.AngleUnit.Degree">
            <summary>
            度小数
            </summary>
        </member>
        <member name="F:Geo.Coordinates.AngleUnit.DMS_S">
            <summary>
            360°59′59.99999″
            </summary>
        </member>
        <member name="F:Geo.Coordinates.AngleUnit.HMS_S">
            <summary>
            时角，天文常用
            </summary>
        </member>
        <member name="T:Geo.Coordinates.DMS">
             <summary>
             以度分秒表示的角度。
            
             </summary>
        </member>
        <member name="M:Geo.Coordinates.DMS.#ctor(System.Double,System.Boolean)">
            <summary>
            以小数度初始化。
            </summary>
            <param name="deg"></param>
        </member>
        <member name="M:Geo.Coordinates.DMS.#ctor(System.Int32,System.Int32,System.Double,System.Boolean)">
            <summary>
            以度分秒和正负号初始化。
            </summary>
            <param name="deg"></param>
            <param name="second"></param>
            <param name="second"></param>
            <param name="isPlus"></param>
        </member>
        <member name="M:Geo.Coordinates.DMS.HourAngleToDms">
            <summary>
            时角转换为度分秒
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.DMS.DmsToHourAngle">
            <summary>
            度分秒转换为度
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.DMS.ToDms_sString">
            <summary>
            如 -1112233.444444
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.DMS.ToHms_sString">
            <summary>
            时角转换
            如 -112233.444444
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.DMS.ToString">
            <summary>
            40°07'58  ˚
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.DMS.ToConciseString">
            <summary>
            简明字符串 07'58"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.DMS.Parse(System.String)">
            <summary>
            解析度分秒，可以用符号或空格间隔.必须以度分秒的顺序排列。
            
            </summary>
            <param name="d_m_s"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.DMS.DegreeToDms_s(System.Double)">
            <summary>
            转换为度分秒小数
            </summary>
            <param name="degree"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.DMS.Dms_sToDegree(System.Double)">
            <summary>
            转换为度小数
            </summary>
            <param name="dms_s"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Coordinates.DMS.Degree">
            <summary>
            无符号度。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.DMS.Minute">
            <summary>
            无符号 分。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.DMS.Second">
            <summary>
            无符号 秒。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.DMS.IsPlus">
            <summary>
            是正是负号，由这个管理。其它的数字都应该化为正数来计算。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.DMS.Degrees">
            <summary>
            度小数。
            </summary>
        </member>
        <member name="P:Geo.Coordinates.DMS.Seconds">
            <summary>
            全部转化为秒
            </summary>
        </member>
        <member name="P:Geo.Coordinates.DMS.Dms_s">
            <summary>
            度分秒.秒
            </summary>
        </member>
        <member name="P:Geo.Coordinates.DMS.Hms_s">
            <summary>
            角度化为时角
            </summary>
        </member>
        <member name="T:Geo.Coordinates.AngularConvert">
            <summary>
            角度转换
            </summary>
        </member>
        <member name="F:Geo.Coordinates.AngularConvert.DegToRadMultiplier">
            <summary>
            度到弧度乘法因子
            </summary>
        </member>
        <member name="F:Geo.Coordinates.AngularConvert.RadToDegMultiplier">
            <summary>
            弧度到度乘法因子
            </summary>
        </member>
        <member name="M:Geo.Coordinates.AngularConvert.GetDegree(System.Double)">
            <summary>
            通过赋值大小，自动判断角度取值。注意如果角度小于6分，则可能出错。
            </summary>
            <param name="degreeOrDmg_s"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.AngularConvert.ConvertDegree(System.Double,Geo.Coordinates.AngleUnit,Geo.Coordinates.AngleUnit)">
            <summary>
            角度转换
            </summary>
            <param name="currentVal">待转换值</param>
            <param name="from">从格式</param>
            <param name="to">到格式</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.AngularConvert.DegToDms_s(System.Double)">
            <summary>
            度小数到度分秒
            </summary>
            <param name="deg"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.AngularConvert.DegToRad(System.Double)">
            <summary>
            度转换为弧度
            </summary>
            <param name="deg"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.AngularConvert.RadToDeg(System.Double)">
            <summary>
            弧度转换为度.
            </summary>
            <param name="rad"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.AngularConvert.Dms_sToDeg(System.Double)">
            <summary>
            度分秒转换为度。1093000
            </summary>
            <param name="dms_s"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.AngularConvert.D_msToDeg(System.Double)">
            <summary>
            度分秒转换为度。
            </summary>
            <param name="d_ms"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.AngularConvert.Convert(System.Double,Geo.Coordinates.AngleUnit,Geo.Coordinates.AngleUnit)">
            <summary>
            角度转换
            </summary>
            <param name="currentVal">值</param>
            <param name="from">原单位</param>
            <param name="to">目标单位</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.AngularConvert.ToRad(System.Double,Geo.Coordinates.AngleUnit)">
            <summary>
            转换为弧度
            </summary>
            <param name="currentVal"></param>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.AngularConvert.RadTo(System.Double,Geo.Coordinates.AngleUnit)">
            <summary>
            弧度转换为其它角度单位
            </summary>
            <param name="currentVal"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.AngularConvert.ToDegree(System.Double,Geo.Coordinates.AngleUnit)">
            <summary>
            转换为度小数
            </summary>
            <param name="currentVal"></param>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.AngularConvert.ToDms_s(System.Double,Geo.Coordinates.AngleUnit)">
            <summary>
            转换为 DMS_S
            </summary>
            <param name="currentVal"></param>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Coordinates.CoordTransformer">
            <summary>
            提供便捷的坐标转换方法。 
            </summary>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.XyzToPolar2(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ,Geo.Coordinates.AngleUnit)">
            <summary>
            得到站星极坐标。错误的哦哦哦 哦哦哦哦哦哦
            方位角为 radians  (clockwise)
            Azimuth  radians  (若 neg. below horizon)
            </summary>
            <param name="satXyz"></param>
            <param name="receiverXyz"></param>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.XyzToGeoCoord_Rad(System.Double,System.Double,System.Double)">
            <summary>
            摘取自 Ppos.java.txt
            conversion methods
            funcKeyToDouble unknowns,y,z into geodetic lat, lon, and ellip. ht
            ref: eq matrix.4b, info. 132, appendix matrix, osu #370
            ref: geom geod notes gs 658, rapp
            </summary>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.XyzToGeoCoord2(Geo.Coordinates.XYZ,Geo.Coordinates.AngleUnit)">
            <summary>
            空间直角坐标系到地心椭球坐标系。此法没有循环，会快一些。与另一方法相比高程有分米以下差别。
            </summary>
            <param name="xyz"></param>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.XyzToGeoCoord2(Geo.Coordinates.XYZ,Geo.Referencing.Ellipsoid,Geo.Coordinates.AngleUnit)">
            <summary>
             空间直角坐标系到地心椭球坐标系。此法没有循环，会快一些。与另一方法相比高程有分米以下差别。
            </summary>
            <param name="xyz"></param>
            <param name="ellipsoid"></param>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.XyzToGeoCoord2(Geo.Coordinates.XYZ,System.Double,System.Double,Geo.Coordinates.AngleUnit)">
            <summary>
             空间直角坐标系到地心椭球坐标系。此法没有循环，会快一些。与另一方法相比高程有分米以下差别。
            </summary>
            <param name="xyz"></param>
            <param name="a">长半径</param>
            <param name="b">短半径</param>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.XyzToGeoCoord(Geo.Coordinates.IXYZ,Geo.Times.Julian,Geo.Referencing.Ellipsoid,Geo.Coordinates.AngleUnit)">
            <summary>
            由地心地固空间直角坐标计算大地坐标。
            </summary>
            <param name="pos">空间直角坐标</param>
            <param name="date">儒略日</param>
            <param name="ellipsoid">参考椭球</param>
            <param name="unit">角度单位</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.XyzToPolar(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ,Geo.Coordinates.AngleUnit)">
            <summary>
             计算卫星的站心极坐标
            </summary>
            <param name="satXyz">卫星的地心空间直角坐标</param>
            <param name="stationPosition">测站的地心空间直角坐标</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.XyzToEnu(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            站心坐标ENU与地心空间直角坐标XYZ的转换。
            注意此处两个坐标都为地心地固坐标系。
            </summary>
            <param name="targetXyzEcef"></param>
            <param name="siteXyzEcef"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.LocaXyzToEnu(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            本地XYZ坐标，转换到ENU坐标。
            </summary>
            <param name="localXyz"></param>
            <param name="siteXyzEcef"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.EnuToXyz(Geo.Coordinates.ENU,Geo.Coordinates.XYZ)">
            <summary>
            站心坐标ENU与地心空间直角坐标XYZ的转换
            </summary>
            <param name="sat"></param>
            <param name="site"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.XyzToNeu(Geo.Coordinates.XYZ,Geo.Coordinates.LonLat,Geo.Coordinates.AngleUnit)">
            <summary>
            空间直角坐标系到，站心坐标系的转换。
            </summary>
            <param name="vector">站心坐标系的目标向量</param>
            <param name="lonlat">站心的大地坐标</param>
            <param name="unit">当前输入的角度单位</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.XyzToNeu(Geo.Coordinates.XYZ,System.Double,System.Double,Geo.Coordinates.AngleUnit)">
            <summary>
             空间直角坐标系到，站心坐标系的转换。默认B L 单位 度
             地心空间直角坐标系(XYZ)转换为地方左手笛卡尔直角坐标系（NEU,XYZ）
            </summary>
            <param name="vector1">测站到卫星的向径</param>
            <param name="lat">站点所在纬度</param>
            <param name="lon">站点所在经度</param>
            <param name="angleUnit">站点所在经度的单位</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.NeuToXyz(Geo.Coordinates.NEU,Geo.Coordinates.XYZ)">
            <summary>
            站心坐标系到地心坐标系。
            </summary>
            <param name="neu">本地坐标系</param>
            <param name="siteCoord">本地坐标原点在地心坐标系中的坐标</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.NeuToXyz(Geo.Coordinates.NEU,Geo.Coordinates.GeoCoord)">
            <summary>
            站心坐标系到地心坐标系
            </summary>
            <param name="sat"> 站心坐标系</param>
            <param name="coord">本地坐标原点在地心坐标系中的坐标</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.NeuToPolar(Geo.Coordinates.NEU,Geo.Coordinates.AngleUnit)">
            <summary>
            站心坐标系到站心极坐标系。
            </summary>
            <param name="neu"></param>
            <param name="unit">默认单位为度</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.PolarToNeu(Geo.Coordinates.Polar)">
            <summary>
            极坐标系到同心空间直角坐标系。
            </summary>
            <param name="p">极坐标</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.GaussXyToLonLat(Geo.Coordinates.XY,System.Double,System.Double,System.Int32,Geo.Coordinates.AngleUnit)">
            <summary>
            平面坐标（自然坐标或假定坐标）到大地坐标的高斯反算
            </summary>
            <param name="xy">x为横轴</param>
            <param name="a"></param>
            <param name="alfa">参考椭球扁率</param>
            <param name="beltWidth">6、3</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.XyzToPolar(Geo.Coordinates.XYZ,Geo.Coordinates.AngleUnit)">
            <summary>
            空间直角坐标到极坐标
            </summary>
            <param name="xyz"></param>
            <param name="unit">角度单位</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.PolarToXyz(Geo.Coordinates.Polar,Geo.Coordinates.AngleUnit)">
            <summary>
            空间极坐标系到空间直角坐标系
            </summary>
            <param name="polar"></param>
            <param name="unit">角度单位</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.PolarToGeoCoord(Geo.Coordinates.Polar,Geo.Coordinates.AngleUnit)">
            <summary>
            地心极坐标抓换为地心大地坐标
            </summary>
            <param name="polarInGeoCenter">极坐标</param>
            <param name="unit">角度单位</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.LocalPolarToGeoCoord(Geo.Coordinates.Polar,Geo.Coordinates.XYZ,Geo.Coordinates.AngleUnit)">
            <summary>
            站心极坐标转换为地心大地坐标
            </summary>
            <param name="localPolar">极坐标</param>
            <param name="sitePosInGeoCenter">测站在地心坐标系的坐标</param>
            <param name="unit">角度单位</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.LocalPolarToGeoCoord(Geo.Coordinates.Polar,Geo.Coordinates.GeoCoord,Geo.Referencing.Ellipsoid,Geo.Coordinates.AngleUnit)">
            <summary>
            站心极坐标转换为地心大地坐标
            </summary>
            <param name="localPolar">目标在地心极坐标的位置</param>
            <param name="sitePosInGeoCenter">测站大地坐标</param>
            <param name="el">参考椭球</param>
            <param name="unit">角度单位</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.GeoCoordToXyz(Geo.Coordinates.IGeodeticCoord,Geo.Referencing.Ellipsoid)">
            <summary>
            大地坐标转为空间直角坐标。
            </summary>
            <param name="ellipsoidCoord"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.GeoCoordToXyz(System.Double,System.Double,System.Double,System.Double,System.Double,Geo.Coordinates.AngleUnit)">
            <summary>
            椭球坐标转为空间直角坐标。默认单位为度。
            </summary>
            <param name="lon">经度（度）</param>
            <param name="lat">纬度（度）</param>
            <param name="height">大地高</param>
            <param name="a">椭球半径</param>
            <param name="flatOrInverse">扁率或其倒数</param>
            <param name="unit">单位</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.XyzToGeoCoord(Geo.Coordinates.IXYZ,Geo.Referencing.Ellipsoid,Geo.Coordinates.AngleUnit)">
            <summary>
            由空间直角坐标转换为椭球坐标。默认角度单位为度。
            </summary>
            <param name="xyz"></param>
            <param name="ellipsoid"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.XyzToGeoCoord(Geo.Coordinates.IXYZ,Geo.Coordinates.AngleUnit)">
            <summary>
            由空间直角坐标转换为大地坐标，参考椭球为WGS84。
            默认单位为度。
            </summary>
            <param name="xyz">空间直角坐标</param>
            <param name="angeUnit">角度单位，默认单位为度。</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.XyzToGeoCoord(System.Double,System.Double,System.Double,System.Double,System.Double,Geo.Coordinates.AngleUnit)">
            <summary>
            由空间直角坐标转换为椭球坐标。默认角度单位为度。
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="a"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.SphereToXyz(Geo.Coordinates.SphereCoord)">
            <summary>
            球面坐标转换到笛卡尔右手空间直角坐标系
            </summary>
            <param name="sphere"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.XyzToSphere(Geo.Coordinates.XYZ,Geo.Coordinates.AngleUnit)">
            <summary>
            笛卡尔右手空间直角坐标系 转换到 球面坐标
            </summary>
            <param name="xyz"></param>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.XyzToSphere(System.Double,System.Double,System.Double,Geo.Coordinates.AngleUnit)">
            <summary>
            XYZ to Sphere Coordinate
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.SphereRadToXyz(System.Double,System.Double,System.Double,Geo.Coordinates.AngleUnit)">
            <summary>
            Sphere to XYZ Coordinate
            </summary>
            <param name="lon"></param>
            <param name="lat"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.GetAzimuthAngle(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            计算方位角
            </summary>
            <param name="satellitePos"></param>
            <param name="staPos"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.EleAngle(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            Finds the elevation angle of the second point with respect to the prevObj point
            Cui Yang, Add.
            </summary>
            <param name="staPos"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.CosVector(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            Function that returns the cosine of angle between this and right
            Cui Yang, Added, 2014.06.2
            </summary>
            <param name="staPos"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.HenToNeu(Geo.Coordinates.HEN)">
            <summary>
            局部坐标的转换。
            </summary>
            <param name="hen"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.Cos(System.Double)">
            <summary>
             Math.Cos(currentVal)
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.Sin(System.Double)">
            <summary>
             Math.Sin(currentVal)
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordTransformer.Tan(System.Double)">
            <summary>
            Math.Tan(currentVal)
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Coordinates.CoordUtil">
            <summary>
            坐标工具
            </summary>
        </member>
        <member name="M:Geo.Coordinates.CoordUtil.GetDirectionLength(Geo.Coordinates.NEU,Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            计算 测站-卫星 方向的距离。
            </summary>
            <param name="neuCorrection">测站改正 NEU</param>
            <param name="receiverXyz">测站坐标</param>
            <param name="satXyz">卫星坐标</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.CoordUtil.GetDirectionLength(Geo.Coordinates.NEU,Geo.Coordinates.Polar)">
            <summary>
            将NEU偏差根据站星径向换算为等效距离偏差
            </summary>
            <param name="neuCorrection"></param>
            <param name="polar"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Coordinates.GeodeticUtils">
            <summary>
            大地测量计算。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.GeodeticUtils.GeodeticToXyzCoord(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double,System.Double)">
            <summary>
            从大地坐标到空间直角坐标的转换
            </summary>
            <param name="lat_deg">大地纬度</param>
            <param name="lon_deg">大地经度</param>
            <param name="height">大地高</param>
            <param name="X">空间直角坐标X分量</param>
            <param name="Y">空间直角坐标Y分量</param>
            <param name="Z">空间直角坐标Z分量</param>
            <param name="a">参考椭球长半轴</param>
            <param name="f">参考椭球扁率倒数</param>
        </member>
        <member name="M:Geo.Coordinates.GeodeticUtils.XyzToGeodeticCoord(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double,System.Double)">
            <summary>
            从空间直角坐标到大地坐标的转换
            </summary>
            <param name="X">空间直角坐标X分量</param>
            <param name="Y">空间直角坐标Y分量</param>
            <param name="Z">空间直角坐标Z分量</param>
            <param name="lat_deg">大地纬度</param>
            <param name="lon_deg">大地经度</param>
            <param name="height">大地高</param>
            <param name="majorRadius">参考椭球长半轴</param>
            <param name="inverseFlat">参考椭球扁率倒数</param>
        </member>
        <member name="M:Geo.Coordinates.GeodeticUtils.LonLatToGaussXy(System.Double,System.Double,System.Double@,System.Double@,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            从大地坐标到平面坐标的高斯正算
            </summary>
            <param name="lat_deg">大地纬度</param>
            <param name="lon_deg">大地经度</param>
            <param name="x">平面纵轴</param>
            <param name="y">平面横轴</param>
            <param name="majorRadius">参考椭球长半轴</param>
            <param name="inverseFlat">参考椭球扁率倒数</param>
            <param name="beltWidth">投影分带的带宽</param>
            <param name="assumedCoord">是否使用假定坐标</param>
        </member>
        <member name="M:Geo.Coordinates.GeodeticUtils.LonLatToGaussXy(System.Double,System.Double,System.Double@,System.Double@,System.Double,System.Double,System.Int32)">
            <summary>
            从大地坐标到平面坐标的高斯正算
            
            指定中央子午线，用于进行邻带换算，此时必不使用假定坐标
            </summary>
            <param name="lat_deg">大地纬度</param>
            <param name="L">大地经度</param>
            <param name="CenterL">中央子午线</param>
            <param name="x">平面纵轴</param>
            <param name="y">平面横轴</param>
            <param name="majorRadius">参考椭球长半轴</param>
            <param name="inverseFlat">参考椭球扁率倒数</param>
            <param name="beltWidth">投影分带的带宽</param>
        </member>
        <member name="M:Geo.Coordinates.GeodeticUtils.GaussXyToLonLat(System.Double,System.Double,System.Double@,System.Double@,System.Double,System.Double,System.Int32)">
            <summary>
            平面坐标（自然坐标或假定坐标）到大地坐标的高斯反算
            </summary>
            <param name="x">平面纵轴</param>
            <param name="y">平面横轴</param>
            <param name="lat_deg">大地纬度</param>
            <param name="lon_deg">大地经度</param>
            <param name="majorRadius">参考椭球长半轴</param>
            <param name="inversFlat">参考椭球扁率倒数</param>
            <param name="beltWidth">投影分带的带宽</param>
        </member>
        <member name="M:Geo.Coordinates.GeodeticUtils.GaussXyToDifferLonLat(System.Double,System.Double,System.Double@,System.Double@,System.Double,System.Double,System.Int32)">
            <summary>
            平面坐标（自然坐标）到大地坐标的高斯反算
            </summary>
            <param name="x">平面纵轴</param>
            <param name="y">平面横轴</param>
            <param name="lat_deg">大地纬度</param>
            <param name="lon_deg">经度差</param>
            <param name="majorRadius">参考椭球长半轴</param>
            <param name="inverseFlat">参考椭球扁率倒数</param>
            <param name="beltWidth">投影分带的带宽</param>
        </member>
        <member name="M:Geo.Coordinates.GeodeticUtils.PointToWestBelt(System.Double,System.Double,System.Double@,System.Double@,System.Double,System.Double,System.Int32)">
            <summary>
            向西投影带的邻带换算
            </summary>
            <param name="x0">东投影带的x坐标</param>
            <param name="y0">东投影带的y坐标</param>
            <param name="x1">西投影带的x坐标</param>
            <param name="y1">西投影带的y坐标</param>
            <param name="majorRadius">参考椭球长半轴</param>
            <param name="inverseFlat">参考椭球的扁率倒数</param>
            <param name="beltWidth">带宽</param>
        </member>
        <member name="M:Geo.Coordinates.GeodeticUtils.PointToEastBelt(System.Double,System.Double,System.Double@,System.Double@,System.Double,System.Double,System.Int32)">
            <summary>
            向东投影带的邻带换算
            </summary>
            <param name="x0">西投影带的x坐标</param>
            <param name="y0">西投影带的y坐标</param>
            <param name="x1">东投影带的x坐标</param>
            <param name="y1">东投影带的y坐标</param>
            <param name="majorRadius">参考椭球长半轴</param>
            <param name="inverseFlat">参考椭球的扁率倒数</param>
            <param name="beltWidth">带宽</param>
        </member>
        <member name="M:Geo.Coordinates.GeodeticUtils.PointBeltWidthChanged(System.Double,System.Double,System.Double@,System.Double@,System.Double,System.Double,System.Int32)">
            <summary>
            三度带与六度带之间的坐标转换
            </summary>
            <param name="x0">原始x坐标</param>
            <param name="y0">原始y坐标</param>
            <param name="x1">目标x坐标</param>
            <param name="y1">目标y坐标</param>
            <param name="majorRadius">参考椭球长半轴</param>
            <param name="inverseFlat">参考椭球扁率倒数</param>
            <param name="originalBeltWidth">目标坐标带宽，此参数同时也指明了原始坐标的带宽</param>
        </member>
        <member name="M:Geo.Coordinates.GeodeticUtils.BursaTransform(Geo.Coordinates.IXYZ,Geo.Referencing.IBursaTransParams)">
             <summary>
             布尔莎七参数模型坐标转换，从空间直角坐标到空间直角坐标
             </summary>
             <param name="old"></param>
             <param name="info"></param>
             <returns></returns>
            坐标转换时都是转XYZ，然后再将XYZ转换成BLH和xy
             WGS-84 --> BJZ54
            -15.415, 157.025, 94.74,   0.312, 0.08,  0.102, -1.465e-6        /*全国*/
            -14.756, 145.798, 100.886, 0.618, 0.255, 0.302, -0.439e-6        /*东南局部*/
              BJZ54 --> DXZ88
            16.5,    -152.9,  -91.8,   -0.226, -0.003, 0.0, 1.22e-6
        </member>
        <member name="M:Geo.Coordinates.GeodeticUtils.BursaParamsSolve(Geo.Coordinates.Xyz[],Geo.Coordinates.Xyz[],System.Double[],System.Int32)">
            <summary>
            利用布尔莎坐标转换模型求解转换参数
            </summary>
            <param name="oldPoint">旧坐标系下点的坐标集合</param>
            <param name="newPoint">新坐标系下点的坐标集合</param>
            <param name="weight">权阵</param>
            <param name="paraCount">转换参数个数，可以为3、4、7等</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.GeodeticUtils.BesselPoint(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            贝赛尔大地问题正解
            </summary>
            <param name="latA_deg">已知点纬度</param>
            <param name="lonA_deg">已知点经度</param>
            <param name="geodeticLine">大地线长</param>
            <param name="azimuth_deg">大地方位角</param>
            <param name="latB_deg">待求点纬度</param>
            <param name="lonB_deg">待求点经度</param>
            <param name="antAzimuth_deg">大地反方位角</param>
            <param name="majorRadius">参考椭球长半轴</param>
            <param name="inverseFlat">参考椭球扁率倒数</param>
        </member>
        <member name="M:Geo.Coordinates.GeodeticUtils.BesselAzimuthAngle(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            由两点大地坐标求解大地方位角
            </summary>
            <param name="latA_deg">起点纬度</param>
            <param name="lonA_deg">起点经度</param>
            <param name="latB_deg">末点纬度</param>
            <param name="lonB_deg">末点经度</param>
            <param name="majorRadius">参考椭球长半轴</param>
            <param name="inverseFlat">参考椭球扁率倒数</param>
            <returns>两点间的大地方位角</returns>
        </member>
        <member name="M:Geo.Coordinates.GeodeticUtils.BesselGeodeticLine(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            由大地坐标计算大地线长
            </summary>
            <param name="latA_deg">起点纬度</param>
            <param name="lonA_deg">起点经度</param>
            <param name="latB_deg">末点纬度</param>
            <param name="lonB_deg">末点经度</param>
            <param name="majorRadius">参考椭球长半轴</param>
            <param name="inverseFlat">参考椭球扁率倒数</param>
            <returns>两点间的大地线长</returns>
        </member>
        <member name="M:Geo.Coordinates.GeodeticUtils.AzimuthAngle(Geo.Coordinates.Xyz,Geo.Coordinates.Xyz,System.Double,System.Double)">
            <summary>
            二炮阵地方位计算中由两点的空间直角坐标求解方位角。
            </summary>
            <param name="ptA">起点空间直角坐标</param>
            <param name="ptB">末点空间直角坐标</param>
            <param name="majorRadius">参考椭球长半轴</param>
            <param name="inverseFlat">参考椭球扁率倒数</param>
            <returns>两点点的大地方位角</returns>
        </member>
        <member name="M:Geo.Coordinates.GeodeticUtils.MeridianLength(System.Double,System.Double,System.Double)">
            <summary>
            由纬度求解子午线弧长
            </summary>
            <param name="lat_deg">纬度</param>
            <param name="majorRadius">长半轴</param>
            <param name="inverseFlat">扁率倒数</param>
            <returns>子午线弧长</returns>
        </member>
        <member name="T:Geo.Coordinates.XyUtil">
            <summary>
            二维平面坐标接口，以X、Y分量表示。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.XyUtil.GetIntersectionPtOfTwoLineSegment(Geo.Coordinates.XY,Geo.Coordinates.XY,Geo.Coordinates.XY,Geo.Coordinates.XY)">
            <summary>
            计算两线段的交点。如果不相交，则返回null。
            </summary>
            <param name="lineAxy1">线段 1 的第 1 个点</param>
            <param name="lineAxy2">线段 1 的第 2 个点</param>
            <param name="lineBxy1">线段 2 的第 1 个点</param>
            <param name="lineBxy2">线段 2 的第 2 个点</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XyUtil.GetIntersectionPtOfTwoBeeline(Geo.Coordinates.XY,Geo.Coordinates.XY,Geo.Coordinates.XY,Geo.Coordinates.XY)">
            <summary>
            求两直线交点。
            </summary>
            <param name="lineAXy1"></param>
            <param name="lineAxy2"></param>
            <param name="lineBxy1"></param>
            <param name="lineBxy2"></param>
            <returns>若有则直接返回改点，若平行则返回 NULL</returns>
        </member>
        <member name="M:Geo.Coordinates.XyUtil.GetPointSlopeLineConstant(Geo.Coordinates.XY,Geo.Coordinates.XY)">
            <summary>
            点斜式的常数项。
            </summary>
            <param name="lineAxy1"></param>
            <param name="lineAxy2"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XyUtil.GetSlope(Geo.Coordinates.XY,Geo.Coordinates.XY)">
            <summary>
            计算斜率
            </summary>
            <param name="lineAxy1"></param>
            <param name="lineAxy2"></param>
            <returns>斜率，如果与X垂直，则返回正无穷</returns>
        </member>
        <member name="M:Geo.Coordinates.XyUtil.GetAngleRad(System.Double,System.Double)">
            <summary>
            通过坐标差求角度。单位为弧度。
            </summary>
            <param name="yDiffer"></param>
            <param name="xDiffer"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XyUtil.GetYOnLine(System.Double,Geo.Coordinates.XY,Geo.Coordinates.XY)">
            <summary>
            已知一条直线上的X坐标，求值Y坐标。
            </summary>
            <param name="x"></param>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XyUtil.GetYOnLine(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            已知一条直线上的X坐标，求值Y坐标。
            </summary>
            <param name="x"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XyUtil.InCircle(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
             <summary>
             //判断点是否落在三角形外接圆的内部
             xc, yc, r;//外接圆的圆心和半径
              //Return TRUE if the point (xp,yp) lies inside the circumcircle 
            made up by points (x1,y1) (x2,y2) (x3,y3)
            The circumcircle centre is returned in (xc,yc) and the radius r
            NOTE: A point on the edge is inside the circumcircle
             </summary>
             <param name="xp"></param>
             <param name="yp"></param>
             <param name="x1">三角形</param>
             <param name="y1">三角形</param>
             <param name="x2">三角形</param>
             <param name="y2">三角形</param>
             <param name="x3">三角形</param>
             <param name="y3">三角形</param>
             <param name="xc">外接圆的圆心</param>
             <param name="yc">外接圆的圆心</param>
             <param name="r">外接圆半径</param>
             <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XyUtil.WhichSide(Geo.Coordinates.XY,Geo.Coordinates.XY,Geo.Coordinates.XY)">
            <summary>
            判断点在边的哪个旁边，-1代表左边，0代表边上，1代表右边
            </summary>
            <param name="pt"></param>
            <param name="ptA"></param>
            <param name="ptB"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Coordinates.XyUtil.WhichSide(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            判断点在边的哪个旁边，-1代表左边，0代表边上，1代表右边
            </summary>
            <param name="xp"></param>
            <param name="yp"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Coordinates.XyzUtil">
            <summary>
            3维平面坐标接口，以X、Y、Z分量表示。
            </summary>
        </member>
        <member name="M:Geo.Coordinates.XyzUtil.GetIntersectionPt(Geo.Coordinates.XY,Geo.Coordinates.XY,Geo.Coordinates.XY,Geo.Coordinates.XY)">
            <summary>
            两条线段的交点。
            </summary>
            <param name="lineAxy1"></param>
            <param name="lineAxy2"></param>
            <param name="lineBxy1"></param>
            <param name="lineBxy2"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Data.GeodesyFileHeader">
            <summary>
            头部信息
            </summary>
        </member>
        <member name="F:Geo.Data.GeodesyFileHeader.Identifier">
            <summary>
            文件标识符，应该出现在文件第一个数据内容中。
            </summary>
        </member>
        <member name="F:Geo.Data.GeodesyFileHeader.CommentMarker">
            <summary>
            所有以井号“#”开始的行表示注释，含头部和数据体。
            </summary>
        </member>
        <member name="P:Geo.Data.GeodesyFileHeader.Version">
            <summary>
            文件版本
            </summary>
        </member>
        <member name="P:Geo.Data.GeodesyFileHeader.Author">
            <summary>
            作者
            </summary>
        </member>
        <member name="P:Geo.Data.GeodesyFileHeader.CreationDate">
            <summary>
            创建日期
            </summary>
        </member>
        <member name="P:Geo.Data.GeodesyFileHeader.TableName">
            <summary>
            数据表名称
            </summary>
        </member>
        <member name="P:Geo.Data.GeodesyFileHeader.Columns">
            <summary>
            列
            </summary>
        </member>
        <member name="P:Geo.Data.GeodesyFileHeader.Splitters">
            <summary>
            数据表内容分隔符
            </summary>
        </member>
        <member name="T:Geo.Data.GeodesyFile">
            <summary>
            文件
            </summary>
        </member>
        <member name="M:Geo.Data.GeodesyFile.#ctor">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="P:Geo.Data.GeodesyFile.Header">
            <summary>
            头部信息
            </summary>
        </member>
        <member name="P:Geo.Data.GeodesyFile.RawTable">
            <summary>
            数据表
            </summary>
        </member>
        <member name="T:Geo.Data.GeodesyFileReader">
            <summary>
            文件读取
            </summary>
        </member>
        <member name="M:Geo.Data.GeodesyFileReader.#ctor(System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Geo.Data.GeodesyFileReader.Read">
            <summary>
            读取
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Data.GeodesyFileReader.ReadNextContent(System.IO.StreamReader)">
            <summary>
            读取一个有效行，即非空白，非注释
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Data.GeodesyFileReader.Path">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="T:Geo.Data.GeodesyFileIndecator">
            <summary>
            文件读取位置
            </summary>
        </member>
        <member name="F:Geo.Data.GeodesyFileIndecator.FileIndicator">
            <summary>
            正在寻找文件标识
            </summary>
        </member>
        <member name="F:Geo.Data.GeodesyFileIndecator.Header">
            <summary>
            正在读取文件头部
            </summary>
        </member>
        <member name="F:Geo.Data.GeodesyFileIndecator.Content">
            <summary>
            读取内容
            </summary>
        </member>
        <member name="T:Geo.Data.GeodesyFileRow">
            <summary>
            行
            </summary>
        </member>
        <member name="P:Geo.Data.GeodesyFileRow.Key">
            <summary>
            关键字，如点名，点号。
            </summary>
        </member>
        <member name="P:Geo.Data.GeodesyFileRow.Items">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="T:Geo.GeoGridLooper">
            <summary>
            地理格网遍历器。
            </summary>
        </member>
        <member name="M:Geo.GeoGridLooper.#ctor(Geo.NumerialSegment,System.Double,Geo.NumerialSegment,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="LonSpan"></param>
            <param name="LonStep">秒</param>
            <param name="LatSpan"></param>
            <param name="LatStep">秒</param>
        </member>
        <member name="M:Geo.GeoGridLooper.Loop">
            <summary>
            接口
            </summary>
        </member>
        <member name="M:Geo.GeoGridLooper.OnLooping(Geo.Coordinates.GeoCoord)">
            <summary>
            循环
            </summary>
            <param name="geoCoord"></param>
        </member>
        <member name="E:Geo.GeoGridLooper.Looping">
            <summary>
            事件
            </summary>
        </member>
        <member name="P:Geo.GeoGridLooper.ProgressNotifier">
            <summary>
            进度条通知
            </summary>
        </member>
        <member name="P:Geo.GeoGridLooper.IsLatFirst">
            <summary>
            是否纬度优先
            </summary>
        </member>
        <member name="P:Geo.GeoGridLooper.LonSpan">
            <summary>
            经度范围
            </summary>
        </member>
        <member name="P:Geo.GeoGridLooper.LonStep">
            <summary>
            经度步长
            </summary>
        </member>
        <member name="P:Geo.GeoGridLooper.LatSpan">
            <summary>
            纬度范围
            </summary>
        </member>
        <member name="P:Geo.GeoGridLooper.LatStep">
            <summary>
            纬度步长
            </summary>
        </member>
        <member name="P:Geo.GeoGridLooper.IsCancel">
            <summary>
            是否取消
            </summary>
        </member>
        <member name="T:Geo.ICloneable`1">
            <summary>
            克隆泛型接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Geo.ICloneable`1.Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="T:Geo.Common.Command">
            <summary>
            CMD运行类。
            </summary>
        </member>
        <member name="M:Geo.Common.Command.#ctor">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="M:Geo.Common.Command.process_Exited(System.Object,System.EventArgs)">
            <summary>
            程序已退出。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Geo.Common.Command.Run(System.String)">
            <summary>
            同步运行
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Common.Command.RunAsyn(System.String)">
            <summary>
            异步运行，不用等待。
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Common.Command.RunCmd(System.String)">
            <summary>
            同步运行命令行。
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Common.Command.RunCmdAsyn(System.String)">
            <summary>
            异步运行命令行。
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:Geo.Common.Command.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="E:Geo.Common.Command.ProcessExited">
            <summary>
            程序退出事件
            </summary>
        </member>
        <member name="P:Geo.Common.Command.Process">
            <summary>
            进程
            </summary>
        </member>
        <member name="T:Geo.IO.Config">
            <summary>
            配置文件内容.
            通常以#为注释，以=为赋值符号，以行为单位的配置文件。
            </summary>
        </member>
        <member name="M:Geo.IO.Config.#ctor">
             <summary>
            配置文件内容
             </summary> 
        </member>
        <member name="M:Geo.IO.Config.#ctor(System.Collections.Generic.IDictionary{System.String,Geo.IO.ConfigItem},System.Collections.Generic.List{System.String})">
            <summary>
            采用已有列表初始化
            </summary>
            <param name="ConfigItems"></param>
            <param name="Comments"></param>
        </member>
        <member name="M:Geo.IO.Config.AddComment(System.String)">
            <summary>
            添加全文注释
            </summary>
            <param name="comment">注释内容</param>
        </member>
        <member name="M:Geo.IO.Config.GetComment(System.String)">
            <summary>
            获取指定变量的注释，如果没有注释，则返回空 String.Empty .
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.Config.Set(System.String,System.String,System.String)">
            <summary>
            设置一个变量的值。如果存在则只改变其值，如果不存在则添加。
            </summary>
            <param name="name">名称</param>
            <param name="currentVal">数值</param>
            <param name="comment">参数非空则添加，原来的将被替换</param>
        </member>
        <member name="M:Geo.IO.Config.Set(Geo.IO.ConfigItem)">
            <summary>
            设置变量值，如果已经有了，则直接覆盖。
            </summary>
            <param name="ConfigItem">项目</param>
        </member>
        <member name="M:Geo.IO.Config.GetArray(System.String,System.String)">
            <summary>
            获取字符串数组
            </summary>
            <param name="keyPrev"></param>
            <param name="spliter"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.Config.SetArray(System.String,System.String[],System.String)">
            <summary>
            保存字符串数组
            </summary>
            <param name="keyPrev"></param>
            <param name="array"></param>
            <param name="spliter"></param>
        </member>
        <member name="M:Geo.IO.Config.GetString(System.String,System.Object)">
            <summary>
            直接返回字符串，如果没有，则初始化一个，设置值为空。而不会报错。
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.Config.GetDateTime(System.String)">
            <summary>
            直接返回时间
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.Config.GetDouble(System.String,System.Double)">
            <summary>
            直接返回数值
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.Config.GetInt(System.String,System.Int32)">
            <summary>
            直接返回数值
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.Config.GetLong(System.String)">
            <summary>
            直接返回长整形
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.Config.GetBool(System.String,System.Boolean)">
            <summary>
            直接返回数值,如果没有则返回默认值，并设置配置文件
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.Config.GetPath(System.String,System.String)">
            <summary>
            返回路径。相对于当前运行程序目录的路径。
            </summary>
            <param name="settingName">名称</param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.Config.GetConfigValue(System.String)">
            <summary>
            获取值
            </summary>
            <param name="settingName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.Config.SetPath(System.String,System.String)">
            <summary>
            相对于当前运行程序目录的路径。
            </summary>
            <param name="value"></param>
            <param name="settingName"></param>
        </member>
        <member name="M:Geo.IO.Config.SetConfigVlue(System.String,System.String)">
            <summary>
            设置 app.config 的 appSettings 项目
            </summary>
            <param name="settingName">名称</param>
            <param name="currentVal">值</param>
        </member>
        <member name="M:Geo.IO.Config.ToString">
            <summary>
            字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.IO.Config.Comments">
            <summary>
            整个文档的注释
            </summary>
        </member>
        <member name="P:Geo.IO.Config.IsChangSaved">
            <summary>
            指示是否保存了改变。
            </summary>
        </member>
        <member name="P:Geo.IO.Config.Version">
            <summary>
            版本
            </summary>
        </member>
        <member name="P:Geo.IO.Config.Author">
            <summary>
            作者
            </summary>
        </member>
        <member name="P:Geo.IO.Config.CreationTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Geo.IO.Config.BaseDirectory">
            <summary>
            程序集启动目录
            </summary>
        </member>
        <member name="T:Geo.IO.GroupedConfigItem">
            <summary>
            分组后的设置项目
            </summary>
        </member>
        <member name="T:Geo.IO.ConfigItem">
            <summary>
            配置文件内容
            </summary>
        </member>
        <member name="M:Geo.IO.ConfigItem.#ctor(System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Geo.IO.ConfigItem.sources">
            <summary>
            懒加载
            </summary>
        </member>
        <member name="M:Geo.IO.ConfigItem.ParseKeyValueSources(System.String)">
            <summary>
            解析字符串选项，eg.
            (0:single,1:dgps,2:kinematic,3:static,4:movingbase,5:fixed,6:ppp-kine,7:ppp-static)
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.IO.ConfigItem.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Geo.IO.ConfigItem.StandardName">
            <summary>
            标准参数名称
            </summary>
        </member>
        <member name="P:Geo.IO.ConfigItem.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Geo.IO.ConfigItem.Comment">
            <summary>
            注释
            </summary>
        </member>
        <member name="P:Geo.IO.ConfigItem.HasSources">
            <summary>
            是否自带选项
            </summary>
        </member>
        <member name="M:Geo.IO.GroupedConfigItem.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="Name">名称</param>
            <param name="Value">值</param>
            <param name="Group">分组</param>
            <param name="Comment">注释</param>
        </member>
        <member name="M:Geo.IO.GroupedConfigItem.CompareTo(Geo.IO.GroupedConfigItem)">
            <summary>
            比较
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.IO.GroupedConfigItem.Group">
            <summary>
            分组。
            </summary>
        </member>
        <member name="T:Geo.IO.ConfigReader">
            <summary>
            配置文件内容。
            通常为一行一个变量和值。采用分隔符分开。
            </summary>
        </member>
        <member name="M:Geo.IO.ConfigReader.#ctor(System.String,System.String,System.String)">
             <summary>
            配置文件内容
             </summary> 
             <param name="path">路径</param> 
             <param name="ValueSplitter">数值分隔符</param> 
             <param name="CommentSplitter">注释分隔符</param> 
        </member>
        <member name="M:Geo.IO.ConfigReader.#ctor(System.IO.FileStream,System.Text.Encoding,System.String,System.String)">
             <summary>
            配置文件内容
             </summary> 
             <param name="stream">数据流</param>
             <param name="encoding">编码</param>
             <param name="ValueSplitter">数值分隔符</param> 
             <param name="CommentSplitter">注释分隔符</param> 
        </member>
        <member name="M:Geo.IO.ConfigReader.Read">
            <summary>
            读取配置文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.ConfigReader.ParseLine(System.String,System.String)">
            <summary>
            解析一行字符串。
            </summary>
            <param name="line">字符串行</param>
            <returns></returns>
        </member>
        <member name="P:Geo.IO.ConfigReader.ValueSplitter">
            <summary>
            用于分割名称和值
            </summary>
        </member>
        <member name="P:Geo.IO.ConfigReader.CommentSplitter">
            <summary>
            用于标记和分割注释
            </summary>
        </member>
        <member name="T:Geo.IO.ConfigWriter">
            <summary>
            包含Stream, Encoding属性，用于输入输出。
            </summary>
        </member>
        <member name="M:Geo.IO.ConfigWriter.#ctor(System.String,System.String,System.String)">
             <summary>
            配置文件内容
             </summary> 
             <param name="path">路径</param> 
             <param name="ValueSplitter">数值分隔符</param> 
             <param name="CommentSplitter">注释分隔符</param> 
        </member>
        <member name="M:Geo.IO.ConfigWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.String,System.String)">
             <summary>
            配置文件内容
             </summary> 
             <param name="stream">数据流</param>
             <param name="encoding">编码</param>
             <param name="ValueSplitter">数值分隔符</param> 
             <param name="CommentSplitter">注释分隔符</param> 
        </member>
        <member name="M:Geo.IO.ConfigWriter.Write(Geo.IO.Config)">
            <summary>
            写入一个到数据流。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.IO.ConfigWriter.IsSort">
            <summary>
            是否排序
            </summary>
        </member>
        <member name="P:Geo.IO.ConfigWriter.ValueSplitter">
            <summary>
            用于分割名称和值
            </summary>
        </member>
        <member name="P:Geo.IO.ConfigWriter.CommentSplitter">
            <summary>
            用于标记和分割注释
            </summary>
        </member>
        <member name="T:Geo.IO.GroupedConfigWriter">
            <summary>
            包含Stream, Encoding属性，用于输入输出。
            </summary>
        </member>
        <member name="M:Geo.IO.GroupedConfigWriter.#ctor(System.String,System.String,System.String)">
             <summary>
            配置文件内容
             </summary> 
             <param name="path">路径</param> 
             <param name="ValueSplitter">数值分隔符</param> 
             <param name="CommentSplitter">注释分隔符</param> 
        </member>
        <member name="M:Geo.IO.GroupedConfigWriter.#ctor(System.IO.FileStream,System.Text.Encoding,System.String,System.String)">
             <summary>
            配置文件内容
             </summary> 
             <param name="stream">数据流</param>
             <param name="encoding">编码</param>
             <param name="ValueSplitter">数值分隔符</param> 
             <param name="CommentSplitter">注释分隔符</param> 
        </member>
        <member name="M:Geo.IO.GroupedConfigWriter.Write(Geo.IO.Config)">
            <summary>
            写入一个到数据流。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.GroupedConfigWriter.BuildGroupedConfigString(System.Text.StringBuilder,System.Collections.Generic.List{Geo.IO.GroupedConfigItem})">
            <summary>
            分组的配置字符串
            </summary>
            <param name="sb"></param>
            <param name="glist"></param>
        </member>
        <member name="T:Geo.IO.IdThreeFloatReader">
            <summary>
            3 值文件读取
            </summary>
        </member>
        <member name="M:Geo.IO.IdThreeFloatReader.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="metaFilePath"></param>
        </member>
        <member name="M:Geo.IO.IdThreeFloatReader.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.IdThreeFloatReader.GetDefaultMetadata">
            <summary>
            默认的元数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.IdThreeFloatReader.Parse(System.String[])">
            <summary>
            字符串列表解析为属性
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.IO.IdTwoFloatReader">
            <summary>
            2值文件读取
            </summary>
        </member>
        <member name="M:Geo.IO.IdTwoFloatReader.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="metaFilePath"></param>
        </member>
        <member name="M:Geo.IO.IdTwoFloatReader.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.IdTwoFloatReader.GetDefaultMetadata">
            <summary>
            默认的元数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.IdTwoFloatReader.Parse(System.String[])">
            <summary>
            字符串列表解析为属性
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.IO.LineFileReplacer">
            <summary>
            文本行文件内容置换器
            </summary>
        </member>
        <member name="M:Geo.IO.LineFileReplacer.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            构造函数
            </summary>
            <param name="InPath">输入路径</param>
            <param name="OutPath">输出路径</param>
            <param name="Data">替换数据</param>
        </member>
        <member name="M:Geo.IO.LineFileReplacer.Run">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:Geo.IO.LineFileReplacer.TryReplace(System.String,System.String@)">
            <summary>
            执行替换尝试，不成功则返回本身。
            </summary>
            <param name="line"></param>
            <param name="newLine"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.LineFileReplacer.IsEnd(System.String)">
            <summary>
            通过结束标记，确定所读是否该终止。
            若未指定，默认没有结束。
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.LineFileReplacer.IsStart(System.String)">
            <summary>
            通过起始标记，确定所读是否该终止。
            若没有设置，直接返回true，即默认从0行开始。
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.IO.LineFileReplacer.OutBufferCount">
            <summary>
            输出缓存数量，太小会减慢速度，太大要考虑内存容量。
            </summary>
        </member>
        <member name="P:Geo.IO.LineFileReplacer.Data">
            <summary>
            替换的新旧字符串，Key为旧字符包含，value为信大字符串句子。
            </summary>
        </member>
        <member name="P:Geo.IO.LineFileReplacer.AddingLines">
            <summary>
            需要添加进行的行，将在匹配成功后添加。
            </summary>
        </member>
        <member name="P:Geo.IO.LineFileReplacer.InPath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:Geo.IO.LineFileReplacer.OutPath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:Geo.IO.LineFileReplacer.EndMarkers">
            <summary>
            结束标记，匹配上一个就结束。
            </summary>
        </member>
        <member name="P:Geo.IO.LineFileReplacer.StartMarkers">
            <summary>
            起始标记，匹配上一个就开始。
            </summary>
        </member>
        <member name="T:Geo.FileBasedService`1">
            <summary>
            通用文件数据源，初始化时，采用文件选项进行初始化.
            </summary>
        </member>
        <member name="T:Geo.IFileBasedService`1">
            <summary>
            数据源为文件。
            </summary> 
        </member>
        <member name="T:Geo.IOptionalService`2">
            <summary>
            具有选项的通用数据源接口
            </summary>
            <typeparam name="TOption">数据服务选项</typeparam>
            <typeparam name="TProduct">产品</typeparam>
        </member>
        <member name="P:Geo.IOptionalService`2.Option">
            <summary>
             数据源选项。
            </summary>
        </member>
        <member name="M:Geo.FileBasedService`1.#ctor(System.String)">
            <summary>
            文件数据源构造函数。
            </summary>
            <param name="fileName">文件选项</param>
        </member>
        <member name="M:Geo.FileBasedService`1.#ctor(Geo.FileOption,System.String)">
            <summary>
            文件数据源构造函数。
            </summary>
            <param name="Option">文件选项</param>
            <param name="name">名称</param>
        </member>
        <member name="P:Geo.FileBasedService`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Geo.FileBasedService`1.Option">
            <summary>
             数据源选项。
            </summary>
        </member>
        <member name="M:Geo.Data.FileDataService`2.#ctor(Geo.FileOption,System.String)">
            <summary>
            文件数据源构造函数。
            </summary>
            <param name="Option">文件选项</param>
            <param name="name">名称</param>
        </member>
        <member name="M:Geo.Data.FileDataService`2.#ctor(System.String,System.String)">
            <summary>
            文件数据源构造函数。
            </summary>
            <param name="path">文件选项</param>
            <param name="name">名称</param>
        </member>
        <member name="M:Geo.Data.FileDataService`2.GetItems">
            <summary>
            获取所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:Geo.Data.GidManager">
            <summary>
            Gnsser ID 文件管理器。
            </summary>
        </member>
        <member name="M:Geo.Data.GidManager.ReadFileIdDbId(System.String)">
            <summary>
            读取文件ID和数据库ID。比如平差之星的Pname文件。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Data.GidItem">
            <summary>
            一行代表一个对象，两个标识。对应数据库ID和文件ID。
            </summary>
        </member>
        <member name="M:Geo.Data.GidItem.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="P:Geo.Data.GidItem.DbId">
            <summary>
            点名
            </summary>
        </member>
        <member name="P:Geo.Data.GidItem.FileId">
            <summary>
            点号
            </summary>
        </member>
        <member name="T:Geo.Data.ItemFile`1">
            <summary>
            项目文件
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="P:Geo.Data.ItemFile`1.Items">
            <summary>
            元素
            </summary>
        </member>
        <member name="T:Geo.Data.PositionOfFileReader">
            <summary>
            标记读取器在文件中的位置。
            </summary>
        </member>
        <member name="F:Geo.Data.PositionOfFileReader.Header">
            <summary>
            头部段。即还没有正式读取内容。
            </summary>
        </member>
        <member name="F:Geo.Data.PositionOfFileReader.Content">
            <summary>
            数据内容
            </summary>
        </member>
        <member name="F:Geo.Data.PositionOfFileReader.End">
            <summary>
            结束段。已经结束数据内容的读取。
            </summary>
        </member>
        <member name="T:Geo.Data.ItemReader`2">
            <summary>
            文件读取
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="T:Geo.IO.TableFileReader">
            <summary>
            数据表读取器
            </summary>
        </member>
        <member name="M:Geo.IO.TableFileReader.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Geo.IO.TableFileReader.ReadToRawTable">
            <summary>
            读取数据表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.TableFileReader.ReadToTable">
            <summary>
            解析为原始数据表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.TableFileReader.ReadToModels``1">
            <summary>
            解析为模型
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.IO.TableFileReader.InputPath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="M:Geo.Data.ItemReader`2.#ctor(System.String)">
            <summary>
            构造函数。可以指定文件路径，但此处并不读取，需要调用Read()方法才读取。
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Geo.Data.ItemReader`2.ReadToModels``1">
            <summary>
            读取文件为实体对象集合。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Geo.Data.ItemReader`2.Read">
            <summary>
            读取
            </summary> 
            <returns></returns>
        </member>
        <member name="M:Geo.Data.ItemReader`2.ReadToTable">
            <summary>
            读取文件，解析为数据表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Data.ItemReader`2.SplitLine(System.String)">
            <summary>
            分离行
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Data.ItemReader`2.ExtraCheck(System.String)">
            <summary>
            其它检查情况，判断是否是合格的内容行。
            主要用于子对象的扩展。
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Data.ItemReader`2.ParseRow(System.String[])">
            <summary>
            解析
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Data.ItemReader`2.InvalidLineCountAfterStartToken">
            <summary>
            起始行标记到内容的多余行数量
            </summary>
        </member>
        <member name="P:Geo.Data.ItemReader`2.TokenOfStartLine">
            <summary>
            起始行标记，其下 InvalidLineCountAfterStartToken 行为数据。
            </summary>
        </member>
        <member name="P:Geo.Data.ItemReader`2.TokenOfEndLine">
            <summary>
            结束行标记。
            </summary>
        </member>
        <member name="P:Geo.Data.ItemReader`2.HasTokenOfStartLine">
            <summary>
            是否有起始行标记。
            </summary>
        </member>
        <member name="P:Geo.Data.ItemReader`2.HasTokenOfEndLine">
            <summary>
            是否有结束行标记
            </summary>
        </member>
        <member name="P:Geo.Data.ItemReader`2.StartTokenOfContentLine">
            <summary>
            内容行的起始标记。即之读取含有标记的行，如gamit globk org 文件。
            </summary>
        </member>
        <member name="P:Geo.Data.ItemReader`2.HasStartTokenOfContentLine">
            <summary>
            是否有内容行的起始标记。
            </summary>
        </member>
        <member name="T:Geo.Data.CoordinateRecord">
            <summary>
            通用三维坐标记录
            </summary>
        </member>
        <member name="P:Geo.Data.GlobkOrgItem.Epoch">
            <summary>
            历元信息
            </summary>
        </member>
        <member name="T:Geo.Data.GlobkOrgCoordFile">
            <summary>
            坐标文件。
            </summary>
        </member>
        <member name="T:Geo.Data.GamitOrgFileReader">
            <summary>
            Gamit Globk org 文件。
            点名点号都认为相同。
            </summary>
        </member>
        <member name="M:Geo.Data.GamitOrgFileReader.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Geo.Data.GamitOrgFileService.#ctor(System.String,System.String)">
            <summary>
            文件数据源构造函数。
            </summary>
            <param name="Option">文件选项</param>
            <param name="name">名称</param>
        </member>
        <member name="M:Geo.Data.GamitOrgFileService.GetNamedXyzs">
            <summary>
            命名的XYZ坐标列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:Geo.Data.PinnacleRepFile">
            <summary>
            Pinnacle REP文件
            </summary>
        </member>
        <member name="T:Geo.Data.PinnacleRepFileReader">
            <summary>
            读取器。只读取XYZ坐标。
            </summary>
        </member>
        <member name="M:Geo.Data.PinnacleRepFileReader.#ctor(System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="T:Geo.Data.PinnacleRepFileService">
            <summary>
            pinacal软件支持
            </summary>
        </member>
        <member name="M:Geo.Data.PinnacleRepFileService.#ctor(System.String,System.String)">
            <summary>
            文件数据源构造函数。
            </summary>
            <param name="Option">文件选项</param>
            <param name="name">名称</param>
        </member>
        <member name="T:Geo.IO.FileWritingState">
            <summary>
            文件写状态
            </summary>
        </member>
        <member name="M:Geo.IO.FileWritingState.#ctor(System.String)">
            <summary>
            构造函数，默认正在写。
            </summary>
            <param name="localPath"></param>
        </member>
        <member name="M:Geo.IO.FileWritingState.WaitWrting">
            <summary>
            等待写结束
            </summary>
        </member>
        <member name="M:Geo.IO.FileWritingState.Update(System.String,System.Boolean)">
            <summary>
            标记是否下载过。
            </summary>
            <param name="path"></param>
            <param name="isDownloaded"></param>
        </member>
        <member name="M:Geo.IO.FileWritingState.Regist(System.String)">
            <summary>
            注册一个，若重复注册，则报错
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:Geo.IO.FileWritingState.IsWrited(System.String)">
            <summary>
            指定来源是否已经写过。
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.FileWritingState.IsAvailable">
            <summary>
            文件是否可用
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.FileWritingState.IsRegisted(System.String)">
            <summary>
            是否已经注册
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.IO.FileWritingState.LocalPath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:Geo.IO.FileWritingState.IsWriting">
            <summary>
            是否正在写
            </summary>
        </member>
        <member name="P:Geo.IO.FileWritingState.Sources">
            <summary>
            来源,并标记是否下过。
            </summary>
        </member>
        <member name="T:Geo.IO.LocaFileWritingManager">
            <summary>
            文件写管理器
            </summary>
        </member>
        <member name="P:Geo.IO.LocaFileWritingManager.Instance">
            <summary>
            单例模式
            </summary>
        </member>
        <member name="T:Geo.IO.FileDownloadingState">
            <summary>
            文件下载状态
            </summary>
        </member>
        <member name="M:Geo.IO.FileDownloadingState.UpdateState(System.Collections.Generic.List{System.String})">
            <summary>
            更新状态信息
            </summary>
            <param name="LocalFiles"></param>
        </member>
        <member name="M:Geo.IO.FileDownloadingState.WaitDownloading">
            <summary>
            等待下载完毕。
            </summary>
        </member>
        <member name="M:Geo.IO.FileDownloadingState.IsNeedToReDownload(System.Int32)">
            <summary>
            是否需要重下
            </summary>
            <param name="maxTryCount"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.IO.FileDownloadingState.Url">
            <summary>
            网址
            </summary>
        </member>
        <member name="P:Geo.IO.FileDownloadingState.IsDownloading">
            <summary>
            是否正在下载
            </summary>
        </member>
        <member name="P:Geo.IO.FileDownloadingState.IsFailed">
            <summary>
            是否下载失败
            </summary>
        </member>
        <member name="P:Geo.IO.FileDownloadingState.TriedCount">
            <summary>
            尝试重下次数
            </summary>
        </member>
        <member name="P:Geo.IO.FileDownloadingState.LocalFiles">
            <summary>
            下载后的本地路径
            </summary>
        </member>
        <member name="T:Geo.IO.FileDownloadingManager">
            <summary>
            文件下载管理器。
            </summary>
        </member>
        <member name="F:Geo.IO.FileDownloadingManager.LocaFileWritingManager">
            <summary>
            文件写入管理器
            </summary>
        </member>
        <member name="F:Geo.IO.FileDownloadingManager.MaxTryCount">
            <summary>
            最大尝试次数
            </summary>
        </member>
        <member name="M:Geo.IO.FileDownloadingManager.DownloadFileOrDirectory(System.String,System.String,System.String)">
            <summary>
            下载文件或目录支持 ftp 目录。
            </summary>
            <param name="url"></param>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.FileDownloadingManager.DoDownload(Geo.IO.FileDownloadingState,System.String,System.String)">
            <summary>
            直接下载,并更新状态。
            </summary>
            <param name="DownloadState"></param>
            <param name="extension"></param>
            <param name="localFolder"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.FileDownloadingManager.DownloadFtpDirecotryOrFile(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            下载目录或文件，返回本地路径。如果重复下载，则直接返回。
            </summary>
            <param name="ftpFolderOrFilePath">路径，含IP地址和端口，若是目录，请以"/"结尾</param>
            <param name="extension">若是目录，则设置，可以以分号分隔多个匹配类型</param>
            <param name="isDownAll">是否下载所有的文件，如果不是，则成成功一个后就停止下载。</param>
            <param name="localFolder"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="throwException"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.FileDownloadingManager.TryDownloadOne(System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            尝试下载一个。
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="IsOverwrite"></param>
            <param name="throwException"></param>
            <param name="localFilePathes"></param>
            <param name="url"></param>
            <param name="localPath"></param>
        </member>
        <member name="M:Geo.IO.FileDownloadingManager.DoDownload(System.Collections.Generic.List{System.String},System.String,Geo.IO.FileWritingState,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            执行下载，并标记状态
            </summary>
            <param name="localFilePathes"></param>
            <param name="url"></param>
            <param name="state"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="IsOverwrite"></param>
            <param name="throwException"></param>
        </member>
        <member name="P:Geo.IO.FileDownloadingManager.Instance">
            <summary>
            单例模式
            </summary>
        </member>
        <member name="T:Geo.TableObjectManagerReader">
            <summary>
            单文件多表对象读取器
            </summary>
        </member>
        <member name="M:Geo.TableObjectManagerReader.#ctor(System.String,System.Text.Encoding)">
            <summary>
            单文件多表对象读取器
            </summary>
            <param name="path"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Geo.TableObjectManagerReader.Read">
            <summary>
            读取
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.TableObjectManagerReader.FilePath">
            <summary>
            文件完整路径
            </summary>
        </member>
        <member name="P:Geo.TableObjectManagerReader.Spliters">
            <summary>
            分割器
            </summary>
        </member>
        <member name="P:Geo.TableObjectManagerReader.HeaderMarkers">
            <summary>
            分割器
            </summary>
        </member>
        <member name="P:Geo.TableObjectManagerReader.ColTypes">
            <summary>
            列类型
            </summary>
        </member>
        <member name="T:Geo.TwoKeyTable`3">
            <summary>
            双键表
            </summary>
        </member>
        <member name="M:Geo.TwoKeyTable`3.#ctor(Geo.TableObjectStorage,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="Table"></param>
            <param name="keyA"></param>
            <param name="keyB"></param>
        </member>
        <member name="M:Geo.TwoKeyTable`3.Init">
            <summary>
            在此完成一些初始化工作。主要包括表的解析。
            </summary>
        </member>
        <member name="M:Geo.TwoKeyTable`3.ParseTable">
            <summary>
            解析表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.TwoKeyTable`3.ParseKeyB(System.Object)">
            <summary>
            解析键值B
            </summary>
            <param name="keyBData"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TwoKeyTable`3.ParseKeyA(System.Object)">
            <summary>
            解析键值A 
            </summary>
            <param name="keyAData"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TwoKeyTable`3.RowToValue(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            解析数据
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TwoKeyTable`3.Get(`0,`1)">
            <summary>
            获取
            </summary>
            <param name="keyA"></param>
            <param name="keyB"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TwoKeyTable`3.Convert``1(System.Object)">
            <summary>
            类型 转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.TwoKeyTable`3.Table">
            <summary>
            数据表
            </summary>
        </member>
        <member name="P:Geo.TwoKeyTable`3.KeyA">
            <summary>
            键值A
            </summary>
        </member>
        <member name="P:Geo.TwoKeyTable`3.KeyB">
            <summary>
             键值B
            </summary>
        </member>
        <member name="P:Geo.TwoKeyTable`3.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:Geo.TableCell">
            <summary>
            表格数据
            </summary>
        </member>
        <member name="M:Geo.TableCell.IsEmpty">
            <summary>
            是否值为空
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.TableCell.ColName">
            <summary>
            列名称
            </summary>
        </member>
        <member name="P:Geo.TableCell.RowNumber">
            <summary>
            行编号，从0开始。
            </summary>
        </member>
        <member name="P:Geo.TableCell.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Geo.TableCell.Tag">
            <summary>
            数据承载用。
            </summary>
        </member>
        <member name="T:Geo.TypedTableStorage`2">
            <summary>
            指定了键值和数值类型的表对象。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Geo.TypedTableStorage`2.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="P:Geo.TypedTableStorage`2.ParamNames">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:Geo.TypedTableStorage`2.CurrentRow">
            <summary>
            当前行,保存在数据中的最新行。具体位置决定于采用的方法，如 Add or Insert 
            </summary>
        </member>
        <member name="T:Geo.TableObjectWriter">
            <summary>
            表对象读取器
            </summary>
        </member>
        <member name="M:Geo.TableObjectWriter.Init">
            <summary>
            初始化，在构造函数之后执行
            </summary>
        </member>
        <member name="M:Geo.TableObjectWriter.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:Geo.TableObjectWriter.CheckBufferOrWriteToFile">
            <summary>
            检查缓存，如果超出最大缓存，则写入到文件并清空。
            </summary>
        </member>
        <member name="M:Geo.TableObjectWriter.EndOfWriting">
            <summary>
            如果写入次数多于1次，则写一行标题，结束。
            </summary>
        </member>
        <member name="M:Geo.TableObjectWriter.WriteToFileAndClearBuffer">
            <summary>
            追加到文件,并清空缓存。
            </summary> 
        </member>
        <member name="M:Geo.TableObjectWriter.WriteBufferToFile">
            <summary>
            写缓存到文件
            </summary>
        </member>
        <member name="M:Geo.TableObjectWriter.CheckOrCreateFile">
            <summary>
            检查输出文件的存在性，如果否，则创建文件。
            </summary>
        </member>
        <member name="M:Geo.TableObjectWriter.CloseStream">
            <summary>
            关闭数据流
            </summary>
        </member>
        <member name="M:Geo.TableObjectWriter.WriteTitleRow">
            <summary>
            写头文件
            </summary>
        </member>
        <member name="M:Geo.TableObjectWriter.ToSplitedValueString(System.Collections.Generic.Dictionary{System.String,System.Double})">
            <summary>
             输出为行
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectWriter.ToSplitedValueString(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            制表符数值
            </summary>
            <param name="values"></param>
            <param name="isTotal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectWriter.ToSplitedValueString(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            终极文本转换方法。
            </summary>
            <param name="values"></param>
            <param name="defaultValue"></param>
            <param name="Spliter"></param>
            <param name="floatFormat"></param>
            <param name="paramNames"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.TableObjectWriter.WrittingCount">
            <summary>
            统计写缓存的次数
            </summary>
        </member>
        <member name="P:Geo.TableObjectWriter.OutputBufferCount">
            <summary>
            采用缓存控制输出。
            </summary>
        </member>
        <member name="P:Geo.TableObjectWriter.FilePath">
            <summary>
            文件完整路径
            </summary>
        </member>
        <member name="P:Geo.TableObjectWriter.Spliters">
            <summary>
            分割器
            </summary>
        </member>
        <member name="P:Geo.TableObjectWriter.TableObjectStorage">
            <summary>
            待写
            </summary>
        </member>
        <member name="T:Geo.TableObjectReader">
            <summary>
            表对象读取器
            </summary>
        </member>
        <member name="M:Geo.TableObjectReader.Read">
            <summary>
            读取
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.TableObjectReader.FilePath">
            <summary>
            文件完整路径
            </summary>
        </member>
        <member name="P:Geo.TableObjectReader.Spliters">
            <summary>
            分割器
            </summary>
        </member>
        <member name="P:Geo.TableObjectReader.ColTypes">
            <summary>
            列类型
            </summary>
        </member>
        <member name="T:Geo.TableObjectStorage">
            <summary>
            参数数值表格管理器，用于表格化输出参数。适合用于存储稀疏表格数据，可以做适当的数据统计和分析。
            当达到指定缓存大小后，将写入文件。而文件最后一行为全部的参数。
            </summary>
        </member>
        <member name="M:Geo.TableObjectStorage.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">名称，也用于文件识别和存储</param>
        </member>
        <member name="M:Geo.TableObjectStorage.#ctor(System.Data.DataTable)">
            <summary>
            采用系统表初始化
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.GetIndexColName">
            <summary>
            获取检索列名称，如果没有指定，则采用第一列的名称。
            </summary>
        </member>
        <member name="M:Geo.TableObjectStorage.GetNamedTypes">
            <summary>
            命名的类型集合。
            </summary>
        </member>
        <member name="M:Geo.TableObjectStorage.BuildIndexes">
            <summary>
            手动建立索引
            </summary>
        </member>
        <member name="M:Geo.TableObjectStorage.GetValue``1(System.Object,System.String,System.Boolean)">
             <summary>
            获取值
             </summary>
             <typeparam name="TValue"></typeparam>
             <param name="indexObject"></param>
             <param name="colName"></param>
             <param name="isUseLastValueIfFailed">失败后，默认返回最后一个。</param>
             <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetFirstIndexValue``1">
            <summary>
            第一个索引对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetLastIndexValue``1">
            <summary>
            最后一个索引对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.Transpose(System.String,System.Boolean)">
            <summary>
            转置
            </summary>
        </member>
        <member name="M:Geo.TableObjectStorage.ReverseRows">
            <summary>
            反转行
            </summary>
        </member>
        <member name="M:Geo.TableObjectStorage.SortColumns">
            <summary>
            排序参数名称
            </summary>
        </member>
        <member name="M:Geo.TableObjectStorage.GetType(System.String)">
            <summary>
            获取指定列的类型
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.NewRow">
            <summary>
            新建一个行，并追加到末尾，如果当前行尚未写值，则不新建。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.InsertNewRow(System.Int32)">
            <summary>
            在指定行插入新行
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.NewRow(Geo.Algorithm.IVector)">
            <summary>
            新建一行。
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.NewRow(Geo.Algorithm.IMatrix)">
            <summary>
            新建一行。
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.AddItem(Geo.Algorithm.IMatrix)">
            <summary>
            添加项目
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.AddItem(Geo.Algorithm.IVector)">
            <summary>
            添加项目
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.AddItem(System.Collections.Generic.Dictionary{System.String,System.Double[]})">
            <summary>
            添加项目
            </summary>
            <param name="keyDic"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.AddItem(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            添加项目
            </summary>
            <param name="keyDic"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.AddItem(System.Collections.Generic.Dictionary{System.String,System.Double})">
            <summary>
            添加项目
            </summary>
            <param name="keyDic"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.AddItem(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            添加项目
            </summary>
            <param name="keyDic"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.AddItem(Geo.BaseDictionary{System.String,System.Object})">
            <summary>
            添加项目
            </summary>
            <param name="keyDic"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.AddItem(Geo.BaseDictionary{System.String,System.Double})">
            <summary>
            添加项目
            </summary>
            <param name="keyDic"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.EndRow">
            <summary>
            结束行，若当前行没有数据，则删除之。
            </summary> 
        </member>
        <member name="M:Geo.TableObjectStorage.AddItem(System.String[],System.Object[])">
            <summary>
            添加一组项目
            </summary>
            <param name="names"></param>
            <param name="vals"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.AddItem(System.Object,System.Object)">
            <summary>
            添加一个项目
            </summary>
            <param name="name"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.AddItem(System.String,System.Object)">
            <summary>
            添加一个项目
            </summary>
            <param name="name"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.Regist(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            注册
            </summary>
            <param name="names"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.Regist(System.String)">
            <summary>
            注册
            </summary>
            <param name="colName"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.Regist(System.String,System.String)">
            <summary>
            注册
            </summary>
            <param name="mainName"></param>
            <param name="subName"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.Regist(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            注册
            </summary>
            <param name="mainName"></param>
            <param name="subNames"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.PipleFilterWithLastValues(System.Double)">
            <summary>
            以最后数据为依据，超过指定数值的滤掉。
            </summary>
            <param name="radius"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.PipleFilter(System.String,System.Double,System.Double)">
            <summary>
            管道滤波，移除范围外的数据
            </summary>
            <param name="colName"></param>
            <param name="center"></param>
            <param name="radius"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.ReductValuesTo(System.Double,System.Double,System.Boolean)">
            <summary>
            将所有的列归算到指定的周期区间。
            </summary> 
            <param name="period"></param>
            <param name="reference">第一个参数的参考值，后续可更新为第一个的平均数</param>
            <param name="isUpdateRefer">是否更新参考值</param>
        </member>
        <member name="M:Geo.TableObjectStorage.ReductValuesTo(System.String,System.Double,System.Double)">
            <summary>
            将指定的列归算到指定的区间。
            返回实际的归算值，可以作为下一个的参考值，但可能造成整体性偏差。
            </summary>
            <param name="paramName"></param>
            <param name="period"></param>
            <param name="reference"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.GetSmoothedTable(System.Double,System.Boolean,System.String,System.Boolean)">
            <summary>
            获取平滑后的数据。所有当初白噪声，采用一维卡拉曼滤波平滑。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetBuffer(System.String,System.Int32,System.Int32,System.Boolean,System.Double)">
            <summary>
            获取缓存
            </summary>
            <param name="colName"></param>
            <param name="isSkipZero"></param>
            <param name="isSkipNonNumerial"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetColObjectDicByObjIndex(System.String,System.Object,System.Object)">
            <summary>
            获取指定列的数据
            </summary>
            <param name="colName"></param>
            <param name="fromIndexValue"></param>
            <param name="toIndexValue">含</param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetColObjectDic(System.String,System.Int32,System.Int32)">
            <summary>
            获取列对象字典，key为索引，Value为值。
            </summary>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetColObjects(System.String)">
            <summary>
            获取列对象
            </summary>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetColStrings(System.String)">
            <summary>
            获取列,数值以字符串保存。
            </summary>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetRow(System.Int32)">
            <summary>
            获取指定行
            </summary>
            <param name="index"></param> 
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetRows(System.Int32,System.Int32)">
            <summary>
            获取指定行
            </summary>
            <param name="fromIndex">包含</param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetTableAllColMinusFirstValid">
            <summary>
            所有列，减去第一个有效数据。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetTableAllColMinusLastValid">
            <summary>
            所有列，减去最后一个有效数据。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetTableDifferPrevValue">
            <summary>
            差分表格。后一行，减去前一行。如果前一行没有数据，则不减，该行值置0。
            如果前行无数据，则不减。
            编号以第二行为准。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetTableByMinusCol(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            返回新的表通过减去指定的列。如果指定咧没有数据，则跳过
            </summary>
            <param name="substractorColName"></param>
            <param name="tablePostfixName"></param>
            <param name="isReplacePrevPosfix">是否移除当前表格的后缀</param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.UpdateAllByOperateCol(System.String,Geo.NumeralOperationType)">
            <summary>
            所有行操作指定列。
            </summary>
            <param name="colName"></param>
            <param name="numeralOperationType"></param>
            <param name="numeralOperationType"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.UpdateAllByMinusCol(System.String)">
            <summary>
            减去指定列
            </summary>
            <param name="paramName"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.UpdateAllByOperateCol(System.String,System.Func{System.Double,System.Double,System.Double})">
            <summary>
            减去指定列
            </summary>
            <param name="paramName"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.UpdateAllBy(System.Double,Geo.NumeralOperationType)">
            <summary>
            数据操作。
            </summary>
            <param name="colName"></param>
            <param name="val"></param>
            <param name="numeralOperationType"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.UpdateAllBy(System.Double,System.Func{System.Double,System.Double,System.Double})">
            <summary>
            操作指定列
            </summary>
            <param name="val"></param>
            <param name="funcOper"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.UpdateColumnBy(System.String,System.Double,Geo.NumeralOperationType)">
            <summary>
            数据操作。
            </summary>
            <param name="colName"></param>
            <param name="val"></param>
            <param name="numeralOperationType"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.UpdateColumnByPlus(System.String,System.Double)">
            <summary>
            更新参数值通过加上一个数。
            </summary>
            <param name="paramName"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.UpdateColumnByMinus(System.String,System.Double)">
            <summary>
            更新参数值通过加上一个数。
            </summary>
            <param name="paramName"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.UpdateColumnByMultiply(System.String,System.Double)">
            <summary>
            更新参数值通过加上一个数。
            </summary>
            <param name="paramName"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.UpdateColumnBy(System.String,System.Double,System.Func{System.Double,System.Double,System.Double})">
            <summary>
            更新参数值通过加上一个数。
            </summary>
            <param name="paramName"></param>
            <param name="currentVal"></param>
            <param name="funcOper"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.GetValidDataCount(System.Func{System.Double,System.Boolean})">
            <summary>
            对各列有效数据进行统计。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetValidDataCount(System.String,System.Func{System.Double,System.Boolean})">
            <summary>
            列有效数据进行统计。
            </summary>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetCount(System.Func{System.Double,System.Boolean})">
            <summary>
            对所有列的数据进行统计。必须指定条件。
            </summary>
            <param name="Condition"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetCount(System.String,System.Func{System.Double,System.Boolean})">
            <summary>
            统计指定列满足条件的内容。
            </summary>
            <param name="colName"></param>
            <param name="Condition"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetSequentialCountOfAllCol``1(System.Func{System.Double,System.Boolean})">
            <summary>
            获取连续数量
            </summary>
            <typeparam name="TIndexType"></typeparam>
            <param name="Condition"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetFirstSlopeApproxTo``1(System.String,System.Double,``0,System.Boolean)">
            <summary>
            对于有趋势性的线条，获取第一个接近某值的Cell。通过符号反向判断。
            </summary>
            <typeparam name="TIndexType"></typeparam>
            <param name="colName"></param>
            <param name="valu"></param>
            <param name="start"></param>
            <param name="isUpOrDown">朝上或朝下接近</param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetCellApproxTo``1(System.String,System.Double,``0,``0,System.Boolean)">
            <summary>
            获取最接近某值的表格
            </summary>
            <typeparam name="TIndexType"></typeparam>
            <param name="colName"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetMaxValue``1(System.String,``0,``0)">
            <summary>
            获取区域内最大的值
            </summary>
            <typeparam name="TIndexType"></typeparam>
            <param name="colName"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetMaxCell``1(System.String,``0,``0)">
            <summary>
            获取区域内最大的值
            </summary>
            <typeparam name="TIndexType"></typeparam>
            <param name="colName"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetSequentialCount``1(System.String,System.Func{System.Double,System.Boolean})">
            <summary>
            统计指定列满足条件,且连续的内容。
            </summary>
            <param name="colName"></param>
            <param name="Condition"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetAverageAndAppendToTable">
            <summary>
            计算所有列的平均数，并且追加到追加到表格最后。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetAveragesWithStdDevAndAppendToTable">
            <summary>
            计算平均值和均方差，添加到表格尾部，并返回。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetAveragesWithStdDev(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32)">
            <summary>
            返回平均数和均方差，第二个为均方差，中误差。如果不是数字，则不返回。
            </summary>
            <param name="paramNames"></param>
            <param name="from"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetAverageWithStdDev(System.String,System.Int32,System.Int32)">
            <summary>
            返回平均数和均方差，第二个为均方差，中误差。如果不是数字，则不返回。
            </summary>
            <param name="paramName"></param>
            <param name="from"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetAverage(System.String,System.Int32,System.Int32)">
            <summary>
            获取平均数。如果不是数字，返回 NaN。
            </summary>
            <param name="paramName"></param>
            <param name="from"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetAverages(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32)">
            <summary>
            获取平均值。如果不是数字，则不返回。
            </summary>
            <param name="paramNames"></param>
            <param name="from"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetAverageOfLastValueOfAllCols(System.Int32,System.Double,System.Double)">
            <summary>
            查找所有列的最后值，并返回其平均值。不一定是同一行。
            </summary>
            <param name="ignoreRowCountLessThan">忽略行数量少于此的列,不含</param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetAverageOfLastValueWithStdDevOfAllCols(System.Int32,System.Double,System.Double)">
            <summary>
            查找所有列的最后值，并返回其平均值。不一定是同一行。
            </summary>
            <param name="ignoreRowCountLessThan">忽略行数量少于此的列,不含</param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetLastValueOfAllCols(System.Int32)">
            <summary>
            查找所有列的最后值，并返回其平均值。不一定是同一行。
            </summary>
            <param name="ignoreRowCountLessThan">忽略行数量少于此的列,不含</param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetValidRowCount(System.String)">
            <summary>
            统计指定列有效数据（行）个数。
            </summary>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetLastValue(System.String)">
            <summary>
            获取指定列最后不为空的值。
            </summary>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetAverageOfRow(System.Int32)">
            <summary>
            获取某行的平均值。如果该列无数值，则不参与计算。
            </summary>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetVector(System.String,System.Int32,System.Int32,System.Boolean,System.Double)">
            <summary>
            返回列数据，变量数组.如果无法解析，则返回为空数组。
            </summary>
            <param name="paramName">参数名称</param>
            <param name="from">起始编号</param>
            <param name="count">截取数量</param>
            <param name="defaultValue">默认数值，如果无效数值，则解析失败后以其填充</param>
            <param name="isSkipNonNumerial">是否忽略非浮点数数据</param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.RemoveMinorityValueOfEachCol">
            <summary>
            遍历移除每一列非最大值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.RemoveMinorityValueOfCol(System.String)">
            <summary>
            只保留最大的数值，其它移除，返回移除数量
            </summary>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetNumeralValueCount(System.String)">
            <summary>
            计算指定列数值出现的次数。 
            </summary>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.IsDecimal(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            是否是数字，整型，浮点数等。
            </summary>
            <param name="keyDic"></param>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.IsEmptyObject(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            是否没有值，或值为空null或空白。。
            </summary>
            <param name="keyDic"></param>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetVectorsAvailable(System.Int32,System.Int32)">
            <summary>
            返回所有的可用数据(忽略不可用数据)，编号可能已经混乱。
            </summary>
            <param name="from"></param>
            <param name="count"></param> 
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetVectors(System.Int32,System.Int32,System.Boolean,System.Double)">
            <summary>
            返回所有的数据
            </summary>
            <param name="from"></param>
            <param name="count"></param>
            <param name="isSkipNonNumerial"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetVectors(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.Boolean,System.Double)">
            <summary>
            返回表格数据,如果获取失败，则忽略。
            </summary>
            <param name="paramNames"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.ToTextTable">
            <summary>
            文本显示
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.ToLines(System.Collections.Generic.List{Geo.Algorithm.Vector})">
            <summary>
            行
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.ToSplitedValueString(Geo.Algorithm.Vector)">
            <summary>
            字符串
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.ToSplitedTitleString(System.String,System.Boolean)">
            <summary>
            制表位分隔的题目
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetTextTable(System.String,System.String,System.String)">
            <summary>
            获取文本表格
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetDataTable(System.String,System.Boolean,System.Boolean)">
            <summary>
            返回数据表格，用于显示。
            </summary>
            <param name="tableName">表名称</param>
            <param name="isDefaultEmpty">默认是否是空</param>
            <param name="isTotal">是否所有</param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.ToSplitedValueString(System.Collections.Generic.Dictionary{System.String,System.Double})">
            <summary>
             输出为行
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.ToSplitedValueString(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            制表符数值
            </summary>
            <param name="values"></param>
            <param name="isTotal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetTitleNames(System.Boolean)">
            <summary>
            取得所有标题。
            </summary>
            <param name="isTotal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.EmptyFrontValueOfCols(System.Int32)">
            <summary>
            清空指定列开始的数据。
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.EmptyFrontValueOfCol(System.String,System.Int32)">
            <summary>
            清空指定列开始的数据。
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.RemoveColString(System.String[])">
            <summary>
            移除列名称中的字符串
            </summary>
            <param name="tobeRemoved"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetReplacedColNameTable(System.String,System.String)">
            <summary>
            移除列名称包含的字。
            </summary>
            <param name="oldStr"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.RemoveCols(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            移除指定列
            </summary>
            <param name="colNames"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.RemoveCol(System.String)">
            <summary>
            移除指定列
            </summary>
            <param name="colName"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.RemoveEmptyRowsOf(System.String)">
            <summary>
            移除指定列为空的行。
            </summary>
            <param name="colName"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.RemoveEmptyRows">
            <summary>
            移除为空的行。
            </summary>
        </member>
        <member name="M:Geo.TableObjectStorage.RemoveRowsWithRegistDataLessThan(System.Double,System.Boolean)">
            <summary>
            移除注册数据少于指定百分比的行，含检索列
            </summary>
            <param name="percentageOrCount"></param>
            <param name="isPercentage"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.RemoveRowsWithFilter(System.String,System.Double,Geo.NumeralCompareOperator)">
            <summary>
             移除行，当指定列满足要求
            </summary>
            <param name="colName"></param>
            <param name="val"></param>
            <param name="numeralCompareOperator"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.RemoveRowsWithFilter(System.String,System.Func{System.Double,System.Boolean})">
            <summary>
            移除行，当对应指定列满足要求
            </summary>
            <param name="colName"></param>
            <param name="funcFilter">过滤返回false的</param> 
        </member>
        <member name="M:Geo.TableObjectStorage.RemoveRowsWithFilter(System.Double,Geo.NumeralCompareOperator)">
            <summary>
             移除行，当列某满足要求
            </summary>
            <param name="val"></param>
            <param name="numeralCompareOperator"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.RemoveRowsWithFilter(System.Func{System.Double,System.Boolean})">
            <summary>
            移除行，当对应某列满足要求
            </summary>
            <param name="colName"></param>
            <param name="funcFilter">过滤返回false的</param> 
        </member>
        <member name="M:Geo.TableObjectStorage.RemoveRows(System.Collections.Generic.List{System.Int32})">
            <summary>
            移除指定行
            </summary>
            <param name="tobeRemoveIndexes"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.RemoveRows(System.Int32,System.Int32)">
            <summary>
            移除指定行
            </summary>
            <param name="tobeRemoveIndexes"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.RemoveEmptyCols">
            <summary>
            移除空列
            </summary>
        </member>
        <member name="M:Geo.TableObjectStorage.IsEmptyCol(System.String)">
            <summary>
            是否为空列
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.IsEmptyObject(System.Object)">
            <summary>
            数据值是否为空。默认浮点数0位空。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.RemoveCycleSlipe(System.Double)">
            <summary>
            采用最简单的方法移除周跳。默认为数据应该变化很小，不超过一周。
            可以有效移除陡峭的跳变。
            </summary>
        </member>
        <member name="M:Geo.TableObjectStorage.Clear">
            <summary>
            清空重新来过
            </summary>
        </member>
        <member name="M:Geo.TableObjectStorage.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:Geo.TableObjectStorage.ToString">
            <summary>
            字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetIndexValues(System.Boolean)">
            <summary>
            获取检索列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetIndexValues``1">
            <summary>
            获取检索列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetEachRowCount``1(System.Func{System.Double,System.Boolean})">
            <summary>
            对所有列有效数据进行统计。
            </summary>
            <param name="Condition">条件</param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetPeriodPipeFilterTable(System.Double,System.Double,System.Boolean,System.String,System.Boolean)">
            <summary>
            将数据规划到一个区间。可能出现的问题是：如果在周期边界，可能出现分离现象。
            此处采用了二次判断方法，避免该情况。
            </summary>
            <param name="period"></param>
            <param name="referenceVal"></param>
            <param name="isInReversedOrder"></param>
            <param name="nameSuffix"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetMaxDifferOfLastValue">
            <summary>
            获取最后一行的最相差值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetTableByMultiply(System.Double,System.Boolean,System.String)">
            <summary>
            对除了检索的所有数据乘以一个数，并返回新表。
            </summary>
            <param name="isReplacePrevPosfix">是否替换以前的后缀名</param>
            <param name="multiplier"></param>
            <param name="nameSuffix"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetNewTableByDivision(System.Double,System.Boolean,System.String)">
            <summary>
            所有数字除以一个数字,返回新表
            </summary>
            <param name="isReplacePrevPosfix">是否替换以前的后缀名</param>
            <param name="divisor"></param>
            <param name="nameSuffix"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetTableByMinus(System.Double,System.Boolean,System.String)">
            <summary>
            所有可数字减去一个数字,返回新表
            </summary>
            <param name="isReplacePrevPosfix">是否替换以前的后缀名</param>
            <param name="substractor"></param>
            <param name="nameSuffix"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetIntByMinusAndRound(Geo.TableObjectStorage,System.String,System.Boolean)">
            <summary>
            获取整数。通过减去一个表并四舍五入取整。
            </summary>
            <param name="tableB"></param>
            <param name="tableNamePostfix"></param>
            <param name="isReplacePrevPosfix"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetIntTable(System.Boolean,System.String,System.Boolean)">
            <summary>
            将所有浮点数取为整数。
            </summary> 
            <param name="isRoundOrTrim"></param> 
            <param name="nameSuffix"></param> 
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.HandleAllNumeralCellValue(System.Func{System.String,System.Double,System.Double},System.Boolean,System.String,System.Boolean)">
            <summary>
            遍历处理除了检索外的所有数字。
            </summary>
            <param name="func"></param>
            <param name="nameSuffix"></param> 
            <param name="isInReversedOrder"></param> 
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.HandleAllNumeralCellValue(Geo.TableObjectStorage,System.Func{System.String,System.Double,System.Double},System.Boolean,System.String,System.Boolean)">
            <summary>
            遍历处理除了检索外的所有数字。
            </summary>
            <param name="table"></param>
            <param name="func"></param>
            <param name="nameSuffix"></param> 
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.HandleAllNumeralCellValue``1(Geo.TableObjectStorage,System.Func{System.String,System.Double,``0},System.Boolean,System.String,System.Boolean)">
            <summary>
            建立新表，遍历处理除了检索外的所有数字。
            </summary>
            <param name="table"></param>
            <param name="func"></param>
            <param name="nameSuffix">名称后缀</param> 
            <param name="isInReversedOrder">是否逆序，遍历</param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.HandleSameNumeralCellValue(Geo.TableObjectStorage,System.Func{System.Double,System.Double,System.Double},System.String)">
            <summary>
            对两个表相同位置的数据进行计算，并返回新表。
            </summary>
            <param name="tableB"></param>
            <param name="Func"></param>
            <param name="newTableName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.HandleSameNumeralCellValue(Geo.TableObjectStorage,Geo.TableObjectStorage,System.Func{System.Double,System.Double,System.Double},System.String)">
            <summary>
            对两个表相同位置的数据进行计算，并返回新表。
            </summary>
            <param name="Func">封装的函数</param>
            <param name="tableA"></param>
            <param name="tableB"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.HandleNumeralRow(System.String,System.Action{System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object},System.Double},System.Int32,System.Int32)">
            <summary>
            遍历处理非空浮点数列。
            </summary>
            <param name="colName"></param>
            <param name="Action"></param>
            <param name="fromIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.HandleRow(System.String,System.Action{System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object},System.Int32,System.Int32)">
            <summary>
            遍历非空数值的指定列
            </summary>
            <param name="Action"></param>
            <param name="fromIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.HandleNumeralCell(System.Action{System.String,System.Int32,System.Double},System.Int32,System.Int32)">
            <summary>
            遍历除了检索外的所有非空数值的指定列
            </summary>
            <param name="Action"></param>
            <param name="fromIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.HandleCell(System.Action{System.String,System.Int32,System.Object},System.Int32,System.Int32)">
            <summary>
            遍历处理除了检索外的所有非空值
            </summary>
            <param name="Action"></param>
            <param name="fromIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.GetNumeral(System.Int32,System.String)">
            <summary>
            获取浮点数。错误则返回NaN
            </summary>
            <param name="i"></param>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetIndexValue(System.Int32)">
            <summary>
            获取索引指定行、列值
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetRowIndexOfIndexCol(System.Object)">
            <summary>
            获取索引的行号编号，从0开始。
            </summary>
            <param name="indexValue"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetRow(System.Object)">
            <summary>
            获取行,没有找到则返回null
            </summary>
            <param name="indexValue"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.SynchronizeIndexes(Geo.TableObjectStorage)">
            <summary>
            同步索引,删除参数中没有的行。
            </summary>
            <param name="tableObjectStorage"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.GetAppendColTable(Geo.TableObjectStorage,System.String,System.String,System.Boolean)">
            <summary>
            合并表格数据，返回新表，后表数据列追加。
            </summary>
            <param name="table"></param>
            <param name="appdenColPostfix"></param>
            <param name="nameSuffix"></param> 
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetMax(System.IComparable,System.IComparable)">
            <summary>
            获取指定列区域的最大值的列和行号
            </summary> 
            <param name="fromIndex"></param>
            <param name="toIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetMax(System.Int32,System.Int32)">
            <summary>
            获取指定列区域的最大值的列和行号
            </summary>
            <param name="colName"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetSub(System.Object,System.Object,System.String,System.Boolean)">
            <summary>
            获取子表，共享 NameListManager
            </summary>
            <param name="fromIndexValue"></param>
            <param name="toIndexValue"></param>
            <param name="namePostfix"></param>
            <param name="isReplaseSuffixName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetAndAppendSumToTable">
            <summary>
            各个列结果的和附在最后。并返回字典。
            </summary>
        </member>
        <member name="M:Geo.TableObjectStorage.GetCascadeTransferValues(System.String)">
            <summary>
            获取基准列中，各个基准数值的关系列表
            </summary>
            <param name="baseCol"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetBasicFractionCascadeTransTable(Geo.TableObjectStorage,System.String,System.String)">
            <summary>
            提取最基本的小数传递表,只保留基本传递列。
            </summary>
            <param name="baseColName">链表列的名称</param>
            <param name="originalTransTable">原始链表列数据</param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetFirstValidValue">
            <summary>
            获取各列第一个有效值。
            </summary> 
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetLastValidValue">
            <summary>
            获取各列最后一个有效值。
            </summary> 
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetFirstValue(System.String)">
            <summary>
            获取包含指定列第一个值
            </summary>
            <param name="colName"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetFirstRowWithValue(System.String,System.Object)">
            <summary>
            获取包含指定列和指定数值的第一行
            </summary>
            <param name="colName"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetLastRowWithValue(System.String,System.Object)">
            <summary>
            获取包含指定列和指定数值的最后一行
            </summary>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetLastValidValue(System.String)">
            <summary>
            获取指定列最后一行是有效数值的数值
            </summary>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetCascadePlusTransferTable(Geo.TableObjectStorage,System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>
            获取级联更新表。
            </summary>
            <param name="basicTansTable"></param> 
            <param name="nameSuffix"></param>
            <param name="isReplacePrevPosfix"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.GetCascadeTransferValue(Geo.TableObjectStorage,System.String,System.String,System.Double)">
            <summary>
            获取传递
            </summary>
            <param name="fromNode">传递到的节点</param>
            <param name="toBaseNode">基础节点，终点</param>
            <param name="initTransferValue"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.RemoveRowCountLessThan(System.Int32,System.Func{System.Double,System.Boolean})">
            <summary>
            移除有效数据（行数）少于指定数的列
            </summary>
            <param name="minRowCount"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.FillIndexes">
            <summary>
            把检索列填满,避免空隙
            </summary>
        </member>
        <member name="M:Geo.TableObjectStorage.RemoveColWithLastValOffCenter(System.Double,System.Boolean)">
            <summary>
            移除最后值偏离中心的列。
            </summary>
            <param name="offCenter"></param>
            <param name="loop"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.GetAverageOfLastValueOfAllCols">
            <summary>
            获取所有列最后数据的平均数
            </summary>
        </member>
        <member name="M:Geo.TableObjectStorage.SynchronizeCol(Geo.TableObjectStorage)">
            <summary>
            同步表，删除多余列
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Geo.TableObjectStorage.RemoveColsOfUneven">
            <summary>
            移除不平坦的列，即所有列的行的内容应该为相同的数据。
            </summary>
        </member>
        <member name="M:Geo.TableObjectStorage.MinusNext``1(System.String,``0)">
            <summary>
            当前减去下一个的数值，若已经到头，则返回 0 。
            若分double 返回 NAN
            </summary>
            <param name="colName"></param>
            <param name="startTime"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectStorage.AddItem(System.Collections.Generic.List{System.String})">
            <summary>
            增加列表，有的为true。
            </summary>
            <param name="list"></param>
        </member>
        <member name="P:Geo.TableObjectStorage.FirstIndex">
            <summary>
            第一个检索
            </summary>
        </member>
        <member name="P:Geo.TableObjectStorage.SecondIndex">
            <summary>
            第一个检索
            </summary>
        </member>
        <member name="P:Geo.TableObjectStorage.LastIndex">
            <summary>
            最后一个检索
            </summary>
        </member>
        <member name="P:Geo.TableObjectStorage.FirstRow">
            <summary>
            第一行
            </summary>
        </member>
        <member name="P:Geo.TableObjectStorage.SecondRow">
            <summary>
            第2行
            </summary>
        </member>
        <member name="P:Geo.TableObjectStorage.LastRow">
            <summary>
            最后一行
            </summary>
        </member>
        <member name="P:Geo.TableObjectStorage.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Geo.TableObjectStorage.IndexColName">
            <summary>
            检索列名称。
            </summary>
        </member>
        <member name="P:Geo.TableObjectStorage.ParamNames">
            <summary>
            参数名称顺序
            </summary>
        </member>
        <member name="P:Geo.TableObjectStorage.NameListManager">
            <summary>
            名称列表管理器
            </summary>
        </member>
        <member name="P:Geo.TableObjectStorage.BufferedValues">
            <summary>
            缓存的数据,核心存储
            </summary>
        </member>
        <member name="P:Geo.TableObjectStorage.CurrentRow">
            <summary>
            当前行,保存在数据中的最新行。具体位置决定于采用的方法，如 Add or Insert 
            </summary>
        </member>
        <member name="P:Geo.TableObjectStorage.ColCount">
            <summary>
            参数数量。列数。
            </summary>
        </member>
        <member name="P:Geo.TableObjectStorage.RowCount">
            <summary>
            行数。
            </summary>
        </member>
        <member name="P:Geo.TableObjectStorage.IndexOfLastRow">
            <summary>
            最后一行的编号
            </summary>
        </member>
        <member name="P:Geo.TableObjectStorage.Indexes">
            <summary>
            索引
            </summary>
        </member>
        <member name="P:Geo.TableObjectStorage.HasIndexes">
            <summary>
            是否建立了索引。
            </summary>
        </member>
        <member name="P:Geo.TableObjectStorage.Item(System.Object,System.String)">
            <summary>
            返回单元格数据，若无返回null,默认以第一个
            </summary>
            <param name="indexObject"></param>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.TableObjectStorage.Item(System.String)">
            <summary>
            返回指定列的数据
            </summary>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.TableObjectStorage.IsEmpty">
            <summary>
            表是否没有数据
            </summary>
        </member>
        <member name="T:Geo.TableObjectManager">
            <summary>
            表数据管理器。
            </summary>
        </member>
        <member name="M:Geo.TableObjectManager.#ctor(System.Collections.Generic.IDictionary{System.String,Geo.TableObjectStorage},System.Int32,System.String,System.String)">
            <summary>
            采用字典数据直接初始化
            </summary>
            <param name="keyDic"></param>
            <param name="OutputBufferCount">缓存数量，达到后将写入文件</param>
            <param name="directory">存储目录</param>
            <param name="Name">表名称</param>
        </member>
        <member name="M:Geo.TableObjectManager.#ctor(System.String,System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="OutputBufferCount">缓存数量，达到后将写入文件</param>
            <param name="directory">存储目录</param>
            <param name="Name">表名称</param>
        </member>
        <member name="M:Geo.TableObjectManager.#ctor(System.Int32,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="OutputBufferCount">缓存数量，达到后将写入文件</param>
            <param name="directory">存储目录</param>
            <param name="Name">表名称</param>
        </member>
        <member name="M:Geo.TableObjectManager.CreateNew(System.String)">
             <summary>
            按照当前路径和缓存大小，建立一个新管理器。
             </summary>
             <param name="newName"></param>
             <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.CreateNew(System.Collections.Generic.IDictionary{System.String,Geo.TableObjectStorage},System.String)">
            <summary>
            以当前目录和缓存数量创建一个新的管理器
            </summary>
            <param name="keyDic"></param>
            <param name="newName"></param>
            <returns></returns>
        </member>
        <member name="F:Geo.TableObjectManager.TableExtention">
            <summary>
            后缀
            </summary>
        </member>
        <member name="M:Geo.TableObjectManager.ReverseAllRows">
            <summary>
            逆序所有行
            </summary>
        </member>
        <member name="M:Geo.TableObjectManager.ReductValuesTo(System.Double,System.Double)">
            <summary>
            将所有的列归算到指定的区间。
            </summary>
            <param name="paramName"></param>
            <param name="period"></param>
            <param name="reference"></param>
        </member>
        <member name="M:Geo.TableObjectManager.Clear">
            <summary>
            清空存储。
            </summary>
        </member>
        <member name="M:Geo.TableObjectManager.ClearParamNames">
            <summary>
            清空已经注册的名称列表
            </summary>
        </member>
        <member name="M:Geo.TableObjectManager.Add(Geo.TableObjectStorage)">
            <summary>
            添加一个表，以表名为关键字。
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Geo.TableObjectManager.Add(System.String,Geo.TableObjectStorage)">
            <summary>
            添加一个表。
            </summary>
            <param name="keyPrev"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.TableObjectManager.Contains(System.String)">
            <summary>
            是否包含
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.Create(System.String)">
            <summary>
            创建一个表
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.AddTable(System.String)">
            <summary>
            新建，添加一个数据表,自动设置存储路径。
            </summary>
            <param name="tableName">表名称，以此写为文件，如 Params.xls;如果没有xls后缀，系统将自动添加一个。</param>
        </member>
        <member name="M:Geo.TableObjectManager.AddTable(System.String,Geo.TableObjectStorage)">
            <summary>
            添加表
            </summary>
            <param name="tableName"></param>
            <param name="table"></param>
        </member>
        <member name="M:Geo.TableObjectManager.AddTable(Geo.TableObjectStorage)">
            <summary>
            添加表
            </summary>
            <param name="tableName"></param>
            <param name="table"></param>
        </member>
        <member name="M:Geo.TableObjectManager.WriteAsOneFile(System.String,System.String,System.String)">
            <summary>
            写入AllInOne文件。
            </summary>
            <param name="fileName"></param>
            <param name="headerMarker"></param>
            <param name="spliter"></param>
        </member>
        <member name="M:Geo.TableObjectManager.GetMaxTableRowCount">
            <summary>
            获取最长表行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.WriteAllToFileAndCloseStream">
            <summary>
            采用默认文件名，写入并关闭数据流
            </summary>
        </member>
        <member name="M:Geo.TableObjectManager.WriteAllToFileAndClearBuffer">
            <summary>
            采用默认文件名，写入,并清空缓存。
            </summary>
        </member>
        <member name="M:Geo.TableObjectManager.WriteTable(Geo.TableObjectStorage)">
            <summary>
            写一个表
            </summary>
            <param name="storage"></param>
        </member>
        <member name="M:Geo.TableObjectManager.GetReplacedColNameTable(System.String,System.String)">
            <summary>
            替换指定字符
            </summary>
            <param name="oldStr"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.GetRemoveColNameTable(System.String[])">
            <summary>
            替换指定字符
            </summary>
            <param name="tobeRemoved"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.GetSmoothedTable(System.Double,System.Boolean,System.String,System.Boolean)">
            <summary>
            完全平滑
            </summary>
            <param name="maxError">最大误差</param>
            <param name="isAsWhole">是否全局考虑</param>
            <param name="namePostfix">表后缀</param>
            <param name="isReplaceNamePosfix">是否移除之前的后缀</param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.GetPeriodPipeFilterTable(System.Double,System.Double,System.Boolean,System.String,System.Boolean)">
            <summary>
            将数据规划到一个区间。可能出现的问题是：如果在周期边界，可能出现分离现象。
            </summary>
            <param name="period"></param>
            <param name="referenceVal"></param>
            <param name="isInReversedOrder"></param>
            <param name="nameSuffix"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.Get(System.String)">
            <summary>
            获取表格，如果匹配失败，则分割后继续比较，分隔符在 TableNameHelper 中指定，通常为下划线“_”
            </summary>
            <param name="keyPrev"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.GetValidDataCount(System.Func{System.Double,System.Boolean},System.String)">
            <summary>
            对同名列进行统计，返回表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.GetNewByMinusCol(System.String,System.String,System.Boolean)">
            <summary>
            获取减去一个列的新表。
            </summary>
            <param name="colNameOfSubtractor"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.SetIndexColName(System.String)">
            <summary>
            设置统一的IndexColName
            </summary>
            <param name="indexColName"></param>
        </member>
        <member name="M:Geo.TableObjectManager.GetIndexesOfAllTables">
            <summary>
            获取包含所有表行的Index列。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.GetIndexesOfAllTables``1">
            <summary>
            获取包含所有表行的Index列。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.GetColNamesOfAllTables">
            <summary>
            获取包含所有表列名称。
            </summary> 
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.GetSameColAssembledTableManager(System.String)">
            <summary>
            将相同列合并到一个表格中，标题以不同表名称命名。
            提取所有表格的检索和所有表的名称作为新表的行和列。老表名称为新表的列，新表的列为老表的名称。
            </summary> 
            <param name="tableNamePostfix"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.GetSameColAssembledTableManager(System.String,System.String)">
            <summary>
            将相同列合并到一个表格中，标题以不同表名称命名。
            以其中一个表格为基准。老表名称为新表的列，新表的列为老表的名称。
            </summary> 
            <param name="baseTableName"></param>
            <param name="tableNamePostfix"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.GetSameColAssembledTableManager(System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.String},System.String)">
            <summary>
             将相同列合并到一个表格中，标题以不同表名称命名。
            </summary>
            <param name="indexes"></param>
            <param name="colNames"></param>
            <param name="tableNamePostfix"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.GetIndexColName">
            <summary>
            获取检索列名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.RemoveEmptyRows">
            <summary>
            移除空行。编号列由数据也要移除。
            </summary>
        </member>
        <member name="M:Geo.TableObjectManager.RemoveRowsWithRegistDataLessThan(System.Double,System.Boolean)">
            <summary>
            移除注册数据少于指定百分比的行.
            </summary>
            <param name="percentageOrCount"></param>
            <param name="isPercentage"></param>
        </member>
        <member name="M:Geo.TableObjectManager.SynchronizeIndexes(Geo.TableObjectManager)">
            <summary>
            同步索引,删除参数中没有的行。
            </summary>
            <param name="intWideLaneValues"></param>
        </member>
        <member name="M:Geo.TableObjectManager.GetNewTableByMultiply(System.Double,System.Boolean,System.String)">
            <summary>
            chengfa
            </summary>
            <param name="multiplier"></param>
            <param name="nameSuffix"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.GetNewTableByDivision(System.Double,System.Boolean,System.String)">
            <summary>
            DiviDivisor
            </summary>
            <param name="divisor"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.HandleSameCellFloatCellValue(Geo.TableObjectManager,System.Func{System.Double,System.Double,System.Double},System.String)">
            <summary>
            对两个表相同位置的数据进行计算，并返回新表。
            </summary>
            <param name="tableBManager"></param>
            <param name="Func"></param>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.HandleSameNumeralCellValue(Geo.TableObjectManager,Geo.TableObjectManager,System.Func{System.Double,System.Double,System.Double},System.String)">
            <summary>
            对两个表相同位置的数据进行计算，并返回新表。
            </summary>
            <param name="tableAManager"></param>
            <param name="tableBManager"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.RemoveEmptyRowsOf(System.String)">
            <summary>
            移除指定列为空的行。
            </summary>
            <param name="basePrn"></param>
        </member>
        <member name="M:Geo.TableObjectManager.RemoveEmptyCols">
            <summary>
            移除所有空列
            </summary>
        </member>
        <member name="M:Geo.TableObjectManager.Read(System.String[])">
            <summary>
            读取返回表集合。移除下划线以后的字符串。
            </summary>
            <param name="inputPathes"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.GetIntByMinusAndRound(Geo.TableObjectManager,System.String,System.Boolean)">
            <summary>
            通过减去指定小数后，四舍五入取整。
            </summary>
            <param name="FractionValueTables"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.GetAppendColTables(Geo.TableObjectManager,System.String,System.String,System.Boolean)">
            <summary>
            追加列，返回新表
            </summary>
            <param name="tables"></param>
            <param name="appdenColPostfix"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.GetAverageValsOfLastRow(System.Int32)">
            <summary>
            所有表格，最后一行除了检索的数值的平均数,如果该列最后一行没有，则追溯到有的那行。
            </summary>
            <param name="ignoreRowCountLessThan">忽略行数量少于此的列,不含</param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.PipeFilterWithLastValues(System.Double)">
            <summary>
             以最后数据为依据，超过指定数值的滤掉。
            </summary>
            <param name="radius"></param>
        </member>
        <member name="M:Geo.TableObjectManager.GetFractionOfLastValueOfAllCols(System.String,System.Int32,System.Double,System.Double)">
            <summary>
            获取所有表格的最后数据组成新表
            </summary>
            <param name="name">表名称</param>
            <param name="ignoreRowCountLessThan">忽略行数量少于此的列,不含</param> 
            <param name="period"></param>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.GetOne">
            <summary>
            返回一个非空的表。失败返回null。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.GetFirstIndexValue``1">
            <summary>
            比较获取第一个最小的值
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.GetLastIndexValue``1">
            <summary>
            比较获取第一个最大的值
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.ReplaceTableName(System.String,System.String)">
            <summary>
            替换表名
            </summary>
            <param name="oldStr"></param>
            <param name="newStr"></param>
        </member>
        <member name="M:Geo.TableObjectManager.EmptyFrontValueOfCols(System.Int32)">
            <summary>
            移除所有数据列的前面的数据。从有数据时才开始计算。
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Geo.TableObjectManager.GetSub(System.Object,System.Object)">
            <summary>
            获取其中一段
            </summary>
            <param name="fromIndexValue"></param>
            <param name="toIndexValue"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.RemoveTableDataCountLessThan(System.Int32,System.Int32,System.Func{System.Double,System.Boolean})">
            <summary>
            移除行数量少于指定的表,移除列数量少于指定的表
            </summary>
            <param name="minRowCount"></param>
            <param name="minColCount"></param>
        </member>
        <member name="M:Geo.TableObjectManager.FillIndexes">
            <summary>
            把检索列填满
            </summary>
        </member>
        <member name="M:Geo.TableObjectManager.RemoveColWithLastValOffCenter(System.Double,System.Boolean)">
            <summary>
            移除列，最后值偏离计算中心
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Geo.TableObjectManager.SynchronizeTable(Geo.TableObjectManager)">
            <summary>
            同步表，删除多余列
            </summary>
            <param name="tableObjectManager"></param>
        </member>
        <member name="M:Geo.TableObjectManager.RemoveTableOfColCountLessThan(System.Int32)">
            <summary>
            移除列数量小于指定数的表。
            </summary>
            <param name="minColCount">最小列数量（不含）</param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.RemoveMinorityValueOfEachCol">
            <summary>
            移除列中不平坦的数据，只保留出现率最多的数，即所有列的行的内容应该为相同的数据。
            </summary>
        </member>
        <member name="M:Geo.TableObjectManager.ParallelHandleTable(System.Action{Geo.TableObjectStorage})">
            <summary>
            并行处理表格。
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Geo.TableObjectManager.GetCountOfNumeralCell">
            <summary>
            统计所有数字表格数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.GetOrReadOrCreateTableAndAppendAsync(System.String)">
            <summary>
            如果内存中已经有，则直接返回，如果磁盘有，则读取，否则创建一个新表。
            表添加到管理器中。
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableObjectManager.ReadOrCreateTable(System.String)">
            <summary>
            如果磁盘有，则读取，否则创建一个新表。
            表不添加到管理器中。
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.TableObjectManager.OutputBufferCount">
            <summary>
            输出缓存数量大小
            </summary>
        </member>
        <member name="P:Geo.TableObjectManager.OutputDirectory">
            <summary>
            输出目录
            </summary>
        </member>
        <member name="P:Geo.TableObjectManager.Item(System.String)">
            <summary>
            检索器
            </summary>
            <param name="keyPrev"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.TableNameHelper">
            <summary>
            表名称帮助器
            </summary>
        </member>
        <member name="F:Geo.TableNameHelper.TableSpliter">
            <summary>
            表名称分割
            </summary>
        </member>
        <member name="M:Geo.TableNameHelper.IsPrefixEquals(System.String,System.String,System.StringComparison)">
            <summary>
            两个名称的前缀是否相等。
            </summary>
            <param name="nameA"></param>
            <param name="nameB"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableNameHelper.ParseName(System.String,System.Boolean)">
            <summary>
            解析名称
            </summary>
            <param name="name"></param>
            <param name="isTrimSpliter"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableNameHelper.BuildName(System.String,System.String,System.Boolean)">
            <summary>
            构建新名称
            </summary>
            <param name="name"></param>
            <param name="namePostfix"></param>
            <param name="isReplacePrevPosfix"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.IO.ITimedStreamReader`1">
            <summary>
            时间序列数据流读取器
            </summary>
            <typeparam name="TProduct"></typeparam>
        </member>
        <member name="M:Geo.IO.ITimedStreamReader`1.TryGetStartTime">
            <summary>
            尝试获取起始时间，失败则返回最大值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.ITimedStreamReader`1.TryGetEndTime">
            <summary>
            尝试获取结束时间，失败则返回最小值
            </summary>
            <returns></returns>
        </member>
        <member name="T:Geo.IO.AbstractTimedStreamReader`1">
             <summary>
            时间序列数据流读取
             </summary>
        </member>
        <member name="M:Geo.IO.AbstractTimedStreamReader`1.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Geo.IO.AbstractTimedStreamReader`1.SetEnumIndex(System.Int32,System.Int32)">
            <summary>
            设置遍历数量
            </summary>
            <param name="StartIndex"></param>
            <param name="EnumCount"></param>
        </member>
        <member name="M:Geo.IO.AbstractTimedStreamReader`1.GetEnumerator">
            <summary>
            获取枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.AbstractTimedStreamReader`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            获取枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.AbstractTimedStreamReader`1.TryGetStartTime">
            <summary>
            从文件开始获取时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.AbstractTimedStreamReader`1.TryGetEndTime">
            <summary>
            从文件末尾获取时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.AbstractTimedStreamReader`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:Geo.IO.AbstractTimedStreamReader`1.MoveNext">
            <summary>
            移动到下一个，错误则返回false
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.AbstractTimedStreamReader`1.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="P:Geo.IO.AbstractTimedStreamReader`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Geo.IO.AbstractTimedStreamReader`1.IsCancel">
            <summary>
            是否取消
            </summary>
        </member>
        <member name="P:Geo.IO.AbstractTimedStreamReader`1.CurrentIndex">
            <summary>
            当前编号，从 0 开始。
            </summary>
        </member>
        <member name="P:Geo.IO.AbstractTimedStreamReader`1.StartIndex">
            <summary>
            起始编号，从0开始。
            </summary>
        </member>
        <member name="P:Geo.IO.AbstractTimedStreamReader`1.EnumCount">
            <summary>
            遍历数量，默认为最大值的一半。
            </summary>
        </member>
        <member name="P:Geo.IO.AbstractTimedStreamReader`1.MaxEnumIndex">
            <summary>
            最大的循环编号
            </summary>
        </member>
        <member name="P:Geo.IO.AbstractTimedStreamReader`1.InputPath">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:Geo.IO.AbstractTimedStreamReader`1.StreamReader">
            <summary>
            数据流读取器
            </summary>
        </member>
        <member name="P:Geo.IO.AbstractTimedStreamReader`1.Current">
            <summary>
            当前钟差
            </summary>
        </member>
        <member name="T:Geo.IO.AdaptableDataFileReader">
            <summary>
            Gnsser文件自适应读取，通过后缀名判断
            </summary>
        </member>
        <member name="T:Geo.IO.GnsserFileType">
            <summary>
            Gnsser 文件类型
            </summary>
        </member>
        <member name="F:Geo.IO.GnsserFileType.None">
            <summary>
            默认什么都没有
            </summary>
        </member>
        <member name="F:Geo.IO.GnsserFileType.Conf">
            <summary>
            配置文件
            </summary>
        </member>
        <member name="F:Geo.IO.GnsserFileType.Gmeta">
            <summary>
            元数据文件
            </summary>
        </member>
        <member name="F:Geo.IO.GnsserFileType.Data">
            <summary>
            数据文件
            </summary>
        </member>
        <member name="F:Geo.IO.GnsserFileType.Gpe">
            <summary>
            数据引擎文件
            </summary>
        </member>
        <member name="F:Geo.IO.GnsserFileType.Oper">
            <summary>
            操作文件
            </summary>
        </member>
        <member name="F:Geo.IO.GnsserFileType.Param">
            <summary>
            参数文件，实质是数据文件
            </summary>
        </member>
        <member name="F:Geo.IO.GnsserFileType.GScript">
            <summary>
            执行脚本文件
            </summary>
        </member>
        <member name="T:Geo.IO.GnsserFileNamer">
            <summary>
            Gnsser文件命名规则。
            提供文件名称和类型，生成完整了文件名称。
            </summary>
        </member>
        <member name="M:Geo.IO.GnsserFileNamer.#ctor(System.String,Geo.IO.GnsserFileType,Geo.IO.GnsserFileType)">
            <summary>
            构造函数
            </summary>
            <param name="SelfExtension">自定义后缀名</param>
            <param name="basicFileType">基础文件类型</param>
            <param name="classifyType">分类文件类型</param>
        </member>
        <member name="M:Geo.IO.GnsserFileNamer.#ctor(Geo.IO.GnsserFileType,System.String,Geo.IO.GnsserFileType)">
            <summary>
            构造函数
            </summary>
            <param name="SelfExtension">自定义后缀名</param>
            <param name="basicFileType">基础文件类型</param>
            <param name="classifyType">分类文件类型</param>
        </member>
        <member name="M:Geo.IO.GnsserFileNamer.Build(System.String)">
            <summary>
            构建。
            </summary>
            <param name="material"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.IO.GnsserFileNamer.SelfExtension">
            <summary>
            文件自有后缀。如 .xyz，.blh 。
            若非空，则为最后的后缀。
            </summary>
        </member>
        <member name="P:Geo.IO.GnsserFileNamer.BasicFileType">
            <summary>
            基础文件类型.如 Data
            为倒数第二后缀。
            </summary>
        </member>
        <member name="P:Geo.IO.GnsserFileNamer.ClassifyType">
            <summary>
            分类文件类型. 如 Oper。
            为倒数第三后缀。
            </summary>
        </member>
        <member name="T:Geo.IO.ILineFileWriter">
            <summary>
            写入器。
            </summary>
        </member>
        <member name="T:Geo.IO.ILineFileWriter`1">
            <summary>
            行对象文件读取器接口。
            </summary>
            <typeparam name="TLineClass"></typeparam>
        </member>
        <member name="T:Geo.IO.ILineFileReader">
            <summary>
            非泛型行读取接口，主要用于初始化
            </summary>
        </member>
        <member name="T:Geo.IO.ILineFileReader`1">
            <summary>
            Gnsser文件读取通用接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Geo.OrderedProperty">
            <summary>
            顶层参数类
            </summary>
        </member>
        <member name="M:Geo.OrderedProperty.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Geo.OrderedProperty.OrderedProperties">
            <summary>
            排好序的属性名称
            </summary>
        </member>
        <member name="P:Geo.OrderedProperty.Properties">
            <summary>
            排好序的属性名称,具有单位
            </summary>
        </member>
        <member name="T:Geo.IO.IntPosition">
            <summary>
            一个位置。
            </summary>
        </member>
        <member name="M:Geo.IO.IntPosition.#ctor(System.Int32,System.Int32)">
            <summary>
            属性
            </summary>
            <param name="startIndex"></param>
            <param name="count"></param>
        </member>
        <member name="P:Geo.IO.IntPosition.StartIndex">
            <summary>
            起始编号
            </summary>
        </member>
        <member name="P:Geo.IO.IntPosition.Count">
            <summary>
            数量
            </summary>
        </member>
        <member name="T:Geo.IO.XmlFileReader`1">
            <summary>
            行文件读取通用接口。本类采用流式读取，实现了枚举接口 IEnumerable 和 IEnumerator。
            </summary>
        </member>
        <member name="M:Geo.IO.XmlFileReader`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.IO.XmlFileReader`1.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath">数据文件路径。</param>
            <param name="metaFilePathOrDirectory">元数据文件或者元数据文件存放的目录。若不指定，则自动寻找文件目录下的元数据，若没有则调用默认的元数据，若还没有则报错。</param>
        </member>
        <member name="M:Geo.IO.XmlFileReader`1.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="filePath">数据文件路径。</param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.XmlFileReader`1.InitStreamReader">
            <summary>
            设置数据流
            </summary>
        </member>
        <member name="M:Geo.IO.XmlFileReader`1.MoveNext">
            <summary>
            移动到下一个。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.XmlFileReader`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:Geo.IO.XmlFileReader`1.Entities">
            <summary>
            实体对象集合
            </summary>
        </member>
        <member name="T:Geo.IO.XmlFileWriter`1">
            <summary>
            块式读取，适合小文件。对象Xml文件写入通用接口.
            </summary>
        </member>
        <member name="M:Geo.IO.XmlFileWriter`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.IO.XmlFileWriter`1.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath">数据文件路径。</param>
            <param name="metaFilePathOrDirectory">元数据文件或者元数据文件存放的目录。若不指定，则自动寻找文件目录下的元数据，若没有则调用默认的元数据，若还没有则报错。</param>
        </member>
        <member name="M:Geo.IO.XmlFileWriter`1.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="filePath">数据文件路径。</param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.XmlFileWriter`1.#ctor(System.IO.Stream,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="Stream">数据流。</param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.XmlFileWriter`1.WriteCommentLine(System.String)">
            <summary>
            写入一行注释
            </summary>
            <param name="comment"></param>
        </member>
        <member name="M:Geo.IO.XmlFileWriter`1.AppendComment(System.String)">
            <summary>
            在当前行追加注释
            </summary>
            <param name="comment"></param>
        </member>
        <member name="M:Geo.IO.XmlFileWriter`1.Write(`0)">
            <summary>
            写入
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Geo.IO.XmlFileWriter`1.BuildElementLine(System.Reflection.PropertyInfo,`0)">
            <summary>
            建立XML注释字符串
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.XmlFileWriter`1.BuildElement(System.Reflection.PropertyInfo,`0)">
            <summary>
            建立XML注释字符串
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.XmlFileWriter`1.AppendStartTagLine(System.String,System.Text.StringBuilder)">
            <summary>
            追加结束标签
            </summary>
            <param name="name"></param>
            <param name="sb"></param>
        </member>
        <member name="M:Geo.IO.XmlFileWriter`1.AppendStartTag(System.String,System.Text.StringBuilder)">
            <summary>
            追加起始标签
            </summary>
            <param name="name"></param>
            <param name="sb"></param>
        </member>
        <member name="M:Geo.IO.XmlFileWriter`1.AppendEndTagLine(System.String,System.Text.StringBuilder)">
            <summary>
            追加结束标签
            </summary>
            <param name="name"></param>
            <param name="sb"></param>
        </member>
        <member name="M:Geo.IO.XmlFileWriter`1.AppendEndTag(System.String,System.Text.StringBuilder)">
            <summary>
            追加结束标签
            </summary>
            <param name="name"></param>
            <param name="sb"></param>
        </member>
        <member name="M:Geo.IO.XmlFileWriter`1.BuildComment(System.String)">
            <summary>
            建立XML注释字符串
            </summary>
            <param name="comment"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.IO.XmlStreamReader`1">
            <summary>
            Xml读取通用接口。本类采用流式读取，实现了枚举接口 IEnumerable 和 IEnumerator。
            </summary>
        </member>
        <member name="M:Geo.IO.XmlStreamReader`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.IO.XmlStreamReader`1.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath">数据文件路径。</param>
            <param name="metaFilePathOrDirectory">元数据文件或者元数据文件存放的目录。若不指定，则自动寻找文件目录下的元数据，若没有则调用默认的元数据，若还没有则报错。</param>
        </member>
        <member name="M:Geo.IO.XmlStreamReader`1.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="filePath">数据文件路径。</param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.XmlStreamReader`1.InitStreamReader">
            <summary>
            设置数据流
            </summary>
        </member>
        <member name="M:Geo.IO.XmlStreamReader`1.MoveNext">
            <summary>
            移动到下一个。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.XmlStreamReader`1.Reset">
            <summary>
            重置。先释放资源，再初始化。
            </summary>
        </member>
        <member name="M:Geo.IO.XmlStreamReader`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:Geo.IO.XmlStreamReader`1.StreamReader">
            <summary>
            数据流阅读器
            </summary>
        </member>
        <member name="T:Geo.IO.FileDecompresser">
            <summary>
            文件转换
            </summary>
        </member>
        <member name="M:Geo.IO.FileDecompresser.Decompress(System.String)">
            <summary>
            转换
            </summary>
            <param name="path"></param> 
            <returns></returns>
        </member>
        <member name="M:Geo.IO.FileDecompresser.DoDecompressOrDeleteSource(System.String)">
            <summary>
            返回解压后的路径
            </summary>
            <param name="sourceFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.FileDecompresser.BuildDestFilePath(System.String)">
            <summary>
            构建目标路径。
            </summary>
            <param name="sourceFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.FileDecompresser.DoDecompress(System.String,System.String)">
            <summary>
            执行单文件解压
            </summary>
            <param name="sourceFilePath"></param>
            <param name="dest">目标路径</param>
        </member>
        <member name="P:Geo.IO.FileDecompresser.IsCancel">
            <summary>
            是否取消计算过程。只有在批量计算中有用。
            </summary>
        </member>
        <member name="P:Geo.IO.FileDecompresser.SourceType">
            <summary>
            输入类型
            </summary>
        </member>
        <member name="P:Geo.IO.FileDecompresser.DestType">
            <summary>
            目标类型
            </summary>
        </member>
        <member name="P:Geo.IO.FileDecompresser.Password">
            <summary>
            解压缩密码，可选
            </summary>
        </member>
        <member name="P:Geo.IO.FileDecompresser.DestDirectory">
            <summary>
            目标文件夹
            </summary>
        </member>
        <member name="P:Geo.IO.FileDecompresser.IsOverwrite">
            <summary>
            是否覆盖
            </summary>
        </member>
        <member name="P:Geo.IO.FileDecompresser.IsDeleteSource">
            <summary>
            是否删除源数据
            </summary>
        </member>
        <member name="T:Geo.IO.FileDecompressManager">
            <summary>
            文件解压管理器，关键字为输入类型
            </summary>
        </member>
        <member name="M:Geo.IO.FileDecompressManager.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.IO.FileDecompressManager.Regist(Geo.IO.FileDecompresser)">
            <summary>
            注册
            </summary>
            <param name="FileDecompresser"></param>
        </member>
        <member name="M:Geo.IO.FileDecompressManager.Decompress(System.String,System.String)">
            <summary>
            解压一次。若已经匹配则直接返回。
            </summary>
            <param name="inputPath"></param>
            <param name="destType">后缀名</param> 
            <returns></returns>
        </member>
        <member name="M:Geo.IO.FileDecompressManager.DecompressOnce(System.String,System.String,System.Int32)">
            <summary>
            解压一次。若已经匹配则直接返回。
            </summary>
            <param name="inputPath">输入文件路径，必须有后缀名</param>
            <param name="destType">后缀名</param>
            <param name="loopCount"> 解压次数</param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.FileDecompressManager.GetDefault(System.String,System.String)">
            <summary>
            提供一个more的管理器。
            </summary>
        </member>
        <member name="P:Geo.IO.FileDecompressManager.DestDirectory">
            <summary>
            目标文件夹
            </summary>
        </member>
        <member name="P:Geo.IO.FileDecompressManager.MaxDecompressCount">
            <summary>
            最大解压数量，如果超出，则认为是死循环
            </summary>
        </member>
        <member name="T:Geo.IO.RinexDFileDecompresser">
            <summary>
            封装了RINEX D文件解压
            </summary>
        </member>
        <member name="M:Geo.IO.RinexDFileDecompresser.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.IO.RinexDFileDecompresser.BuildDestFilePath(System.String)">
            <summary>
            构建目标路径。
            </summary>
            <param name="sourceFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.RinexDFileDecompresser.DoDecompress(System.String,System.String)">
            <summary>
            转换
            </summary>
            <param name="path"></param>
            <param name="destDir"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.IO.RinexDFileDecompresser.ExePath">
            <summary>
            外部工具路径
            </summary>
        </member>
        <member name="T:Geo.IO.ZFileDecompresser">
            <summary>
            文件转换
            </summary>
        </member>
        <member name="M:Geo.IO.ZFileDecompresser.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.IO.ZFileDecompresser.DoDecompress(System.String,System.String)">
            <summary>
            转换
            </summary>
            <param name="path"></param>
            <param name="destDir"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.IO.ZipFileDecompresser">
            <summary>
            文件转换
            </summary>
        </member>
        <member name="M:Geo.IO.ZipFileDecompresser.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.IO.ZipFileDecompresser.DoDecompress(System.String,System.String)">
            <summary>
            转换
            </summary>
            <param name="path"></param>
            <param name="destDir"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.IO.FileConverter">
            <summary>
            文件转换
            </summary>
        </member>
        <member name="M:Geo.IO.FileConverter.Convert(System.String)">
            <summary>
            转换
            </summary>
            <param name="path"></param>
            <param name="destFolderOrFile"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.FileConverter.DoConvertOrDeleteSource(System.String)">
            <summary>
            执行转换，
            </summary>
            <param name="sourceFilePath"></param>
        </member>
        <member name="M:Geo.IO.FileConverter.DoConvert(System.String,System.String)">
            <summary>
            执行单文件解压
            </summary>
            <param name="sourceFilePath"></param>
            <param name="destFilePath"></param>
        </member>
        <member name="P:Geo.IO.FileConverter.IsCancel">
            <summary>
            是否取消计算过程。只有在批量计算中有用。
            </summary>
        </member>
        <member name="P:Geo.IO.FileConverter.SourceType">
            <summary>
            输入类型
            </summary>
        </member>
        <member name="P:Geo.IO.FileConverter.DestType">
            <summary>
            目标类型
            </summary>
        </member>
        <member name="P:Geo.IO.FileConverter.Password">
            <summary>
            压缩、解压缩密码，可选
            </summary>
        </member>
        <member name="P:Geo.IO.FileConverter.DestDirectory">
            <summary>
            目标文件夹
            </summary>
        </member>
        <member name="P:Geo.IO.FileConverter.IsOverwrite">
            <summary>
            是否覆盖
            </summary>
        </member>
        <member name="P:Geo.IO.FileConverter.IsDeleteSource">
            <summary>
            是否删除源数据
            </summary>
        </member>
        <member name="T:Geo.IO.FileConverterManager">
            <summary>
            文件解压管理器，关键字为输入类型
            </summary>
        </member>
        <member name="M:Geo.IO.FileConverterManager.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.IO.FileConverterManager.Regist(Geo.IO.FileConverter)">
            <summary>
            注册
            </summary>
            <param name="FileConverter"></param>
        </member>
        <member name="P:Geo.IO.FileConverterManager.FromTos">
            <summary>
            具有的转换映射。一种树形的转换关系，全部存放与此。
            </summary>
        </member>
        <member name="P:Geo.IO.FileConverterManager.Default">
            <summary>
            提供一个more的管理器。
            </summary>
        </member>
        <member name="T:Geo.EnumerableFormatProvider">
            <summary>
            数组的格式类提供者。
            </summary>
        </member>
        <member name="M:Geo.EnumerableFormatProvider.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="ValidFractionCount">小数点后的有效位数</param>
        </member>
        <member name="M:Geo.EnumerableFormatProvider.GetFormat(System.Type)">
            <summary>
             获取格式器。IFormatProvider
            </summary>
            <param name="formatType"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.EnumerableFormatter">
            <summary>
            自定义处理数组的格式类
            </summary>
        </member>
        <member name="M:Geo.EnumerableFormatter.#ctor">
            <summary>
            构造函数
            </summary> 
        </member>
        <member name="M:Geo.EnumerableFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            数组的格式过程
            </summary>
            <param name="format">格式化参数,如 ",5.3" 表示分隔符为逗号，字符宽5，小数为3位</param>
            <param name="arg">待格式化的值</param>
            <param name="formatProvider">格式提供者</param>
            <returns></returns>
        </member>
        <member name="P:Geo.EnumerableFormatter.NumeralFormatProvider">
            <summary>
            数字格式化提供者
            </summary>
        </member>
        <member name="T:Geo.SplitFormatSymbol">
            <summary>
            自定义常用格式字符解析
            第一个字符为分隔符，第二个到“.”为字符串最小宽度，之后为有效小数位。
            </summary>
        </member>
        <member name="M:Geo.SplitFormatSymbol.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format">如 ",5.3" 表示分隔符为逗号，字符宽5，小数为3位</param>
        </member>
        <member name="M:Geo.SplitFormatSymbol.Parse(System.String)">
            <summary>
            解析格式。如 ",5.3" 表示分隔符为逗号，字符宽5，小数为3位。
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:Geo.SplitFormatSymbol.ToString">
            <summary>
            字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.SplitFormatSymbol.FractionCount">
            <summary>
            小数位数
            </summary>
        </member>
        <member name="P:Geo.SplitFormatSymbol.StringWidth">
            <summary>
            字符串宽度
            </summary>
        </member>
        <member name="P:Geo.SplitFormatSymbol.Spliter">
            <summary>
            元素之间隔分隔符
            </summary>
        </member>
        <member name="P:Geo.SplitFormatSymbol.NumeralFormat">
            <summary>
            数字格式
            </summary>
        </member>
        <member name="T:Geo.NumeralFormatSymbol">
            <summary>
            专用于数字格式化。
            </summary>
        </member>
        <member name="M:Geo.NumeralFormatSymbol.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:Geo.NumeralFormatSymbol.Parse(System.String)">
            <summary>
            解析
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:Geo.NumeralFormatSymbol.FractionCount">
            <summary>
            小数位数
            </summary>
        </member>
        <member name="P:Geo.NumeralFormatSymbol.StringWidth">
            <summary>
            字符串宽度
            </summary>
        </member>
        <member name="T:Geo.NumeralFormatProvider">
            <summary>
            数组的格式类提供者。
            </summary>
        </member>
        <member name="M:Geo.NumeralFormatProvider.GetFormat(System.Type)">
            <summary>
             获取格式器。IFormatProvider
            </summary>
            <param name="formatType"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.NumeralFormatter">
            <summary>
            数字格式化。适用于 GNSS 数据。
            直到地球同步卫星的数字都显示全，后面保留到亚毫米级别。
            如果太小或太大就采用科学计数法。
            </summary>
        </member>
        <member name="F:Geo.NumeralFormatter.ValidCount">
            <summary>
            默认的有效位数
            </summary>
        </member>
        <member name="M:Geo.NumeralFormatter.IsSuitToString(System.Double)">
            <summary>
            是否适合直接采用ToString方法。
            </summary>
            <param name="currentVal">待处理数据</param>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralFormatter.IsInt(System.Double)">
            <summary>
            是否是整数。
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            格式化
            </summary>
            <param name="format">有效位数</param>
            <param name="arg"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.ZeroPad">
            <summary>
            0 填充的字符串。用于格式化数字输出。
            </summary>
        </member>
        <member name="M:Geo.ZeroPad.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Geo.ZeroPad.GetPadString(System.Int32)">
            <summary>
            获取填充
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.ZeroPad.PadString">
            <summary>
            填充
            </summary>
        </member>
        <member name="T:Geo.IO.Gmetadata">
            <summary>
            元数据
            </summary>
        </member>
        <member name="M:Geo.IO.Gmetadata.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.IO.Gmetadata.#ctor(Geo.IO.Config)">
            <summary>
            构造函数
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Geo.IO.Gmetadata.#ctor(System.Collections.Generic.IDictionary{System.String,Geo.IO.ConfigItem},System.Collections.Generic.List{System.String})">
            <summary>
            采用已有列表初始化
            </summary>
            <param name="ConfigItems"></param>
            <param name="Comments"></param>
        </member>
        <member name="M:Geo.IO.Gmetadata.GetName(System.String)">
            <summary>
            只提取名称
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.Gmetadata.ParsePropertyUnit(System.String,System.String@,Geo.Unit@)">
            <summary>
            可以有两种方式：
            X:M or X(M)
            </summary>
            <param name="str"></param>
            <param name="name"></param>
            <param name="unit"></param>
        </member>
        <member name="P:Geo.IO.Gmetadata.StartRowIndex">
            <summary>
            起始行，默认为 0 。
            </summary>
        </member>
        <member name="P:Geo.IO.Gmetadata.FileType">
            <summary>
            文件类型
            </summary>
        </member>
        <member name="P:Geo.IO.Gmetadata.OutputDirectory">
            <summary>
            输出目录
            </summary>
        </member>
        <member name="P:Geo.IO.Gmetadata.OutputFilePath">
            <summary>
            输出文件路径
            </summary>
        </member>
        <member name="P:Geo.IO.Gmetadata.CommentMarkers">
            <summary>
            注释标记
            </summary>
        </member>
        <member name="P:Geo.IO.Gmetadata.ItemSplliter">
            <summary>
            项目分隔符号.以 | 分割，含空格：| |
            </summary>
        </member>
        <member name="P:Geo.IO.Gmetadata.PropertyNames">
            <summary>
            属性名称,只返回名称。以逗号,或分号;分割。
            设置的时候要注意，可以带上的单位。
            </summary>
        </member>
        <member name="P:Geo.IO.Gmetadata.IsPropertyUnitChanged">
            <summary>
            比较单位是否相等
            </summary>
        </member>
        <member name="P:Geo.IO.Gmetadata.PropertyUnits">
            <summary>
            属性的单位，通常为数值单位，如度，米等。
            </summary>
        </member>
        <member name="P:Geo.IO.Gmetadata.DestPropertyUnits">
            <summary>
            属性的单位，通常为数值单位，如度，米等。
            </summary>
        </member>
        <member name="P:Geo.IO.Gmetadata.NewInstance">
            <summary>
            新的实例.默认版本为1.0，分隔符为{ ",", "\t", ";", " " }
            </summary>
        </member>
        <member name="P:Geo.IO.Gmetadata.NewInstanceWithOtherComment">
            <summary>
            新的实例.默认版本为1.0，分隔符为{ ",", "\t", ";", " " }
            </summary>
        </member>
        <member name="P:Geo.IO.Gmetadata.DefaultXyzMetadata">
            <summary>
            默认的坐标元数据
            </summary>
        </member>
        <member name="P:Geo.IO.Gmetadata.DefaultXyMetadata">
            <summary>
            默认的坐标元数据
            </summary>
        </member>
        <member name="P:Geo.IO.Gmetadata.DefaultSingleValueMetadata">
            <summary>
            默认的单值元数据
            </summary>
        </member>
        <member name="P:Geo.IO.Gmetadata.DefaultTwoValueMetadata">
            <summary>
            默认的双值元数据
            </summary>
        </member>
        <member name="P:Geo.IO.Gmetadata.DefaultThreeValueMetadata">
            <summary>
            默认的3值元数据
            </summary>
        </member>
        <member name="P:Geo.IO.Gmetadata.DefaultLbhMetadata">
            <summary>
            默认大地坐标元数据
            </summary>
        </member>
        <member name="P:Geo.IO.Gmetadata.DefaultBlhMetadata">
            <summary>
            默认大地坐标元数据
            </summary>
        </member>
        <member name="P:Geo.IO.Gmetadata.DefaultGeoCoordWithCoordSysMetadata">
            <summary>
            默认大地坐标元数据
            </summary>
        </member>
        <member name="P:Geo.IO.Gmetadata.DefaultVectorNameMetadata">
            <summary>
            默认基线名称文件元数据
            </summary>
        </member>
        <member name="P:Geo.IO.Gmetadata.DefaultAzimuthMetadata">
            <summary>
            默认大地方位角元数据
            </summary>
        </member>
        <member name="T:Geo.IO.NameProperty">
            <summary>
            配置文件内容。
            通常为一行一个变量和值。采用分隔符分开。
            </summary>
        </member>
        <member name="M:Geo.IO.NameProperty.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Geo.IO.ValueProperty">
            <summary>
            具有单位的值类型
            </summary>
        </member>
        <member name="M:Geo.IO.ValueProperty.#ctor(System.String,Geo.Unit)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
            <param name="unit"></param>
        </member>
        <member name="P:Geo.IO.ValueProperty.Unit">
            <summary>
            单位
            </summary>
        </member>
        <member name="P:Geo.IO.ValueProperty.NameProperty">
            <summary>
            名称，与对象属性Name命名冲突，故改用NameProperty
            </summary>
        </member>
        <member name="P:Geo.IO.ValueProperty.ValueName">
            <summary>
            名称，与对象属性Name命名冲突，故改用NameProperty
            </summary>
        </member>
        <member name="T:Geo.IO.GmetaReader">
            <summary>
            配置文件内容。
            通常为一行一个变量和值。采用分隔符分开。
            </summary>
        </member>
        <member name="M:Geo.IO.GmetaReader.#ctor(System.String,System.String,System.String)">
             <summary>
            配置文件内容
             </summary> 
             <param name="path">路径</param> 
             <param name="ValueSplitter">数值分隔符</param> 
             <param name="CommentSplitter">注释分隔符</param> 
        </member>
        <member name="M:Geo.IO.GmetaReader.#ctor(System.IO.FileStream,System.Text.Encoding,System.String,System.String)">
             <summary>
            配置文件内容
             </summary> 
             <param name="stream">数据流</param>
             <param name="encoding">编码</param>
             <param name="ValueSplitter">数值分隔符</param> 
             <param name="CommentSplitter">注释分隔符</param> 
        </member>
        <member name="T:Geo.IO.GmetaWriter">
            <summary>
            写文件
            </summary>
        </member>
        <member name="M:Geo.IO.GmetaWriter.#ctor(System.String)">
             <summary>
            配置文件内容
             </summary> 
             <param name="path">路径</param>  
        </member>
        <member name="M:Geo.IO.GmetaWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
             <summary>
            配置文件内容
             </summary> 
             <param name="stream">数据流</param>
             <param name="encoding">编码</param> 
        </member>
        <member name="M:Geo.IO.GmetaWriter.Write(Geo.IO.Gmetadata)">
            <summary>
            还没有实现
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Geo.MetaInfo">
            <summary>
            元数据，用于调试，查看等。
            </summary>
        </member>
        <member name="M:Geo.MetaInfo.#ctor(System.String)">
            <summary>
            默认构造函数
            </summary>
            <param name="name">谁的元数据</param>
        </member>
        <member name="T:Geo.IO.VariableNames">
            <summary>
            元数据.数据变量名称。
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.Version">
            <summary>
            版本
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.Author">
            <summary>
            作者
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.CreationTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.FileType">
            <summary>
            文件类型
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.ItemSplliter">
            <summary>
            项目分隔符号
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.CommentMarker">
            <summary>
            项目分隔符号
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.PropertyNames">
            <summary>
            属性。
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.PropertyUnits">
            <summary>
            属性。
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.Name">
            <summary>
            名称而已
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.Id">
            <summary>
            名称而已
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.CoordSys">
            <summary>
            名称而已
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.Value">
            <summary>
            Value 量
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.Value2">
            <summary>
            Value2 量
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.Value3">
            <summary>
            Value3 量
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.X">
            <summary>
            X 坐标分量
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.Y">
            <summary>
            Y 坐标分量
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.Z">
            <summary>
            Z 坐标分量
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.XMeter">
            <summary>
            X 坐标分量
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.YMeter">
            <summary>
            Y 坐标分量
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.ZMeter">
            <summary>
            Z 坐标分量
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.SemiMinorAxis">
            <summary>
            椭球长半径。
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.Flattening">
            <summary>
            地球扁率
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.FlatteningOrInverse">
            <summary>
            地球扁率或者倒数。
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.GeoHeight">
            <summary>
            大地高 Geodetic Height
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.Lon">
            <summary>
            经度
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.Lat">
            <summary>
            纬度
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.ToLon">
            <summary>
            To经度
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.ToLat">
            <summary>
            To纬度
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.LonDegree">
            <summary>
            经度
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.LatDegree">
            <summary>
            纬度
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.LonDms_s">
            <summary>
            经度
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.LatDms_s">
            <summary>
            纬度
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.StartName">
            <summary>
            起始的名称
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.EndName">
            <summary>
            结束的名称
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.Depends">
            <summary>
            依赖
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.ParamFilePath">
            <summary>
            参数文件路径
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.Index">
            <summary>
            编号
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.Url">
            <summary>
            地址
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.LocalDirectory">
            <summary>
            本地路径
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.FromFileOrDirectory">
            <summary>
            源文件或目录
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.FileOrDirectory">
            <summary>
            文件或目录
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.ToFileOrDirectory">
            <summary>
            目标文件或目录
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.Overwrite">
            <summary>
            是否覆盖。
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.IsOverwrite">
            <summary>
            是否覆盖。
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.StartRowIndex">
            <summary>
            起始行编号
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.ToDirectory">
            <summary>
            目标目录
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.OutputDirectory">
            <summary>
            输出目录
            </summary>
        </member>
        <member name="F:Geo.IO.VariableNames.OutputFilePath">
            <summary>
            输出文件路径
            </summary>
        </member>
        <member name="T:Geo.IO.DataSourceType">
            <summary>
            数据源类型。
            </summary>
        </member>
        <member name="F:Geo.IO.DataSourceType.Unkown">
            <summary>
            未知数据源，默认为本地数据源
            </summary>
        </member>
        <member name="F:Geo.IO.DataSourceType.Http">
            <summary>
            http 网络
            </summary>
        </member>
        <member name="F:Geo.IO.DataSourceType.Ftp">
            <summary>
            ftp 服务器
            </summary>
        </member>
        <member name="F:Geo.IO.DataSourceType.LocalFolder">
            <summary>
            本地目录
            </summary>
        </member>
        <member name="F:Geo.IO.DataSourceType.LocalFile">
            <summary>
            本地文件
            </summary>
        </member>
        <member name="T:Geo.IO.InputFileManager">
            <summary>
            数据文件管理器。
            </summary>
        </member>
        <member name="M:Geo.IO.InputFileManager.#ctor(Geo.IO.FileDecompressManager,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="LocalTempDirectory"></param>
            <param name="FileDecompressManager"></param>
        </member>
        <member name="M:Geo.IO.InputFileManager.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="LocalTempDirectory"></param> 
        </member>
        <member name="M:Geo.IO.InputFileManager.GetLocalFilePath(System.String,System.String)">
            <summary>
            返回一个，匹配的第一个。如果没有，则返回null。
            </summary>
            <param name="inputPath"></param>
            <param name="searchPattern"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.InputFileManager.GetLocalFilePath(System.String,System.String,System.String)">
            <summary>
            返回一个，匹配的第一个。如果没有，则返回null。
            </summary>
            <param name="inputPath"></param>
            <param name="searchPattern"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.InputFileManager.GetLocalFilePathes(System.String[],System.String,System.String,System.Boolean)">
            <summary>
            批量获或下载文件，并返回其本地路径。
            </summary>
            <param name="inputPathes"></param>
            <param name="destFileExtension"></param>
            <param name="sourceFileExtension"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.InputFileManager.GetLocalFilePathes(System.String,System.String)">
            <summary>
            主要API，获取文件。如果是网络数据，则下载到本地后返回本地路径。
            如果是本地目录，则返回匹配的所有文件路径，注意：目录只搜索本层。
            </summary>
            <param name="inputPath"></param>
            <param name="searchPattern">匹配文件类型，仅对于目录(本地目录或ftp目录)有效。，可以以分号分隔多个匹配类型</param>
            <returns></returns>
        </member>
        <member name="F:Geo.IO.InputFileManager.CurrentDownloadings">
            <summary>
            当前正在下载的文件。避免重复下载。
            </summary>
        </member>
        <member name="M:Geo.IO.InputFileManager.DownloadFtpDirecotryOrFile(System.String,System.String,System.String)">
            <summary>
            下载，返回本地路径。如果重复下载，则直接返回。
            </summary>
            <param name="ftpFolderOrFilePath">路径，含IP地址和端口，如果需要账号请写成ftp://user:pass@Url的形式，若是目录，请以"/"结尾</param>
            <param name="extension">若是目录，则设置，可以以分号分隔多个匹配类型</param>
            <param name="localFolder"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="throwException"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.InputFileManager.GetLocalFilePathes(System.String,System.String,System.String)">
            <summary>
            主要API，获取文件。如果是网络数据，则下载到本地后返回本地路径。
            如果是本地目录，则返回匹配的所有文件路径，注意：目录只搜索本层。
            </summary>
            <param name="inputPath"></param>
            <param name="sourceFileExtension">如[.*z]，输入匹配文件类型，仅对于目录(本地目录或ftp目录)有效。，可以以分号分隔多个匹配类型</param>
            <param name="destFileExtension">如[.*o]，输出匹配文件类型，仅对于目录(本地目录或ftp目录)有效。，可以以分号分隔多个匹配类型</param>
            <returns></returns>
        </member>
        <member name="P:Geo.IO.InputFileManager.FileDecompressManager">
            <summary>
            用于应对可能出现的解压缩情况。
            </summary>
        </member>
        <member name="P:Geo.IO.InputFileManager.LocalTempDirectory">
            <summary>
            本地临时目录，将网络下载的数据保存于此。
            </summary>
        </member>
        <member name="P:Geo.IO.InputFileManager.IsOverwrite">
            <summary>
            是否覆盖，若false，判断目标存在，且大小非0，或大于10bytes，则不覆盖。
            </summary>
        </member>
        <member name="P:Geo.IO.InputFileManager.IsCancelDownloading">
            <summary>
            是否立刻取消下载。
            </summary>
        </member>
        <member name="T:Geo.IO.LocalFileWritingStateManager">
            <summary>
            写文件管理器
            </summary>
        </member>
        <member name="M:Geo.IO.LocalFileWritingStateManager.Regist(System.String)">
            <summary>
            查看是
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.IO.ILog">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="M:Geo.IO.ILog.Debug(System.String)">
            <summary>
            调试信息
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Geo.IO.ILog.Debug(System.String,System.Exception)">
            <summary>
            调试信息
            </summary>
            <param name="info"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Geo.IO.ILog.Error(System.String)">
            <summary>
            出错信息
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Geo.IO.ILog.Error(System.String,System.Exception)">
            <summary>
            出错信息
            </summary>
            <param name="info"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Geo.IO.ILog.Fatal(System.String)">
            <summary>
            致命的重要性！必须显示。
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Geo.IO.ILog.Info(System.String)">
            <summary>
            信息
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Geo.IO.ILog.Warn(System.String)">
            <summary>
            警告
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:Geo.IO.Log">
            <summary>
            日志写入类。当前采用log4net实现。
            使用方法：每个类可以实例化一个对象。
            (MethodBase.GetCurrentMethod().DeclaringType);          
            </summary>
        </member>
        <member name="M:Geo.IO.Log.#ctor(System.Object)">
            <summary>
            以对象创建一个日志记录器。
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Geo.IO.Log.#ctor(System.Type)">
            <summary>
            以类型创建一个日志记录器。
            </summary>
        </member>
        <member name="M:Geo.IO.Log.GetLog(System.Type)">
            <summary>
            获取日志实例
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.Log.GetLog(System.Object)">
            <summary>
            获取日志实例
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.Log.Warn(System.String)">
            <summary>
            调试中出现的警告问题。
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Geo.IO.Log.Fatal(System.String)">
            <summary>
            调试中出现的致命问题。
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Geo.IO.Log.Debug(System.String)">
            <summary>
            调试中出现的问题。
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Geo.IO.Log.Debug(System.String,System.Exception)">
            <summary>
            调试中出现的问题
            </summary>
            <param name="info"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Geo.IO.Log.Error(System.String)">
            <summary>
            错误日志
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Geo.IO.Log.Error(System.String,System.Exception)">
            <summary>
            显示错误信息
            </summary>
            <param name="info"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Geo.IO.Log.Info(System.String)">
            <summary>
            显示一半的信息，有必要让用户知道
            </summary>
            <param name="info"></param>
        </member>
        <member name="P:Geo.IO.Log.MsgProducer">
            <summary>
            信息发生者
            </summary>
        </member>
        <member name="T:Geo.IO.TypedLogMessageProducedEventHandler">
            <summary>
            产生了日志信息
            </summary>
            <param name="msg"></param>
            <param name="LogType"></param>
        </member>
        <member name="T:Geo.IO.LogType">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="T:Geo.IO.LogWriter">
            <summary>
            日志写入器，采用单例模式
            </summary>
        </member>
        <member name="F:Geo.IO.LogWriter.LoopLineCounter">
            <summary>
            写入数量计数器
            </summary>
        </member>
        <member name="M:Geo.IO.LogWriter.Write(System.String,Geo.IO.LogType,System.Type)">
            <summary>
            写入日志
            </summary>
            <param name="msg"></param>
            <param name="logType"></param>
            <param name="msgProducer"></param>
        </member>
        <member name="M:Geo.IO.LogWriter.TryClearOutDateLogs">
            <summary>
            清除过期的日志,返回删除的日志名称。
            </summary>
        </member>
        <member name="E:Geo.IO.LogWriter.MsgProduced">
            <summary>
            信息产生
            </summary>
        </member>
        <member name="P:Geo.IO.LogWriter.BufferSize">
             <summary>
            字体缓存大小
             </summary>
        </member>
        <member name="P:Geo.IO.LogWriter.WritingIntervalInMiniSecond">
            <summary>
            最大输出间隔
            </summary>
        </member>
        <member name="P:Geo.IO.LogWriter.IsRealTimeWriting">
            <summary>
            是否实时输出
            </summary>
        </member>
        <member name="P:Geo.IO.LogWriter.Instance">
            <summary>
            获取实例
            </summary>
        </member>
        <member name="P:Geo.IO.LogWriter.LogDirectory">
            <summary>
            备份目录
            </summary>
        </member>
        <member name="P:Geo.IO.LogWriter.IsWriteToConsole">
            <summary>
            是否输出到控制台
            </summary>
        </member>
        <member name="P:Geo.IO.LogWriter.TextWriter">
            <summary>
            文本写
            </summary>
        </member>
        <member name="T:Geo.Common.CmdHandler">
            <summary>
            处理操作
            </summary>
            <param name="cmd"></param> 
            <returns></returns>
        </member>
        <member name="T:Geo.Common.ProcessRunner">
            <summary>
             封装了一个Process类。对指定程序提供便利的操作。
             通常一个线程结束了，就重新再建立一个。
            </summary>
        </member>
        <member name="F:Geo.Common.ProcessRunner.IsDebug">
            <summary>
            是否启用调试模式，即是否显示黑色命令框。
            </summary>
        </member>
        <member name="M:Geo.Common.ProcessRunner.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            构造函数。如果启用管道（IsRedirectPipe），则不用shell启动进程（IsUseShellExecute）。
            如果采用异步（！IsSyncInput）输入，则需要重定向（IsRedirectPipe）。
            </summary>
            <param name="exePath">默认为cmd.exe</param>
            <param name="IsUseShellExecute">是否采用shell启动进程</param>
            <param name="IsRedirectPipe">是否启用管道重定向输入输出，包括输入/输出和错误的重定向</param>
            <param name="IsSyncInput">是否启用异步输入</param>
        </member>
        <member name="M:Geo.Common.ProcessRunner.Init">
            <summary>
             初始化。调用了设置后必须设置。
            </summary>
        </member>
        <member name="M:Geo.Common.ProcessRunner.process_Exited(System.Object,System.EventArgs)">
            <summary>
            程序已退出。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Geo.Common.ProcessRunner.process_OutputDataReceived(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            接收内部程序数据
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Geo.Common.ProcessRunner.Start(System.String)">
            <summary>
            启动程序,并开始异步读取输出
            </summary>
            <param name="Arguments">启动程序时同一行输入的参数</param>
        </member>
        <member name="M:Geo.Common.ProcessRunner.Run(System.String)">
            <summary>
            同步运行。运行后就退出。
            </summary>
            <param name="cmd">待执行命令</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Common.ProcessRunner.GetOutputText">
            <summary>
            获取标准输出的文本。需要同步且重定向才能读取。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Common.ProcessRunner.GetErrorsText">
            <summary>
            获取出错文本.需要同步且重定向才能读取。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Common.ProcessRunner.WriteCommand(System.String)">
            <summary>
            写入一条命令。
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:Geo.Common.ProcessRunner.WriteExist">
            <summary>
            向管道写入 exit 命令。
            </summary>
        </member>
        <member name="M:Geo.Common.ProcessRunner.WriteY">
            <summary>
            向管道写入 y 命令。
            </summary>
        </member>
        <member name="M:Geo.Common.ProcessRunner.WriteN">
            <summary>
            向管道写入 n 命令。
            </summary>
        </member>
        <member name="M:Geo.Common.ProcessRunner.WriteShutdown">
            <summary>
            向管道写入 shutdown 命令。
            </summary>
        </member>
        <member name="M:Geo.Common.ProcessRunner.WriteStart">
            <summary>
            向管道写入 start 命令。
            </summary>
        </member>
        <member name="M:Geo.Common.ProcessRunner.RunAsyn(System.String)">
            <summary>
            异步运行，不用等待。需要考虑：如何清理进程。
            </summary>
            <param name="cmd">命令</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Common.ProcessRunner.KillProcess">
            <summary>
            直接杀死进程。
            </summary>
        </member>
        <member name="M:Geo.Common.ProcessRunner.Dispose">
            <summary>
            直接释放进程资源
            </summary>
        </member>
        <member name="M:Geo.Common.ProcessRunner.RunCmd(System.String)">
            <summary>
            同步运行命令行。
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Common.ProcessRunner.RunCmdAsyn(System.String)">
            <summary>
            异步运行命令行。
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="E:Geo.Common.ProcessRunner.ExitedOrDisposed">
            <summary>
            程序退出事件
            </summary>
        </member>
        <member name="E:Geo.Common.ProcessRunner.ErrorDataReceived">
            <summary>
            被调用程序输出数据事件
            </summary>          
        </member>
        <member name="E:Geo.Common.ProcessRunner.OutputDataReceived">
            <summary>
            输出数据
            </summary>
        </member>
        <member name="E:Geo.Common.ProcessRunner.AsyncProcessExited">
            <summary>
            异步执行中程序执行完毕时激活事件。
            </summary>
        </member>
        <member name="P:Geo.Common.ProcessRunner.Process">
            <summary>
            当前进程
            </summary>
        </member>
        <member name="P:Geo.Common.ProcessRunner.Started">
            <summary>
            指示进程是否已经启动。仅此而已。
            </summary>
        </member>
        <member name="P:Geo.Common.ProcessRunner.HasExited">
            <summary>
            是否已经退出
            </summary>
        </member>
        <member name="P:Geo.Common.ProcessRunner.StreamWriter">
            <summary>
            输入流写入器。相当于写到控制台。
            </summary>
        </member>
        <member name="P:Geo.Common.ProcessRunner.StreamReader">
            <summary>
            数据流读取器，从程序的控制台读取数据。
            </summary>
        </member>
        <member name="P:Geo.Common.ProcessRunner.StreamErrorReader">
            <summary>
            异常输出流。
            </summary>
        </member>
        <member name="T:Geo.SingleFileManager">
            <summary>
            基于单文件的文件管理。
            </summary>
        </member>
        <member name="M:Geo.SingleFileManager.#ctor(System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="FilePath"></param>
        </member>
        <member name="M:Geo.SingleFileManager.Load">
            <summary>
            从文件加载。
            </summary>
        </member>
        <member name="M:Geo.SingleFileManager.Save">
            <summary>
            保存到文件
            </summary>
        </member>
        <member name="P:Geo.SingleFileManager.FilePath">
            <summary>
            文件路径。
            </summary>
        </member>
        <member name="T:Geo.Common.IO.TokenType">
            <summary>
            令牌（标记、记号）类型。在类StreamTokenizer中使用。
            </summary>
        </member>
        <member name="F:Geo.Common.IO.TokenType.Word">
            <summary>
            Indicates that the token is a word.
            </summary>
        </member>
        <member name="F:Geo.Common.IO.TokenType.Number">
            <summary>
            Indicates that the token is a number. 
            </summary>
        </member>
        <member name="F:Geo.Common.IO.TokenType.Eol">
             <summary>
            End of line。  Indicates that the end of line has been read. The field can only have this value if the eolIsSignificant method has been called with the argument true. 
             </summary>
        </member>
        <member name="F:Geo.Common.IO.TokenType.Eof">
             <summary>
            End of Stream。  Indicates that the end of the input stream has been reached.
             </summary>
        </member>
        <member name="F:Geo.Common.IO.TokenType.Whitespace">
            <summary>
            空白，含空字符、制表符、新行。Indictaes that the token is white space (space, tab, newline).
            </summary>
        </member>
        <member name="F:Geo.Common.IO.TokenType.Symbol">
            <summary>
            其它类型。 Characters that are not whitespace, numbers, etc...
            </summary>
        </member>
        <member name="T:Geo.ITableData">
            <summary>
            表数据接口
            </summary>
        </member>
        <member name="P:Geo.ITableData.WholeColTitles">
            <summary>
            表标题完整列表
            </summary>
        </member>
        <member name="T:Geo.TableRowData`1">
            <summary>
            表行数据。
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:Geo.TableRowData`1.#ctor(System.Collections.Generic.Dictionary{System.String,`0},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String)">
            <summary>
            表数据构造函数
            </summary>
            <param name="valDic">名称与值字典</param>
            <param name="WholeColTitles">标题</param>
            <param name="keyNames">关键标题（非关键标题将被忽略，如平差的RMS值）</param>
        </member>
        <member name="M:Geo.TableRowData`1.GetTabValues(System.Collections.Generic.Dictionary{System.String,`0})">
            <summary>
            获取以制表符分开的行，按照表对应的列进行填充。
            </summary>
            <param name="valDic"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.TableRowData`1.GetTabValues">
            <summary>
            获取表行
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.TableRowData`1.KeyNames">
            <summary>
            索引标题，关键标题。
            </summary>
        </member>
        <member name="P:Geo.TableRowData`1.WholeColTitles">
            <summary>
            完整的表头，必须设置。
            </summary>
        </member>
        <member name="P:Geo.TableRowData`1.valDic">
            <summary>
            列数据字典
            </summary>
        </member>
        <member name="P:Geo.TableRowData`1.Placeholder">
            <summary>
            占位符号
            </summary>
        </member>
        <member name="T:Geo.TableRowData">
            <summary>
            表数据.非紧凑表行数据，在统一的列下面将行数据进行填充。
            </summary>
        </member>
        <member name="M:Geo.TableRowData.#ctor(System.Collections.Generic.Dictionary{System.String,System.Double},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String)">
            <summary>
            表数据构造函数
            </summary>
        </member>
        <member name="M:Geo.IntTableRowData.#ctor(System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String)">
            <summary>
            表数据构造函数
            </summary>
        </member>
        <member name="T:Geo.Common.TelCommand">
            <summary>
            远程。
            </summary>
        </member>
        <member name="M:Geo.Common.TelCommand.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            构造器
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Geo.Common.TelCommand.Close">
            <summary>
            关闭资源。
            </summary>
        </member>
        <member name="P:Geo.Common.TelCommand.BinaryReader">
            <summary>
            二进制读取
            </summary>
        </member>
        <member name="P:Geo.Common.TelCommand.BinaryWriter">
            <summary>
            二进制写 
            </summary>
        </member>
        <member name="P:Geo.Common.TelCommand.TcpClient">
            <summary>
            客户端连接
            </summary>
        </member>
        <member name="P:Geo.Common.TelCommand.CmdStr">
            <summary>
            命令字符串
            </summary>
        </member>
        <member name="P:Geo.Common.TelCommand.LocalEndPoint">
            <summary>
            本地入口
            </summary>
        </member>
        <member name="T:Geo.INetService`1">
            <summary>
            数据源为文件。
            </summary> 
        </member>
        <member name="T:Geo.ITimedOptionalService`3">
            <summary>
            具有选项的通用数据源接口
            </summary>
            <typeparam name="TOption">数据服务选项</typeparam>
            <typeparam name="TProduct">产品</typeparam>
            <typeparam name="TTimeScope">产品</typeparam>
        </member>
        <member name="T:Geo.ITimedService`2">
            <summary>
            断断续续的服务，也可以是多时间段的连续的服务，如，多个文件的钟差服务。
            </summary>
            <typeparam name="TProduct">产品</typeparam>
            <typeparam name="TTimeScope">时间</typeparam>
        </member>
        <member name="P:Geo.ITimedService`2.TimePeriod">
            <summary>
            时间段
            </summary>
        </member>
        <member name="P:Geo.ITimedOptionalService`3.Option">
            <summary>
             数据源选项。
            </summary>
        </member>
        <member name="T:Geo.OptionalService`2">
            <summary>
            具有选项的通用数据源接口
            </summary>
            <typeparam name="TOption">数据服务选项</typeparam>
            <typeparam name="TProduct">产品</typeparam>
        </member>
        <member name="P:Geo.OptionalService`2.Option">
            <summary>
             数据源选项。
            </summary>
        </member>
        <member name="T:Geo.TimedOptionalService`3">
            <summary>
            具有选项的通用数据源接口
            </summary>
            <typeparam name="TOption">数据服务选项</typeparam>
            <typeparam name="TProduct">产品</typeparam>
            <typeparam name="TTimeScope">产品</typeparam>
        </member>
        <member name="T:Geo.AbstractTimedService`2">
            <summary>
            断断续续的服务，也可以是多时间段的连续的服务，如，多个文件的钟差服务。
            </summary>
            <typeparam name="TProduct">产品</typeparam>
            <typeparam name="TTimeScope">时间</typeparam>
        </member>
        <member name="P:Geo.AbstractTimedService`2.TimePeriod">
            <summary>
            时间范围
            </summary>
        </member>
        <member name="P:Geo.TimedOptionalService`3.Option">
            <summary>
             数据源选项。
            </summary>
        </member>
        <member name="T:Geo.IBufferedMaterial`1">
            <summary>
            缓存数据源
            </summary>
            <typeparam name="TMaterial"></typeparam>
        </member>
        <member name="T:Geo.IBufferedMaterial`2">
            <summary>
            缓存数据流接口
            </summary>
            <typeparam name="TMaterial"></typeparam>
            <typeparam name="TBuffer"></typeparam>
        </member>
        <member name="P:Geo.IBufferedMaterial`2.BufferSize">
            <summary>
            缓存大小
            </summary>
        </member>
        <member name="P:Geo.IBufferedMaterial`2.IsMaterialEnded">
            <summary>
            数据源是否结束
            </summary>
        </member>
        <member name="P:Geo.IBufferedMaterial`2.LastBufferedMaterial">
            <summary>
            最后一个原料
            </summary>
        </member>
        <member name="P:Geo.IBufferedMaterial`2.MaterialBuffers">
            <summary>
            缓存
            </summary>
        </member>
        <member name="P:Geo.IBufferedMaterial`2.MaterialBufferSize">
            <summary>
            原料缓存实际大小
            </summary>
        </member>
        <member name="T:Geo.AbstractProcessService`2">
            <summary>
            提供产品的供应商。规定了生产流程。
            包含原料检核，生产和产品检核。
            </summary> 
        </member>
        <member name="M:Geo.AbstractProcessService`2.OnProduced(`0,`1)">
            <summary>
            生产事件响应。
            </summary>
            <param name="PositionResult"></param>
            <param name="EpochInformation"></param>
        </member>
        <member name="M:Geo.AbstractProcessService`2.Get(`1)">
            <summary>
            获取最终的产品，如果失败则返回默认对象，通常为null。每次生产都要执行。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractProcessService`2.OnProducing(`1)">
            <summary>
            生产前触发
            </summary>
            <param name="material"></param>
        </member>
        <member name="M:Geo.AbstractProcessService`2.CheckProduct(`0)">
            <summary>
            算后的产品检核，通过或不通过。每次生产都要执行。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractProcessService`2.Produce(`1)">
            <summary>
            具体的生产过程。每次生产都要执行。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.AbstractProcessService`2.MetaInfo">
            <summary>
            元数据信息。
            </summary>
        </member>
        <member name="E:Geo.AbstractProcessService`2.Produced">
            <summary>
            成功计算完成一次，激发一次。
            </summary>
        </member>
        <member name="E:Geo.AbstractProcessService`2.Producing">
            <summary>
            计算前触发，可以在此做一些初始化工作。
            </summary>
        </member>
        <member name="P:Geo.AbstractProcessService`2.MaterialBuffers">
            <summary>
            原料缓存
            </summary>
        </member>
        <member name="P:Geo.AbstractProcessService`2.CurrentProduct">
            <summary>
            当前产品
            </summary>
        </member>
        <member name="P:Geo.AbstractProcessService`2.CurrentMaterial">
            <summary>
            当前原料
            </summary>
        </member>
        <member name="T:Geo.ReversedEnumber`1">
            <summary>
            实现反向数据流
            </summary>
            <typeparam name="TMaterial"></typeparam>
        </member>
        <member name="M:Geo.ReversedEnumber`1.#ctor(Geo.IEnumer{`0})">
            <summary>
            默认构造函数
            </summary>
            <param name="Stream"></param>
        </member>
        <member name="M:Geo.ReversedEnumber`1.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Geo.ReversedEnumber`1.MoveNext">
            <summary>
            向前一步
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.ReversedEnumber`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:Geo.ReversedEnumber`1.Reset">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="P:Geo.ReversedEnumber`1.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:Geo.ReversedEnumber`1.DataSource">
            <summary>
            数据源
            </summary>
        </member>
        <member name="T:Geo.BufferedStreamService`1">
            <summary>
            数据流缓存数据读取器。
            缓存数据，不包含第一个项目。
            </summary>
            <typeparam name="TMaterial"></typeparam>
        </member>
        <member name="M:Geo.BufferedStreamService`1.#ctor(Geo.IEnumer{`0},System.Int32)">
            <summary>
            默认构造函数
            </summary>
            <param name="Stream"></param>
            <param name="bufferSize"></param>
        </member>
        <member name="M:Geo.BufferedStreamService`1.OnMaterialInputted(`0)">
            <summary>
            从数据流读取一个原料触发，并且已经通过了检核，此时尚未加入缓存。
            </summary>
        </member>
        <member name="M:Geo.BufferedStreamService`1.OnMaterialCheck(`0)">
            <summary>
            对刚刚读取进入的材料进行检核，如果不合格则不加入缓存。
            </summary>
            <param name="material"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.BufferedStreamService`1.OnAfterMaterialCheckPassed(`0)">
            <summary>
            检核通过后激发
            </summary>
            <param name="material"></param>
        </member>
        <member name="M:Geo.BufferedStreamService`1.OnMaterialProducing(`0)">
            <summary>
            生产前触发,传入当前原料。
            </summary>
            <param name="material"></param>
        </member>
        <member name="M:Geo.BufferedStreamService`1.OnMaterialBuffersFullOrEnd(Geo.IWindowData{`0})">
            <summary>
            填满时激发，或者没有填满，但是已经结束了。
            </summary>
            <param name="materials"></param>
        </member>
        <member name="M:Geo.BufferedStreamService`1.OnMaterialEnded">
            <summary>
            原料用完，触发
            </summary>
        </member>
        <member name="M:Geo.BufferedStreamService`1.MoveNext">
            <summary>
            移动到下一条，如要设置了缓存，则先填充缓存。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.BufferedStreamService`1.GetNextMaterial">
            <summary>
            获取数据流中的下一个原材料。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.BufferedStreamService`1.AppendMaterialToBuffer(`0)">
            <summary>
            添加原料到缓存，这是一个原料入口。
            </summary>
            <param name="nextBufferMaterial"></param>
        </member>
        <member name="M:Geo.BufferedStreamService`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:Geo.BufferedStreamService`1.Reset">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="P:Geo.BufferedStreamService`1.DataSource">
            <summary>
            数据源
            </summary>
        </member>
        <member name="P:Geo.BufferedStreamService`1.StartIndex">
            <summary>
            起始编号，从0开始。
            </summary>
        </member>
        <member name="P:Geo.BufferedStreamService`1.EnumCount">
            <summary>
            遍历数量，默认为最大值的一半。
            </summary>
        </member>
        <member name="P:Geo.BufferedStreamService`1.CurrentIndex">
            <summary>
            当前编号
            </summary>
        </member>
        <member name="E:Geo.BufferedStreamService`1.MaterialInputted">
            <summary>
            0.从数据流中读入了原料，并通过了检核，但还没有加入缓存
            </summary>
        </member>
        <member name="E:Geo.BufferedStreamService`1.MaterialCheck">
            <summary>
            1.对刚刚读取进入的材料进行检核，如果不合格则不加入缓存。
            </summary>
        </member>
        <member name="E:Geo.BufferedStreamService`1.AfterMaterialCheckPassed">
            <summary>
            2.数据通过了检核。
            </summary>
        </member>
        <member name="E:Geo.BufferedStreamService`1.MaterialProducing">
            <summary>
            3.准备处理原料，可以在此预处理原料，如根据缓存情况处理原料。
            </summary>
        </member>
        <member name="E:Geo.BufferedStreamService`1.MaterialBuffersFullOrEnd">
            <summary>
            当缓存填充满或数据流读完时激发。激发一次。
            </summary>
        </member>
        <member name="E:Geo.BufferedStreamService`1.MaterialEnded">
            <summary>
            原始数据中，读取到了数据结束！
            </summary>
        </member>
        <member name="P:Geo.BufferedStreamService`1.IsMaterialEnded">
            <summary>
            指示是否已经读完。
            </summary>
        </member>
        <member name="P:Geo.BufferedStreamService`1.BufferSize">
            <summary>
            缓存大小，通常用于预读取，预处理数据。
            默认为 1 ，表示实时处理，不需要缓存。
            </summary>
        </member>
        <member name="P:Geo.BufferedStreamService`1.MaterialBuffers">
            <summary>
            缓存原料，为预处理后的原料。
            不包含当前原料。
            </summary>
        </member>
        <member name="P:Geo.BufferedStreamService`1.MaterialBufferSize">
            <summary>
            当前原料缓存的大小
            </summary>
        </member>
        <member name="P:Geo.BufferedStreamService`1.LastBufferedMaterial">
            <summary>
            获取最后一次进入缓存的原料。
            </summary>
        </member>
        <member name="T:Geo.AbstractBufferdStreamService`2">
            <summary>
            批量服务。规定了生产流程。
            </summary>
            <typeparam name="TMaterial">原料或者查询条件</typeparam>
            <typeparam name="TProduct">产品或计算结果</typeparam>
        </member>
        <member name="T:Geo.AbstractStreamService`2">
            <summary>
            批量服务。规定了生产流程。
            </summary>
            <typeparam name="TMaterial">原料或者查询条件</typeparam>
            <typeparam name="TProduct">产品或计算结果</typeparam>
        </member>
        <member name="T:Geo.IStreamService`2">
            <summary>
            流式服务。
            </summary>
            <typeparam name="TProduct">产品</typeparam>
            <typeparam name="TMaterial">原料或者查询条件</typeparam>
        </member>
        <member name="T:Geo.IStreamService`1">
            <summary>
            没有指定数据源的流式服务。
            </summary>
            <typeparam name="TProduct">产品</typeparam>
        </member>
        <member name="M:Geo.IStreamService`1.Gets(System.Int32,System.Int32)">
            <summary>
            批量生产
            </summary> 
            <param name="startIndex">起始的编号，从0开始</param>
            <param name="maxCount">最大的计算数量</param>
            <returns></returns>
        </member>
        <member name="M:Geo.IStreamService`1.GetNexts(System.Int32)">
            <summary> 
            获取下一列表
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="E:Geo.IStreamService`1.ProductProduced">
            <summary>
            计算完成一个，激发一次。
            </summary>
        </member>
        <member name="P:Geo.IStreamService`1.CurrentProduct">
            <summary>
            存储最后一次（当前）生产的产品
            </summary>
        </member>
        <member name="P:Geo.IStreamService`1.CurrentIndex">
            <summary>
            当前编号，从 0 开始。
            </summary>
        </member>
        <member name="E:Geo.IStreamService`2.Produced">
            <summary>
            计算完成一个，激发一次。
            </summary>
        </member>
        <member name="P:Geo.IStreamService`2.DataSource">
            <summary>
            枚举类型的数据源
            </summary>
        </member>
        <member name="P:Geo.IStreamService`2.CurrentMaterial">
            <summary>
            存储最后一次(当前)生产用的原料或输入条件。
            </summary>
        </member>
        <member name="F:Geo.AbstractStreamService`2.log">
            <summary>
            日志记录。错误信息记录在日志里面。
            </summary>
        </member>
        <member name="M:Geo.AbstractStreamService`2.#ctor">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="M:Geo.AbstractStreamService`2.OnMaterialProducing(`1)">
            <summary>
            生产前触发
            </summary>
            <param name="material"></param>
        </member>
        <member name="M:Geo.AbstractStreamService`2.OnMaterialEnded">
            <summary>
            原料用完，触发
            </summary>
        </member>
        <member name="M:Geo.AbstractStreamService`2.OnMaterialInputted(`1)">
            <summary>
            从数据流读取一个原料触发，此时尚未加入缓存
            </summary>
        </member>
        <member name="M:Geo.AbstractStreamService`2.SetEnumIndex(System.Int32,System.Int32)">
            <summary>
            设置遍历数量
            </summary>
            <param name="StartIndex"></param>
            <param name="EnumCount"></param>
        </member>
        <member name="M:Geo.AbstractStreamService`2.Gets(System.Int32,System.Int32)">
            <summary>
            批量生产产品，只返回成功的产品。
            如果其中一次计算失败，则继续往下计算，保证结果的数量。如果不足数量，则返回全部。
            </summary>
            <param name="startIndex">起始编号，从 0 开始</param>
            <param name="maxResultCount">最大的结果数量</param>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractStreamService`2.Get(`1)">
            <summary>
            获取产品，并设置为当前产品。如果失败则返回默认对象，通常为null。每次生产都要执行。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractStreamService`2.MoveNext">
            <summary>
            移动到下一条，如要设置了缓存，则先填充缓存。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractStreamService`2.GetNextMaterial">
            <summary>
            获取数据流中的下一个原材料。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractStreamService`2.Reset">
            <summary>
            重置数据流
            </summary>
        </member>
        <member name="M:Geo.AbstractStreamService`2.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:Geo.AbstractStreamService`2.GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractStreamService`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractStreamService`2.GetNexts(System.Int32)">
            <summary>
            批量获取。
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="E:Geo.AbstractStreamService`2.ProductProduced">
            <summary>
            生产产品。
            </summary>
        </member>
        <member name="E:Geo.AbstractStreamService`2.MaterialInputted">
            <summary>
            从数据流中读入了原料
            </summary>
        </member>
        <member name="E:Geo.AbstractStreamService`2.MaterialProducing">
            <summary>
            准备处理原料，可以在此预处理原料，如根据缓存情况处理原料。
            </summary>
        </member>
        <member name="E:Geo.AbstractStreamService`2.MaterialEnded">
            <summary>
            原料用完啦！
            </summary>
        </member>
        <member name="P:Geo.AbstractStreamService`2.IsMaterialEnded">
            <summary>
            是否结束
            </summary>
        </member>
        <member name="P:Geo.AbstractStreamService`2.IsPostCheckEnabled">
            <summary>
            是否启用时候检查，若启用，成功后才返回结果
            </summary>
        </member>
        <member name="P:Geo.AbstractStreamService`2.IsIgnoreError">
            <summary>
            出错后是否继续
            </summary>
        </member>
        <member name="P:Geo.AbstractStreamService`2.DataSource">
            <summary>
            数据源
            </summary>
        </member>
        <member name="P:Geo.AbstractStreamService`2.IsCancel">
            <summary>
            是否取消计算过程。
            </summary>
        </member>
        <member name="P:Geo.AbstractStreamService`2.CurrentIndex">
            <summary>
            当前编号，从 0 开始。
            </summary>
        </member>
        <member name="P:Geo.AbstractStreamService`2.StartIndex">
            <summary>
            起始编号，从0开始。
            </summary>
        </member>
        <member name="P:Geo.AbstractStreamService`2.EnumCount">
            <summary>
            遍历数量，默认为最大值的一半。
            </summary>
        </member>
        <member name="P:Geo.AbstractStreamService`2.MaxEnumIndex">
            <summary>
            最大的循环编号
            </summary>
        </member>
        <member name="P:Geo.AbstractStreamService`2.Current">
            <summary>
            当前解算结果，可能为null。
            </summary>
        </member>
        <member name="P:Geo.AbstractStreamService`2.System#Collections#IEnumerator#Current">
            <summary>
            当前对象
            </summary>
        </member>
        <member name="T:Geo.IBufferedStreamService`2">
            <summary>
            具有缓存的数据流服务
            </summary>
            <typeparam name="TProduct"></typeparam>
            <typeparam name="TMaterial"></typeparam>
        </member>
        <member name="F:Geo.AbstractBufferdStreamService`2.log">
            <summary>
            日志记录。错误信息记录在日志里面。
            </summary>
        </member>
        <member name="M:Geo.AbstractBufferdStreamService`2.#ctor">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="M:Geo.AbstractBufferdStreamService`2.MoveNext">
            <summary>
            移动到下一条，如要设置了缓存，则先填充缓存。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractBufferdStreamService`2.AppendMaterialToBuffer(`1)">
            <summary>
            添加原料到缓存，这是一个原料入口。
            </summary>
            <param name="nextBufferMaterial"></param>
        </member>
        <member name="M:Geo.AbstractBufferdStreamService`2.PopMaterial">
            <summary>
            返回队列中第一个，如果队列为空，则返回 null;
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.AbstractBufferdStreamService`2.BufferSize">
            <summary>
            缓存大小，通常用于预读取，预处理数据。
            默认为 1 ，表示实时处理，不需要缓存。
            </summary>
        </member>
        <member name="P:Geo.AbstractBufferdStreamService`2.MaterialBufferSize">
            <summary>
            当前原料缓存的大小
            </summary>
        </member>
        <member name="P:Geo.AbstractBufferdStreamService`2.LastBufferedMaterial">
            <summary>
            获取最后一次缓存的原料。
            </summary>
        </member>
        <member name="T:Geo.AbstractStreamService`1">
            <summary>
            流式服务。没有指定数据源的流式服务。
            </summary> 
            <typeparam name="TProduct">产品或计算结果</typeparam>
        </member>
        <member name="F:Geo.AbstractStreamService`1.log">
            <summary>
            日志记录。错误信息记录在日志里面。
            </summary>
        </member>
        <member name="M:Geo.AbstractStreamService`1.SetEnumIndex(System.Int32,System.Int32)">
            <summary>
            设置遍历数量
            </summary>
            <param name="StartIndex"></param>
            <param name="EnumCount"></param>
        </member>
        <member name="M:Geo.AbstractStreamService`1.Gets(System.Int32,System.Int32)">
            <summary>
            批量生产产品，只返回成功的产品。
            </summary>
            <param name="startIndex">起始编号，从 0 开始</param>
            <param name="maxCount">最大的计算数量</param>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractStreamService`1.GetNexts(System.Int32)">
            <summary>
            获取接下来的一个列表。
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractStreamService`1.OnProductProduced(`0)">
            <summary>
            激发一次生产事件
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Geo.AbstractStreamService`1.MoveNext">
            <summary>
            移动到下一条
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractStreamService`1.Reset">
            <summary>
            重置数据流
            </summary>
        </member>
        <member name="M:Geo.AbstractStreamService`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:Geo.AbstractStreamService`1.GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.AbstractStreamService`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="E:Geo.AbstractStreamService`1.ProductProduced">
            <summary>
            成功计算完成一次，激发一次。
            </summary>
        </member>
        <member name="P:Geo.AbstractStreamService`1.IsCancel">
            <summary>
            计算过程中，是否取消。
            </summary>
        </member>
        <member name="P:Geo.AbstractStreamService`1.CurrentProduct">
            <summary>
            存储最后一次生产的产品
            </summary>
        </member>
        <member name="P:Geo.AbstractStreamService`1.CurrentIndex">
            <summary>
            当前编号，从 0 开始。
            </summary>
        </member>
        <member name="P:Geo.AbstractStreamService`1.StartIndex">
            <summary>
            起始编号，从0开始。
            </summary>
        </member>
        <member name="P:Geo.AbstractStreamService`1.EnumCount">
            <summary>
            遍历数量，默认为最大值的一半。
            </summary>
        </member>
        <member name="P:Geo.AbstractStreamService`1.MaxEnumIndex">
            <summary>
            最大的循环编号
            </summary>
        </member>
        <member name="P:Geo.AbstractStreamService`1.Current">
            <summary>
            当前解算结果，可能为null。
            </summary>
        </member>
        <member name="P:Geo.AbstractStreamService`1.System#Collections#IEnumerator#Current">
            <summary>
            当前对象
            </summary>
        </member>
        <member name="T:Geo.AbstractTimedService`3">
            <summary>
            断断续续的服务，也可以是多时间段的连续的服务，如，多个文件的钟差服务。
            </summary>
            <typeparam name="TProduct">产品</typeparam>
            <typeparam name="TCondition">条件</typeparam>
            <typeparam name="TTimeScope">时间</typeparam>
        </member>
        <member name="T:Geo.ITimedService`3">
            <summary>
            断断续续的服务，也可以是多时间段的连续的服务，如，多个文件的钟差服务。
            </summary>
            <typeparam name="TProduct">产品</typeparam>
            <typeparam name="TCondition">条件</typeparam>
            <typeparam name="TTimeScope">时间</typeparam>
        </member>
        <member name="M:Geo.AbstractTimedService`3.Get(`1)">
            <summary>
            获取产品
            </summary>
            <param name="condition">获取条件</param>
            <returns></returns>
        </member>
        <member name="T:Geo.IServiceChain`1">
            <summary>
            服务，提供一个默认的实现。
            当条件与产品一致时，可以组成服务链。
            </summary>
            <typeparam name="TProduct">产品和条件</typeparam> 
        </member>
        <member name="M:Geo.IServiceChain`1.Add(Geo.IService{`0,`0})">
            <summary>
            添加一个服务
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:Geo.IServiceChain`1.Insert(System.Int32,Geo.IService{`0,`0})">
            <summary>
            添加一个服务
            </summary>
            <param name="service"></param>
        </member>
        <member name="T:Geo.IBufferedStreamService`1">
            <summary>
            缓存，数据流服务。
            </summary>
            <typeparam name="TProduct"></typeparam>
        </member>
        <member name="T:Geo.ProducedEventHandler`2">
            <summary>
            生产委托
            </summary>
            <typeparam name="TMaterial">原料或查询条件的类型</typeparam>
            <typeparam name="TProduct">产品或结果类型</typeparam>
            <param name="material">原料或查询条件</param>
            <param name="product">产品</param>
        </member>
        <member name="T:Geo.ProducedEventHandler`1">
            <summary>
            生产委托
            </summary> 
            <typeparam name="TProduct">产品或结果类型</typeparam> 
            <param name="product">产品</param>
        </member>
        <member name="T:Geo.MaterialEventHandler`1">
            <summary>
            生产委托
            </summary> 
            <typeparam name="TMaterial">原料类型</typeparam> 
            <param name="material">原料</param>
        </member>
        <member name="T:Geo.MaterialCheckEventHandler`1">
            <summary>
            对原料进行检核，只有通过与不通过，返回结果。
            </summary>
            <typeparam name="TMaterial"></typeparam>
            <param name="material"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.ISuccessiveDateTimedService`2">
            <summary>
            断断续续的服务，也可以是多时间段的连续的服务，如，多个文件的钟差服务。
            </summary>
            <typeparam name="TProduct">产品</typeparam>
            <typeparam name="TCondition">条件</typeparam>
        </member>
        <member name="T:Geo.IGeoTimedService`2">
            <summary>
            断断续续的服务，也可以是多时间段的连续的服务，如，多个文件的钟差服务。
            </summary>
            <typeparam name="TProduct">产品</typeparam>
            <typeparam name="TCondition">条件</typeparam>
        </member>
        <member name="T:Geo.IOperation">
            <summary>
            操作接口
            </summary>
        </member>
        <member name="M:Geo.IOperation.Accept(Geo.OperationInfo)">
            <summary>
            接收，并检查输入。若不通过检查，则返回false。
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IOperation.Do">
            <summary>
            执行。若遇到不可原谅因素，则返回false。
            </summary>
            <returns></returns>
        </member>
        <member name="E:Geo.IOperation.StatedMessageProduced">
            <summary>
            处理过程中的信息。
            </summary>
        </member>
        <member name="P:Geo.IOperation.OperationInfo">
            <summary>
            输入信息
            </summary>
        </member>
        <member name="P:Geo.IOperation.ParamType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="P:Geo.IOperation.StatedMessage">
            <summary>
            过程与结果描述信息
            </summary>
        </member>
        <member name="T:Geo.IO.AbstractIoOperation">
            <summary>
            直接采用 IoParam 作为参数
            </summary>
        </member>
        <member name="T:Geo.IO.AbstractIoOperation`1">
            <summary>
            具有参数文件输入输出的顶层操作。
            </summary>
        </member>
        <member name="T:Geo.ParamBasedOperation`1">
            <summary>
            基于参数(文件)的操作。具有特定的目录。
            </summary>
        </member>
        <member name="T:Geo.Operation">
            <summary>
            操作。
            </summary>
        </member>
        <member name="M:Geo.Operation.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Operation.Accept(Geo.OperationInfo)">
            <summary>
            接收并检核操作信息
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Operation.OnStatedMessageProduced(Geo.StatedMessage)">
            <summary>
            执行过程中的信息反馈
            </summary>
        </member>
        <member name="M:Geo.Operation.Do">
            <summary>
            执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Operation.ToString">
            <summary>
            字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Operation.Equals(System.Object)">
            <summary>
            是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Operation.GetHashCode">
            <summary>
            哈希数
            </summary>
            <returns></returns>
        </member>
        <member name="E:Geo.Operation.StatedMessageProduced">
            <summary>
            信息反馈事件
            </summary>
        </member>
        <member name="P:Geo.Operation.OperationInfo">
            <summary>
            操作信息
            </summary>
        </member>
        <member name="P:Geo.Operation.ParamType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="P:Geo.Operation.IsCancel">
            <summary>
            是否取消执行
            </summary>
        </member>
        <member name="P:Geo.Operation.StatedMessage">
            <summary>
            数据处理信息。掌握处理过程。通常有的选择或错误不至于抛出异常，则采用这种方式对外通知。
            </summary>
        </member>
        <member name="M:Geo.ParamBasedOperation`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.ParamBasedOperation`1.Accept(Geo.OperationInfo)">
            <summary>
            接收，东西。
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.ParamBasedOperation`1.CurrentParam">
            <summary>
            当前参数
            </summary>
        </member>
        <member name="P:Geo.ParamBasedOperation`1.ParamType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="M:Geo.IO.AbstractIoOperation`1.#ctor(System.String,System.String)">
            <summary>
            需要指定输入输出类型的
            </summary>
            <param name="InputFileExtension"></param>
            <param name="WorkFileExtension"></param>
        </member>
        <member name="M:Geo.IO.AbstractIoOperation`1.Do">
            <summary>
            执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.AbstractIoOperation`1.GetParamFileReader">
            <summary>
            获取参数文件读取器
            </summary>
            <returns></returns> 
        </member>
        <member name="M:Geo.IO.AbstractIoOperation`1.CheckOrSetOutputDirectory(System.String)">
            <summary>
            检查输出目录是否为空，如果是则设置。
            </summary>
            <param name="outPath"></param>
        </member>
        <member name="M:Geo.IO.AbstractIoOperation`1.CheckOrExecute(System.String,System.String,System.Boolean)">
            <summary>
            转换
            </summary>
            <param name="fileInPath">输入文件路径</param>
            <param name="fileOutPath">输出文件路径</param>
            <param name="isOverwrite"></param>
        </member>
        <member name="M:Geo.IO.AbstractIoOperation`1.BuildOutputFilePath(System.String,System.String)">
            <summary>
            建立输出文件路径，以此指定或标记程序输出类型。
            </summary>
            <param name="outPath"></param>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.AbstractIoOperation`1.Execute(System.String,System.String)">
            <summary>
            具体的执行
            </summary>
            <param name="fileInPath"></param>
            <param name="fileOutPath"></param>
        </member>
        <member name="P:Geo.IO.AbstractIoOperation`1.InputFileManager">
            <summary>
            输入文件管理器
            </summary>
        </member>
        <member name="P:Geo.IO.AbstractIoOperation`1.InputFileExtension">
            <summary>
            输入文件匹配类型，可以以分号分隔多个匹配类型
            </summary>
        </member>
        <member name="P:Geo.IO.AbstractIoOperation`1.WorkFileExtension">
            <summary>
            执行时文件匹配类型，区别于输入文件匹配类型，如果不同则需要文件类型转换。，可以以分号分隔多个匹配类型
            </summary>
        </member>
        <member name="P:Geo.IO.AbstractIoOperation`1.OutputDirectory">
            <summary>
            工程输出目录
            </summary>
        </member>
        <member name="P:Geo.IO.AbstractIoOperation`1.TempDirecory">
            <summary>
            临时目录,如网络下载的数据。
            </summary>
        </member>
        <member name="T:Geo.IO.AbstractParallelableIoOperation`1">
            <summary>
            具有可选则并行计算参数文件输入输出的顶层操作。
            </summary>
        </member>
        <member name="M:Geo.IO.AbstractParallelableIoOperation`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="F:Geo.IO.AbstractParallelableIoOperation`1.StartTime">
            <summary>
            起始时间 计时器
            </summary>
        </member>
        <member name="M:Geo.IO.AbstractParallelableIoOperation`1.Do">
            <summary>
            执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.AbstractParallelableIoOperation`1.ParallelProcess(`0,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            并行计算 
            </summary>
            <param name="key"></param>
            <param name="filePathes"></param>
            <param name="outPath"></param>
        </member>
        <member name="M:Geo.IO.AbstractParallelableIoOperation`1.GetParallelOptions(System.Int32)">
            <summary>
             并行配置
            </summary>
        </member>
        <member name="M:Geo.IO.AbstractParallelableIoOperation`1.SerialProcess(`0,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            串行计算
            </summary>
            <param name="key"></param>
            <param name="filePathes"></param>
            <param name="outPath"></param>
        </member>
        <member name="T:Geo.IO.AbstractVersionedIoOperation">
            <summary>
            指定了版本的执行操作
            </summary>
        </member>
        <member name="T:Geo.IO.AbstractVersionedIoOperation`1">
            <summary>
            具有版本参数的操作
            </summary>
        </member>
        <member name="T:Geo.IO.ArrayParam">
            <summary>
            基线标记文件
            </summary>
        </member>
        <member name="T:Geo.RowClass">
            <summary>
            顶层行类，即有属性顺序的类，如行文件，文件参数等
            </summary>
        </member>
        <member name="M:Geo.IO.ArrayParam.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="Items"></param> 
        </member>
        <member name="T:Geo.IO.ArrayParamReader">
             <summary>
            通用数组
             </summary>
        </member>
        <member name="M:Geo.IO.ArrayParamReader.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.IO.ArrayParamReader.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="metaFilePath"></param>
        </member>
        <member name="M:Geo.IO.ArrayParamReader.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.ArrayParamReader.GetDefaultMetadata">
            <summary>
            默认的元数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.ArrayParamReader.Parse(System.String[])">
            <summary>
            字符串列表解析为属性
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.IO.IdAstroCoord">
            <summary>
            IdAstroCoord 坐标文件读取
            </summary>
        </member>
        <member name="T:Geo.IO.IdAstroCoordReader">
             <summary>
            天文坐标文件读取
             </summary>
        </member>
        <member name="M:Geo.IO.IdAstroCoordReader.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="metaFilePath"></param>
        </member>
        <member name="M:Geo.IO.IdAstroCoordReader.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.IdAstroCoordReader.GetDefaultMetadata">
            <summary>
            默认的元数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.IdAstroCoordReader.Parse(System.String[])">
            <summary>
            字符串列表解析为属性
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.IdAstroCoordReader.Convert(System.String,System.Double)">
            <summary>
            单位转换
            </summary>
            <param name="propertyName"></param>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.IO.IdAzimuthWithCoordSys">
            <summary>
            指定了坐标系统的方位角
            </summary>
        </member>
        <member name="T:Geo.IO.IdAzimuth">
            <summary>
            方位角。需要指明大地方位角、天文访问角、磁方位角等。
            </summary>
        </member>
        <member name="M:Geo.IO.IdAzimuth.#ctor(System.String,System.String,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="id"></param>
            <param name="toId"></param>
            <param name="Azimuth"></param>
        </member>
        <member name="P:Geo.IO.IdAzimuth.OrderedProperties">
            <summary>
            属性的顺序。
            </summary>
        </member>
        <member name="P:Geo.IO.IdAzimuth.Properties">
            <summary>
            属性。
            </summary>
        </member>
        <member name="P:Geo.IO.IdAzimuth.ToId">
            <summary>
            定向点标识
            </summary>
        </member>
        <member name="P:Geo.IO.IdAzimuth.Azimuth">
            <summary>
            方位角，值同 value。
            </summary>
        </member>
        <member name="P:Geo.IO.IdAzimuth.StdDev">
            <summary>
            误差，中误差，标准差，默认为 0。
            </summary>
        </member>
        <member name="M:Geo.IO.IdAzimuthWithCoordSys.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Geo.IO.IdAzimuthWithCoordSys.CoordSystem">
            <summary>
            坐标系统
            </summary>
        </member>
        <member name="P:Geo.IO.IdAzimuthWithCoordSys.AstroAzimuth">
            <summary>
            天文方位角
            </summary>
        </member>
        <member name="P:Geo.IO.IdAzimuthWithCoordSys.CorrectionToTheSeaLevel">
            <summary>
            化归海水面改正
            </summary>
        </member>
        <member name="P:Geo.IO.IdAzimuthWithCoordSys.GeoAzimuth">
            <summary>
            大地方位角
            </summary>
        </member>
        <member name="T:Geo.IO.IdAzimuthReader">
            <summary>
            IdAzimuth 文件读取
            </summary>
        </member>
        <member name="M:Geo.IO.IdAzimuthReader.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="metaFilePath"></param>
        </member>
        <member name="M:Geo.IO.IdAzimuthReader.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.IdAzimuthReader.GetDefaultMetadata">
            <summary>
            默认的元数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.IdAzimuthReader.Parse(System.String[])">
            <summary>
            字符串列表解析为属性
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.IdAzimuthReader.Convert(System.String,System.Double)">
            <summary>
            单位转换
            </summary>
            <param name="propertyName"></param>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.IO.IdGeoCoordWithCoordSysReader">
             <summary>
            具有坐标系的大地坐标
             </summary>
        </member>
        <member name="M:Geo.IO.IdGeoCoordWithCoordSysReader.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="metaFilePath"></param>
        </member>
        <member name="M:Geo.IO.IdGeoCoordWithCoordSysReader.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.IdGeoCoordWithCoordSysReader.GetDefaultMetadata">
            <summary>
            默认的元数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.IdGeoCoordWithCoordSysReader.Parse(System.String[])">
            <summary>
            字符串列表解析为属性
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.IdGeoCoordWithCoordSysReader.Convert(System.String,System.Double)">
            <summary>
            单位转换
            </summary>
            <param name="propertyName"></param>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.IO.InputParamReader">
             <summary>
            顶层输入读取器
             </summary>
        </member>
        <member name="M:Geo.IO.InputParamReader.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.IO.InputParamReader.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="metaFilePath"></param>
        </member>
        <member name="M:Geo.IO.InputParamReader.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.InputParamReader.GetDefaultMetadata">
            <summary>
            默认的元数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.InputParamReader.Parse(System.String[])">
            <summary>
            字符串列表解析为属性
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.IO.InputParamWriter">
             <summary>
            顶层输入写入器
             </summary>
        </member>
        <member name="M:Geo.IO.InputParamWriter.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.IO.InputParamWriter.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="metaFilePath"></param>
        </member>
        <member name="M:Geo.IO.InputParamWriter.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.InputParamWriter.GetDefaultMetadata">
            <summary>
            默认的元数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:Geo.IO.IoParamReader">
             <summary>
            复制的参数文件读取
             </summary>
        </member>
        <member name="M:Geo.IO.IoParamReader.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.IO.IoParamReader.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="metaFilePath"></param>
        </member>
        <member name="M:Geo.IO.IoParamReader.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.IoParamReader.Parse(System.String[])">
            <summary>
            字符串列表解析为属性
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.IO.IoParamWriter">
             <summary>
            输入输出写入器
             </summary>
        </member>
        <member name="M:Geo.IO.IoParamWriter.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.IO.IoParamWriter.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="metaFilePath"></param>
        </member>
        <member name="M:Geo.IO.IoParamWriter.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="T:Geo.IO.VersionedIoParamReader">
            <summary>
            具有输出版本的输入输出参数文件读取
            </summary>
        </member>
        <member name="M:Geo.IO.VersionedIoParamReader.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.IO.VersionedIoParamReader.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="metaFilePath"></param>
        </member>
        <member name="M:Geo.IO.VersionedIoParamReader.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.VersionedIoParamReader.Parse(System.String[])">
            <summary>
            字符串列表解析为属性
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.IO.IParallelableParam">
            <summary>
            可并行计算的参数接口
            </summary>
        </member>
        <member name="P:Geo.IO.IParallelableParam.IsParallel">
            <summary>
            是否采用并行计算
            </summary>
        </member>
        <member name="P:Geo.IO.IParallelableParam.ParallelProcessCount">
            <summary>
            并行粒度
            </summary>
        </member>
        <member name="T:Geo.IO.ParallelableParam">
            <summary>
            可并行计算的参数默认实现
            </summary>
        </member>
        <member name="P:Geo.IO.ParallelableParam.IsParallel">
            <summary>
            是否采用并行计算
            </summary>
        </member>
        <member name="P:Geo.IO.ParallelableParam.ParallelProcessCount">
            <summary>
            并行粒度
            </summary>
        </member>
        <member name="T:Geo.IO.IdAstroProduct">
            <summary>
            NamedAstroCoord 坐标文件读取
            </summary>
        </member>
        <member name="P:Geo.IO.IdAstroProduct.ToId">
            <summary>
            定向点标识
            </summary>
        </member>
        <member name="P:Geo.IO.IdAstroProduct.Azimuth">
            <summary>
            方位角
            </summary>
        </member>
        <member name="T:Geo.IO.IdGeoCoord">
            <summary>
            XYZ 坐标文件读取
            </summary>
        </member>
        <member name="T:Geo.IO.IdGeoCoordWithCoordSys">
            <summary>
            具有坐标系统的大地坐标
            </summary>
        </member>
        <member name="P:Geo.IO.IdGeoCoordWithCoordSys.CoordSystem">
            <summary>
            坐标系统
            </summary>
        </member>
        <member name="T:Geo.UnitConverter">
            <summary>
            单位转换器
            </summary>
        </member>
        <member name="M:Geo.UnitConverter.Convert(System.Double,Geo.Unit,Geo.Unit)">
            <summary>
            转换
            </summary>
            <param name="currentVal"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.IO.IdAstroProductReader">
             <summary>
            NamedAstroCoord文件读取
             </summary>
        </member>
        <member name="M:Geo.IO.IdAstroProductReader.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="metaFilePath"></param>
        </member>
        <member name="M:Geo.IO.IdAstroProductReader.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.IdAstroProductReader.GetDefaultMetadata">
            <summary>
            默认的元数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.IdAstroProductReader.Parse(System.String[])">
            <summary>
            字符串列表解析为属性
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.IdAstroProductReader.Convert(System.String,System.Double)">
            <summary>
            单位转换
            </summary>
            <param name="propertyName"></param>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.IO.IdGeoCoordReader">
             <summary>
            大地坐标文件读取
             </summary>
        </member>
        <member name="M:Geo.IO.IdGeoCoordReader.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="metaFilePath"></param>
        </member>
        <member name="M:Geo.IO.IdGeoCoordReader.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.IdGeoCoordReader.GetDefaultMetadata">
            <summary>
            默认的元数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.IdGeoCoordReader.Parse(System.String[])">
            <summary>
            字符串列表解析为属性
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.IdGeoCoordReader.Convert(System.String,System.Double)">
            <summary>
            单位转换
            </summary>
            <param name="propertyName"></param>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.IO.IdFloatReader">
            <summary>
            单值文件读取
            </summary>
        </member>
        <member name="M:Geo.IO.IdFloatReader.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="metaFilePath"></param>
        </member>
        <member name="M:Geo.IO.IdFloatReader.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.IdFloatReader.GetDefaultMetadata">
            <summary>
            默认的元数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.IdFloatReader.Parse(System.String[])">
            <summary>
            字符串列表解析为属性
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.IO.IdXyReader">
            <summary>
            XY 坐标文件读取
            </summary>
        </member>
        <member name="M:Geo.IO.IdXyReader.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="metaFilePath"></param>
        </member>
        <member name="M:Geo.IO.IdXyReader.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.IdXyReader.GetDefaultMetadata">
            <summary>
            默认的元数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.IdXyReader.Parse(System.String[])">
            <summary>
            字符串列表解析为属性
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.IO.IdXyRow">
            <summary>
            XYZ 坐标文件读取
            </summary>
        </member>
        <member name="T:Geo.IO.IdXyzRow">
            <summary>
            XYZ 坐标文件读取
            </summary>
        </member>
        <member name="M:Geo.IO.IdXyzRow.#ctor(System.String,Geo.Coordinates.XYZ)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
            <param name="xyz"></param>
        </member>
        <member name="T:Geo.IO.IdXyzReader">
            <summary>
            XYZ 坐标文件读取
            </summary>
        </member>
        <member name="M:Geo.IO.IdXyzReader.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="metaFilePath"></param>
        </member>
        <member name="M:Geo.IO.IdXyzReader.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.IdXyzReader.GetDefaultMetadata">
            <summary>
            默认的元数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.IdXyzReader.Parse(System.String[])">
            <summary>
            字符串列表解析为属性
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.IO.IInputParam">
            <summary>
            顶层，具有输入文件或目录，或URL的接口
            </summary>
        </member>
        <member name="P:Geo.IO.IInputParam.InputPath">
            <summary>
            输入路径，可以是文件、目录或URL
            </summary>
        </member>
        <member name="T:Geo.IO.InputParam">
            <summary>
            顶层，具有输入文件或目录，或URL的接口
            </summary>
        </member>
        <member name="P:Geo.IO.InputParam.InputPath">
            <summary>
            输入路径，可以是文件、目录或URL
            </summary>
        </member>
        <member name="T:Geo.IO.IoParam">
            <summary>
            顶层文件输入输出参数类
            </summary>
        </member>
        <member name="T:Geo.IO.OutputParam">
            <summary>
            顶层文件输出参数类
            </summary>
        </member>
        <member name="T:Geo.IO.IOutputParam">
            <summary>
            具有输出参数的接口
            </summary>
        </member>
        <member name="P:Geo.IO.IOutputParam.OutputPath">
            <summary>
            输出路径
            </summary>
        </member>
        <member name="M:Geo.IO.OutputParam.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Geo.IO.OutputParam.IsOverwrite">
            <summary>
            是否覆盖 overwrite，默认为真。
            </summary>
        </member>
        <member name="P:Geo.IO.OutputParam.OutputPath">
            <summary>
            输出路径，目录路径或文件路径。
            </summary>
        </member>
        <member name="T:Geo.IO.IIoParam">
            <summary>
            具有输入和输出参数的接口
            </summary>
        </member>
        <member name="M:Geo.IO.IoParam.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Geo.IO.IoParam.InputPath">
            <summary>
            输入路径
            </summary> 
        </member>
        <member name="P:Geo.IO.IVersionedIoParam.OutputVersion">
            <summary>
            版本
            </summary>
        </member>
        <member name="T:Geo.IO.VersionedIoParam">
            <summary>
            顶层文件输入输出参数类
            </summary>
        </member>
        <member name="M:Geo.IO.VersionedIoParam.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Geo.IO.VersionedIoParam.OutputVersion">
            <summary>
            版本
            </summary> 
        </member>
        <member name="T:Geo.IO.VectorName">
            <summary>
            基线标记文件
            </summary>
        </member>
        <member name="M:Geo.IO.VectorName.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="starName"></param>
            <param name="endName"></param>
        </member>
        <member name="P:Geo.IO.VectorName.StartName">
            <summary>
            起始的名称
            </summary>
        </member>
        <member name="P:Geo.IO.VectorName.EndName">
            <summary>
            目标的名称
            </summary>
        </member>
        <member name="T:Geo.IO.VectorNameReader">
             <summary>
            基线标记文件读取
             </summary>
        </member>
        <member name="M:Geo.IO.VectorNameReader.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.IO.VectorNameReader.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="metaFilePath"></param>
        </member>
        <member name="M:Geo.IO.VectorNameReader.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="filePath"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.IO.VectorNameReader.GetDefaultMetadata">
            <summary>
            默认的元数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.IO.VectorNameReader.Parse(System.String[])">
            <summary>
            字符串列表解析为属性
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.OperationInfo">
            <summary>
            操作文件
            </summary>
        </member>
        <member name="M:Geo.OperationInfo.#ctor">
            <summary>
            默认信息
            </summary>
        </member>
        <member name="M:Geo.OperationInfo.#ctor(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            构造函数
            </summary>
            <param name="operationName"></param>
            <param name="paramFilePath"></param>
            <param name="Depends"></param>
        </member>
        <member name="M:Geo.OperationInfo.ToString">
            <summary>
            字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.OperationInfo.Equals(System.Object)">
            <summary>
            相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.OperationInfo.GetHashCode">
            <summary>
            哈希数
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.OperationInfo.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Geo.OperationInfo.OperationName">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Geo.OperationInfo.ParamFilePath">
            <summary>
            参数文件路径,一般用相对路径。
            保存时采用相对路径，提取时采用绝对路径。
            </summary>
        </member>
        <member name="P:Geo.OperationInfo.Depends">
            <summary>
            依赖列表
            </summary>
        </member>
        <member name="P:Geo.OperationInfo.HasDepends">
            <summary>
            是否具有依赖
            </summary>
        </member>
        <member name="P:Geo.OperationInfo.ParamTypeName">
            <summary>
            参数类型名称
            </summary>
        </member>
        <member name="P:Geo.OperationInfo.DependsString">
            <summary>
            依赖字符串
            </summary>
        </member>
        <member name="T:Geo.OperationInfoReader">
             <summary>
            操作信息数据文件的读取
             </summary>
        </member>
        <member name="M:Geo.OperationInfoReader.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="gofFilePath"></param>
            <param name="metaFilePath"></param>
        </member>
        <member name="M:Geo.OperationInfoReader.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="gofFilePath"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.OperationInfoReader.Parse(System.String[])">
            <summary>
            字符串列表解析为属性
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.OperationInfoWriter">
             <summary>
            操作信息数据文件的写入
             </summary>
        </member>
        <member name="M:Geo.OperationInfoWriter.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="gofFilePath"></param>
            <param name="metaFilePath"></param>
        </member>
        <member name="M:Geo.OperationInfoWriter.#ctor(System.String,Geo.IO.Gmetadata)">
            <summary>
            构造函数
            </summary>
            <param name="gofFilePath"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.OperationInfoWriter.#ctor(System.IO.Stream,Geo.IO.Gmetadata)">
            <summary>
            构造函数，以数据流初始化
            </summary>
            <param name="stream"></param>
            <param name="Gmetadata"></param>
        </member>
        <member name="M:Geo.OperationInfoWriter.Write(Geo.OperationInfo)">
            <summary>
            写入
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:Geo.OperationManager`1">
            <summary>
            操作注册管理中心。操作首先在此注册后，才可以使用。
            </summary>
        </member>
        <member name="M:Geo.OperationManager`1.#ctor">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="M:Geo.OperationManager`1.Regist(`0)">
            <summary>
            注册
            </summary>
            <param name="operation"></param>
        </member>
        <member name="T:Geo.OperationManager">
            <summary>
            操作注册管理中心。操作首先在此注册后，才可以使用。
            </summary>
        </member>
        <member name="M:Geo.OperationManager.#ctor">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="T:Geo.OperationRunner">
            <summary>
            数据遍历处理器
            </summary>  
        </member>
        <member name="M:Geo.OperationRunner.#ctor">
            <summary>
            数据处理链条
            </summary>
        </member>
        <member name="M:Geo.OperationRunner.Run">
            <summary>
            遍历数据
            </summary> 
        </member>
        <member name="M:Geo.OperationRunner.InsertProcessor(System.Int32,Geo.Operation)">
            <summary>
            添加一个历元信息处理器。
            </summary>
            <param name="index">编号</param>
            <param name="processor">历元信息处理器</param>
        </member>
        <member name="M:Geo.OperationRunner.AddProcessor(Geo.Operation)">
            <summary>
            添加一个历元信息处理器。
            </summary>
            <param name="processor">历元信息处理器</param>
        </member>
        <member name="M:Geo.OperationRunner.AddProcessor(System.Collections.Generic.List{Geo.Operation})">
            <summary>
            批量添加历元处理器
            </summary>
            <param name="processor">批量历元信息处理器</param>
        </member>
        <member name="M:Geo.OperationRunner.Clear">
            <summary>
            清除所有的处理器
            </summary>
        </member>
        <member name="P:Geo.OperationRunner.Precessors">
            <summary>
            处理器。访问者设计模式。
            </summary>
        </member>
        <member name="T:Geo.OperationFlow">
            <summary>
            操作流程文件，对应1个.Gof文件
            是一个相对信息，不可脱离工程而活。
            </summary>
        </member>
        <member name="M:Geo.OperationFlow.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.OperationFlow.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Geo.OperationFlow.SaveToDirectory(System.String)">
            <summary>
            保存到路径
            </summary>
        </member>
        <member name="M:Geo.OperationFlow.ReadFromFile(System.String)">
            <summary>
            从文件中解析。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.OperationFlow.FileName">
            <summary>
            流程路径
            </summary>
        </member>
        <member name="T:Geo.Workflow">
            <summary>
            顶级工作流程，由多个BPE操作文件组成。
            </summary>
        </member>
        <member name="M:Geo.Workflow.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Workflow.Contains(System.String)">
            <summary>
            是否包含.同名也不行，也认为包含。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Workflow.GofFileNames">
            <summary>
            路径，相对于工程的路径
            </summary>
        </member>
        <member name="T:Geo.BaseOption">
            <summary>
            配置通用接口。
            配置无处不在，一般具有：
            1.数据源/文件；
            2.配置文件;
            3.执行程序
            就可以得到产品/文件。
            而一般程序会提供一个默认配置文件，则可以省略之。
            </summary>
        </member>
        <member name="T:Geo.IOption">
            <summary>
            配置通用接口。
            配置无处不在。
            计算型应用程序一般具有：
            1.数据源/文件；
            2.配置文件;
            3.执行程序
            就可以得到产品/文件。
            而一般程序会提供一个默认配置文件，则可以省略之。
            </summary>
        </member>
        <member name="M:Geo.BaseOption.#ctor(System.String)">
            <summary>
            构造函数。输入名称。
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Geo.FileOption">
            <summary>
            文件配置，需要至少提供一个路径。
            </summary>
        </member>
        <member name="T:Geo.IFileOption">
            <summary>
            配置通用接口。
            配置无处不在，通常具有：
            1.数据源/文件；
            2.配置文件;
            3.执行程序
            就可以得到产品/文件。
            而一般程序会提供一个默认配置文件，则可以直接运行，然后输出结果。
            </summary>
        </member>
        <member name="P:Geo.IFileOption.FilePath">
            <summary>
            文件路径。
            </summary>
        </member>
        <member name="P:Geo.IFileOption.FilePathes">
            <summary>
            文件路径集合
            </summary>
        </member>
        <member name="M:Geo.FileOption.#ctor(System.String,System.String)">
            <summary>
            构造函数。输入名称。
            </summary>
            <param name="FilePath">单文件</param>
            <param name="name">名称</param>
        </member>
        <member name="M:Geo.FileOption.#ctor(System.String[],System.String)">
            <summary>
            构造函数。输入名称。顺序与输出一致。
            </summary>
            <param name="FilePathes">集合文件</param>
            <param name="name">名称</param>
        </member>
        <member name="M:Geo.FileOption.#ctor(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            构造函数。输入名称。顺序与输出一致。
            </summary>
            <param name="FilePathes">集合文件</param>
            <param name="name">名称</param>
        </member>
        <member name="P:Geo.FileOption.FilePathes">
            <summary>
            文件路径集合
            </summary>
        </member>
        <member name="P:Geo.FileOption.FilePath">
            <summary>
            第一个文件路径
            </summary>
        </member>
        <member name="T:Geo.INetOption">
            <summary>
            配置通用接口。
            配置无处不在，一般具有：
            1.数据源/文件；
            2.配置文件;
            3.执行程序
            就可以得到产品/文件。
            而一般程序会提供一个默认配置文件，则可以省略之。
            </summary>
        </member>
        <member name="P:Geo.INetOption.Url">
            <summary>
            文件路径。
            </summary>
        </member>
        <member name="P:Geo.INetOption.Urls">
            <summary>
            文件路径集合
            </summary>
        </member>
        <member name="T:Geo.NetOption">
            <summary>
            网络资源配置，需要至少提供一个网络路径。
            </summary>
        </member>
        <member name="M:Geo.NetOption.#ctor(System.String,System.String)">
            <summary>
            构造函数。输入名称。
            </summary>
            <param name="Url">路径</param>
            <param name="name">名称</param>
        </member>
        <member name="M:Geo.NetOption.#ctor(System.String[],System.String)">
            <summary>
            构造函数。输入名称。
            </summary>
            <param name="Urls">集合路径</param>
            <param name="name">名称</param>
        </member>
        <member name="P:Geo.NetOption.Urls">
            <summary>
            文件路径集合
            </summary>
        </member>
        <member name="P:Geo.NetOption.Url">
            <summary>
            第一个文件路径
            </summary>
        </member>
        <member name="T:Geo.Setting">
            <summary>
            通用设置
            </summary>
        </member>
        <member name="F:Geo.Setting.WebSiteUrl">
            <summary>
            网站主页
            </summary>
        </member>
        <member name="F:Geo.Setting.BugReportUrl">
            <summary>
            汇报 Bug 网址
            </summary>
        </member>
        <member name="F:Geo.Setting.WebSiteUrlForNewVersion">
            <summary>
            访问网站附带版本信息
            </summary>
        </member>
        <member name="F:Geo.Setting.CurrentVersionUrl">
            <summary>
            当前版本地址
            </summary>
        </member>
        <member name="F:Geo.Setting.CurrentVersionCharacterUrl">
            <summary>
            当前版本的网络路径
            </summary>
        </member>
        <member name="F:Geo.Setting.ImprintPath">
            <summary>
            版本说明路径
            </summary>
        </member>
        <member name="F:Geo.Setting.HelpDocument">
            <summary>
            帮助文档
            </summary>
        </member>
        <member name="F:Geo.Setting.Version">
            <summary>
             版本
            </summary>
        </member>
        <member name="F:Geo.Setting.SupportEmail">
            <summary>
            发现故障的技术支持地址
            </summary>
        </member>
        <member name="F:Geo.Setting.VersionType">
            <summary>
            发行版本，以此进行功能控制
            </summary>
        </member>
        <member name="F:Geo.Setting.EnableLog">
            <summary>
            启动日志
            </summary>
        </member>
        <member name="F:Geo.Setting.IsDebug">
            <summary>
            初始是否为调试状态
            </summary>
        </member>
        <member name="F:Geo.Setting.IsShowWarning">
            <summary>
            显示警告,必须设置显示信息才显示
            </summary>
        </member>
        <member name="F:Geo.Setting.IsShowError">
            <summary>
            是否显示执行过程中的错误,必须设置显示信息才显示
            </summary>
        </member>
        <member name="F:Geo.Setting.IsShowInfo">
            <summary>
            显示信息，显示必要的信息，包含处理中的警告和错误，同时控制日志记录。如果未来加快速度可以不显示。
            </summary>
        </member>
        <member name="F:Geo.Setting.EnableNet">
            <summary>
            是否允许网络访问
            </summary>
        </member>
        <member name="M:Geo.Setting.Init">
            <summary>
            初始化程序
            </summary>
        </member>
        <member name="F:Geo.Setting.PathOfCrx2rnx">
            <summary>
            crx2rnx.exe 路径
            </summary>
        </member>
        <member name="F:Geo.Setting.TextTableFileFilter">
            <summary>
            对话框打开的表文件后缀
            </summary>
        </member>
        <member name="F:Geo.Setting.TextTableFileExtension">
            <summary>
            表文件后缀 .txt.xls
            </summary>
        </member>
        <member name="M:Geo.Setting.TryClearTempDirectory">
            <summary>
            尝试清空临时目录
            </summary>
        </member>
        <member name="P:Geo.Setting.IsNetEnabled">
            <summary>
            网络是否可以访问，包括局域网。
            </summary>
        </member>
        <member name="P:Geo.Setting.IsInternetEnabled">
            <summary>
            网络是否可以访问 Internet
            </summary>
        </member>
        <member name="P:Geo.Setting.ApplicationDirectory">
            <summary>
            程序根目录
            </summary>
        </member>
        <member name="P:Geo.Setting.ExeFolder">
            <summary>
            EXE 目录
            </summary>
        </member>
        <member name="P:Geo.Setting.TempDirectory">
            <summary>
            临时目录，程序启动或退出时将清空
            </summary>
        </member>
        <member name="P:Geo.Setting.DataDirectory">
            <summary>
            数据目录
            </summary>
        </member>
        <member name="P:Geo.Setting.TempDataDirectory">
            <summary>
            临时目录，程序启动或退出时将清空
            </summary>
        </member>
        <member name="T:System.Linq.Dynamic.DynamicQueryable">
            <summary>
            Linq 动态查询
            </summary>
        </member>
        <member name="T:Geo.TimeLooper">
            <summary>
            时间遍历器
            </summary>
        </member>
        <member name="M:Geo.TimeLooper.#ctor(Geo.Times.TimePeriod,System.Double)">
            <summary>
            构造has
            </summary>
            <param name="TimePeriod"></param>
            <param name="StepInSeconds"></param>
        </member>
        <member name="M:Geo.TimeLooper.Loop">
            <summary>
            循环
            </summary>
        </member>
        <member name="M:Geo.TimeLooper.LoopAsync(System.Int32)">
            <summary>
            并行循环
            </summary>
        </member>
        <member name="M:Geo.TimeLooper.OnLooping(Geo.Times.Time)">
            <summary>
            遍历
            </summary>
            <param name="Time"></param>
        </member>
        <member name="E:Geo.TimeLooper.Looping">
            <summary>
            遍历事件
            </summary>
        </member>
        <member name="P:Geo.TimeLooper.ProgressNotifier">
            <summary>
            进度条通知
            </summary>
        </member>
        <member name="P:Geo.TimeLooper.TimePeriod">
            <summary>
            时段
            </summary>
        </member>
        <member name="P:Geo.TimeLooper.StepInSeconds">
            <summary>
            步长，秒
            </summary>
        </member>
        <member name="P:Geo.TimeLooper.IsCancel">
            <summary>
            是否取消计算
            </summary>
        </member>
        <member name="T:Geo.Utils.EarthAdminRegion">
            <summary>
            地球行政区划
            </summary>
        </member>
        <member name="T:Geo.Utils.EarthAreas">
            <summary>
            地球区划
            </summary>
        </member>
        <member name="T:Geo.Utils.南美洲北部">
            <summary>
            12个国家/1个地区
            </summary>
        </member>
        <member name="T:Geo.Utils.ChineseAdminRegion">
            <summary>
            中国行政区划
            </summary>
        </member>
        <member name="M:Geo.Utils.ChineseAdminRegion.Add(System.String,System.String,System.String)">
            <summary>
            判断并添加
            </summary>
            <param name="provence"></param>
            <param name="city"></param>
            <param name="county"></param>
        </member>
        <member name="P:Geo.Utils.ChineseAdminRegion.IsUsingCounty">
            <summary>
            是否采用区、县
            </summary>
        </member>
        <member name="T:Geo.Utils.GeoRegionNode">
            <summary>
             地理区划
            </summary>
        </member>
        <member name="P:Geo.Utils.GeoRegionNode.EarthAreaTree">
            <summary>
            地球区划，分为各州分区和国家、地区
            </summary>
        </member>
        <member name="P:Geo.Utils.GeoRegionNode.ChineseAdminRegionTree">
            <summary>
            中国行政区划，到县
            </summary>
        </member>
        <member name="T:Geo.Utils.LinqUtil">
            <summary>
            Linq 工具
            </summary>
        </member>
        <member name="M:Geo.Utils.LinqUtil.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取属性名称
            2.	Response.Write(GetPropertyName &gt; TestClass (info= &gt;info.ID)) ; //输出的是 "ID" 两字母  
            3.	Response.Write(GetPropertyName &gt; TestClass   &gt;(info= &gt;info. Name)) ; //输出的是 "Name" 四个字母  
            4.	Response.Write(GetPropertyName &gt; TestClass  &gt; (info= &gt;info)) ; //输出的是 "TestClass" 九个字母 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.DbLoginInfo">
            <summary>
            数据库登录信息。
            </summary>
        </member>
        <member name="M:Geo.Utils.DbLoginInfo.Clone">
            <summary>
            克隆一个
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DbLoginInfo.GetConnectionString">
            <summary>
            获取字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geo.Utils.DbLoginInfo.ServerAddress">
            <summary>
            数据库服务器地址
            </summary>
        </member>
        <member name="P:Geo.Utils.DbLoginInfo.DababaseName">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="P:Geo.Utils.DbLoginInfo.LoginUser">
            <summary>
            登录用户名
            </summary>
        </member>
        <member name="P:Geo.Utils.DbLoginInfo.LoginPass">
            <summary>
            登录密码
            </summary>
        </member>
        <member name="T:SqlConditionList">
            <summary>
            SQL条件集合，
            负责处理各个条件的合并和最终SQL的生成。
            </summary>
        </member>
        <member name="M:SqlConditionList.Add(SqlConditionList.SqlCondition)">
            <summary>
            添加一个条件
            </summary>
            <param name="cond">条件</param>
        </member>
        <member name="M:SqlConditionList.AddLogic(SqlConditionList.SqlCondition,SqlLogicOper)">
            <summary>
            添加一个条件
            </summary>
            <param name="condition">条件</param>
            <param name="logicOper">与前一个条件的关系</param>
        </member>
        <member name="T:SqlConditionList.SqlCondition">
            <summary>
            SQL条件，也就是WHERE部分。
            </summary>
        </member>
        <member name="T:SqlConditionList.SqlConditionRelation">
            <summary>
            两个条件合并后的条件。
            </summary>
        </member>
        <member name="T:Geo.Utils.DbFileProcessChangedEventHandler">
            <summary>
            用于通知进度条文件上传或下载的进度。
            </summary>
            <param name="progressValue"></param>
        </member>
        <member name="T:Geo.Utils.SqlFileManager">
            <summary>
            SQL Server 数据库大文件上传、下载操作支持类。
            初始化此类时必须指明详细到数据库/数据表/数据列/单元格，其中数据表的主键为Int类型， 事务支持由SqlCommand调入。
            本类文件只有上传，下载，而没有编辑和删除功能。
            如果出错，则蹦出异常，由调用程序处理。
            Author:czs
            Version:1.0
            Time:2012.01.02
            </summary>
        </member>
        <member name="M:Geo.Utils.SqlFileManager.DownloadFile(System.String,System.Int32)">
            <summary>
            从数据库表的BLOB列读取二进制数据块，并写入文件中
            </summary>
            <param name="reader">已打开的SqlDataReader</param>
            <param name="column">BLOB列的序列</param>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:Geo.Utils.SqlFileManager.DownloadFile(System.IO.Stream,System.Int32)">
            <summary>
            从数据库表的BLOB列读取二进制数据块，并写入输出流
            </summary>
            <param name="outStream">输出流</param>
            <param name="fileId"></param>
        </member>
        <member name="M:Geo.Utils.SqlFileManager.UploadFileAsVarBinarryMax(System.String,System.Int32)">
            <summary>
            Up load file 采用WRITE方法增量更新。
            需要SQL Server 2005及其以上版本支持。
            对应文件列类型应为 varbinary(MAX)
            </summary>
            <param name="filePath"></param>
            <param name="fileId"></param>
            <param name="progressBar"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.SqlFileManager.UploadFileAsVarBinarryMax(System.IO.Stream,System.Int32)">
             <summary>
            Up load file 采用WRITE方法增量更新。
             需要SQL Server 2005及其以上版本支持
              对应文件列类型应为 varbinary(MAX)
             </summary>
             <param name="fileId"></param>
             <param name="inputStream">输入（数据库）流</param>
             <param name="msg"></param>
             <returns></returns>
        </member>
        <member name="M:Geo.Utils.SqlFileManager.AppendFile(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            增量更新指定文件列。
             对应文件列类型应为 varbinary(MAX)
            Sql server 2005
            </summary>
            <param name="fileBytes"></param>
            <param name="fileId"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.SqlFileManager.UploadFileAsImage(System.String,System.Int32)">
            <summary>
            支持SQL 2000的文件上传
            到 SQL 2008也支持。但以后可能会废弃，见微软官方文档。
            对应文件列类型应为 Image<br />
            http://msdn.microsoft.com/zh-cn/library/ms189466.aspx
            后续版本的 Microsoft SQL Server 将删除该功能。
            请避免在新的开发工作中使用该功能，并着手修改当前还在使用该功能的应用程序。
            请改用大值数据类型和 UPDATE 语句的 .WRITE 子句
            </summary>
            <param name="filePath"></param>
            <param name="fileId"></param>
            <param name="progressBar"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.SqlFileManager.UploadFileAsImage(System.IO.FileStream,System.Int32)">
            <summary>
             支持SQL 2000的文件上传
              如果出错，则蹦出异常，由调用程序处理
              对应文件列类型应为 Image<br />
            http://msdn.microsoft.com/zh-cn/library/ms189466.aspx
            后续版本的 Microsoft SQL Server 将删除该功能。
            请避免在新的开发工作中使用该功能，并着手修改当前还在使用该功能的应用程序。
            请改用大值数据类型和 UPDATE 语句的 .WRITE 子句
            </summary>
            <param name="inputStream"></param>
            <param name="fileId"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.SqlFileManager.UploadFileAsImage(System.IO.FileStream,System.Byte[])">
            <summary>
            MSDN 例子,支持 SQL 2000。
            如果出错，则蹦出异常，由调用程序处理。
            对应文件列类型应为 Image<br />
            http://msdn.microsoft.com/zh-cn/library/ms189466.aspx
            后续版本的 Microsoft SQL Server 将删除该功能。
            请避免在新的开发工作中使用该功能，并着手修改当前还在使用该功能的应用程序。
            请改用大值数据类型和 UPDATE 语句的 .WRITE 子句
            </summary>
            <param name="inputStream">输入数据库的流</param>
            <param name="pointer">TextPtr，数据库BLOB列的指针</param>
            <param name="connection"></param>
        </member>
        <member name="P:Geo.Utils.SqlFileManager.BufferSize">
            <summary>
            缓存大小
            </summary>
        </member>
        <member name="P:Geo.Utils.SqlFileManager.SqlCommand">
            <summary>
            如果要启用事务支持，必须传入此数据。
            </summary>
        </member>
        <member name="P:Geo.Utils.SqlFileManager.TableName">
            <summary>
            文件表名称
            </summary>
        </member>
        <member name="P:Geo.Utils.SqlFileManager.ColumeName">
            <summary>
            文件列名称
            </summary>
        </member>
        <member name="P:Geo.Utils.SqlFileManager.IdColumeName">
            <summary>
            主键名称
            </summary>
        </member>
        <member name="P:Geo.Utils.SqlFileManager.UploadFileLength">
            <summary>
            上传文件的大小
            </summary>
        </member>
        <member name="M:Geodesy.SqlUtils.SQLFormatProjects(System.Collections.Generic.List{System.String})">
            <summary>
            在多个工程中查询时，将以数组表示的工程格式化为可在SQL语句中可用IN连接的字符串
            </summary>
            <param name="projs">工程数组</param>
            <returns>SQL语句中可用IN连接的字符串</returns>
        </member>
        <member name="T:Geo.Utils.SqlUtils">
            <summary>
            数据库连接和操作的实用类。
            </summary>
        </member>
        <member name="F:Geo.Utils.SqlUtils.ConnectString">
            <summary>
            数据库连接字符串。
            </summary>
        </member>
        <member name="M:Geo.Utils.SqlUtils.GetDataTable(System.String,System.String,System.String)">
            <summary>
            get a data table with one cloum eaualing to the indicated value.
            </summary>
            <param name="tableName"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.SqlUtils.GetDataTable(System.String)">
            <summary>
            get a data table by a sql string. ConnectString must be initlized previously.
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.SqlUtils.GetDataTable(System.String,System.String)">
            <summary>
            Get a datatable by sql string.
            </summary>
            <param name="sql"></param>
            <param name="connectString"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.SqlUtils.GetDataRow(System.String,System.Int32)">
            <summary>
            get one row in a table by indicate it's index.
            </summary>
            <param name="tableName"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.SqlUtils.GetCount(System.String)">
            <summary>
            获取行数
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.SqlUtils.GetDataRow(System.String,System.String,System.String)">
            <summary>
            get the prevObj row with the column equaling the value
            </summary>
            <param name="tableName"></param>
            <param name="cloumnName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.SqlUtils.DeleteAllRow(System.String)">
            <summary>
            删除表所有行
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.SqlUtils.GetConnStr">
            <summary>
            return a ConnectionString object for connecting to a database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.SqlUtils.ConstructCnStr(System.String,System.String,System.String,System.String)">
            <summary>
            construct a ConnectionString with parameters.
            </summary>
            <param name="server"></param>
            <param name="db"></param>
            <param name="user"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.SqlUtils.SQLFormatProjects(System.Collections.Generic.List{System.String})">
            <summary>
            在多个工程中查询时，将以数组表示的工程格式化为可在SQL语句中可用IN连接的字符串
            </summary>
            <param name="projs">工程数组</param>
            <returns>SQL语句中可用IN连接的字符串</returns>
        </member>
        <member name="M:Geo.Utils.SqlUtils.GetList(System.String)">
            <summary>
            执行查询，并返回查询所返回的结果集中的第一列。
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.SqlUtils.ExecuteScalar(System.String)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行。
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.SqlUtils.ExecuteWithTransanction(System.Collections.Generic.List{System.String})">
            <summary>
            利用 SQL 事务依次执行SQL语句。
            </summary>
            <param name="sqls">待执行的SQL语句</param>
            <returns>成功则True，否则为False</returns>
        </member>
        <member name="M:Geo.Utils.SqlUtils.GetConnString">
            <summary>
            return a ConnectionString object for connecting to a database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.SqlUtils.GetConnString(System.String,System.String,System.String,System.String)">
            <summary>
            construct a ConnectionString with parameters.
            </summary>
            <param name="server"></param>
            <param name="db"></param>
            <param name="currentItem"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.ArrayUtil">
            <summary>
            数组工具类。
            </summary>
        </member>
        <member name="M:Geo.Utils.ArrayUtil.GetSubArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            返回子数组，如果不满足要求，则返回空数组。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="fromIndex"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ArrayUtil.GetEnds``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            返回尾部子数组，如果不足，则返回原数组。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ArrayUtil.GetNamesInOldOrders(System.Collections.Generic.List{System.String},System.String[])">
            <summary>
            按照老顺序排序
            </summary>
            <param name="names"></param>
            <param name="oldOrders"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.AsiiUtil">
            <summary>
            双精度类型实用工具类。
            </summary>
        </member>
        <member name="M:Geo.Utils.AsiiUtil.GetChar(System.Int32)">
            <summary>
            Char
            </summary>
            <param name="i">数字</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Utils.AsiiUtil.StartOfHeader">
            <summary>
            头文件开始
            </summary>
        </member>
        <member name="P:Geo.Utils.AsiiUtil.StartOfText">
            <summary>
            文本开始
            </summary>
        </member>
        <member name="P:Geo.Utils.AsiiUtil.EndOfText">
             <summary>
            文本结束
             </summary>
        </member>
        <member name="P:Geo.Utils.AsiiUtil.EndOfTransfer">
            <summary>
            传输结束
            </summary>
        </member>
        <member name="P:Geo.Utils.AsiiUtil.EndOfBlock">
            <summary>
            传输块的结束
            </summary>
        </member>
        <member name="M:Geo.Utils.BookCheckDigit.GetF10ISBN(System.String)">
            <summary>
            10位数字中国标准书号校验码的计算。
            <remarks>     
            10位数字中国标准书号校验码采用模数11的加权算法计算得出。
            
            数学公式为：
            校验码 = mod 11 {11-[mod 11 (加权乘积之和)]}
                   = mod 11 {11-[mod 11 (248)]}
                   = 5
            
            以ISBN 7-5064-2595-5为例。
            </remarks>
            </summary>
            <param name="sCode"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.BookCheckDigit.GetF13ISBN(System.String)">
            <summary>
            13位数字中国标准书号的校验码的计算。
            <remarks>
            13位数字中国标准书号的校验码采用模数10的加权算法计算得出。
            
            数学算式为：
            校验码 = mod 10 {10 – [mod 10 (中国标准书号前12位数字的加权乘积之和)]}
                   = mod 10 {10 – [mod 10 (123)]}
                   = 7
            
            以ISBN 978-7-5064-2595-7为例。
            </remarks>
            </summary>
            <param name="sCode"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.BookCheckDigit.ISBN10T13(System.String)">
            <summary>
            10位数字的中国标准书号转换为13位数字的中国标准书号。
            <remarks>
            10位数字的中国标准书号转换为13位数字的中国标准书号，在其前9位数字之前加EAN•UCC前缀978，
            以模数10加权算法计算得出的校验码取代10位数字中国标准书号的校验码。
            </remarks>
            </summary>
            <param name="sISBN"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.ByteEncoder">
            <summary>
            字节编码
            </summary>
        </member>
        <member name="M:Geo.Utils.ByteEncoder.GetBigEndian(System.Int32)">
            <summary>
            Returns the value encoded in Big Endian (PPC, XDR) format.
            </summary>
            <param name="value">Value to encode.</param>
            <returns>Big-endian encoded value.</returns>
        </member>
        <member name="M:Geo.Utils.ByteEncoder.GetBigEndian(System.UInt16)">
            <summary>
            Returns the value encoded in Big Endian (PPC, XDR) format.
            </summary>
            <param name="value">Value to encode.</param>
            <returns>Big-endian encoded value.</returns>
        </member>
        <member name="M:Geo.Utils.ByteEncoder.GetBigEndian(System.UInt32)">
            <summary>
            Returns the value encoded in Big Endian (PPC, XDR) format.
            </summary>
            <param name="value">Value to encode.</param>
            <returns>Big-endian encoded value.</returns>
        </member>
        <member name="M:Geo.Utils.ByteEncoder.GetBigEndian(System.Double)">
            <summary>
            Returns the value encoded in Big Endian (PPC, XDR) format.
            </summary>
            <param name="value">Value to encode.</param>
            <returns>Big-endian encoded value.</returns>
        </member>
        <member name="M:Geo.Utils.ByteEncoder.GetLittleEndian(System.Int32)">
            <summary>
            Returns the value encoded in Little Endian (x86, NDR) format.
            </summary>
            <param name="value">Value to encode.</param>
            <returns>Little-endian encoded value.</returns>
        </member>
        <member name="M:Geo.Utils.ByteEncoder.GetLittleEndian(System.UInt32)">
            <summary>
            Returns the value encoded in Little Endian (x86, NDR) format.
            </summary>
            <param name="value">Value to encode.</param>
            <returns>Little-endian encoded value.</returns>
        </member>
        <member name="M:Geo.Utils.ByteEncoder.GetLittleEndian(System.UInt16)">
            <summary>
            Returns the value encoded in Little Endian (x86, NDR) format.
            </summary>
            <param name="value">Value to encode.</param>
            <returns>Little-endian encoded value.</returns>
        </member>
        <member name="M:Geo.Utils.ByteEncoder.GetLittleEndian(System.Double)">
            <summary>
            Returns the value encoded in Little Endian (x86, NDR) format.
            </summary>
            <param name="value">Value to encode.</param>
            <returns>Little-endian encoded value.</returns>
        </member>
        <member name="M:Geo.Utils.ByteEncoder.swapByteOrder(System.Int32)">
            <summary>
            Swaps the Byte order of an <see cref="T:System.Int32"/>.
            </summary>
            <param name="value"><see cref="T:System.Int32"/> to swap the bytes of.</param>
            <returns>Byte order swapped <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Geo.Utils.ByteEncoder.swapByteOrder(System.UInt16)">
            <summary>
            Swaps the byte order of a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value"><see cref="T:System.UInt16"/> to swap the bytes of.</param>
            <returns>Byte order swapped <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:Geo.Utils.ByteEncoder.swapByteOrder(System.UInt32)">
            <summary>
            Swaps the byte order of a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value"><see cref="T:System.UInt32"/> to swap the bytes of.</param>
            <returns>Byte order swapped <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:Geo.Utils.ByteEncoder.swapByteOrder(System.Int64)">
            <summary>
            Swaps the byte order of a <see cref="T:System.Int64"/>.
            </summary>
            <param name="value"><see cref="T:System.Int64"/> to swap the bytes of.</param>
            <returns>Byte order swapped <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Geo.Utils.ByteEncoder.swapByteOrder(System.Double)">
            <summary>
            Swaps the byte order of a <see cref="T:System.Double"/> (double precision IEEE 754)
            </summary>
            <param name="value"><see cref="T:System.Double"/> to swap.</param>
            <returns>Byte order swapped <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="T:Geo.Utils.ByteSequence">
            <summary>
            字节顺序存储结构。编号低位为先传入的数据。后续增加的数据追加到后面。
            是一个字节数组队列。
            </summary>
        </member>
        <member name="M:Geo.Utils.ByteSequence.#ctor">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="M:Geo.Utils.ByteSequence.Inverse(System.Collections.Generic.List{System.Byte})">
            <summary>
            字节内部顺序对调
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ByteSequence.Inverse(System.Byte[])">
            <summary>
            将字节反转。字节内部顺序对调
            </summary>
            <param name="bytes">待反转的字节</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ByteSequence.Inverse(System.Byte)">
            <summary>
            将字节反转。
            </summary>
            <param name="aByte">待反转的字节</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ByteSequence.Inverse(System.Int32,System.Int32)">
            <summary>
            反转二进制序列。最多可以处理32位。
            </summary>
            <param name="bits">二进制序列</param>
            <param name="ch">二进制长度</param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.BitConvertUtil">
            <summary>
            提供二进制转换工具
            </summary>
        </member>
        <member name="M:Geo.Utils.BitConvertUtil.GetCharString(Geo.Utils.StringSequence,System.Int32)">
            <summary>
            获取字符字符串。
            </summary>
            <param name="sequence">序列</param>
            <param name="charCount">字符数量</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.BitConvertUtil.GetBoolean(System.String)">
            <summary>
            将二进制字符串转化为布尔型。
            </summary>
            <param name="binStr">二进制字符串,0,1</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.BitConvertUtil.GetBinString(System.Collections.Generic.List{System.Byte})">
            <summary>
            将转换成连续的二进制字符串。
            </summary>
            <param name="data">字节数组</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.BitConvertUtil.GetUInt(System.String)">
            <summary>
            将二进制字符串转化为整型。全部是正数
            </summary>
            <param name="binStr">二进制字符串</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.BitConvertUtil.GetInt(System.String)">
            <summary>
            将Int型二进制字符串转化为整型，以补码的形式存储   2016.01.22  double,czs  create in Hongqing
            </summary>
            <param name="binStr">二进制字符串</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.BitConvertUtil.ConvertToInt32WithComplementalCode(System.String)">
            <summary>
            二进制字符串转换为有符号的32位整型，采用补码编码。
            </summary>
            <param name="binStr"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.BitConvertUtil.ConvertToInt64WithComplementalCode(System.String)">
            <summary>
            二进制字符串转换为有符号的64位整型，采用补码编码。
            </summary>
            <param name="binStr"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.BitConvertUtil.ConvertToInt32WithInverseCode(System.String)">
            <summary>
            IntS型二进制，以反码的形式存储   2016.01.22  double  create in Hongqing
            </summary>
            <param name="binStr"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.BitConvertUtil.ConvertToInt64WithInverseCode(System.String)">
            <summary>
            IntS型二进制，以反码的形式存储   2016.01.22  double  create in Hongqing
            </summary>
            <param name="binStr"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.BitConvertUtil.Inverse(System.String)">
            <summary>
            二进制字符串取反。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.BitConvertUtil.GetLong(System.String)">
            <summary>
            将二进制字符串转化为长整型
            </summary>
            <param name="binStr">二进制字符串</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.BitConvertUtil.GetChar(System.String)">
            <summary>
            将二进制字符串转化为单个字符。
            </summary>
            <param name="binStr">二进制字符串</param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.ByteUtil">
            <summary>
            提供一些字节遍历工具
            </summary>
        </member>
        <member name="M:Geo.Utils.ByteUtil.GetFirstBits(System.Collections.Generic.List{System.Byte},System.Int32)">
            <summary>
            通过移位的方法获取前几个字节代表的数字。
            </summary>
            <param name="data"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ByteUtil.GetLeftBits(System.Byte,System.Int32)">
            <summary>
            从高位截取字节。
            </summary>
            <param name="count"></param>
            <param name="bt"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ByteUtil.GetLeftShiftedByte(System.Byte,System.Int32)">
            <summary>
            获取左移后的二进制。
            </summary>
            <param name="bt"></param>
            <param name="leftShiftCount"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ByteUtil.GetReadableFileSize(System.Double)">
            <summary>
             返回人们能读懂的文件大小的字符串。如 “5MB”
            </summary>
            <param name="Length">文件大小（字节）</param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.CompressUtil">
            <summary>
            压缩与解压缩。
            </summary>
        </member>
        <member name="M:Geo.Utils.CompressUtil.DecompressLzw(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
             解压缩 *.Z 文件,可指定是否删除原文件。
            </summary>
            <param name="compressedFilePath"></param>
            <param name="destDir"></param>
        </member>
        <member name="M:Geo.Utils.CompressUtil.Decompres(System.String,System.String,System.String,System.Boolean)">
            <summary>
            ZIP or Z
            </summary>
            <param name="compressedFilePath"></param>
            <param name="destDir"></param>
            <param name="pass"></param>
        </member>
        <member name="T:Geo.Utils.DataTableUtil">
            <summary>
            DataTable 工具类。
            </summary>
        </member>
        <member name="M:Geo.Utils.DataTableUtil.LinesToTable(System.String[])">
            <summary>
            将文本行打伞解析为数据表。
            </summary>
            <param name="lines"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DataTableUtil.Create(System.String,System.String[],System.String[][],System.Type[])">
            <summary>
            创建一个DataTable
            </summary>
            <param name="name"></param>
            <param name="headerText"></param>
            <param name="cells"></param>
            <param name="colTypes"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.DateTimeUtil">
            <summary>
            时间处理工具类
            </summary>
        </member>
        <member name="M:Geo.Utils.DateTimeUtil.GetDateTimePathStringNow">
            <summary>
            以时间为路径字符串 yyyy.MM.dd.HH.mm.ss
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DateTimeUtil.GetDateTimePathString(System.DateTime)">
            <summary>
            以时间为路径字符串 yyyy.MM.dd.HH.mm.ss
            </summary>
            <param name="dateTime">系统时间对象</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DateTimeUtil.GetFormatedDateTimeNow">
            <summary>
            获取当前时间的字符串 yyyy-MM-dd HH:mm:ss
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DateTimeUtil.GetFormatedTimeNow(System.Boolean)">
            <summary>
            获取当前时间的字符串 HH:mm:ss
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DateTimeUtil.GetFormatedDateTime(System.DateTime)">
            <summary>
            获取时间的格式化字符串 yyyy-MM-dd HH:mm:ss
            </summary>
            <param name="dateTime">系统时间对象</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DateTimeUtil.GetFormatedTime(System.DateTime,System.Boolean)">
            <summary>
            获取时间的格式化字符串 HH:mm:ss
            </summary>
            <param name="dateTime">系统时间对象</param>
            <param name="showMilliSecond">是否显示毫秒</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DateTimeUtil.TryParse(System.String)">
            <summary>
            若解析不成功，则采用DateTime.MinValue
            </summary>
            <param name="timeString"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DateTimeUtil.TryParse(System.Object)">
            <summary>
            尽力解析时间
            </summary>
            <param name="timeString">时间字符串</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DateTimeUtil.GetFloatString(System.TimeSpan)">
            <summary>
            判断时间间隔大小，返回合适的时间字符串，如 5.00 秒， 8.98分。
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DateTimeUtil.GetTimeStringWithMiniSecondNow">
            <summary>
            获取当前时间到毫秒，通常用于日志记录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DateTimeUtil.GetTimeStringWithMiniSecond(System.DateTime)">
            <summary>
            获取当前时间到毫秒，通常用于日志记录
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DecompressRinexer.DecompressFileOrDirectory(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            解压文件或目录。
            </summary>
            <param name="fileOrDirectory"></param>
            <param name="toDirectory"></param>
            <param name="deleSource"></param>
            <param name="overwrite"></param>
        </member>
        <member name="T:Geo.Utils.DictionaryUtil">
            <summary>
            字典工具
            </summary>
        </member>
        <member name="M:Geo.Utils.DictionaryUtil.ToStringLines``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            两列
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dicA"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DictionaryUtil.IsEqual``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            比较是否相等
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dicA"></param>
            <param name="dicB"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DictionaryUtil.GetFirstValue``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            返回第一个值。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="keyDic"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DictionaryUtil.GetLastValue``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            返回最后一个值。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="keyDic"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DictionaryUtil.GetLastKey``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            返回最后一个值。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="keyDic"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DictionaryUtil.GetFirstKey``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            返回第一个值。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="keyDic"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DictionaryUtil.GetNumeral(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
             获取浮点数。错误则返回NaN
            </summary>
            <param name="colName"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DictionaryUtil.GetValidDataCount(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            获取有效数据的数量，非null或空
            </summary>
            <param name="keyDic"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DictionaryUtil.GetCommonValues``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1}[])">
            <summary>
            获取列表共同key的值，返回数组
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dic1"></param>
            <param name="intValOfNL"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DictionaryUtil.FilterOtherValueType``2(System.Collections.Generic.Dictionary{``0,System.Object})">
            <summary>
            过滤转换
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="intValOfWL"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.DoubleUtil">
            <summary>
            双精度类型实用工具类。
            </summary>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.Plus(System.Double,System.Double)">
            <summary>
            +
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.Minus(System.Double,System.Double)">
            <summary>
            -
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.Div(System.Double,System.Double)">
            <summary>
            /
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.Multipy(System.Double,System.Double)">
            <summary>
            *
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetFraction(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            返回 0-1 之间
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetFraction(System.Double)">
            <summary>
            返回 0-1 之间
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetNearstIntBias(System.Double,System.Double)">
            <summary>
            返回最接近指定数值的整数，保证数值偏差在0.5以内。
            如 2.7 和 0.1，2.7 应该取整为 3 而不是 2 
            </summary>
            <param name="currentVal"></param>
            <param name="toBeNear"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetIntFreeFraction(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            获取小数部分。
            整数项无关获取小数法。
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetLoopDifferValue(System.Double[])">
            <summary>
            后一个减去前一个，反复做差，返回最后一个差分结果。
            输入n个，则做n-1次差。
            如果输入两个，则做一次差。
            如果结果值较大，则认为最后一个数据异常。
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetDiffer(System.Double[],System.Int32)">
            <summary>
            获取多次差分的结果，后减前
            </summary>
            <param name="array"></param>
            <param name="differCount"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetDiffer(System.Double[])">
            <summary>
            获取一次差分值，后减前
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetAverageValue(System.Double,System.Double,System.Int32)">
            <summary>
            计算平均值，通过以往平均数据计算，滤波。
            </summary>
            <param name="newVal"></param>
            <param name="oldAverageValue"></param>
            <param name="currentValCount"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetFractionAverage(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            0-1之间整数无关的求平均数。
            </summary>
            <param name="data">数据集合</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.Average(System.Double[])">
            <summary>
            求平均数。
            </summary>
            <param name="data">数据集合</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.Average(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            求平均数。
            </summary>
            <param name="data">数据集合</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetAverageWithStdDev(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            返回平均数和标准差（均方差mse）。
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.IsValid(System.Double)">
            <summary>
            指示一个双精度数字是否有效。
            </summary>
            <param name="currentVal">数值</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.IsZeroOrNotValid(System.Double)">
            <summary>
            判断数值是否为0，或无效。
            </summary>
            <param name="currentVal">数值</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.IsBetween(System.Double,System.Double,System.Double)">
            <summary>
            是否在范围中，含边界。
            </summary>
            <param name="currentVal"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.Filter(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            过滤掉绝对值超过限差（不含）的数。
            </summary>
            <param name="Residuals">残差数组</param>
            <param name="maxAbs">最大绝对值（不含）</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.ParseLines(System.String[],System.Boolean)">
            <summary>
            数组解析为双精度数字。
            </summary>
            <param name="lines">字符串数组</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.ParseTable(System.String[],System.Boolean,System.Boolean)">
            <summary>
             读取双精度数组集合。只返回数据部分，可设置是否忽略首行首列。
            </summary>
            <param name="lines">以分隔符分开的行</param>
            <param name="IsIgnoreFirstRow">是否忽略第一行</param>
            <param name="IsIgnoreFirstCol">是否忽略第一列</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.ToDic(System.Collections.Generic.List{System.Double[]})">
            <summary>
            提取前两个数字为字典
            </summary>
            <param name="table">数据表</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.TryParse(System.Object,System.Object)">
            <summary>
            尝试解析
            </summary>
            <param name="p"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.TryParse(System.String,System.Double)">
            <summary>
            如果失败则返回 0 。
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.TryDisclosure(System.Object,System.Double)">
            <summary>
            对Object 进行拆封，如果是数字类型则返回，否则返回 defaultValue。
            如果是数字，但采用的string类型保存，也认为是非数字类型。
            即一定要内存中是数字类型，才成功。
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.Max(System.Double[])">
            <summary>
            求出最大数。
            </summary>
            <param name="array">数组</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.Max(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            求出最大数。
            </summary>
            <param name="array">数组</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.MaxAbs(System.Double[])">
            <summary>
            求出绝对值最大数
            </summary>
            <param name="array">数组</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.Min(System.Double[])">
            <summary>
            求出最小数。
            </summary>
            <param name="array">数组</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.Min(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            求出最小数。
            </summary>
            <param name="array">数组</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.MinAbs(System.Double[])">
            <summary>
            求出绝对值最小数。
            </summary>
            <param name="array">数组</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.Transpose(System.Collections.Generic.List{System.Collections.Generic.List{System.Double}})">
            <summary>
            转置
            </summary>
            <param name="table">原表</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetAbsFiltedDic(System.Collections.Generic.Dictionary{System.Double,System.Double},System.Double)">
            <summary>
            返回绝对值小于给定数值的。
            </summary>
            <param name="keyDic">字典</param>
            <param name="max">限差(不含)</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.ScientificFomate(System.Double,System.String,System.Boolean)">
            <summary>
             E21.14。E前为最少的总长度，E后为有效数字
            </summary>
            <param name="formate"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetForamtedDouble(System.Double,System.String)">
            <summary>
            格式化双精度
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.ToTabString(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            以Tab分割。
            </summary>
            <param name="doubles">数组</param>
            <param name="fractionCount">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.ToStringLines(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            将双精度结果转换为字符串数组。
            </summary>
            <param name="doubles">待转换双精度数</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.ToColumnString(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            返回列
            </summary>
            <param name="doubles"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.ToStringLines(System.Collections.Generic.Dictionary{System.Double,System.Double},System.String)">
            <summary>
            行集合
            </summary>
            <param name="keyDic">字典</param>
            <param name="spliter">分割点</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.ToTableString(System.Collections.Generic.Dictionary{System.Double,System.Double},System.String)">
            <summary>
            字符串表格
            </summary>
            <param name="keyDic"></param>
            <param name="spliter"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetNearstIndexes(System.Collections.Generic.List{System.Double},System.Double,System.Int32)">
            <summary>
            获取最接近的数字列表
            </summary>
            <param name="XArray">待选</param>
            <param name="tobeNear">指定值</param>
            <param name="count">选择数量</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetNearst(System.Collections.Generic.List{System.Double},System.Double,System.Int32)">
            <summary>
            获取最接近的数字列表
            </summary>
            <param name="XArray">待选</param>
            <param name="tobeNear">指定值</param>
            <param name="count">选择数量</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.MaxDiffer(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            最大偏差。正数。
            </summary>
            <param name="vals"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.Sum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            求和
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetLsPolyFitter(System.Collections.Generic.IDictionary{System.Double,System.Double},System.Int32)">
            <summary>
            拟合器
            </summary>
            <param name="keyDic"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetKeysOfGrossError``1(System.Collections.Generic.IDictionary{``0,System.Double},System.Func{``0,System.Double},System.Double,System.Int32,System.Boolean)">
            <summary>
             采用多项式拟合.得到粗差编号（默认3倍中误差）列表。
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="data"></param>
            <param name="errorTimes"></param>
            <param name="isLoop"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetNeatlyData``1(System.Collections.Generic.IDictionary{``0,System.Double},System.Func{``0,System.Double},System.Double,System.Int32,System.Boolean)">
            <summary>
            得到干净的数据。
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="collection"></param>
            <param name="funcKeyToDouble"></param>
            <param name="errorTimes"></param>
            <param name="order"></param>
            <param name="isLoop"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetKeysOfGrossError(System.Collections.Generic.IDictionary{System.Double,System.Double},System.Double,System.Int32,System.Boolean)">
            <summary>
             采用多项式拟合.得到粗差编号（默认3倍中误差）列表。
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="data"></param>
            <param name="errorTimes"></param>
            <param name="isLoop"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetNeatlyData(System.Collections.Generic.IDictionary{System.Double,System.Double},System.Double,System.Int32,System.Boolean)">
             <summary>
            采用多项式拟合。 得到剔除粗差（默认3倍中误差）的数据列表。
             </summary>
             <param name="collection"></param>
             <param name="errorTimes"></param>
             <param name="order"></param>
             <param name="isLoop"></param>
             <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetNeatlyData``1(System.Collections.Generic.IDictionary{``0,System.Double},System.Double,System.Boolean)">
            <summary>
            得到剔除粗差（默认3倍中误差）的数据列表。
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="data"></param>
            <param name="errorTimes"></param>
            <param name="isLoop"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetKeysOfGrossError``1(System.Collections.Generic.IDictionary{``0,System.Double},System.Double,System.Boolean)">
            <summary>
             得到粗差编号（默认3倍中误差）列表。
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="data"></param>
            <param name="errorTimes"></param>
            <param name="isLoop"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetNeatlyList(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Boolean)">
            <summary>
            得到剔除粗差（默认3倍中误差）的数据列表。
            </summary>
            <param name="data"></param>
            <param name="errorTimes"></param>
            <param name="isLoop"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetIndexesOfGrossError(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Boolean)">
            <summary>
            得到粗差编号（默认3倍中误差）列表。
            </summary>
            <param name="data"></param>
            <param name="errorTimes"></param>
            <param name="isLoop"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.IsGross(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Double)">
            <summary>
            是否是粗差，通过已知数据求平均判断，并不将其参与计算。
            </summary>
            <param name="collection"></param>
            <param name="newVal"></param> 
            <param name="errorTimes"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetNearst(System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            获取与指定对象Compare最近的值。
            如果返回只有一个值，则是刚好等于，或最小或最大边界值。
            如果不是一个值，则返回为三个值。第一个为与指定对象最近的值，第二个为小于指定值的数，第三个为大于该值的数,如果数值为null默认值，则表示没有。
            </summary> 
            <param name="list">从小到大已排序的列表</param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.IsAllEquals(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            是否所有的数据都相等。
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.RollTo(System.Double,System.Double)">
            归算到指定区间[0, peroid)
            @param currentVal
            @param peroid
            @return
        </member>
        <member name="M:Geo.Utils.DoubleUtil.Interpolate(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            线性差值
            </summary>
            <param name="t">待差值时刻</param>
            <param name="t0">小时刻</param>
            <param name="t1">大时刻</param>
            <param name="val0">小值</param>
            <param name="val1">大值</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.Interpolate(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            双线性内插，平面格网内插
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="x0"></param>
            <param name="x1"></param>
            <param name="y0"></param>
            <param name="y1"></param>
            <param name="x0y0Val"></param>
            <param name="x0y1Val"></param>
            <param name="x1y0Val"></param>
            <param name="x1y1Val"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.GetDouble(System.Decimal[])">
            <summary>
            转换为双精度
            </summary>
            <param name="inverse"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.ScientificDouble.#ctor(System.Double,System.String)">
            <summary>
            E前为最少的总长度，E后为有效数字
            </summary>
            <param name="currentVal"></param>
            <param name="format"></param>
        </member>
        <member name="M:Geo.Utils.DoubleUtil.ScientificDouble.ToString(System.Boolean)">
            <summary>
            withZero = true
            0.12566658900E+05
            -.12856666626E+05
            withZero = false 
            .12566658900E+05
            </summary>
            <param name="withZero"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.EmailSender">
            <summary>
            邮件发送器
            </summary>
        </member>
        <member name="M:Geo.Utils.EmailSender.SendMail(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String[],System.String,System.String)">
            <summary>
            发送一个普通文字邮件。返回1则成功，否则为失败。 
            <param name="toMail">收件人邮箱地址</param>		
            <param name="fromMail">发件人邮箱地址</param>	
            <param name="password">发件人邮箱密码</param>	
            <param name="subject">邮件标题</param>		
            <param name="Body">邮件正文</param>	
            <param name="smtpHost">邮件服务地址</param>	
            <param name="port">端口</param>	
            <param name="attachmentLocalPathes">附件地址</param>	
            <param name="Bcc">单个密送</param>		
            <param name="Cc">单个抄送</param>
            <returns>返回1则成功，否则为失败。</returns>		
            </summary>
        </member>
        <member name="M:Geo.Utils.EmailSender.SendMail(System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String,System.String,System.Int32,System.String[],System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            发送一个普通文字邮件。返回1则成功，否则为失败。 
            <param name="toMail">收件人邮箱地址</param>		
            <param name="fromMail">发件人邮箱地址</param>	
            <param name="password">发件人邮箱密码</param>	
            <param name="subject">邮件标题</param>		
            <param name="Body">邮件正文</param>	
            <param name="smtpHost">邮件服务地址</param>	
            <param name="port">端口</param>	
            <param name="attachmentLocalPathes">附件地址</param>	
            <param name="bccs">密送</param>		
            <param name="ccs">抄送</param>
            <returns>返回1则成功，否则为失败。</returns>		
            </summary>
        </member>
        <member name="T:Geo.Utils.EnumUtil">
            <summary>
            枚举工具
            </summary>
        </member>
        <member name="M:Geo.Utils.EnumUtil.GetList``1">
            <summary>
            返回列表
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.EnumUtil.GetOthers``1(System.Collections.Generic.List{``0})">
            <summary>
            获取其它
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="shouldNotBes"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.EnumUtil.Parse``1(System.String)">
            <summary>
            解析名称
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.EnumUtil.GetNames(System.Type)">
            <summary>
            获取名称
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.EncodingConverter">
            <summary>
            转换
            </summary>
        </member>
        <member name="M:Geo.Utils.EncodingConverter.Utf8ToGB2312String(System.String)">
            <summary>
            UTF8 to GB2312.
            </summary>
            <param name="utf8str"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.EncodingConverter.ChangeStringEncoding(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            直接更改编码方式。.
            </summary>
            <param name="formStr"></param>
            <param name="fromEncoding"></param>
            <param name="toEncoding"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.EncodingConverter.ConvertStringEncoding(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            编码转换。
            </summary>
            <param name="formStr"></param>
            <param name="fromEncoding"></param>
            <param name="toEncoding"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.HtmlUtil">
            <summary>
            Html 工具
            </summary>
        </member>
        <member name="M:Geo.Utils.HtmlUtil.ClearHtmlTag(System.String,System.Int32)">
            <summary>
            清除标签
            </summary>
            <param name="html"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.HtmlUtil.StripTagsRegex(System.String)">
            <summary>
            Remove HTML from string with Regex.
            </summary>
        </member>
        <member name="F:Geo.Utils.HtmlUtil._htmlRegex">
            <summary>
            Compiled regular expression for performance.
            </summary>
        </member>
        <member name="M:Geo.Utils.HtmlUtil.StripTagsRegexCompiled(System.String)">
            <summary>
            Remove HTML from string with compiled Regex.
            </summary>
        </member>
        <member name="M:Geo.Utils.HtmlUtil.StripTagsCharArray(System.String,System.Int32)">
            <summary>
            Remove HTML tags from string using char array.
            </summary>
        </member>
        <member name="T:Geo.Utils.EncryptUtil">
            <summary>
            自定义简单加密程序，用于保护密码。
            </summary>
        </member>
        <member name="M:Geo.Utils.EncryptUtil.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="normal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.EncryptUtil.Decrypt(System.String)">
            <summary>
            解密,如果是非Base64，则直接返回字符串。
            </summary>
            <param name="normal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.EncryptUtil.EncryptDES(System.String,System.String)">
            <summary> 
            DES加密字符串 
            </summary> 
            <param name="encryptString">待加密的字符串</param> 
            <param name="encryptKey">加密密钥,要求为8位</param> 
            <returns>加密成功返回加密后的字符串，失败返回源串</returns> 
        </member>
        <member name="M:Geo.Utils.EncryptUtil.DecryptDES(System.String,System.String)">
            <summary> 
            DES解密字符串 
            </summary> 
            <param name="decryptString">待解密的字符串</param> 
            <param name="decryptKey">解密密钥,要求为8位,和加密密钥相同</param> 
            <returns>解密成功返回解密后的字符串，失败返源串</returns> 
        </member>
        <member name="T:Geo.Utils.ExceptionCheckUtil">
            <summary>
            用于异常检查，直接抛出异常。
            </summary>
        </member>
        <member name="M:Geo.Utils.ExceptionCheckUtil.Scope(System.Double,System.Double,System.Double,System.String)">
            <summary>
            检查是否在范围内(含边界)，否则抛出参数异常。
            </summary>
            <param name="currentVal">参数值</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="valName">参数名称</param>
        </member>
        <member name="M:Geo.Utils.ExceptionCheckUtil.Smaller(System.Double,System.Double,System.String)">
            <summary>
            是否小于
            </summary>
            <param name="currentVal">参数值</param>
            <param name="max">最大值</param>
            <param name="valName">参数名称</param>
        </member>
        <member name="M:Geo.Utils.ExceptionCheckUtil.EqualOrSmaller(System.Double,System.Double,System.String)">
            <summary>
            是否小于等于
            </summary>
            <param name="currentVal">参数值</param>
            <param name="max">最大值</param>
            <param name="valName">参数名称</param>
        </member>
        <member name="M:Geo.Utils.ExceptionCheckUtil.Larger(System.Double,System.Double,System.String)">
            <summary>
            是否大于
            </summary>
            <param name="currentVal">参数值</param>
            <param name="min">最小值</param>
            <param name="valName">参数名称</param>
        </member>
        <member name="M:Geo.Utils.ExceptionCheckUtil.EqualOrLarger(System.Double,System.Double,System.String)">
            <summary>
            是否大于或等于
            </summary>
            <param name="currentVal">参数值</param>
            <param name="min">最小值</param>
            <param name="valName">参数名称</param>
        </member>
        <member name="T:Geo.Utils.ExceptionUtil">
            <summary>
            用于异常检查，直接抛出异常。
            </summary>
        </member>
        <member name="M:Geo.Utils.ExceptionUtil.TryInvoke(System.Action,Geo.Utils.ExceptionInfo)">
            <summary>
            尝试执行方法。
            </summary>
            <param name="action">待执行方法</param>
            <param name="exceptionInfo">异常信息</param>
        </member>
        <member name="T:Geo.Utils.ExceptionInfo">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="F:Geo.Utils.ExceptionInfo.IgnoreException">
            <summary>
            是否忽略异常
            </summary>
        </member>
        <member name="F:Geo.Utils.ExceptionInfo.Message">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="T:Geo.Utils.GeoMath">
            <summary>
            提供静态数学方法，是系统 Math 的补充。
            </summary>
        </member>
        <member name="M:Geo.Utils.GeoMath.Sqr(System.Double)">
            <summary>
            求平方
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.GeoMath.ModTwoPI(System.Double)">
            <summary>
            将角度归算到 0 - 2 PI 之间。
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.GeoMath.AcTan(System.Double,System.Double)">
            <summary>
            本函数优点是能够正确返回象限。
             ArcTangent of sin(x) / cos(x). The advantage of this function over arctan()
            is that it returns the correct quadrant of the angle.
            </summary>
            <param name="sinx"></param>
            <param name="cosx"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.ILmerge">
            <summary>  
            使用ILmerge合并Exe、Dll文件的帮助类  
            </summary>  
        </member>
        <member name="M:Geo.Utils.ILmerge.GetMergeExeCmd(System.String,System.String,System.String)">
            <summary>  
            得到合并Exe、Dll文件的ILmerge语句  
            </summary>  
            <param name="DllDirectory">Dll文件目录</param>  
            <param name="SourceExeFile">原exe文件全路径</param>  
            <param name="TargetExeFile">要生成的exe文件全路径</param>  
            <returns></returns>  
        </member>
        <member name="M:Geo.Utils.ILmerge.GetMergeDllCmd(System.String,System.String)">
            <summary>  
            得到合并Dll文件的ILmerge语句  
            </summary>  
            <param name="DllDirectory">Dll文件目录</param>  
            <param name="TargetDllFile">要生成的Dll文件全路径</param>  
            <returns></returns>  
        </member>
        <member name="T:Geo.Utils.IntUtil">
            <summary>
            提供静态数学方法，是系统 Math 的补充。
            </summary>
        </member>
        <member name="M:Geo.Utils.IntUtil.TryParse(System.Object)">
            <summary>
            尝试解析，如失败返回 0
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.IntUtil.GetSingleNumberFromChineseCharacter(System.String)">
            <summary>
            解析数字 四 －>　4,只返回解析的第一个数字。
            </summary>
            <param name="ChineseCharacter"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.IntUtil.IsInt(System.String)">
            <summary>
            是否为整数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.IntUtil.GetStepMult(System.Int32)">
            <summary>
             返回阶乘
            </summary>
            <param name="step">含</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.IntUtil.GetStepPlus(System.Int32)">
            <summary>
            加，阶
            </summary>
            <param name="step">含</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.IntUtil.TryGetInt(System.String)">
            <summary>
            提取解析字符串中的数字。忽略非数字。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.ListUtil">
            <summary>
            列表
            </summary>
        </member>
        <member name="M:Geo.Utils.ListUtil.SetDimension``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            快速设置列表维数。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="colName"></param>
            <param name="dimension"></param>
        </member>
        <member name="M:Geo.Utils.ListUtil.IsEqual(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            是否相等
            </summary>
            <param name="listA"></param>
            <param name="listB"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ListUtil.GetDifferences``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            获取不同的部分
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listA"></param>
            <param name="listB"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ListUtil.GetCommons``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            获取相同的部分
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listA"></param>
            <param name="listB"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ListUtil.GetExcept``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            获取前面有，后面没有的部分
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listhas"></param>
            <param name="listNot"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ListUtil.Emerge``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            合并
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="indexes"></param>
            <param name="oneIndexe"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ListUtil.GetNext``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            获取当前外的下一个
            </summary>
            <param name="colName"></param>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ListUtil.GetNoRepeatList``1(System.Collections.Generic.List{``0})">
            <summary>
            返回无重复元素的列表。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.MatrixUtil">
            <summary>
            矩阵、向量工具。
            </summary>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.GetMatrix(System.Double[])">
            <summary>
            通过一维列向量获取二维数组 n x 1。
            </summary>
            <param name="colVector"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.Clone(System.Double[][])">
            <summary>
            复制矩阵。
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.Create(System.Double[])">
            <summary>
            通过一维列向量获取二维数组 n x 1。
            </summary>
            <param name="colVector"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.Create(System.Double)">
            <summary>
            创建只有一个元素的矩阵。
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.BuildMatrix(System.Double[][],System.Double[][])">
            <summary>
            构建以两个矩阵为对角线的大矩阵。
            默认2个矩阵为方形矩阵。
            </summary>
            <param name="coeffOfParams"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.Create(System.Int32,System.Double)">
            <summary>
            创建一个方阵。并指定所有元素的初始值。
            </summary>
            <param name="rowCol">行数量</param>
            <param name="initVal">列数量</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.Create(System.Int32,System.Int32,System.Double)">
            <summary>
            创建一个矩阵。并指定所有元素的初始值。
            </summary>
            <param name="row">行数量</param>
            <param name="col">列数量</param>
            <param name="initVal">元素默认值</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.CreateFloat(System.Int32,System.Int32,System.Single)">
            <summary>
            采用 单精度型计算。
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="initVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.CreateT``1(System.Int32,System.Int32,``0)">
            <summary>
            创建一个矩阵。并指定所有元素的初始值。
            </summary>
            <param name="row">行数量</param>
            <param name="col">列数量</param>
            <param name="initVal">元素默认值</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.CreateIdentity(System.Int32)">
            <summary>
            创建一个 n*n 的单位对角阵
            </summary>
            <param name="len">对角阵阶次</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.CreateDiagonal(System.Int32,System.Double)">
            <summary>
            创建对角阵。
            </summary>
            <param name="len"></param>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.CreateWithDiagonal(System.Double[])">
            <summary>
            用对角一维数组，创建一个二维矩阵。
            </summary>
            <param name="vector">对角一维数组</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.CreateRandom(System.Int32,System.Double,System.Double)">
            <summary>
            创建方阵，并以指定范围的随机数填充。
            </summary>
            <param name="rowCol"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.CreateRandom(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            创建矩阵，并以指定范围的随机数填充。
            </summary>
            <param name="row">行</param>
            <param name="col">列</param>
            <param name="from">随机数最小值</param>
            <param name="to">随机数最大值</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.CreateRandomVector(System.Int32,System.Double,System.Double)">
            <summary>
            创建一组随机的向量
            </summary>
            <param name="dimension">维数</param>
            <param name="from">最小</param>
            <param name="to">最大</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.CreateRandomVector(System.Int32)">
            <summary>
            随机数数组。
            </summary>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.CreateRandom(System.Int32,System.Int32)">
            <summary>
            随机数矩阵
            </summary>
            <param name="rowCount"></param>
            <param name="colCount"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.SymmetricExchange(System.Double[][],System.Collections.Generic.List{System.Int32})">
            <summary>
            对称矩阵重新排列，按照给定列表的索引顺序排列，即 i 行和 indeses[i] 行互换。
            </summary>
            <param name="matrix"></param>
            <param name="indexes"></param>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.SymmetricExchange(System.Double[][],System.Int32,System.Int32)">
            <summary>
            对称矩阵行列互换。对矩阵本身操作。
            适用场合：权阵、协方差阵的参数变换。
            </summary>
            <param name="matrix"></param>
            <param name="indexA"></param>
            <param name="indexB"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.ExchangeCol(System.Double[][],System.Int32,System.Int32)">
            <summary>
            指定列互换
            </summary>
            <param name="matrix"></param>
            <param name="indexA"></param>
            <param name="indexB"></param>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.ExchangeRow(System.Double[][],System.Int32,System.Int32)">
            <summary>
            指定行元素互换
            </summary>
            <param name="matrix"></param>
            <param name="indexA"></param>
            <param name="indexB"></param>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.SymmetricExchange(System.Double[],System.Int32,System.Int32)">
            <summary>
            交换向量元素。对向量本身操作。
            </summary>
            <param name="vector"></param>
            <param name="indexA"></param>
            <param name="indexB"></param>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.SetSubMatrix(System.Double[][],System.Double[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            将子矩阵插入到主矩阵中。
            </summary>
            <param name="mainMatrix"></param>
            <param name="subMatrix"></param>
            <param name="startMainRowIndex"></param>
            <param name="startMainColIndex"></param>
            <param name="startSubRowIndex">含</param>
            <param name="startSubColIndex"></param>
            <param name="maxSubRowLen">最大长度(含)</param>
            <param name="maxSubColLen">最大长度(含)</param>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.SetSubVector(System.Double[],System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            将子向量的值插入到主向量中。
            </summary>
            <param name="mainVector">主向量</param>
            <param name="subVector">子向量</param>
            <param name="startMainIndex">插入位置</param> 
            <param name="startSubIndex">不含</param>
            <param name="maxSubLength">最大长度(含)</param>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.GetDiagonal(System.Double[][])">
            <summary>
            获取对角向量。
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.GetDownTriangle(System.Double[][])">
            <summary>
            下三角函数，以一维数组表示。
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.ShrinkMatrix(System.Double[][],System.Collections.Generic.List{System.Int32})">
            <summary>
            清理方矩，将Index对应的行和列删除，对矩阵瘦身。
            </summary>
            <param name="matrix"></param>
            <param name="indexesTobeRemoved"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.GetColVector(System.Double[][],System.Int32)">
            <summary>
             以一维数组形式返回矩阵的指定列，以 0 开始编号。默认返回矩阵的第一列。
            </summary>
            <param name="matrix"></param>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.GetSubMatrix(System.Double[][],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            获取子矩阵
            </summary>
            <param name="mainMatrix"></param>
            <param name="rowLen"></param>
            <param name="colLen"></param>
            <param name="fromRow"></param>
            <param name="fromCol"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.SetRowValue(System.Double[][],System.Int32,System.Double)">
            <summary>
            设置指定行的值。
            </summary>
            <param name="matrix"></param>
            <param name="row"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.SetColValue(System.Double[][],System.Int32,System.Double)">
            <summary>
            设置指定列的值
            </summary>
            <param name="matrix"></param>
            <param name="col"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.SetRowColValue(System.Double[][],System.Int32,System.Double)">
            <summary>
            设置指定行和列的值。
            </summary>
            <param name="matrix"></param>
            <param name="rowCol"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.Exchage(System.Double[][],System.Int32,System.Int32)">
            <summary>
            交行指定行和列。
            </summary>
            <param name="matrix"></param>
            <param name="fromRowCol"></param>
            <param name="toRowCol"></param>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.ShrinkMatrixRow(System.Double[][],System.Collections.Generic.List{System.Int32})">
            <summary>
            清理矩阵，将Index对应的行删除，对矩阵瘦身。
            </summary>
            <param name="matrix"></param>
            <param name="indexesTobeRemoved"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.Pow(System.Double[],System.Double)">
            <summary>
            对数组本身数据进行求幂运算。
            </summary>
            <param name="vector"></param>
            <param name="pow"></param>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.Pow(System.Double[][],System.Double)">
            <summary>
            对数组本身数据进行求幂运算。
            </summary>
            <param name="matrix"></param>
            <param name="pow"></param>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.GetPow(System.Double[],System.Double)">
            <summary>
            求幂运算，返回结果。
            </summary>
            <param name="vector"></param>
            <param name="pow"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.GetPow(System.Double[][],System.Double)">
            <summary>
            求幂运算，返回结果。
            </summary>
            <param name="matrix"></param>
            <param name="pow"></param>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.SumOfCells(System.Double[])">
            <summary>
            所有元素求和。
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.SumOfCells(System.Double[][])">
            <summary>
            所有元素求和。
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.IsEqual(System.Double[][],System.Double[][],System.Double)">
            <summary>
            判断两个矩阵是否相等。
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.IsEqual(System.Double[],System.Double[],System.Double)">
            <summary>
            判断向量是否相等
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.Transpose(System.Double[][])">
            <summary>
            矩阵的转置。
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.Multiply(System.Double[][],System.Double)">
            <summary>
            与一个数相乘,更新当前数组。
            </summary>
            <param name="matrixA"></param>
            <param name="varFactorA"></param>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.Multiply(System.Double[],System.Double)">
            <summary>
            与一个数相乘,更新当前数组。
            </summary>
            <param name="matrixA"></param>
            <param name="varFactorA"></param>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.GetMultiply(System.Double[][],System.Double)">
            <summary>
            返回乘积后的矩阵。
            </summary>
            <param name="matrixA"></param>
            <param name="varFactorA"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.GetPlus(System.Double[],System.Double[][])">
            <summary>
            加
            </summary>
            <param name="vector"></param>
            <param name="matrixB"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.GetPlus(System.Double[][],System.Double[][])">
            <summary>
            返回两个矩阵相加结果。可以处理null。
            </summary>
            <param name="matrixA"></param>
            <param name="matrixB"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.GetMinus(System.Double[][],System.Double[][])">
            <summary>
            返回两个矩阵相减结果。
            </summary>
            <param name="matrixA"></param>
            <param name="matrixB"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.Multiply(System.Double[][],System.Double[][])">
            <summary>
            两个矩阵的乘法,原始的计算方法。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.GetMultiply(System.Double[][],System.Double[][])">
            <summary>
            两个矩阵的乘法。2013.06.05： creating
            </summary>
            <param name="a">矩阵A</param>
            <param name="b">矩阵B</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.GetMultiply(System.Double[],System.Double[])">
            <summary>
            两个向量对应元素相乘，向量乘积 Hadamard 积。
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.GetSumOfMultiply(System.Double[],System.Double[])">
            <summary>
            两向量对应元素相乘，再相加。相当于 VTV。
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.GetDivision(System.Double[],System.Double[])">
            <summary>
            两个向量对应元素相除
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.GetMinus(System.Double[],System.Double[])">
            <summary>
            两个向量相减
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.GetOpposite(System.Double[])">
            <summary>
            获取相反数
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.GetPlus(System.Double[],System.Double[])">
            <summary>
            两个向量相加
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.Clone(System.Double[])">
            <summary>
            深拷贝
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.SaveToBinary(System.Double[][],System.String)">
            <summary>
            以二进制文件形式保存。
            </summary>
            <param name="matrix">矩阵</param>
            <param name="path">路径</param>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.SaveToBinary(System.Double[][],System.IO.BinaryWriter)">
            <summary>
            将矩阵以二进制形式保存
            格式定义：1. 前两个位int，分别指行和列；2.后面为双精度。
            </summary>
            <param name="matrix"></param>
            <param name="bw"></param>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.ReadFromBinary(System.String)">
            <summary>
            从二进制文件中读取。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.ReadFromBinary(System.IO.BinaryReader)">
            <summary>
            从二进制读取矩阵。
            格式定义：1. 前两个位int，分别指行和列；2.后面为双精度。
            </summary>
            <param name="br"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.SaveToText(System.Double[][],System.String,System.Boolean,System.Char)">
            <summary>
            以文本形式保存。
            格式说明：第一行为两个整形： 行 列，以后一行为矩阵行，间隔符可以指定，默认为逗号（“，”）
            </summary>
            <param name="matrix"></param>
            <param name="printZero">是否打印 0， 不打印则为空</param>
            <param name="path"></param>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.SaveToText(System.Double[],System.String,System.Boolean,System.Char)">
            <summary>
            以文本形式保存。
            格式说明：第一行为两个整形： 行 列，以后一行为矩阵行，间隔符可以指定，默认为逗号（“，”）
            </summary>
            <param name="vector">待保存向量</param>
            <param name="printZero">是否打印 0， 不打印则为空</param>
            <param name="path"></param>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.ReadFromText(System.String,System.Char)">
            <summary>
            从文本中读取。
            格式说明：第一行为两个整形： 行 列，以后一行为矩阵行，间隔符可以指定，默认为逗号（“，”）
            </summary>
            <param name="path"></param>
            <param name="spliter"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.Print(System.IO.Stream,System.Double[][],System.Char)">
            <summary>
            打印数组方便查看。适用于巨大耗费内存的矩阵。
            格式说明：第一行为两个整形： 行 列，以后一行为矩阵行，间隔符可以指定，默认为逗号（“，”）
            </summary>
            <param name="outStream"></param>
            <param name="matrix"></param>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.GetFormatedText(System.Double[])">
            <summary>
            格式化的字符块。
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.GetFormatedText(System.Double[][],System.Char)">
            <summary>
            格式化的字符块。
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.GetForamtedDouble(System.Double)">
            <summary>
            格式化双精度
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.GetEuclideanDistance(System.Double[])">
            <summary>
            欧式距离。元素平方和开方。
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.IsSqure(System.Double[][])">
            <summary>
            是否是方阵
            </summary>
            <param name="matrix">待检核矩阵</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.GetMultiply(System.Double[][],System.Double[])">
            <summary>
            矩阵乘法。
            </summary>
            <param name="mat">二维矩阵</param>
            <param name="vector">一维向量</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MatrixUtil.GetMultiPlus(System.Double[],System.Double[])">
            <summary>
            向量元素对应相乘，并相加。
            </summary>
            <param name="vec1">一维向量</param>
            <param name="vec2">一维向量</param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.MemoryUtil">
            http://www.cnblogs.com/bandik/archive/2011/10/25/2224243.html， 2013.06.27
             <summary>
             内存类。
             </summary>
        </member>
        <member name="T:Geo.Utils.DateUtil">
            <summary>
            Time and date computation
            Auxiliary class for date and time output
            日期辅助类
            </summary>
        </member>
        <member name="M:Geo.Utils.DateUtil.MjdToDateTimeString(System.Double)">
            <summary>
            转换为日期时间字符串
            </summary>
            <param name="mjd"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DateUtil.DateToMjd(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
             Modified Julian Date from calendar date and time
            </summary>
            <param name="Year"></param>
            <param name="Month"></param>
            <param name="Day"></param>
            <param name="Hour"></param>
            <param name="Min"></param>
            <param name="Sec"></param>
            <returns> Modified Julian Date</returns>
        </member>
        <member name="M:Geo.Utils.DateUtil.MjdToDate(System.Double,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Double@)">
            <summary>
            Calendar date and time from Modified Julian Date
            </summary>
            <param name="Mjd"> Modified Julian Date</param>
            <param name="Year"></param>
            <param name="Month"></param>
            <param name="Day"></param>
            <param name="Hour"></param>
            <param name="Min"></param>
            <param name="Sec"></param>
        </member>
        <member name="T:Geo.Utils.OrbitConsts">
            <summary>
            常用常量
            </summary>
        </member>
        <member name="F:Geo.Utils.OrbitConsts.MinDigitalResolution">
            <summary>
             1.0e-15;  smallest such that 1.0+DBL_EPSILON != 1.0 1.0e-15;
            </summary>
        </member>
        <member name="F:Geo.Utils.OrbitConsts.ArcSecondsPerRad">
            <summary>
            1弧度有多少角秒。  Arcseconds per radian
            </summary>
        </member>
        <member name="F:Geo.Utils.OrbitConsts.MJD_J2000">
            <summary>
            51544.5;   Modif. Julian Date of J2000.0
            </summary>
        </member>
        <member name="F:Geo.Utils.OrbitConsts.SecondsPerDay">
            <summary>
            86400.0
            </summary>
        </member>
        <member name="F:Geo.Utils.OrbitConsts.TT_TAI">
            <summary>
            TT-TAI time difference [s]
            </summary>
        </member>
        <member name="F:Geo.Utils.OrbitConsts.GPS_TAI">
            <summary>
            GPS-TAI time difference [s]
            </summary>
        </member>
        <member name="F:Geo.Utils.OrbitConsts.AU">
            <summary>
            149597870000.0, Astronomical unit [m]; IAU 1976
            </summary>
        </member>
        <member name="F:Geo.Utils.OrbitConsts.SpeedOfLight">
            <summary>
            Speed of light  [m/s]; IAU 1976
            </summary>
        </member>
        <member name="F:Geo.Utils.OrbitConsts.RadiusOfEarth">
            <summary>
            semimajor axis of earth，Radius Earth [m]; WGS-84
            </summary>
        </member>
        <member name="F:Geo.Utils.OrbitConsts.DaySidereal">
            <summary>
            恒星日，秒
            </summary>
        </member>
        <member name="F:Geo.Utils.OrbitConsts.DaySolar">
            <summary>
            真太阳连续两次过同一子午圈的时间间隔。 
            </summary>
        </member>
        <member name="F:Geo.Utils.OrbitConsts.Ae">
            <summary>
            ????
            </summary>
        </member>
        <member name="F:Geo.Utils.OrbitConsts.RadiusOfEquator">
            <summary>
             Earth equatorial radius - kilometers (WGS '72)
            </summary>
        </member>
        <member name="T:Geo.Utils.StreamUtil">
            <summary>
            网络工具
            </summary>
        </member>
        <member name="M:Geo.Utils.StreamUtil.StreamToLocalFile(System.String,System.IO.Stream,System.Int32)">
            <summary>
            数据流保存到文件
            </summary>
            <param name="filePath"></param>
            <param name="inputStream"></param>
            <param name="bufferSize"></param>
        </member>
        <member name="T:Geo.Utils.NetUtil">
            <summary>
            网络工具
            </summary>
        </member>
        <member name="M:Geo.Utils.NetUtil.FtpUpload(System.String,System.String,System.String,System.String)">
            <summary>
             ftp的上传功能
            </summary>
            <param name="localFilePath"></param>
            <param name="ftpPath"></param>
            <param name="userName"></param>
            <param name="password"></param>
        </member>
        <member name="M:Geo.Utils.NetUtil.Delete(System.String,System.String,System.String)">
            <summary>
            删除指定文件
            </summary>
            <param name="ftpPath"></param>
            <param name="userName"></param>
            <param name="password"></param>
        </member>
        <member name="M:Geo.Utils.NetUtil.GetFtpFileUrls(System.String,System.String,System.String,System.String)">
            <summary>
            获取FTP文件地址。
            </summary>
            <param name="ftpFolderOrFilePath"></param>
            <param name="extension"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.NetUtil.GetFtpFileList(System.String,System.String,System.String,System.String)">
            <summary>
            获取指定目标下的文件路径。
            </summary>
            <param name="ftpFolderPath">目录路径，含IP地址和端口，请以"/"结尾</param>
            <param name="extension">，可以以分号分隔多个匹配类型</param>
            <param name="userName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.NetUtil.DownloadFtpDirecotryOrFile(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            下载，返回本地路径。这是最智能化的处理函数。如果没有指定用户名和密码，则自动采用 Anonymous 用户名。
            </summary>
            <param name="ftpFolderOrFilePath">路径，含IP地址和端口，若是目录，请以"/"结尾</param>
            <param name="extension">若是目录，则设置，可以以分号分隔多个匹配类型</param>
            <param name="localFolder"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="throwException"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.NetUtil.ParseFtpPath(System.String@,System.String@,System.String@)">
            <summary>
            解析FTP路径，提取用户名和密码
            </summary>
            <param name="ftpPath"></param>
            <param name="userName"></param>
            <param name="password"></param>
        </member>
        <member name="M:Geo.Utils.NetUtil.FtpDownload(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            FTP 下载,单文件对单文件的下载。
            </summary>
            <param name="urlpath">Url 地址</param>
            <param name="savePath">保存地址</param>
            <param name="userName">ftp用户名</param>
            <param name="password">ftp密码</param>
        </member>
        <member name="M:Geo.Utils.NetUtil.Download(System.String,System.String,System.Boolean)">
            <summary>
            采用WebClient直接下载
            </summary>
            <param name="urlpath"></param>
            <param name="savePath"></param>
            <param name="throwException"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.NetUtil.GetNetString(System.String,System.Boolean)">
            <summary>
            下载网络字符串
            </summary>
            <param name="urlpath"></param>
            <param name="throwException"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.NetUtil.GetNetDouble(System.String,System.Boolean)">
            <summary>
            下载网络字符串,并解析为Double
            </summary>
            <param name="urlpath"></param>
            <param name="throwException"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.NetUtil.HttpDownload(System.String,System.String,System.Boolean)">
            <summary>
            Http 下载
            </summary>
            <param name="urlpath">Url 地址</param>
            <param name="savePath">保存地址</param>
            <param name="throwException">是否抛出异常</param> 
        </member>
        <member name="M:Geo.Utils.NetUtil.GetIp">
            <summary>
            get the Ip of currentItem computor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.NetUtil.IsConnected">
            <summary>
            网络是否可用
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.NetUtil.IsConnectedToInternet">
            <summary>
            是否连接了国际互联网，通过百度网站测试。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.AttributeItem">
            <summary>
            属性的名称和内容
            </summary>
        </member>
        <member name="P:Geo.Utils.AttributeItem.DisplayName">
            <summary>
            属性显示的名称
            </summary>
        </member>
        <member name="P:Geo.Utils.AttributeItem.PropertyName">
            <summary>
            属性的名称
            </summary>
        </member>
        <member name="P:Geo.Utils.AttributeItem.Value">
            <summary>
            属性值
            </summary>
        </member>
        <member name="T:Geo.Utils.ObjectUtil">
            <summary>
            对象工具
            </summary>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.IsNumerial(System.Object)">
            <summary>
            是否是数字，包含双精度，浮点数，整型等,不含char。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.GetNumeral(System.Object)">
            <summary>
            解析浮点数或整数，返回双精度。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.IsFloat(System.Object)">
            <summary>
            是否是浮点数
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.IsInteger(System.Object)">
            <summary>
            是否是整数，含 char
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.ParseValue(System.String,System.Type)">
            <summary>
            根据类型解析数值。
            </summary>
            <param name="valString"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.GetPropertyNames(System.Type)">
            <summary>
            属性名称列表
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.GetObject``1(System.String,System.String,System.Boolean)">
            <summary>
            由字符串修改为对象。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="str"></param>
            <param name="splitter"></param>
            <param name="useDisplayName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.GetPropertyDictionary(System.String,System.String)">
            <summary>
            获取属性字典。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="str"></param>
            <param name="splitter"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.GetFormatedText(System.Object,System.String,System.Boolean)">
            <summary>
            将对象以文本形式
            </summary>
            <param name="obj">对象</param>
            <param name="splitter">属性值分隔符，默认为制表符\t</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.EqualNavPropertiy``2(``0,``1)">
            <summary>
            对象的导航属性是否等于指定属性
            </summary>
            <typeparam name="TEntity">对象</typeparam>
            <typeparam name="TNavProperty">导航属性类型</typeparam>
            <param name="entity"></param>
            <param name="navProperty"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.GetNavPropertyInfo(System.Type,System.Type)">
            <summary>
            返回第一个类型匹配的导航属性信息
            </summary>
            <param name="objType"></param>
            <param name="navPropertyType"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.GetNavPropertyInfo(System.Type,System.String)">
            <summary>
            返回所有导航属性的信息。
            </summary>
            <param name="objType"></param>
            <param name="navPropertyType"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.GetNavPropertyInfos(System.Type,System.Type,System.Boolean)">
            <summary>
            返回所有导航属性的信息。
            </summary>
            <param name="objType"></param>
            <param name="navPropertyType"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.GetEnumNavPropertyInfos(System.Type)">
            <summary>
            返回所有导航属性的信息。
            </summary>
            <param name="objType"></param>
            <param name="navPropertyType"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            通过lambda表达式获取属性名称。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.GetPropertyName(System.Type,System.Type)">
            <summary>
            对象制定属性的名称。如果有多个，只返回第一个；没有则返回null.
            </summary>
            <param name="objType">对象类型</param>
            <param name="propertyType">属性类型</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.GetPropertyName``2">
            <summary>
            对象制定属性的名称。如果有多个，只返回第一个；没有则返回null.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TNav"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.GetPropertyName``1(``0,System.Type)">
            <summary>
            对象制定属性的名称。如果有多个，只返回第一个；没有则返回null.
            </summary>
            <param name="objType"></param>
            <param name="propertyType"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.GetPropertyValue``1(``0,System.Type)">
            <summary>
            获取指定属性类型的属性值。
            </summary>
            <param name="objType"></param>
            <param name="propertyType"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.GetPropertyValue``1(``0,System.String)">
            <summary>
             获取指定属性类型的属性值。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="propertyname"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.GetAttributes(System.Object)">
            <summary>
             获取对象属性列表。默认具有属性名称的才获取。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.Compare``1(``0,``0,System.String,System.Boolean)">
            <summary>
            排序比较
            </summary>
            <param name="propertyName"></param>
            <param name="SortOrder"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.GetAttributes(System.Object,System.Boolean)">
            <summary>
            获取对象属性列表。
            </summary>
            <param name="obj"></param>
            <param name="useDisplayName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.GetDisplayName(System.Reflection.PropertyInfo)">
            <summary>
            如果没有DisplayName则返回 null
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.Default(System.Type)">
            <summary>
            创建默认值
            </summary>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ObjectUtil.IsEmpty(System.Object)">
            <summary>
            对象是否为空,如果为null，或者字符串为空，则返回true。
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.PathUtil">
            <summary>
            路径工具
            </summary>
        </member>
        <member name="M:Geo.Utils.PathUtil.GetMatchedPath(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取第一个匹配的路径
            </summary>
            <param name="inputs"></param>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.PathUtil.GetMatchedPathes(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取匹配的路径
            </summary>
            <param name="inputs"></param>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.PathUtil.GetUniquePath(System.String)">
            <summary>
            获取一个全局唯一的名称。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.PathUtil.IsSamePath(System.String,System.String)">
            <summary>
            是否为同一个路径。只从字符串判断，并不判断相对路径和绝对路径。
            </summary>
            <param name="path1"></param>
            <param name="path2"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.PathUtil.IsFileExtensionMatched(System.String,System.String)">
            <summary>
            是否匹配类型
            </summary>
            <param name="fileName"></param>
            <param name="destType">如“*O; ZIP”或“*.*O,*.ZIP”,多个类型以分号分隔</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.PathUtil.IsFileTypeMatched(System.String,System.String)">
            <summary>
            检查是否匹配目标类型
            </summary>
            <param name="destType">目标类型,多个类型以分号分隔</param>
            <param name="sourceType">源路径或后缀名</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.PathUtil.IsFileTypeMatched(System.String,System.String[])">
            <summary>
            检查是否匹配类型
            </summary>
            <param name="destType">目标类型,支持多个类型</param>
            <param name="sourceType">源路径或后缀名</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.PathUtil.IsMatchedSingleFileType(System.String,System.String)">
            <summary>
            匹配唯一个后缀名
            </summary>
            <param name="sourceType"></param>
            <param name="destType"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.PathUtil.GetDataSourceType(System.String)">
            <summary>
            判断路径类型，而不管路径资源的存在性。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.PathUtil.GetAbsPath(System.String,System.String)">
            <summary>
            获取绝对路径，如果是，则直接返回。
            </summary>
            <param name="path"></param>
            <param name="absDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.PathUtil.GetRelativePath(System.String,System.String)">
            <summary>
            获取相对路径，如果是，则直接返回。并不检查文件的存在性
            </summary>
            <param name="path"></param>
            <param name="absDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.PathUtil.GetExtension(System.String,System.Int32)">
            <summary>
            获取后缀，从最后一个往前，0为默认最后一个。以点“.”为分隔符。
            </summary>
            <param name="path"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.PathUtil.IsValidPath(System.String)">
            <summary>
            是否是有效的路径。例如如果为空，或则包含了不允许字母如分号";",竖号"|"等则认为是非路径。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.PinYinConverter">
            <summary>
            汉字拼音转换类
            from:http://www.cnblogs.com/leleblog/archive/2013/01/24/2875322.html,2013.04.16
            </summary>
        </member>
        <member name="F:Geo.Utils.PinYinConverter.otherChinese">
            <summary>
            二级汉字数组
            </summary>
        </member>
        <member name="F:Geo.Utils.PinYinConverter.otherPinYin">
            <summary>
            二级汉字对应拼音数组
            </summary>
        </member>
        <member name="M:Geo.Utils.PinYinConverter.GetFirst(System.Char)">
            <summary>
            取拼音第一个字段
            </summary>        
            <param name="ch"></param>        
            <returns></returns>        
        </member>
        <member name="M:Geo.Utils.PinYinConverter.GetFirst(System.String)">
            <summary>
            取拼音第一个字段
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.PinYinConverter.Get(System.Char)">
            <summary>
            获取单字拼音
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.PinYinConverter.Get(System.String)">
            <summary>
            把汉字转换成拼音(全拼)
            </summary>
            <param name="str">汉字字符串</param>
            <returns>转换后的拼音(全拼)字符串</returns>
        </member>
        <member name="T:Geo.Utils.ProcessUtil">
            <summary>
            进程工具
            </summary>
        </member>
        <member name="M:Geo.Utils.ProcessUtil.GetProcessUsedMemoryMB">
            <summary>
            获得为该进程(程序)分配的内存.
            做一个计时器, 就可以时时查看程序占用系统资源  
            </summary>
            <returns></returns> 
        </member>
        <member name="M:Geo.Utils.ProcessUtil.GetProcessUsedMemoryString">
            <summary>
            获得为该进程(程序)分配的内存.返回人们能读懂的文件大小的字符串。如 “5MB”
            </summary>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.SequenceFileNameParser">
            <summary>
            序列文件名称解析器。主要用于拼接观测文件，如多日多文件的观测文件放在一起，自动区牌靴和分为不同的分组。
            只处理统一类型的文件（不处理后缀名）
            1.判断输入是否为序列，
            2.对不同序列进行分组
            </summary>
        </member>
        <member name="P:Geo.Utils.SequenceFileNameParser.FileNames">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="T:Geo.Utils.StringSequence">
            <summary>
            字符串转运站,是一个队列数据结构。
            </summary>
        </member>
        <member name="M:Geo.Utils.StringSequence.#ctor">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="M:Geo.Utils.StringSequence.#ctor(System.String)">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="M:Geo.Utils.StringSequence.Insert(System.Int32,System.String)">
            <summary>
            插入队列
            </summary>
            <param name="index"></param>
            <param name="str"></param>
        </member>
        <member name="M:Geo.Utils.StringSequence.EnQuence(System.String)">
            <summary>
            入队,接收数据。
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Geo.Utils.StringSequence.DeQueue(System.Int32)">
             <summary>
            出队， 将先入的推出来。
             </summary>
        </member>
        <member name="M:Geo.Utils.StringSequence.GetQueue(System.Int32)">
             <summary>
            出队，并不删除。
             </summary>
        </member>
        <member name="M:Geo.Utils.StringSequence.GetBinaryString(System.Byte[])">
            <summary>
            根据输入的字节，获取本次将处理的二进制字符串
            </summary>
            <param name="inBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringSequence.Reverse(System.String)">
            <summary>
            字符串顺序调换，第一位和最后一位调换。相当于反向排序。
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="P:Geo.Utils.StringSequence.Capacity">
            <summary>
            库存容量，超出则出货。
            </summary>
        </member>
        <member name="P:Geo.Utils.StringSequence.Builder">
            <summary>
            数据存储。
            </summary>
        </member>
        <member name="T:Geo.Utils.StringUtil">
            <summary>
            字符串实用工具类。
            </summary>
        </member>
        <member name="M:Geo.Utils.StringUtil.GetUniqueKeyOfLong(System.Double,System.Double)">
            <summary>
            获取一个唯一的识别键。不同的精度不同的键。
            </summary>
            <param name="currentVal">值</param>
            <param name="resolution">分辨率，默认以米为单位, 100表示100米</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.GetUniqueKey(System.Double,System.Double)">
            <summary>
            获取一个唯一的识别键。不同的精度不同的键。
            </summary>
            <param name="currentVal">值</param>
            <param name="resolution">分辨率，默认以米为单位, 100表示100米</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.GetUniqueKey(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            获取一个唯一的识别键。不同的精度不同的键。
            </summary>
            <param name="vals">值</param>
            <param name="resolution">分辨率，默认以米为单位, 100表示100米</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.ToLineString(System.Collections.Generic.List{System.String})">
            <summary>
            转换成换行符分隔的一个字符串
            </summary>
            <param name="lines"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.GetFormatedString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            获取针对数组格式化的字符串。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.GetLimitedString(System.String,System.Int32,System.Boolean)">
            <summary>
            截取部分字符串
            </summary>
            <param name="str"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.StartCount(System.String,System.String)">
            <summary>
            统计字符串起始有多少个起始字符串
            </summary>
            <param name="str"></param>
            <param name="starter"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.IsLegalName(System.String)">
            <summary>
            检核命名是否合法,只能是数字，字母或下划线，不能包含特殊字符，如*，#，|等
            </summary>
            <param name="name">命名</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.GetStandardName(System.String)">
            <summary>
            标准化参数名称，使其满足参数命名规则
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.GetArrayString``1(``0[],System.String)">
            <summary>
            返回数组字符串
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="objs">数组</param>
            <param name="splitter">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.SplitByBlank(System.String)">
            <summary>
            通过空白进行分割。
            </summary>
            <param name="line">待分割字符串</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.SplitByTab(System.String)">
            <summary>
            通过制表符进行分割。
            </summary>
            <param name="line">待分割字符串</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.TrimBlank(System.String)">
            <summary>
            裁剪头尾的空格，制表符。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.Split(System.String,System.Int32)">
            <summary>
            将字符串按照指定的分段长度全部拆解。
            如果最后一个字符串长度不足，则不解析。
            </summary>
            <param name="line"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.Split(System.String,System.Char,System.Boolean)">
            <summary>
            按照指定分隔符切割
            </summary>
            <param name="line"></param>
            <param name="c"></param>
            <param name="isRremoveEmpties"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.Split(System.String,System.Char[],System.Boolean)">
            <summary>
            按照指定分隔符切割
            </summary>
            <param name="line"></param>
            <param name="c"></param>
            <param name="isRremoveEmpties"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.Split(System.String,System.Int32,System.Int32)">
            <summary>
            拆解字符串。
            </summary>
            <param name="line"></param>
            <param name="len"></param>
            <param name="lineCount">指定数量，防止字符串无关部分被解析</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.IsMatch(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            是否匹配
            </summary>
            <param name="str"></param>
            <param name="keyword"></param>
            <param name="remainMathedOrNot">是留下匹配上的还是没有匹配上的。</param>
            <param name="isFuzzyMathching"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.IsDecimalOrNumber(System.Object)">
            <summary>
            是否是浮点数或数字。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.IsNumber(System.String)">
            <summary>
            是否是整型数字。
            depreciated.不推荐此法，执行效率比下一个函数慢5倍。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.IsNumber(System.Object)">
            <summary>
            是否为数字,整数。逐字判断。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.IsDecimal(System.Object)">
            <summary>
            必须有小数点才是浮点数。是否为数字，包括小数，普通数字表达，不包含科学计数法。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.GetDecimal(System.Object)">
            <summary>
            只提取数字部分,支持小数和科学表达式。如 er123ert，最后为123.
            小数点只提取第一个。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.GetForamtedString(System.Object,System.Int32,System.String)">
            <summary>
            格式化双精度
            </summary>
            <param name="obj">对象</param>
            <param name="format">格式，只有数字管用</param>
            <param name="width">宽度</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.GetFormatedDouble(System.Double,System.Int32)">
            <summary>
            格式化浮点数
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.GetNonAscCount(System.String)">
            <summary>
            获取字符串中，非ASC字符的数量。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.GetAscLength(System.String)">
            <summary>
            字符串长度,非ASC字符认为是2个字符位置，如中文。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.FillZero(System.Object,System.Int32,System.Boolean)">
            <summary>
            以 0 填充到指定长度。
            </summary>
            <param name="obj"></param>
            <param name="len"></param>
            <param name="appendToRight"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.FillSpace(System.String,System.Int32,System.Boolean)">
            <summary>
            以 空白 填充到指定长度。
            </summary>
            <param name="line"></param>
            <param name="len"></param>
            <param name="appendToRight"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.FillSpaceLeft(System.String,System.Int32)">
            <summary>
            以 空白 从左填充到指定长度。
            </summary>
            <param name="line"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.FillSpaceRight(System.String,System.Int32)">
            <summary>
            以 空白 从右填充到指定长度。
            </summary>
            <param name="line"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.Fill(System.String,System.Int32,System.Char,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             填充到指定长度。
            </summary>
            <param name="line"></param>
            <param name="len"></param>
            <param name="cha"></param>
            <param name="appendToRight"></param>
            <param name="isCutSurplusChar"></param>
            <param name="isCutRight"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.ToBase64(System.String)">
            <summary>
            字符串转换为Base64字符串
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.firstWord(System.String@,System.Char)">
            <summary>
            查找第一个单词
            </summary>
            <param name="s">待查找的字符串，且剔除过空格符</param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.TrimFirstWord(System.String,System.Char[])">
            <summary>
            去除第一个词。分隔符要注意，第一个匹配上则返回。
            </summary>
            <param name="s">字符串</param>
            <param name="delimiters">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.TrimFirstWord(System.String@,System.Char)">
            <summary>
            去除第一个词,并返回。
            </summary>
            <param name="s"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.ParseDouble(System.String,System.Int32,System.Int32)">
            <summary>
            在字符串中截取部分，并转换为Double类型。
            </summary>
            <param name="line"></param>
            <param name="startIndex"></param>
            <param name="maxLen"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.TryParseInt(System.String)">
            <summary>
            解析Int类型，如果不成功则返回 0 。
            </summary>
            <param name="intString"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.SubString(System.String,System.Int32,System.Int32)">
            <summary>
            尝试截取指定的子字符串，若字符串不足，则返回能读到的部分。
            如果字符串长度比起始位置短，则返回空字符串 String.Empty。
            </summary>
            <param name="line">待截取的字符串</param>
            <param name="startIndex">起始编号</param>
            <param name="len">截取长度</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.GetFixedLength(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            获取指定长度的字符串，其余添加空格或截取
            </summary>
            <param name="str">原字符串</param>
            <param name="count">长度</param>
            <param name="isCutRight">是否从右边截取，否则左边</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.ToString(System.Object,System.Int32)">
            <summary>
            通用序列化。对于列表，只遍历3次。
            </summary>
            <param name="obj"></param>
            <param name="loopCount">最大循环次数</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.DictionaryToString(System.Collections.IDictionary,System.Int32)">
            <summary>
            列表打印
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.EnumerableToString(System.Collections.IEnumerable,System.Int32)">
            <summary>
            列表打印
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.Bracket(System.String)">
            <summary>
            为字符串添加小括号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.RemoveString(System.String,System.String[])">
            <summary>
            移除字符串
            </summary>
            <param name="str"></param>
            <param name="tobeRemoved"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.GetLastChar(System.String)">
            <summary>
            最后一个字符
            </summary>
            <param name="ObsPath"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.ToString(System.Collections.IEnumerable,System.String)">
            <summary>
            对枚举，按照指定分隔符组合成字符串。
            </summary>
            <param name="colName"></param>
            <param name="spliter"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.StringUtil.Contanis(System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>
            是否包含
            </summary>
            <param name="ParamNames"></param>
            <param name="keyPrev"></param>
            <param name="isFuzzyMatching"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.TokenBuilder">
            <summary>
            创建令牌
            </summary>
        </member>
        <member name="M:Geo.Utils.TokenBuilder.RandomBuild">
            <summary>
            随机生成一个
            </summary>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.FileTypeConverter">
            <summary>
            文件类型转换工具
            </summary>
        </member>
        <member name="T:Geo.Utils.FtpClient">
            <summary>
            FTP客户端操作类
            </summary>
        </member>
        <member name="M:Geo.Utils.FtpClient.#ctor(System.String,System.String,System.String)">
            <summary>
            创建FTP工具
            <para>
            默认不使用SSL,使用二进制传输方式,使用被动模式
            </para>
            </summary>
            <param name="host">主机名称</param>
            <param name="userId">用户名</param>
            <param name="password">密码</param>
        </member>
        <member name="M:Geo.Utils.FtpClient.#ctor(System.String,System.String,System.String,System.Int32,System.Net.IWebProxy,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            创建FTP工具
            </summary>
            <param name="host">主机名称</param>
            <param name="userId">用户名</param>
            <param name="password">密码</param>
            <param name="port">端口</param>
            <param name="enableSsl">允许Ssl</param>
            <param name="proxy">代理</param>
            <param name="useBinary">允许二进制</param>
            <param name="usePassive">允许被动模式</param>
        </member>
        <member name="M:Geo.Utils.FtpClient.CreateRequest(System.String,System.String)">
            <summary>
            创建一个FTP请求
            </summary>
            <param name="url">请求地址</param>
            <param name="method">请求方法</param>
            <returns>FTP请求</returns>
        </member>
        <member name="M:Geo.Utils.FtpClient.Upload(System.IO.FileInfo,System.String)">
            <summary>
            把文件上传到FTP服务器的RemotePath下
            </summary>
            <param name="localFile">本地文件信息</param>
            <param name="remoteFileName">要保存到FTP文件服务器上的名称</param>
        </member>
        <member name="M:Geo.Utils.FtpClient.Download(System.String,System.String)">
            <summary>
            从当前目录下下载文件
            <para>
            如果本地文件存在,则从本地文件结束的位置开始下载.
            </para>
            </summary>
            <param name="serverName">服务器上的文件名称</param>
            <param name="localName">本地文件名称</param>
            <returns>返回一个值,指示是否下载成功</returns>
        </member>
        <member name="M:Geo.Utils.FtpClient.Rename(System.String,System.String)">
            <summary>
            文件更名
            </summary>
            <param name="oldFileName">原文件名</param>
            <param name="newFileName">新文件名</param>
            <returns>返回一个值,指示更名是否成功</returns>
        </member>
        <member name="M:Geo.Utils.FtpClient.GetFileList(System.String)">
            <summary>
            获取当前目录下文件列表(仅文件)
            </summary>
            <param name="extention">后缀名，注意只匹配 “*.*”中，点后的字符，即后缀名。前一个“*.”将被忽略。，可以以分号分隔多个匹配类型</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FtpClient.GetDirectoryList">
            <summary>
            获取当前目录下所有的文件夹列表(仅文件夹)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FtpClient.GetFileDetails">
            <summary>
            获取详细列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FtpClient.DeleteFile(System.String)">
            <summary>
            删除FTP服务器上的文件
            </summary>
            <param name="fileName">文件名称</param>
            <returns>返回一个值,指示是否删除成功</returns>
        </member>
        <member name="M:Geo.Utils.FtpClient.MakeDirectory(System.String)">
            <summary>
            在当前目录下创建文件夹
            </summary>
            <param name="dirName">文件夹名称</param>
            <returns>返回一个值,指示是否创建成功</returns>
        </member>
        <member name="M:Geo.Utils.FtpClient.DeleteDirectory(System.String)">
            <summary>
            删除文件夹
            </summary>
            <param name="dirName">文件夹名称</param>
            <returns>返回一个值,指示是否删除成功</returns>
        </member>
        <member name="M:Geo.Utils.FtpClient.GetFileSize(System.String)">
            <summary>
            获取文件大小
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FtpClient.Append(System.IO.FileInfo,System.String)">
            <summary>
            给FTP服务器上的文件追加内容
            </summary>
            <param name="localFile">本地文件</param>
            <param name="remoteFileName">FTP服务器上的文件</param>
            <returns>返回一个值,指示是否追加成功</returns>
        </member>
        <member name="M:Geo.Utils.FtpClient.Append(System.IO.Stream,System.String)">
            <summary>
            给FTP服务器上的文件追加内容
            </summary>
            <param name="stream">数据流(可通过设置偏移来实现从特定位置开始上传)</param>
            <param name="remoteFileName">FTP服务器上的文件</param>
            <returns>返回一个值,指示是否追加成功</returns>
        </member>
        <member name="M:Geo.Utils.FtpClient.CheckFileExist(System.String)">
            <summary>
            检查文件是否存在
            </summary>
            <param name="fileName">要检查的文件名</param>
            <returns>返回一个值,指示要检查的文件是否存在</returns>
        </member>
        <member name="P:Geo.Utils.FtpClient.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="P:Geo.Utils.FtpClient.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:Geo.Utils.FtpClient.Proxy">
            <summary>
            代理
            </summary>
        </member>
        <member name="P:Geo.Utils.FtpClient.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:Geo.Utils.FtpClient.EnableSsl">
            <summary>
            EnableSsl
            </summary>
        </member>
        <member name="P:Geo.Utils.FtpClient.UsePassive">
            <summary>
            被动模式
            </summary>
        </member>
        <member name="P:Geo.Utils.FtpClient.UseBinary">
            <summary>
            二进制方式
            </summary>
        </member>
        <member name="P:Geo.Utils.FtpClient.RemotePath">
            <summary>
            远端路径
            <para>
                返回FTP服务器上的当前路径(可以是 / 或 /a/../ 的形式)
            </para>
            </summary>
        </member>
        <member name="P:Geo.Utils.FtpClient.CurrentDirectory">
            <summary>
            获取FTP服务器上的当前路径
            </summary>
        </member>
        <member name="T:Geo.Utils.FtpHelper">
            <summary>
            FTP 帮助类。
            </summary>
        </member>
        <member name="M:Geo.Utils.FtpHelper.GetFileList(System.String)">
            <summary>
            获取ftp上面的文件和文件夹
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FtpHelper.GetFileSize(System.String)">
            <summary>
            获取文件大小
            </summary>
            <param name="file">ip服务器下的相对路径</param>
            <returns>文件大小</returns>
        </member>
        <member name="M:Geo.Utils.FtpHelper.FileUpLoad(System.String,System.String)">
            <summary>
            文件上传
            </summary>
            <param name="filePath">原路径（绝对路径）包括文件名</param>
            <param name="objPath">目标文件夹：服务器下的相对路径 不填为根目录</param>
        </member>
        <member name="M:Geo.Utils.FtpHelper.DeleteFileName(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="fileName">服务器下的相对路径 包括文件名</param>
        </member>
        <member name="M:Geo.Utils.FtpHelper.MakeDir(System.String)">
            <summary>
            新建目录 上一级必须先存在
            </summary>
            <param name="dirName">服务器下的相对路径</param>
        </member>
        <member name="M:Geo.Utils.FtpHelper.DelDir(System.String)">
            <summary>
            删除目录 上一级必须先存在
            </summary>
            <param name="dirName">服务器下的相对路径</param>
        </member>
        <member name="M:Geo.Utils.FtpHelper.GetDirctory(System.String)">
            <summary>
            从ftp服务器上获得文件夹列表
            </summary>
            <param name="RequedstPath">服务器下的相对路径</param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Geo.Utils.FtpHelper.GetFile(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="T:Geo.Utils.FtpWeb">
            <summary>
            FTP 访问类。
            </summary>
        </member>
        <member name="M:Geo.Utils.FtpWeb.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            连接FTP
            </summary>
            <param name="FtpServerIP">FTP连接地址</param>
            <param name="FtpRemotePath">指定FTP连接成功后的当前目录, 如果不指定即默认为根目录</param>
            <param name="FtpUserID">用户名</param>
            <param name="FtpPassword">密码</param>
        </member>
        <member name="M:Geo.Utils.FtpWeb.Upload(System.String)">
            <summary>
            上传
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Geo.Utils.FtpWeb.Download(System.String,System.String)">
            <summary>
            下载
            </summary>
            <param name="filePath"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Geo.Utils.FtpWeb.Delete(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Geo.Utils.FtpWeb.RemoveDirectory(System.String)">
            <summary>
            删除文件夹
            </summary>
            <param name="folderName"></param>
        </member>
        <member name="M:Geo.Utils.FtpWeb.GetFilesDetailList">
            <summary>
            获取当前目录下明细(包含文件和文件夹)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FtpWeb.GetFileList(System.String)">
            <summary>
            获取当前目录下文件列表(仅文件)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FtpWeb.GetDirectoryList">
            <summary>
            获取当前目录下所有的文件夹列表(仅文件夹)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FtpWeb.DirectoryExist(System.String)">
            <summary>
            判断当前目录下指定的子目录是否存在
            </summary>
            <param name="RemoteDirectoryName">指定的目录名</param>
        </member>
        <member name="M:Geo.Utils.FtpWeb.FileExist(System.String)">
            <summary>
            判断当前目录下指定的文件是否存在
            </summary>
            <param name="RemoteFileName">远程文件名</param>
        </member>
        <member name="M:Geo.Utils.FtpWeb.MakeDir(System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="dirName"></param>
        </member>
        <member name="M:Geo.Utils.FtpWeb.GetFileSize(System.String)">
            <summary>
            获取指定文件大小
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FtpWeb.ReName(System.String,System.String)">
            <summary>
            改名
            </summary>
            <param name="currentFilename"></param>
            <param name="newFilename"></param>
        </member>
        <member name="M:Geo.Utils.FtpWeb.MovieFile(System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="currentFilename"></param>
            <param name="newFilename"></param>
        </member>
        <member name="M:Geo.Utils.FtpWeb.GotoDirectory(System.String,System.Boolean)">
            <summary>
            切换当前目录
            </summary>
            <param name="DirectoryName"></param>
            <param name="IsRoot">true 绝对路径   false 相对路径</param>
        </member>
        <member name="M:Geo.Utils.FtpWeb.DeleteOrderDirectory(System.String,System.String,System.String,System.String)">
            <summary>
            删除订单目录
            </summary>
            <param name="ftpServerIP">FTP 主机地址</param>
            <param name="folderToDelete">FTP 用户名</param>
            <param name="ftpUserID">FTP 用户名</param>
            <param name="ftpPassword">FTP 密码</param>
        </member>
        <member name="T:Geo.Utils.JsonUtil">
            <summary>
            URL工具
            </summary>
        </member>
        <member name="T:Geo.Utils.CelestialUtil">
            <summary>
            力
            </summary>
        </member>
        <member name="M:Geo.Utils.CelestialUtil.Sun(System.Double)">
            <summary>
            计算低精度太阳的地心坐标。 Computes the Sun's geocentric position using a low precision analytical series
            </summary>
            <param name="Mjd_TT">Terrestrial Time (Modified Julian Date)</param>
            <returns>Solar position vector [m] with respect to the  
            mean equator and equinox of J2000 (EME2000, ICRF)</returns>
        </member>
        <member name="M:Geo.Utils.CelestialUtil.Moon(System.Double)">
             <summary>
             计算低精度月亮的地心坐标。Computes the Moon's geocentric position using a low precision
               analytical series
             </summary>
             <param name="Mjd_TT">Terrestrial Time (Modified Julian Date)</param>
             <returns>Lunar position vector [m] with respect to the 
            mean equator and equinox of J2000 (EME2000, ICRF)</returns>
        </member>
        <member name="M:Geo.Utils.CelestialUtil.Illumination(Geo.Algorithm.Vector,Geo.Algorithm.Vector)">
             <summary>
            计算航天器是否在太阳光照中。1 为是， 0 为否。 可用于计算太阳光压。
             Computes the fractional illumination of a spacecraft in the 
               vicinity of the Earth assuming a cylindrical shadow model
             </summary>
             <param name="satXyz_m">Spacecraft position vector [m]</param>
             <param name="sunXyz_m">   Sun position vector [m]</param>
             <returns>  Illumination factor:
                                 nu=0   Spacecraft in Earth shadow 
                                 nu=1   Spacecraft fully illuminated by the Sun</returns>
        </member>
        <member name="M:Geo.Utils.MathUtil.SolvePuncturePoint(System.Double[],System.Double[],System.Double)">
            <summary>
            计算测站和卫星连线在电离层的穿刺点。实质为计算一条直线和球面的交点。
            </summary>
            <param name="siteXyz">卫星坐标</param>
            <param name="satXyz">测站坐标</param>
            <param name="radius">电离层圆半径，地心在地球</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MathUtil.Square(System.Double)">
            <summary>
            平方
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MathUtil.SolveQuadraticEquation(System.Double,System.Double,System.Double)">
            <summary>
            计算一元二次方程。ax²+bx+c=0（a≠0） x=[-b±√(b²-4ac)]/2a，quadratic equation of one unknown
            </summary>
            <param name="quadraticCoefficient">二次项系数 a</param>
            <param name="monomialCoefficient">一次项系数 b </param>
            <param name="constantTerm">常数项 c </param>
            <returns>2 个值前加后减</returns>
        </member>
        <member name="M:Geo.Utils.MathUtil.Fraction(System.Double)">
            <summary>
            取小数部分，始终大于等于0.
            Fractional part of a number (y=x-[x])
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.MathUtil.Modulo(System.Double,System.Double)">
            <summary>
             x mod y
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Gnsser.Orbits.MatrixUtil">
            <summary>
            矩阵计算工具
            </summary>
        </member>
        <member name="M:Gnsser.Orbits.MatrixUtil.Dyadic(Geo.Algorithm.Vector,Geo.Algorithm.Vector)">
            <summary>
            Dyadic product。两个n,m维矩阵向量，点乘为 n × m 矩阵。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Gnsser.Orbits.MatrixUtil.InverseUpRight(Geo.Algorithm.Matrix)">
            <summary>
            上三角求逆 Inversion of an upper right triangular matrix
             This function may be called with the same actual parameter for R and T
            </summary>
            <param name="R"> R    Upper triangular square matrix</param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.TerrestrialUtil">
            <summary>
            地球大气相关工具。
            </summary>
        </member>
        <member name="M:Geo.Utils.TerrestrialUtil.AtmosDensity_HP(System.Double,Geo.Algorithm.Vector)">
            <summary>
            计算大气密度，基于Harris-Priesterm模型。
             Computes the atmospheric density for the modified Harris-Priester model.
            </summary>
            <param name="Mjd_TT">Mjd_TT      Terrestrial Time (Modified Julian Date)</param>
            <param name="xyz">r_tod       Satellite position vector in the inertial system [m]</param>
            <returns> Density [kg/m^3]</returns>
        </member>
        <member name="T:Geo.Utils.XmlUtil">
            <summary>
            XmlUtil工具
            </summary>
        </member>
        <member name="M:Geo.Utils.XmlUtil.CreateElement(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            创建一个节点和值
            </summary>
            <param name="doc"></param>
            <param name="name"></param>
            <param name="innerText"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.XmlUtil.CreateElementWithChild(System.Xml.XmlDocument,System.String,System.String,System.String)">
            <summary>
            创建一个节点和子节点
            </summary>
            <param name="doc"></param>
            <param name="name"></param>
            <param name="childName"></param>
            <param name="childInnerText"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.XmlUtil.CreateElementWithChild(System.Xml.XmlDocument,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            创建一个节点和子节点
            </summary>
            <param name="doc"></param>
            <param name="name"></param>
            <param name="childName"></param>
            <param name="childInnerText"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.UrlUtil">
            <summary>
            URL工具
            </summary>
        </member>
        <member name="M:Geo.Utils.UrlUtil.ParseParams(System.String)">
            <summary>
            解析参数为字典
            </summary>
            <param name="urlParams"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.AppConfigSetter">
            <summary>
            对 App.Config 文件进行读写.可以添加值。
            由于 http://msdn.microsoft.com/zh-cn/library/1xtk877y.aspx 2012.02.07 中写道：
            托管代码可以使用 System.Configuration 命名空间中的类从配置文件中读取设置，但不向这些文件写入设置。
            因此写本类。
            </summary>
        </member>
        <member name="M:Geo.Utils.AppConfigSetter.#ctor">
            <summary>
            对  App.Config 文件进行读写.
            </summary>
        </member>
        <member name="M:Geo.Utils.AppConfigSetter.#ctor(System.String)">
            <summary>
            对  App.Config 文件进行读写.
            </summary>
            <param name="path">指定路径</param>
        </member>
        <member name="M:Geo.Utils.AppConfigSetter.SetValue(System.String,System.String,System.String)">
            <summary>
            设置app.config中的某个key的value.
            </summary>
            <param name="nodeName">节点名称</param>
            <param name="AppKey">keyPrev</param>
            <param name="AppValue">value</param>
        </member>
        <member name="M:Geo.Utils.AppConfigSetter.SetValue(System.String,System.String)">
            <summary>
            设置值。
            </summary>
            <param name="AppKey"></param>
            <param name="AppValue"></param>
        </member>
        <member name="M:Geo.Utils.AppConfigSetter.Open">
            <summary>
            加载
            </summary>
        </member>
        <member name="M:Geo.Utils.AppConfigSetter.Save">
            <summary>
            保存
            </summary>
        </member>
        <member name="P:Geo.Utils.AppConfigSetter.AppName">
            <summary>
            程序名称，以此来确定配置文件的路径。若不指定，则自动采用程序集名称。
            </summary>
        </member>
        <member name="P:Geo.Utils.AppConfigSetter.Path">
            <summary>
            配置文件路径。
            </summary>
        </member>
        <member name="P:Geo.Utils.AppConfigSetter.SingleNodeName">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="T:Geo.Utils.DataGridViewUtil">
            <summary>
            窗口工具类
            </summary>
        </member>
        <member name="M:Geo.Utils.DataGridViewUtil.GetDataTable(System.Windows.Forms.DataGridView)">
            <summary>
            获取数据表
            </summary>
            <param name="dataGridView"></param>
            <returns></returns>
        </member>
        <member name="F:Geo.Utils.DataGridViewUtil.NAME_ASC_SORT_LIST">
            <summary>
            属性按此排序,是否应该有一个反序？？
            </summary>
        </member>
        <member name="M:Geo.Utils.DataGridViewUtil.RemoveSelectedRows(System.Windows.Forms.DataGridView)">
            <summary>
            移除选中的行
            </summary>
            <param name="dataGridView1">数据表</param>
        </member>
        <member name="M:Geo.Utils.DataGridViewUtil.GetObjects``1(System.Windows.Forms.DataGridView)">
            <summary>
            返回行绑定的对象集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="dataGridView1">数据表</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DataGridViewUtil.GetSelectedRows(System.Windows.Forms.DataGridView)">
            <summary>
            返回选择后的行。若没有选择，则返回当前单元格所在行。
            </summary>
            <param name="dataGridView1">表对象</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DataGridViewUtil.GetSelectedObject``1(System.Windows.Forms.DataGridView)">
            <summary>
            选中的第一个,若无返回默认对象，如 null。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataGridView1"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DataGridViewUtil.GetSelectedObject(System.Windows.Forms.DataGridView)">
            <summary>
            选中的第一个
            </summary>
            <param name="dataGridView1"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DataGridViewUtil.GetSelectedObjects``1(System.Windows.Forms.DataGridView)">
            <summary>
            获取与选定行绑定的对象。需要选中行。
            </summary>
            <typeparam name="T">数据类型,或其子类</typeparam>
            <param name="dataGridView1">表对象</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DataGridViewUtil.GetSelectedObjs``1(System.Windows.Forms.DataGridView)">
            <summary>
            表中选中行的对象。一个或多个。
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="dataGridView1">表对象</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DataGridViewUtil.GetSelectedObjects(System.Windows.Forms.DataGridView)">
            <summary>
            返回选择的行绑定的对象
            </summary>
            <param name="dataGridView1">数据表</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DataGridViewUtil.SetDataGridViewCloumnsWithProperties(System.Windows.Forms.DataGridView,System.Type,System.Boolean)">
            <summary>
            根据对象的属性建立DataGridView表列。
            </summary>
            <param name="view"></param>
            <param name="type"></param>
            <param name="useDisplayName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DataGridViewUtil.BuildDataGridViewCols(System.Type,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            根据对象的属性建立DataGridView表。
            </summary>
            <param name="hiddenAttributes">需要隐藏的属性</param>
            <param name="useDisplayName">是否使用属性的Display属性</param>
            <param name="classType">待建表的对象类型</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DataGridViewUtil.GenDataGridViewCols(System.Type)">
            <summary>
            由数据类型的属性产生列
            </summary>
            <param name="classType"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DataGridViewUtil.CreateBoolCol(System.String,System.String,System.String)">
            <summary>
            创建布尔型列
            </summary>
            <param name="name"></param>
            <param name="propertyName"></param>
            <param name="headerText"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DataGridViewUtil.CreateTxtCol(System.String,System.String,System.String)">
            <summary>
            创建一个文本列
            </summary>
            <param name="name"></param>
            <param name="propertyName"></param>
            <param name="headerText"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DataGridViewUtil.CreateImageCol(System.String,System.String,System.String)">
            <summary>
            创建图像列
            </summary>
            <param name="name">名称</param>
            <param name="propertyName">属性名称</param>
            <param name="headerText">列文本</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DataGridViewUtil.GetSelectedCellsValue(System.Windows.Forms.DataGridViewSelectedCellCollection)">
            <summary>
            将DataGridView中选定的Cells的值按照表格格式保存到string中。
            </summary>
            <param name="selectedCellSelection">所选集合</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.DataGridViewUtil.SelectColsAndDraw(System.Windows.Forms.DataGridView,System.String,System.String)">
            <summary>
            绘制数据表。
            </summary>
            <param name="DataGridView"></param>
            <param name="indexName"></param>
            <param name="chartName"></param>
        </member>
        <member name="T:Geo.Utils.ColumnData">
            <summary>
            Represents the header and data of a column.
            </summary>
        </member>
        <member name="P:Geo.Utils.ColumnData.Header">
            <summary>
            Gets or sets the header.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:Geo.Utils.ColumnData.Data">
            <summary>
            Gets or sets the data.
            </summary> 
        </member>
        <member name="T:Geo.Utils.ExcelHelper">
            <summary>
            Excel帮助类
            </summary>
        </member>
        <member name="M:Geo.Utils.ExcelHelper.CreateExcelFileByColumn(System.String,System.Collections.Generic.IEnumerable{Geo.Utils.ColumnData})">
            <summary>
            Creates the excel file by column.
            </summary>
            <param name="filename">The filename.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="M:Geo.Utils.ExcelHelper.CreateExcelFileByRow(System.String,System.Collections.Generic.IEnumerable{System.Collections.IEnumerable})">
            <summary>
            Creates the excel file by row.
            将选中的行，保存到文件。
            </summary>
            <param name="filename">The filename.</param>
            <param name="rows">The rows.</param>
        </member>
        <member name="M:Geo.Utils.ExcelHelper.CreateExcelFile(System.String,System.Windows.Forms.DataGridView,System.Boolean)">
            <summary>
            保存到文件。
            </summary>
            <param name="filename"></param>
            <param name="dataGridView1"></param>
            <param name="onlySelectedRows">是否只输出选中的行</param>
        </member>
        <member name="M:Geo.Utils.ExcelHelper.createExcelFile(System.String,System.Action{Microsoft.Office.Interop.Excel.Application})">
            <summary>
            Creates the excel file and perform the specified action.
            </summary>
            <param name="filename">The filename.</param>
            <param name="action">The action.</param>
        </member>
        <member name="T:Geo.Utils.ExcelUtil">
            <summary>
            ExcelUtil
            </summary>
        </member>
        <member name="M:Geo.Utils.ExcelUtil.GetColName(System.Int32)">
            <summary>
            1 = A, 2 = B 
            </summary>
            <param name="colNum"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ExcelUtil.RowCellTimes(Microsoft.Office.Interop.Excel.Application,System.Int32,System.Int32)">
            <summary>
            行乘法
            </summary>
            <param name="worksheet"></param>
            <param name="rowNum"></param>
            <param name="resultCol"></param>
        </member>
        <member name="M:Geo.Utils.ExcelUtil.RowCellTimes(Microsoft.Office.Interop.Excel.Application,System.Int32,System.Int32,System.Int32)">
            <summary>
            行乘法
            </summary>
            <param name="worksheet"></param>
            <param name="rowNum"></param>
            <param name="resultCol"></param>
            <param name="multierCol"></param>
        </member>
        <member name="M:Geo.Utils.ExcelUtil.RowCellTimes(Microsoft.Office.Interop.Excel.Application,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            行乘法
            </summary>
            <param name="worksheet"></param>
            <param name="rowNum"></param>
            <param name="resultCol"></param>
            <param name="aCol"></param>
            <param name="bCol"></param>
        </member>
        <member name="M:Geo.Utils.ExcelUtil.FormatTable(Microsoft.Office.Interop.Excel.Application,System.Int32,System.Int32)">
            <summary>
            普通格式化表格
            </summary>
            <param name="worksheet"></param>
            <param name="rowNum"></param>
            <param name="colNum"></param>
        </member>
        <member name="M:Geo.Utils.ExcelUtil.Write(Microsoft.Office.Interop.Excel.Application,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            在Excel单元格中写入字符串，并合并指定的单元格。
            </summary>
            <param name="worksheet"></param>
            <param name="currentVal"></param>
            <param name="rowNum"></param>
            <param name="colNum"></param>
            <param name="rowSpan"></param>
            <param name="colSpan"></param>
        </member>
        <member name="M:Geo.Utils.ExcelUtil.WritteExcelTitle(Microsoft.Office.Interop.Excel.Application,System.String,System.String)">
            <summary>
            写表头，默认为写在第一行，并合到指定的列
            </summary>
            <param name="worksheet"></param>
            <param name="Title"></param>
            <param name="toCol"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ExcelUtil.SumRows(Microsoft.Office.Interop.Excel.Application,System.String,System.Int32,System.Int32)">
            <summary>
            将指定列的值[startRow:(resultRow-1)]加到指定单元格（colName + resultRow）
            </summary>
            <param name="worksheet"></param>
            <param name="colName"></param>
            <param name="startRow"></param>
            <param name="resultRow"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ExcelUtil.AddCells(Microsoft.Office.Interop.Excel.Application,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            添加表格
            </summary>
            <param name="worksheet"></param>
            <param name="resultCellName"></param>
            <param name="cellNames"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.ExtractIcon">
            <summary>
            提取图标
            </summary>
        </member>
        <member name="M:Geo.Utils.ExtractIcon.GetIcon(System.String,System.Boolean)">
            <summary>
            提取ICON
            </summary>
            <param name="strPath"></param>
            <param name="bSmall"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.RegexUtil">
            <summary>
            正则表达式工具
            </summary>
        </member>
        <member name="M:Geo.Utils.RegexUtil.GetLastBraketContent(System.String)">
             <summary>
            最后一个小括号匹配项，如果没有则返回null.
             </summary>
             <param name="str"></param>
             <returns></returns>
        </member>
        <member name="M:Geo.Utils.RegexUtil.GetBraketContents(System.String)">
            <summary>
            获取最里层括号内的内容，不含括号，返回数组。每个子括号返回一个字符串，与嵌套无关。如：
            ((1 1,5 1,5 5,1 5,1 1),(2 2,2 3,3 3,3 2,2 2)),((6 3,9 2,9 4,6 3))
            返回字符串数组（仅数字部分）{{1 1,5 1,5 5,1 5,1 1},{2 2,2 3,3 3,3 2,2 2},{6 3,9 2,9 4,6 3}}
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.RegexUtil.GetDoubleBraketContents(System.String)">
            <summary>
            提取双小括号内的内容,含双括号。
            ((1 1,5 1,5 5,1 5,1 1),(2 2,2 3,3 3,3 2,2 2)),((6 3,9 2,9 4,6 3))
            返回字符串数组：{{((1 1,5 1,5 5,1 5,1 1),(2 2,2 3,3 3,3 2,2 2))},{((6 3,9 2,9 4,6 3))}}
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.FileUtil">
            <summary>
            文件和文件夹相关的实用工具
            </summary>
        </member>
        <member name="M:Geo.Utils.FileUtil.GetAvailableName(System.String)">
            <summary>
            返回本地一个可用的文件名称，如果不存在，则直接返回；如果已经有了，则依次编号下去。
            </summary>
            <param name="fileNameOrPath"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FileUtil.GetOutputFilePath(System.String,System.String)">
            <summary>
            获取输出文件路径。如果输入为目录，则将其与文件名组合。
            如果输出目录不存在，则创建一个。
            </summary>
            <param name="fileOrDirectory"></param>
            <param name="fileNameJustInCase"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FileUtil.GetFiles(System.String,System.String,System.Boolean)">
            <summary>
            获取文件，或目录下的文件，或包含子目录下所有的文件。
            若路径不存在，则返回空的。
            </summary>
            <param name="path"></param>
            <param name="extension">匹配后缀名，多个以分号分开</param>
            <param name="loopSubDirectories"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FileUtil.GetFileNameWithoutExtention(System.String)">
            <summary>
            从完整的文件路径提取“纯”文件名（不包含后缀）
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FileUtil.TryClearDirectory(System.String)">
            <summary>
            尝试清空目录
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FileUtil.CheckOrCreateDirectory(System.String)">
            <summary>
            检查目录是否存在，不存在则创建.
            存在或创建成功，返回true，输入不合法或创建失败返回false。
            </summary>
            <param name="directory">目录</param>
        </member>
        <member name="M:Geo.Utils.FileUtil.CheckOrCreateFile(System.String,System.String)">
            <summary>
            检查文件是否存在，不存在则创建
            </summary>
            <param name="absDirectory">目录</param>
        </member>
        <member name="M:Geo.Utils.FileUtil.WriteText(System.String,System.String)">
            <summary>
             创建一个新文件，在其中写入指定的字符串，然后关闭文件。如果目标文件已存在，则覆盖该文件。
            </summary>
            <param name="path"></param>
            <param name="text"></param>
        </member>
        <member name="M:Geo.Utils.FileUtil.SetFileAssociation(System.String,System.String,System.String,System.String)">
            <summary>
            设置文件关联。
            </summary>
            <param name="exePath">注册表项的名称 自定义 意义不大 </param>
            <param name="extName">关联文件的扩展名</param>
            <param name="typeName">给自定义文件类型起的名称 意义不大</param>
            <param name="contentType"></param>
        </member>
        <member name="M:Geo.Utils.FileUtil.WaitUtilFileReady(System.String)">
            <summary>
            等待，知道文件已经可以使用
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Geo.Utils.FileUtil.IsFileReady(System.String)">
            <summary>
            文件是否可用，如果不存在或被别的程序使用，则不可用。
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FileUtil.IsReady(System.String)">
            <summary>
            文件是否可用，如果不存在或被别的程序使用，则不可用。
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FileUtil.IsLocalFileOrDirectory(System.String)">
            <summary>
            指定路径是文件或文件夹,通过存在性。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FileUtil.OpenFileOrDirectory(System.String)">
            <summary>
            在Windows系统中打开指定路径的文件或文件夹
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Geo.Utils.FileUtil.OpenFile(System.String)">
            <summary>
            打开文件
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Geo.Utils.FileUtil.OpenFile(System.String,System.String)">
            <summary>
            打开文件
            </summary>
            <param name="fileDir"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Geo.Utils.FileUtil.OpenFileDirectory(System.String)">
            <summary>
            打开文件的当前目录
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Geo.Utils.FileUtil.OpenDirectory(System.String)">
            <summary>
            打开文件件
            </summary>
            <param name="dir"></param>
        </member>
        <member name="M:Geo.Utils.FileUtil.GetAssemblyFolderPath">
            <summary>
            获取程序集所在文件夹路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FileUtil.IsDirectory(System.String)">
             <summary>
            如果是文件且存在，则返回false。
            如果目录存在，则返回true。
            后续通过字符串判断是否是目录，并不检查目录的存在性。依据如果以斜杠/或\结尾，则为目录。如果最后一个斜杠后面没有后缀名，则为目录。
             </summary>
             <param name="path"></param>
             <returns></returns>
        </member>
        <member name="M:Geo.Utils.FileUtil.MoveFileOrDirectory(System.String,System.String,System.Boolean)">
            <summary>
            复制文件或者目录。
            </summary>
            <param name="fromFileOrDirectory"></param>
            <param name="toFileOrDirectory"></param>
        </member>
        <member name="M:Geo.Utils.FileUtil.MoveFile(System.String,System.String,System.Boolean)">
            <summary>
            移动文件
            </summary>
            <param name="sourcePath"></param>
            <param name="destPath"></param>
            <param name="overwrite"></param>
        </member>
        <member name="M:Geo.Utils.FileUtil.CopyFileOrDirectory(System.String,System.String,System.Boolean)">
            <summary>
            复制文件或者目录。
            </summary>
            <param name="fromFileOrDirectory"></param>
            <param name="toFileOrDirectory"></param>
        </member>
        <member name="M:Geo.Utils.FileUtil.TryDeleteFileOrDirectory(System.String)">
            <summary>
            删除文件或目录
            </summary>
            <param name="fileOrDirectory"></param>
        </member>
        <member name="M:Geo.Utils.FileUtil.GetDirectory(System.String)">
            <summary>
            获取路径的目录
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FileUtil.IsValid(System.String)">
            <summary>
            文件是否有效，包括是否存在和大小是否为0.
            </summary>
            <param name="navPath"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FileUtil.Exists(System.String)">
            <summary>
            是否存在
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.ImageUtil">
            <summary>
            图像快捷
            </summary>
        </member>
        <member name="M:Geo.Utils.ImageUtil.GetDiskSmallPhoto">
            <summary>
            获取本地图片，并放缩到指定的大小。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ImageUtil.GetSmallPhoto(System.Byte[])">
            <summary>
             To show the photo in a propert aboutSize.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ImageUtil.GetImageBytes(System.Drawing.Image)">
            <summary>
            获取图片的二进制数据。
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ImageUtil.GetDiskImage">
            Open a file dilag and select a photo.
        </member>
        <member name="M:Geo.Utils.ImageUtil.StreamToBytes(System.IO.Stream)">
            <summary>
            stream to bytes.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ImageUtil.ImageToBytes(System.Drawing.Image)">
            turn image into bytes.
        </member>
        <member name="M:Geo.Utils.ImageUtil.GetSmallPhoto(System.Byte[],System.Int32,System.Int32)">
            To show the photo in a propert aboutSize.
        </member>
        <member name="M:Geo.Utils.ImageUtil.BytesToImage(System.Byte[])">
            <summary>
            将二进制数据转换为图片。
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.InputLinesForm">
            <summary>
            一个可以输入内容的窗口。
            </summary>
        </member>
        <member name="M:Geo.Utils.InputLinesForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Geo.Utils.InputLinesForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Utils.InputLinesForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Utils.InputLinesForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Geo.Utils.InputLinesForm.Lines">
            <summary>
            用户输入的值
            </summary>
        </member>
        <member name="T:Geo.Utils.OneTextInputForm">
            <summary>
            一个文本输入行窗口
            </summary>
        </member>
        <member name="M:Geo.Utils.OneTextInputForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Utils.OneTextInputForm.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="inputValue"></param>
        </member>
        <member name="M:Geo.Utils.OneTextInputForm.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            构造函数
            </summary>
            <param name="initValue">初始数据</param>
            <param name="canNotBeValues">不能为哪些数据</param>
        </member>
        <member name="M:Geo.Utils.OneTextInputForm.#ctor(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            构造函数
            </summary>
            <param name="initValue">初始数据</param>
            <param name="canNotBeValues">不能为哪些数据</param>
            <param name="canNotBeWarnMsg">不能为哪些数据提示</param>
        </member>
        <member name="F:Geo.Utils.OneTextInputForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Utils.OneTextInputForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Utils.OneTextInputForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Geo.Utils.OneTextInputForm.InputValue">
            <summary>
            用户输入的值
            </summary>
        </member>
        <member name="P:Geo.Utils.OneTextInputForm.InitValue">
            <summary>
            初始字符串
            </summary>
        </member>
        <member name="P:Geo.Utils.OneTextInputForm.CanNotBeMsg">
            <summary>
            该名称已经存在，请换一个
            </summary>
        </member>
        <member name="T:Geo.Utils.ListViewUtil">
            <summary>
            窗口工具类
            </summary>
        </member>
        <member name="M:Geo.Utils.ListViewUtil.GetSelectedObjects``1(System.Windows.Forms.ListView)">
            <summary>
            获取选中的。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ListView"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.ListViewUtil.GetSelectedObject``1(System.Windows.Forms.ListView)">
            <summary>
            获取选中的。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ListView"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.RadioNumeralFilterForm">
             <summary>
            数字过滤窗口
             </summary>
        </member>
        <member name="M:Geo.Utils.RadioNumeralFilterForm.#ctor(System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="strs"></param>
        </member>
        <member name="F:Geo.Utils.RadioNumeralFilterForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Utils.RadioNumeralFilterForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Utils.RadioNumeralFilterForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Utils.RadioNumeralFilterForm.NumeralOperationType">
            <summary>
            比较
            </summary>
        </member>
        <!-- 对于成员“P:Geo.Utils.RadioNumeralFilterForm.InputedValue”忽略有格式错误的 XML 注释 -->
        <member name="T:Geo.Utils.NumeralFilterForm">
             <summary>
            数字过滤窗口
             </summary>
        </member>
        <member name="M:Geo.Utils.NumeralFilterForm.#ctor(System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="strs"></param>
        </member>
        <member name="F:Geo.Utils.NumeralFilterForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Utils.NumeralFilterForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Utils.NumeralFilterForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Utils.NumeralFilterForm.CompareOperator">
            <summary>
            比较
            </summary>
        </member>
        <!-- 对于成员“P:Geo.Utils.NumeralFilterForm.InputedValue”忽略有格式错误的 XML 注释 -->
        <member name="T:Geo.Utils.ReportUtil">
            <summary>
            报表输出工具。
            </summary>
        </member>
        <member name="M:Geo.Utils.ReportUtil.SaveToExcel(System.Windows.Forms.DataGridView)">
            <summary>
            将 DataGridView 数据保存到磁盘。过程中会提示路径选择。
            </summary>
            <param name="dataGridView1">DataGridView对象</param>
        </member>
        <member name="M:Geo.Utils.ReportUtil.SaveToWord(System.Windows.Forms.DataGridView,System.String)">
            <summary>
            
            </summary>
            <param name="dataGridView1"></param>
            <param name="title"></param>
        </member>
        <member name="M:Geo.Utils.ReportUtil.ReportRows(System.Windows.Forms.DataGridView,System.String)">
            <summary>
            报表打印
            </summary>
            <param name="dataGridView1"></param>
            <param name="title"></param>
        </member>
        <member name="M:Geo.Utils.ReportUtil.Report(System.Windows.Forms.DataGridView,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            启动Word输出表格数据。
            </summary>
            <param name="dataGridView1"></param>
            <param name="tableName">数据报表</param>
            <param name="titleList"></param>
        </member>
        <member name="T:Geo.Utils.RadioSelectingForm">
             <summary>
            单选窗口
             </summary>
        </member>
        <member name="M:Geo.Utils.RadioSelectingForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Utils.RadioSelectingForm.#ctor(System.String[])">
            <summary>
            以数组初始化
            </summary>
            <param name="strs"></param>
        </member>
        <member name="F:Geo.Utils.RadioSelectingForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Utils.RadioSelectingForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Utils.RadioSelectingForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <!-- 对于成员“P:Geo.Utils.RadioSelectingForm.SelectedValue”忽略有格式错误的 XML 注释 -->
        <member name="T:Geo.Utils.SortingNamesForm">
            <summary>
            选择文本
            </summary>
        </member>
        <member name="M:Geo.Utils.SortingNamesForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Utils.SortingNamesForm.#ctor(System.String[])">
            <summary>
            以数组初始化
            </summary>
            <param name="strs"></param>
        </member>
        <member name="M:Geo.Utils.SortingNamesForm.#ctor(System.Collections.Generic.List{System.String},System.String[])">
            <summary>
            以数组初始化,将老的排列靠前，且选中。
            
            </summary>
            <param name="strs"></param>
        </member>
        <member name="F:Geo.Utils.SortingNamesForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Utils.SortingNamesForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Utils.SortingNamesForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Utils.SortingNamesForm.OrderedNames">
            <summary>
            排序后的名称列表
            </summary>
        </member>
        <member name="P:Geo.Utils.SortingNamesForm.CheckedOrderedNames">
            <summary>
            已选排序后的
            </summary>
        </member>
        <member name="T:Geo.Utils.SelectingColForm">
            <summary>
            选择文本
            </summary>
        </member>
        <member name="M:Geo.Utils.SelectingColForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Utils.SelectingColForm.#ctor(System.String[],System.Boolean)">
            <summary>
            以数组初始化
            </summary>
            <param name="strs"></param>
        </member>
        <member name="M:Geo.Utils.SelectingColForm.selectAllbutton1_Click(System.Object,System.EventArgs)">
            <summary>
            将所有的选中。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:Geo.Utils.SelectingColForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Utils.SelectingColForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Utils.SelectingColForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Utils.SelectingColForm.IsVertical">
            <summary>
            是否列显示
            </summary>
        </member>
        <member name="P:Geo.Utils.SelectingColForm.TitleList">
            <summary>
            名称列表
            </summary>
        </member>
        <member name="T:Geo.Utils.TreeNodeUtil">
            <summary>
            WinForm树形工具
            </summary>
        </member>
        <member name="M:Geo.Utils.TreeNodeUtil.CheckAllDirectRelativeNodes(System.Windows.Forms.TreeNode)">
            <summary>
            选中所有父和子节点。
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Geo.Utils.TreeNodeUtil.UnCheckSubNodes(System.Windows.Forms.TreeNode)">
            <summary>
            选中所有父和子节点。
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Geo.Utils.TreeNodeUtil.CheckAllNodes(System.Collections.Generic.IEnumerable{System.Windows.Forms.TreeNode})">
            <summary>
            选中所有的节点
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="M:Geo.Utils.TreeNodeUtil.UnCheckAllNodes(System.Collections.Generic.IEnumerable{System.Windows.Forms.TreeNode})">
            <summary>
            取消所有的节点的选中状态
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="M:Geo.Utils.TreeNodeUtil.GetCurrentObject``1(System.Windows.Forms.TreeNode)">
            <summary>
            当前的 object.如果选择的是Obj则直接返回，如果不是，则找其下的第一个，如果都没有，则返回null。
            </summary>
        </member>
        <member name="M:Geo.Utils.TreeNodeUtil.SetSelectedNodeByTag(System.Windows.Forms.TreeView,System.Object)">
            <summary>
            设置当前选中节点，并咱开到该节点。
            </summary>
            <param name="TreeView"></param>
            <param name="tag"></param>
        </member>
        <member name="M:Geo.Utils.TreeNodeUtil.SelectAndExpandTot``1(System.Windows.Forms.TreeView,``0)">
            <summary>
            找到绑定选中的对象，并展开到该节点。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="treeView"></param>
            <param name="t"></param>
        </member>
        <member name="M:Geo.Utils.TreeNodeUtil.ExpandTo(System.Windows.Forms.TreeNode)">
            <summary>
            展开到选定目录。并使其处于选中状态。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.TreeNodeUtil.GetAllSubObjects``1(System.Windows.Forms.TreeNode)">
            <summary>
            返回当前 TreeNode 及其子节点的 Tag 属性是 T 类型 的 T 实体集合。
            如果不是 T 类型，则跳过。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.TreeNodeUtil.GetAllSubNodes(System.Windows.Forms.TreeNode)">
            <summary>
            获取指定节点（含）下的所有节点。
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.TreeNodeUtil.GetAllParents(System.Windows.Forms.TreeNode)">
            <summary>
            返回所有的父节点。
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.TreeNodeUtil.GetCurrentSubObjects``1(System.Windows.Forms.TreeNode)">
            <summary>
             获取当前节点下的所有子节点（只包含第一级字节点）。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="treeNode"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.TreeNodeUtil.GetDepth(System.Windows.Forms.TreeNode)">
            <summary>
            深度
            </summary>
        </member>
        <member name="M:Geo.Utils.TreeNodeUtil.Filter(System.Windows.Forms.TreeNode,System.String,System.Boolean,System.Boolean)">
            <summary>
            返回过滤后的节点，如果没有则为空。
            如果子节点有，则父节点也保存。
            </summary>
            <param name="keyword"></param>
            <param name="isFuzzy"></param>
            <param name="containsOrNot"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.TreeNodeUtil.GetNoChildNodes(System.Windows.Forms.TreeNode)">
            <summary>
            获取没有子节点的节点，常用于从底到上进行删除.
            如果没有则返回自身。
            如果只包含一个则是他本身,反之也成立
            </summary>
            <param name="treeId"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.TreeNodeUtil.GetNodeListWithTag``1(System.Windows.Forms.TreeView,System.Boolean,System.Int32)">
            <summary>
            获取节点列表。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="TreeView"></param>
            <param name="loop"></param>
            <param name="maxCount"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.TreeNodeUtil.GetNodeList(System.Windows.Forms.TreeView,System.Boolean,System.Int32)">
            <summary>
            将所有的节点以列表形式返回
            </summary>
            <param name="TreeView"></param>
            <param name="loop"></param>
            <param name="maxCount"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.TreeNodeUtil.GetNodeList(System.Windows.Forms.TreeNode,System.Boolean,System.Int32)">
            <summary>
            将节点以及子节点，以列表返回。
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.TreeNodeUtil.GetFirstTag``1(System.Windows.Forms.TreeNode)">
            <summary>
            获取第一个Tag绑定的对象。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="loop"></param>
            <param name="maxCount"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.TreeNodeUtil.GetFirstTag``1(System.Collections.Generic.List{System.Windows.Forms.TreeNode})">
            <summary>
            获取第一个Tag绑定的对象。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="loop"></param>
            <param name="maxCount"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.TreeNodeUtil.GetTags``1(System.Collections.Generic.List{System.Windows.Forms.TreeNode},System.Boolean,System.Int32)">
            <summary>
            返回当前及其子节点 Tag 类型为指定类型的对象列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nodes"></param>
            <param name="maxCount"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.TreeNodeUtil.GetTags``1(System.Windows.Forms.TreeNode,System.Boolean,System.Int32)">
            <summary>
            返回当前及其子节点 Tag 类型为指定类型的对象列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.TreeNodeUtil.ExpandToNode(System.Windows.Forms.TreeNode)">
            <summary>
            展开到指定的节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Geo.Utils.FormUtil">
            <summary>
            窗口工具类
            </summary>
        </member>
        <member name="F:Geo.Utils.FormUtil.title">
            <summary>
            信息系统
            </summary>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowSlpash">
            <summary>
            欢迎界面
            </summary>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowSlpash(System.String)">
            <summary>
            显示提示
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:Geo.Utils.FormUtil.myStartingMethod">
            <summary>
            显示提示
            </summary>
        </member>
        <member name="M:Geo.Utils.FormUtil.Waitting">
            <summary>
            显示等待界面
            </summary>
        </member>
        <member name="M:Geo.Utils.FormUtil.showWaittingMethod">
            <summary>
            显示等待
            </summary>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowWaittingForm">
            <summary>
            显示等待界面
            </summary>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowWaittingForm(System.String,System.Double)">
            <summary>
            提示等待
            </summary>
            <param name="msg"></param>
            <param name="second"></param>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowWaittingMethod">
            <summary>
            等待
            </summary>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowNoRightBox">
            <summary>
            提示没有权限窗口。
            </summary>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowNotEmptyMessageBox">
            <summary>
            请将信息输入完整
            </summary>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowWarningMessageBox(System.String)">
            <summary>
            提示警告
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowErrorMessageBox(System.String)">
            <summary>
            错误提示窗口
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowOkMessageBox(System.String)">
            <summary>
            OK提示
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowIfOpenDirMessageBox(System.String,System.String)">
            <summary>
            提示是否打开指定的文件或文件夹。
            </summary>
            <param name="msg"></param>
            <param name="path"></param>
        </member>
        <member name="M:Geo.Utils.FormUtil.HandleException(System.Exception,System.String)">
            <summary>
            处理异常，可以抛出查看详情
            </summary>
            <param name="ex"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowYesNoMessageBox(System.String)">
            <summary>
            提示选择
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FormUtil.InsertLineWithTimeToTextBox(System.Windows.Forms.TextBoxBase,System.String,System.Int32)">
            <summary>
            插入信息
            </summary>
            <param name="textBoxBase"></param>
            <param name="info"></param>
            <param name="maxAllowCount"></param>
        </member>
        <member name="M:Geo.Utils.FormUtil.InsertLineToTextBox(System.Windows.Forms.TextBoxBase,System.String,System.Int32)">
            <summary>
            在第一条插入行,异常也不会报错！
            </summary>
            <param name="textBoxBase"></param>
            <param name="info"></param>
            <param name="maxAllowCount"></param>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowNotice(System.Windows.Forms.Control,System.String,System.Boolean)">
            <summary>
            显示通知，基于控件。此处具有时间控制，避免过于频繁。
            </summary>
            <param name="control"></param>
            <param name="info"></param> 
            <param name="isControlFrequence"></param> 
        </member>
        <member name="M:Geo.Utils.FormUtil.SetText(System.Windows.Forms.Control,System.String)">
            <summary>
            直接设置文本，基于控件。不会报错。
            </summary>
            <param name="control"></param>
            <param name="text"></param> 
        </member>
        <member name="M:Geo.Utils.FormUtil.AppendLineToTextBox(System.Windows.Forms.TextBoxBase,System.String,System.Int32)">
            <summary>
            添加一条到最后
            </summary>
            <param name="TextBoxBase"></param>
            <param name="info"></param>
            <param name="maxAllowCount"></param>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowInputForm(System.String@)">
            <summary>
            弹出一个文本输入框。
            </summary>
            <param name="inputValue"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowInputForm(System.String,System.String@)">
            <summary>
             显示输入对话框
            </summary>
            <param name="formTitle"></param>
            <param name="inputValue"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowInputForm(System.String,System.String,System.String@)">
            <summary>
            显示输入对话框
            </summary>
            <param name="formTitle"></param>
            <param name="initValue"></param>
            <param name="inputValue"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowInputForm(System.String,System.String,System.Collections.Generic.List{System.String},System.String@)">
            <summary>
            显示输入对话框
            </summary>
            <param name="formTitle"></param>
            <param name="initValue"></param>
            <param name="canNotBeValues"></param>
            <param name="inputValue"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowInputForm(System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String@)">
            <summary>
            显示输入对话框
            </summary>
            <param name="formTitle">窗口题目</param>
            <param name="initValue">初始值</param>
            <param name="canNotBeValues">不能为数据</param>
            <param name="canNotBeWarnMsg">不能为数据提示</param>
            <param name="inputValue">输入的数据</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowInputLineForm(System.String,System.String[]@)">
            <summary>
            一个对话框，提示输入行。
            </summary>
            <param name="formTitle"></param>
            <param name="lines"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FormUtil.InitProgressBar(System.Windows.Forms.ProgressBar,System.Int32)">
            <summary>
            初始化 ProgressBar 的值。step为1。
            </summary>
            <param name="progressBar1"></param>
            <param name="max"></param>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowFormSaveTextFileAndIfOpenFolder(System.String,System.String,System.String)">
            <summary>
            弹出保存文件对话框，并保存文本文档。
            保存成功后，提示是否打开文件夹。
            </summary>
            <param name="content">文本内容</param>
            <param name="fileName">文件名称</param>
            <param name="filter">过滤器</param>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowFormSaveTextFile(System.String,System.String,System.String)">
            <summary>
            弹出保存文件对话框，并保存文本文档。
            </summary>
            <param name="content">文本内容</param>
            <param name="fileName">文件名称</param>
            <param name="filter">过滤器</param>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowFormGetFilePathes(System.String)">
            <summary>
            弹出窗口，批量选择文件，返回文件路径，若无返回null。
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowFormGetFilePath(System.String,System.String)">
            <summary>
            弹出窗口，选择文件，返回文件路径，若无返回null。
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowFormReadTextFile(System.String)">
            <summary>
            弹出窗口，选择文本，返回读取的内容，若无返回null。
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowFormReadTextLinesFile(System.String)">
            <summary>
            弹出窗口，选择文本，返回读取的行内容
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowOkAndOpenDirectory(System.String,System.String)">
            <summary>
            提示信息，并询问是否打开目录。如果输入的是文件，则打开所在目录。
            </summary>
            <param name="inDirPath"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowOkAndOpenFile(System.String,System.String)">
            <summary>
            显示OK并打开文件
            </summary>
            <param name="filePath"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowFileNotExistBox(System.String)">
            <summary>
            提示文件不存在。
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Geo.Utils.FormUtil.TryExecute(System.Action,System.Boolean)">
             <summary>
            可能出错的执行。
             </summary>
             <param name="action"></param>
             <param name="ignoreException"></param>
        </member>
        <member name="M:Geo.Utils.FormUtil.InvokeTextBoxSetText(System.Windows.Forms.TextBoxBase,System.String,System.Boolean)">
            <summary>
            等待线程并赋值
            </summary>
            <param name="textBox">显示的文本框</param>
            <param name="str">显示文本</param>
            <param name="isAppend">是否添加，否则直接赋值</param>
        </member>
        <member name="M:Geo.Utils.FormUtil.ShowMemoryStatusBox">
            <summary>
            弹出一个窗口，内容是内存使用情况。
            </summary>
        </member>
        <member name="M:Geo.Utils.FormUtil.CheckExistOrShowWarningForm(System.String)">
            <summary>
            检查文件存在性，如果不存在则提示，并返回false.
            </summary>
            <param name="FilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FormUtil.OpenFormSelectTitles(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            弹出对话框选择名称列表
            </summary>
            <param name="titleList"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FormUtil.OpenFormSelectOne(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            弹出对话框选择一个名称
            </summary>
            <param name="titleList"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.FormUtil.OpenFormSelectOne``1(``0@)">
            <summary>
            弹出对话框选择一个名称
            </summary> 
            <returns></returns>
        </member>
        <member name="T:Geo.Utils.SplashForm">
            <summary>
            启动窗口
            </summary>
        </member>
        <member name="M:Geo.Utils.SplashForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Utils.SplashForm.SetAuthString(System.String)">
            <summary>
            设置版权信息
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Geo.Utils.SplashForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Utils.SplashForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Utils.SplashForm.Title">
            <summary>
            显示题目。
            </summary>
        </member>
        <member name="T:Geo.Utils.UiUtil">
            <summary>
            界面工具
            </summary>
        </member>
        <member name="F:Geo.Utils.UiUtil.SystemName">
            <summary>
            系统名称
            </summary>
        </member>
        <member name="M:Geo.Utils.UiUtil.ShowSplash(System.String)">
            <summary>
            欢迎界面
            </summary>
        </member>
        <member name="M:Geo.Utils.UiUtil.MyStartingMethod">
            <summary>
            在当前线程启动启动界面
            </summary>
        </member>
        <member name="M:Geo.Utils.UiUtil.ShowWaittingForConnectionDbForm">
            <summary>
            显示等待数据库连接
            </summary>
        </member>
        <member name="M:Geo.Utils.UiUtil.ShowWaittingForConnectionDb">
            <summary>
            显示正在连接数据库，请等待
            </summary>
        </member>
        <member name="T:Geo.Utils.WaitingForm">
            <summary>
            提示等待窗口
            </summary>
        </member>
        <member name="M:Geo.Utils.WaitingForm.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.Utils.WaitingForm.#ctor(System.String)">
            <summary>
            带提示信息的构造函数
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Geo.Utils.WaitingForm.#ctor(System.String,System.Double)">
            <summary>
            构造函数。
            </summary>
            <param name="info"></param>
            <param name="second"></param>
        </member>
        <member name="M:Geo.Utils.WaitingForm.SplashForm_Load(System.Object,System.EventArgs)">
            <summary>
            程序启动
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Geo.Utils.WaitingForm.SplashForm_FormClosed(System.Object,System.Windows.Forms.FormClosedEventArgs)">
            <summary>
            窗口关闭
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Geo.Utils.WaitingForm.SplashForm_Click(System.Object,System.EventArgs)">
            <summary>
            点击窗口时间，然后关闭
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Geo.Utils.WaitingForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Utils.WaitingForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Utils.WaitingForm.Info">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="T:Geo.Utils.WordAPI">
            <summary>
            http://www.cnblogs.com/koolay/articles/1398110.html ,2012.6.15
            </summary>
        </member>
        <member name="M:Geo.Utils.WordAPI.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="template">模板文件位置</param>
            <param name="newWord">保存位置</param>
        </member>
        <member name="M:Geo.Utils.WordAPI.SetLinesPage(System.Int32)">
            <summary>
            设置默认一页行数
            </summary>
            <param name="aboutSize"></param>
        </member>
        <member name="M:Geo.Utils.WordAPI.SetBookMark(System.String,System.String)">
            <summary>
            设置书签的值
            </summary>
            <param name="markName">书签名</param>
            <param name="markValue">书签值</param>
        </member>
        <member name="M:Geo.Utils.WordAPI.SetPageHeader(System.String)">
            <summary>
            设置添加页眉
            </summary>
            <param name="context">内容</param>
        </member>
        <member name="M:Geo.Utils.WordAPI.InsertText(System.String,System.Int32,Microsoft.Office.Interop.Word.WdColor,System.Int32,System.String,Microsoft.Office.Interop.Word.WdParagraphAlignment)">
            <summary>
            当前位置处插入文字
            </summary>
            <param name="context">文字内容</param>
            <param name="fontSize">字体大小</param>
            <param name="fontColor">字体颜色</param>
            <param name="fontBold">粗体</param>
            <param name="familyName">字体</param>
            <param name="align">对齐方向</param>
        </member>
        <member name="M:Geo.Utils.WordAPI.ToNextPage">
            <summary>
            翻页
            </summary>
        </member>
        <member name="M:Geo.Utils.WordAPI.MoveParagraph(System.Int32)">
            <summary>
            焦点移动count段落
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Geo.Utils.WordAPI.MoveRow(System.Int32)">
            <summary>
            焦点移动count行
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Geo.Utils.WordAPI.MoveCharacter(System.Int32)">
            <summary>
            焦点移动字符数
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Geo.Utils.WordAPI.ToNextParagraph">
            <summary>
            插入段落
            </summary>
        </member>
        <member name="M:Geo.Utils.WordAPI.ToNextLine">
            <summary>
            回车换行
            </summary>
        </member>
        <member name="M:Geo.Utils.WordAPI.InsertPicture(System.String)">
            <summary>
            当前位置插入图片
            </summary>
            <param name="picture"></param>
        </member>
        <member name="M:Geo.Utils.WordAPI.CreatTable(System.Int32,System.Int32)">
            <summary>
            添加表格
            </summary>
            <param name="rowNum"></param>
            <param name="cellNum"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.WordAPI.SetColumnWidth(System.Single[],Microsoft.Office.Interop.Word.Table)">
            <summary>
            设置列宽
            </summary>
            <param name="widths"></param>
            <param name="tb"></param>
        </member>
        <member name="M:Geo.Utils.WordAPI.MergeColumn(Microsoft.Office.Interop.Word.Table,Microsoft.Office.Interop.Word.Cell[])">
            <summary>
            合并单元格
            </summary>
            <param name="tb"></param>
            <param name="cells"></param>
        </member>
        <member name="M:Geo.Utils.WordAPI.SetCellValue(Microsoft.Office.Interop.Word.Cell,System.String,Microsoft.Office.Interop.Word.WdParagraphAlignment)">
            <summary>
            设置单元格内容
            </summary>
            <param name="_c"></param>
            <param name="v"></param>
            <param name="align">对齐方式</param>
        </member>
        <member name="M:Geo.Utils.WordAPI.SaveAsWord">
            <summary>
            保存新文件
            </summary>
        </member>
        <member name="M:Geo.Utils.WordAPI.disponse">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Geo.Utils.WordUtil">
            <summary>
            用于操作 Word 的便捷工具方法。
            </summary>
        </member>
        <member name="F:Geo.Utils.WordUtil.mis">
            <summary>
            System.Reflection.Missing.Value
            </summary>
        </member>
        <member name="M:Geo.Utils.WordUtil.MoveStart(Microsoft.Office.Interop.Word.Application)">
            <summary>
            将光标移动至文件头部
            </summary>
        </member>
        <member name="M:Geo.Utils.WordUtil.MovePage(Microsoft.Office.Interop.Word.Application,System.Int32)">
            <summary>
            移动到指定页,正往前，负往后。
            </summary>
            <param name="wordApp"></param>
            <param name="count"></param>
        </member>
        <member name="M:Geo.Utils.WordUtil.InsertText(Microsoft.Office.Interop.Word.Application,System.String)">
            <summary>
            插入文本
            </summary>
            <param name="text"></param>
            <param name="wordApp">word app</param>
        </member>
        <member name="M:Geo.Utils.WordUtil.ToLineEnd(Microsoft.Office.Interop.Word.Application)">
            <summary>
            到行尾部
            </summary>
            <param name="wordApp">word app</param>
        </member>
        <member name="M:Geo.Utils.WordUtil.SetLinesPage(Microsoft.Office.Interop.Word.Application,System.Int32)">
            <summary>
            设置默认一页行数
            </summary>
            <param name="wordApp"></param>
            <param name="aboutSize"></param>
        </member>
        <member name="M:Geo.Utils.WordUtil.SetPageHeader(Microsoft.Office.Interop.Word.Application,System.String)">
            <summary>
            设置添加页眉
            </summary>
            <param name="context">内容</param>
            <param name="wordApp">word app</param>
        </member>
        <member name="M:Geo.Utils.WordUtil.InsertText(Microsoft.Office.Interop.Word.Application,System.String,System.Int32,Microsoft.Office.Interop.Word.WdColor,System.Int32,System.String,Microsoft.Office.Interop.Word.WdParagraphAlignment)">
            <summary>
            当前位置处插入文字
            </summary>
            <param name="wordApp">word app</param>
            <param name="context">文字内容</param>
            <param name="fontSize">字体大小</param>
            <param name="fontColor">字体颜色</param>
            <param name="fontBold">粗体</param>
            <param name="familyName">字体</param>
            <param name="align">对齐方向</param>
        </member>
        <member name="M:Geo.Utils.WordUtil.ToNextPage(Microsoft.Office.Interop.Word.Application)">
            <summary>
            翻页
            </summary>
        </member>
        <member name="M:Geo.Utils.WordUtil.MoveParagraph(Microsoft.Office.Interop.Word.Application,System.Int32)">
            <summary>
            焦点移动count段落
            </summary>
            <param name="wordApp">word app</param>
            <param name="count"></param>
        </member>
        <member name="M:Geo.Utils.WordUtil.MoveRow(Microsoft.Office.Interop.Word.Application,System.Int32)">
            <summary>
            焦点移动count行
            </summary>
            <param name="wordApp">word app</param>
            <param name="count"></param>
        </member>
        <member name="M:Geo.Utils.WordUtil.MoveCharacter(Microsoft.Office.Interop.Word.Application,System.Int32)">
            <summary>
            焦点移动字符数
            </summary>
            <param name="wordApp">word app</param>
            <param name="count">移动数量</param>
        </member>
        <member name="M:Geo.Utils.WordUtil.ToNextParagraph(Microsoft.Office.Interop.Word.Application)">
            <summary>
            插入段落
            </summary>
            <param name="wordApp">word app</param>
        </member>
        <member name="M:Geo.Utils.WordUtil.ToNextLine(Microsoft.Office.Interop.Word.Application)">
            <summary>
            回车换行
            </summary>
        </member>
        <member name="M:Geo.Utils.WordUtil.InsertPicture(Microsoft.Office.Interop.Word.Application,System.String)">
            <summary>
            当前位置插入图片
            </summary>
            <param name="wordApp">word app</param>
            <param name="picture"></param>
        </member>
        <member name="M:Geo.Utils.WordUtil.CreatTable(Microsoft.Office.Interop.Word.Application,Microsoft.Office.Interop.Word.Document,System.Int32,System.Int32)">
            <summary>
            添加表格
            </summary>
            <param name="wordApp">word 程序</param>
            <param name="_wordDocument">文档</param>
            <param name="rowNum">表格编号</param>
            <param name="cellNum">表格编号</param>
            <returns></returns>
        </member>
        <member name="M:Geo.Utils.WordUtil.SetColumnWidth(System.Single[],Microsoft.Office.Interop.Word.Table)">
            <summary>
            设置列宽
            </summary>
            <param name="widths"></param>
            <param name="tb"></param>
        </member>
        <member name="M:Geo.Utils.WordUtil.MergeColumn(Microsoft.Office.Interop.Word.Application,Microsoft.Office.Interop.Word.Table,Microsoft.Office.Interop.Word.Cell[])">
            <summary>
            合并单元格
            </summary>
            <param name="wordApp">word app</param>
            <param name="tb"></param>
            <param name="cells"></param>
        </member>
        <member name="M:Geo.Utils.WordUtil.SetCellValue(Microsoft.Office.Interop.Word.Application,Microsoft.Office.Interop.Word.Cell,System.String,Microsoft.Office.Interop.Word.WdParagraphAlignment)">
            <summary>
            设置单元格内容
            </summary>
            <param name="wordApp">word程序</param>
            <param name="cell">单元格</param>
            <param name="text">内容</param>
            <param name="align">对齐方式</param>
        </member>
        <member name="M:Geo.Utils.WordUtil.SaveAsWord(Microsoft.Office.Interop.Word.Application,Microsoft.Office.Interop.Word.Document,System.Object)">
            <summary>
            保存新文件
            </summary>
            <param name="wordApp">word程序</param>
            <param name="_wordDocument">文档对象</param>
            <param name="path">保存路径</param>
        </member>
        <member name="M:Geo.Utils.WordUtil.disponse(Microsoft.Office.Interop.Word.Application,Microsoft.Office.Interop.Word.Document)">
            <summary>
            释放资源
            </summary>
            <param name="wordApp">Word App</param>
            <param name="_wordDocument">文档对象</param>
        </member>
        <member name="M:Geo.Utils.WordUtil.SortAscending(Microsoft.Office.Interop.Word.Table)">
            <summary>
            升序排序
            </summary>
            <param name="wordTable"></param>
        </member>
        <member name="M:Geo.Utils.WordUtil.SetTableStyle(Microsoft.Office.Interop.Word.Table)">
            <summary>
            设置基本的表格样式
            </summary>
            <param name="wordTable"></param>
        </member>
        <member name="T:Geo.Utils.WordVariable">
            <summary>
            Word组件的很多参数强制使用ref，许多常数无法直接使用，必须用下面的变量传递
            </summary>
        </member>
        <member name="F:Geo.Utils.WordVariable.WdDocumentType_wdTypeDocument">
            <summary>
            WdDocumentType.wdTypeDocument
            </summary>
        </member>
        <member name="F:Geo.Utils.WordVariable.WdPageNumberAlignment_wdAlignPageNumberCenter">
            <summary>
            WdPageNumberAlignment.wdAlignPageNumberCenter
            </summary>
        </member>
        <member name="F:Geo.Utils.WordVariable.WdUnits_wdLine">
            <summary>
            WdUnits.wdLine
            </summary>
        </member>
        <member name="F:Geo.Utils.WordVariable.WdUnits_wdCharacter">
            <summary>
            WdUnits.wdCharacter
            </summary>
        </member>
        <member name="F:Geo.Utils.WordVariable.WdBreakType_wdSectionBreakNextPage">
            <summary>
            WdBreakType.wdSectionBreakNextPage
            </summary>
        </member>
        <member name="F:Geo.Utils.WordVariable.WdRecoveryType_wdPasteDefault">
            <summary>
            WdRecoveryType.wdPasteDefault
            </summary>
        </member>
        <member name="F:Geo.Utils.WordVariable.WdSaveOptions_wdDoNotSaveChanges">
            <summary>
            WdSaveOptions.wdDoNotSaveChanges
            </summary>
        </member>
        <member name="F:Geo.Utils.WordVariable.WdReplace_wdReplaceAll">
            <summary>
            WdReplace.wdReplaceAll
            </summary>
        </member>
        <member name="T:Geo.Algorithm.AdjustVector">
            <summary>
            Value = Obs - Approx
            平差用向量包含了观测值，近似值和残差。
            本向量为残差向量。如果没有近似值，则为观测值向量。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.AdjustVector.#ctor(Geo.Algorithm.IVector,Geo.Algorithm.IVector)">
            <summary>
            采用观测值和近似值初始化。
            </summary>
            <param name="Observation">观测值</param>
            <param name="Approx">近似值</param>
        </member>
        <member name="P:Geo.Algorithm.AdjustVector.Observation">
            <summary>
            观测值
            </summary>
        </member>
        <member name="P:Geo.Algorithm.AdjustVector.Approx">
            <summary>
            近似值
            </summary>
        </member>
        <member name="T:Geo.Algorithm.RmsedVector">
            <summary>
            Geo 向量，以一维列表形式实现。
            是一串纯粹的数字，没有其它任何物理意义。
            与矩阵相同，向量也有多种存储方式，但是主要还是一维列表比较方便,如改变向量空间的维数。
            </summary>
        </member>
        <member name="M:Geo.Algorithm.RmsedVector.#ctor(System.Double[],System.Double[],System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="vector">一维数组</param>
        </member>
        <member name="M:Geo.Algorithm.RmsedVector.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.Algorithm.RmsedVector.SetDimension(System.Int32)">
            <summary>
            设置向量空间的维数。只设置增大。
            </summary>
            <param name="dimension">新维数</param>
        </member>
        <member name="M:Geo.Algorithm.RmsedVector.GetItem(System.Int32)">
            <summary>
            获取指定的元素。
            </summary>
            <param name="i">行编号</param>
            <param name="j">列编号</param>
            <returns></returns>
        </member>
        <member name="T:Geo.VersionType">
            <summary>
            版本类型
            </summary>
        </member>
        <member name="F:Geo.VersionType.Public">
            <summary>
             公开版，like Express
            </summary>
        </member>
        <member name="F:Geo.VersionType.Development">
            <summary>
            开发版
            </summary>
        </member>
        <member name="F:Geo.VersionType.Distribution">
            <summary>
            发行版
            </summary>
        </member>
        <member name="F:Geo.VersionType.DistributionTesting">
            <summary>
            测试版
            </summary>
        </member>
        <member name="T:Geo.NameListManager">
            <summary>
            名称列表管理器,管理名称列表，名称下还有子名称，如坐标XYZ的X，Y，Z，数值和权值等。以此类推。
            采用字典维护子名称。
            注意：名称不可重复。
            </summary>
        </member>
        <member name="M:Geo.NameListManager.#ctor">
            <summary>
            名称列表管理器
            </summary>
        </member>
        <member name="P:Geo.NameListManager.SubNames">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Geo.NameListManager.TotalNames">
            <summary>
            将名称及其子名称都显示为列表
            </summary>
        </member>
        <member name="T:Geo.CelestialMomentEllipseOrbit">
            <summary>
            天球坐标系中椭圆轨道。
            </summary>
        </member>
        <member name="M:Geo.CelestialMomentEllipseOrbit.#ctor(Geo.Coordinates.MotionState)">
            <summary>
            通过运动状态初始化。
            </summary>
            <param name="MotionState">空间直角坐标系中的坐标和速度向量</param>
        </member>
        <member name="M:Geo.CelestialMomentEllipseOrbit.#ctor(System.Double,System.Double,System.Double,Geo.MomentEllipseOrbit)">
            <summary>
            通过参数初始化
            </summary>
            <param name="argumentOfPerigee">近地点弧角ω</param>
            <param name="inclination">轨道倾角</param>
            <param name="rightAscensionOfAscendingNode">升交点赤经</param>
            <param name="MomentEllipseOrbit">时刻平面轨道</param>
        </member>
        <member name="M:Geo.CelestialMomentEllipseOrbit.Init(System.Double,System.Double,System.Double,Geo.MomentEllipseOrbit)">
            <summary>
            通过参数初始化
            </summary>
            <param name="argumentOfPerigee">近地点弧角ω</param>
            <param name="inclination">轨道倾角</param>
            <param name="rightAscensionOfAscendingNode">升交点赤经</param>
            <param name="MomentEllipseOrbit">时刻平面轨道</param>
        </member>
        <member name="M:Geo.CelestialMomentEllipseOrbit.GetMotionState(System.Double)">
            <summary>
            计算其它时刻的卫星运动状态。
            </summary>
            <param name="deltaTime">与标准时间差</param>
            <returns></returns>
        </member>
        <member name="P:Geo.CelestialMomentEllipseOrbit.MotionState">
            <summary>
            当前时刻，卫星运动状态。
            </summary>
        </member>
        <member name="P:Geo.CelestialMomentEllipseOrbit.ArgumentOfPerigee">
            <summary>
            近升角距 ω
            </summary>
        </member>
        <member name="P:Geo.CelestialMomentEllipseOrbit.Inclination">
            <summary>
            轨道倾角 i
            </summary>
        </member>
        <member name="P:Geo.CelestialMomentEllipseOrbit.RightAscensionOfAscendingNode">
            <summary>
            升交点赤经 Ω
            </summary>
        </member>
        <member name="P:Geo.CelestialMomentEllipseOrbit.MomentEllipseOrbit">
            <summary>
            轨道椭圆
            </summary>
        </member>
        <member name="T:Geo.Draw.ChartControl">
            <summary>
            绘图，绘制表格数据是否有数据。
            </summary>
        </member>
        <member name="M:Geo.Draw.ChartControl.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.Draw.ChartControl.pictureBox1_MouseWheel(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            通过鼠标滚轮实现控制
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Geo.Draw.ChartControl.SetTable(Geo.TableObjectStorage)">
            <summary>
            绘制表格，默认第一列为编号
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Geo.Draw.ChartControl.SetTable(System.Data.DataTable)">
            <summary>
            绘制表格，默认第一列为编号
            </summary> 
            <param name="tb"></param>
        </member>
        <member name="M:Geo.Draw.ChartControl.DrawTable">
            <summary>
            绘制图标，第一列为编号
            </summary>
        </member>
        <member name="M:Geo.Draw.ChartControl.DrawBelts">
            <summary>
            绘制内容带
            </summary>
        </member>
        <member name="M:Geo.Draw.ChartControl.DrawYLabels">
            <summary>
            绘制Y轴标签
            </summary>
        </member>
        <member name="M:Geo.Draw.ChartControl.DrawXLables">
            <summary>
            绘制X轴标签
            </summary>
        </member>
        <member name="M:Geo.Draw.ChartControl.GetYCoord(System.Int32)">
            <summary>
            获取Y坐标,用户屏幕坐标，右手笛卡尔坐标
            </summary>
            <param name="satIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Draw.ChartControl.GetSatIndex(System.Int32)">
            <summary>
            获取卫星编号
            </summary>
            <param name="yCoord"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Draw.ChartControl.GetXCoord(System.Int32)">
            <summary>
            根据历元数量，获取X的坐标
            </summary>
            <param name="epoch"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Draw.ChartControl.GetIndexLabelX(System.Int32)">
            <summary>
            获取检索 X 的标签。
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Draw.ChartControl.Draw">
            <summary>
            绘图
            </summary>
        </member>
        <member name="M:Geo.Draw.ChartControl.DrawCoordAixs">
            <summary>
            绘制坐标轴
            </summary>
        </member>
        <member name="M:Geo.Draw.ChartControl.DrawCoordGrid">
            <summary>
            绘制坐标窗格
            </summary>
        </member>
        <member name="F:Geo.Draw.ChartControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Draw.ChartControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Draw.ChartControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Draw.ChartControl.ScreenCoordArea">
            <summary>
            屏幕转换。
            </summary>
        </member>
        <member name="P:Geo.Draw.ChartControl.PictureBox">
            <summary>
            绘图控件
            </summary>
        </member>
        <member name="P:Geo.Draw.ChartControl.DataTable">
            <summary>
            数据表
            </summary>
        </member>
        <member name="P:Geo.Draw.ChartControl.SatCount">
            <summary>
            卫星数量，行带数量。除去了表格中的第一行，认为是时间等编号。
            </summary>
        </member>
        <member name="P:Geo.Draw.ChartControl.Origin">
            <summary>
            坐标原点位置
            </summary>
        </member>
        <member name="P:Geo.Draw.ChartControl.MinEpoch">
            <summary>
            最小绘图历元
            </summary>
        </member>
        <member name="P:Geo.Draw.ChartControl.MaxEpoch">
            <summary>
            最大绘图历元
            </summary>
        </member>
        <member name="P:Geo.Draw.ChartControl.CenterEpoch">
            <summary>
            中心绘图历元
            </summary>
        </member>
        <member name="P:Geo.Draw.ChartControl.EpochCount">
            <summary>
            绘图历元数量
            </summary>
        </member>
        <member name="P:Geo.Draw.ChartControl.CoordHeight">
            <summary>
            坐标区域高度，即绘图区域
            </summary>
        </member>
        <member name="P:Geo.Draw.ChartControl.CoordWidth">
            <summary>
            坐标区域宽度
            </summary>
        </member>
        <member name="M:Geo.Draw.ChartForm.Draw(Geo.TableObjectStorage)">
            <summary>
            绘图
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Geo.Draw.ChartForm.Draw(System.Data.DataTable)">
            <summary>
            绘图
            </summary>
            <param name="table"></param>
        </member>
        <member name="F:Geo.Draw.ChartForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Draw.ChartForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Draw.ChartForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Geo.Draw.GraphicsText.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat,System.Single)">
            <summary>  
            绘制根据矩形旋转文本  
            </summary>  
            <param name="s">文本</param>  
            <param name="font">字体</param>  
            <param name="brush">填充</param>  
            <param name="layoutRectangle">局部矩形</param>  
            <param name="format">布局方式</param>  
            <param name="angle">角度</param>  
        </member>
        <member name="M:Geo.Draw.GraphicsText.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat,System.Single)">
            <summary>  
            绘制根据点旋转文本，一般旋转点给定位文本包围盒中心点  
            </summary>  
            <param name="s">文本</param>  
            <param name="font">字体</param>  
            <param name="brush">填充</param>  
            <param name="point">旋转点</param>  
            <param name="format">布局方式</param>  
            <param name="angle">角度</param>  
        </member>
        <member name="T:Geo.Draw.UserChartGraphics">
            <summary>
            用户图标绘图
            </summary>
        </member>
        <member name="M:Geo.Draw.UserChartGraphics.DrawLabel(System.String,System.Drawing.Point,System.Single)">
            <summary>
            绘制标签
            </summary>
            <param name="label"></param>
            <param name="pt"></param>
            <param name="font"></param>
            <param name="brush"></param>
            <param name="degree"></param>
        </member>
        <member name="M:Geo.Draw.UserChartGraphics.DrawLabel(System.String,System.Drawing.Point,System.Drawing.Font,System.Drawing.Brush,System.Drawing.StringFormat,System.Single)">
            <summary>
            绘制标签
            </summary>
            <param name="label"></param>
            <param name="pt"></param>
            <param name="font"></param>
            <param name="brush"></param>
            <param name="format"></param>
            <param name="degree"></param>
        </member>
        <member name="M:Geo.Draw.UserChartGraphics.DrawLine(System.Drawing.Pen,System.Drawing.Point[])">
            <summary>
            绘制线条。连续绘制
            </summary>
            <param name="pen"></param>
            <param name="pts"></param>
        </member>
        <member name="M:Geo.Draw.UserChartGraphics.DrawGrid(System.Drawing.Pen,System.Int32,System.Int32,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            绘制网格
            </summary>
            <param name="pen"></param>
            <param name="rowCount"></param>
            <param name="colCount"></param>
            <param name="fromPt"></param>
            <param name="toPt"></param>
        </member>
        <member name="M:Geo.Draw.UserChartGraphics.DarwBelt(System.Drawing.Pen,System.Int32,System.Int32[],System.Int32)">
            <summary>
            绘制带
            </summary>
            <param name="pen"></param>
            <param name="yCoord"></param>
            <param name="xCoords"></param>
            <param name="height"></param>
        </member>
        <member name="P:Geo.Draw.UserChartGraphics.Graphics">
            <summary>
            绘图
            </summary>
        </member>
        <member name="P:Geo.Draw.UserChartGraphics.DefaultFont">
            <summary>
            默认字体
            </summary>
        </member>
        <member name="P:Geo.Draw.UserChartGraphics.DefaultBrush">
            <summary>
            默认刷子
            </summary>
        </member>
        <member name="P:Geo.Draw.UserChartGraphics.DefaultStringFormat">
            <summary>
            默认刷子
            </summary>
        </member>
        <member name="T:Geo.Draw.ScreenCoordArea">
            <summary>
            屏幕区域坐标 转换器。负责用户坐标与屏幕坐标的转换。
            </summary>
        </member>
        <member name="M:Geo.Draw.ScreenCoordArea.GetScreenCoord(System.Drawing.Point)">
            <summary>
            从用户坐标，以左下角为原点的坐标（横轴为X，右手系），
            转换到屏幕坐标（以左上角为原点，横轴为X，左手系）。
            转换方法，X 轴不变。Y轴平移并反向。
            </summary>
            <param name="userCoord">以左下角为原点的坐标（横轴为X，右手系）</param> 
            <returns></returns>
        </member>
        <member name="M:Geo.Draw.ScreenCoordArea.GetScreenY(System.Int32)">
            <summary>
            获取屏幕Y坐标
            </summary>
            <param name="userY"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Draw.ScreenCoordArea.GetScreenX(System.Int32)">
            <summary>
            获取屏幕 X 坐标。
            </summary>
            <param name="userX"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Draw.ScreenCoordArea.GetScreenLine(System.Drawing.Point[])">
            <summary>
            获取屏幕线
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Draw.ScreenCoordArea.GetUserCoord(System.Drawing.Point)">
            <summary>
            计算用户坐标
            </summary>
            <param name="screenPt"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Draw.ScreenCoordArea.LeftDown">
            <summary>
            左下角坐标。
            </summary>
        </member>
        <member name="P:Geo.Draw.ScreenCoordArea.LeftTop">
            <summary>
            右上角坐标。
            </summary>
        </member>
        <member name="P:Geo.Draw.ScreenCoordArea.RightTop">
            <summary>
            左上角坐标。
            </summary>
        </member>
        <member name="P:Geo.Draw.ScreenCoordArea.RightDown">
            <summary>
            右下角坐标。
            </summary>
        </member>
        <member name="P:Geo.Draw.ScreenCoordArea.ChartSize">
            <summary>
            绘图区大小，画板、控件尺寸，如果超出，就不用绘图了。
            </summary>
        </member>
        <member name="T:Geo.FileNames">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="F:Geo.FileNames.TextExcelFileExtension">
            <summary>
            TextExcelFileExtension
            </summary>
        </member>
        <member name="F:Geo.FileNames.RinexOFileExtension">
            <summary>
            RINEX O Fil Extension
            </summary>
        </member>
        <member name="T:Geo.KeyDictionary`2">
            <summary>
            http://www.cnblogs.com/mgen/archive/2011/09/19/2181212.html
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
        </member>
        <member name="T:Geo.LoopControlType">
            <summary>
            循环控制类型
            </summary>
        </member>
        <member name="F:Geo.LoopControlType.GoOn">
            <summary>
            继续本次循环，继续做.默认选项。
            </summary>
        </member>
        <member name="F:Geo.LoopControlType.Continue">
            <summary>
            忽略本次后继续循环，再做
            </summary>
        </member>
        <member name="F:Geo.LoopControlType.Break">
            <summary>
            跳出本次循环
            </summary>
        </member>
        <member name="F:Geo.LoopControlType.Return">
            <summary>
            终止此方法
            </summary>
        </member>
        <member name="T:Geo.Algorithm.MatrixUtilNew">
            <summary>
            矩阵计算工具
            </summary>
        </member>
        <member name="M:Geo.Algorithm.MatrixUtilNew.Transpose(Geo.Algorithm.Matrix)">
            <summary>
            矩阵转置
            </summary>
            <param name="Mat"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.MatrixUtilNew.Dyadic(Geo.Algorithm.Vector,Geo.Algorithm.Vector)">
            <summary>
            Dyadic product。两个n,m维矩阵向量，点乘为 n × m 矩阵。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Algorithm.MatrixUtilNew.LU_Decomp(Geo.Algorithm.Matrix,Geo.Algorithm.Vector)">
             <summary>
              LU-Decomposition.
            
               Given an nxn matrix A, this routine replaces it by the LU decomposition
               of a rowwise permutation of itself. A is output, arranged as in 
               equation (2.3.14) of Press et al. (1986); Indx is an ouput vector which
               records the row permutation effected by partial pivoting. This routine is 
               used in combination with LU_BackSub to solve linear equations or invert 
               a matrix.
             Adapted from LUDCMP of Press et al. (1986).
             </summary>
             <param name="A">  Square matrix; replaced by LU decomposition of permutation of A on output</param>
             <param name="Indx"> Permutation index vector</param>
        </member>
        <member name="M:Geo.Algorithm.MatrixUtilNew.LU_BackSub(Geo.Algorithm.Matrix,Geo.Algorithm.Vector,Geo.Algorithm.Vector)">
            <summary>
            LU 回代。 LU_BackSub   LU Backsubstitution
            Solves the set of n linear equations Ax=b. Here A is input, not as the 
              matrix A but rather as its LU decomposition, determined by the function
              LU_Decomp. b is input as the right-hand side vector b, and returns with
              the solution vector x. A and Indx are not modified by this function and 
              can be left in place for successive calls with different right-hand 
              sides b. This routine takes into account the posssibility that B will  
              begin with many zero elements, so it is efficient for use in matrix
              inversions.
            
            </summary>
            <param name="A">A       LU decomposition of permutation of A</param>
            <param name="Indx">Indx    Permutation index vector</param>
            <param name="b"> b       Right-hand side vector b; replaced by solution x of Ax=b on output</param>
        </member>
        <member name="M:Geo.Algorithm.MatrixUtilNew.InverseUpRight(Geo.Algorithm.Matrix)">
            <summary>
            上三角求逆 Inversion of an upper right triangular matrix
             This function may be called with the same actual parameter for R and T
            </summary>
            <param name="R"> R    Upper triangular square matrix</param>
            <returns></returns>
        </member>
        <member name="T:Geo.MomentEllipseOrbit">
            <summary>
            椭圆轨道.某一时刻平面坐标系中的轨道椭圆，
            可以通过此旋转得到天球和地球坐标系。
            </summary>
        </member>
        <member name="M:Geo.MomentEllipseOrbit.#ctor(System.Double,System.Double,Geo.PlaneEllipse)">
            <summary>
            默认构造函数。当前时刻的运动状态。
            </summary>
            <param name="MeanAnomaly">参考时刻τ卫星的平近点角,弧度</param>
            <param name="deltaTime">与参考时刻之差</param>
            <param name="PlaneEllipse">椭圆轨道</param>
        </member>
        <member name="M:Geo.MomentEllipseOrbit.#ctor(System.Double,Geo.PlaneEllipse)">
            <summary>
            默认构造函数。当前时刻的运动状态。
            </summary>
            <param name="MeanAnomaly">本时刻卫星的平近点角,弧度</param>
            <param name="PlaneEllipse">椭圆轨道</param>
        </member>
        <member name="M:Geo.MomentEllipseOrbit.GetCelestialMotionState(System.Double,System.Double,System.Double)">
            <summary>
            在天球坐标系中的位置
            </summary>
            <param name="argumentOfPerigee">近升角距</param>
            <param name="inclination">轨道倾角</param>
            <param name="rightAscensionOfAscendingNode">升交点赤经</param>
            <returns></returns>
        </member>
        <member name="M:Geo.MomentEllipseOrbit.KeplerEqForEccAnomaly(System.Double,System.Double)">
            <summary>
            开普勒方程 由平近点角 M 和 离心率 e 计算 偏近点角E
            solve for eccentric anomaly given mean anomaly and orbital eccentricity
            use simple fixed point iteration of kepler's equation
            </summary>
            <param name="em">rad</param>
            <returns></returns>
        </member>
        <member name="P:Geo.MomentEllipseOrbit.MeanAnomaly">
            <summary>
            平近点角 M
            </summary>
        </member>
        <member name="P:Geo.MomentEllipseOrbit.EccentricAnomaly">
            <summary>
            偏近点角.偏近点角是过椭圆上的任意一点，垂直于椭圆半长轴，交半长轴外接圆的点到原点的直线与半长轴所成夹角。
            在椭圆的参数方程x=acosθ ， y=bsinθ中，参数角θ即为偏近点角。
            在天体力学中，偏近点角可用来描述极径
            </summary>
        </member>
        <member name="P:Geo.MomentEllipseOrbit.TrueAnomaly">
            <summary>
            真近点角
            </summary>
        </member>
        <member name="P:Geo.MomentEllipseOrbit.VectorLength">
            <summary>
            位置向径
            </summary>
        </member>
        <member name="P:Geo.MomentEllipseOrbit.Polar">
            <summary>
            极坐标,高度角为0。原点在焦点，起始轴指向近地点，逆时针为正，单位弧度。
            </summary>
        </member>
        <member name="P:Geo.MomentEllipseOrbit.PlaneMotionState">
            <summary>
            卫星在平面直角坐标系中的运动状态。
            空间直角坐标，Z轴为0,.原点在焦点，X轴指向近地点，Y轴指向卫星运动方向，与X垂直，右手坐标系。
            </summary>
        </member>
        <member name="P:Geo.MomentEllipseOrbit.PlaneEllipse">
            <summary>
            平面椭圆
            </summary>
        </member>
        <member name="T:Geo.NumeralOperationType">
            <summary>
            数字操作类型
            </summary>
        </member>
        <member name="T:Geo.NumeralCompareOperator">
            <summary>
            比较操作符
            </summary>
        </member>
        <member name="T:Geo.NumeralFilter">
            <summary>
            比较操作符
            </summary>
        </member>
        <member name="M:Geo.NumeralFilter.#ctor(System.Double,Geo.NumeralCompareOperator)">
            <summary>
            构造函数。
            </summary>
            <param name="referVal"></param>
            <param name="NumeralCompareOperator"></param>
        </member>
        <member name="M:Geo.NumeralFilter.Filter(System.Double)">
            <summary>
            过滤，如果满足要求,表示被过滤掉，则返回 true。
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.NumeralFilter.IsSatisfied(System.Double,System.Double,Geo.NumeralCompareOperator)">
            <summary>
            过滤，如果满足要求，则返回 true。
            </summary>
            <param name="val"></param>
            <param name="referVal"></param>
            <param name="NumeralCompareOperator"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.NumeralFilter.NumeralCompareOperator">
            <summary>
            比较符号
            </summary>
        </member>
        <member name="P:Geo.NumeralFilter.ReferVal">
            <summary>
            参考数据
            </summary>
        </member>
        <member name="T:Geo.PeriodPipeFilterManager">
            <summary>
            周期滤波管理器
            </summary>
        </member>
        <member name="M:Geo.PeriodPipeFilterManager.#ctor(System.Double,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="Period"></param>
            <param name="ReferenceValue"></param>
        </member>
        <member name="M:Geo.PeriodPipeFilterManager.Create(System.String)">
            <summary>
            创建
            </summary>
            <param name="keyPrev"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.PeriodPipeFilterManager.Init(Geo.TableObjectStorage)">
            <summary>
            采用已有表最后的数据进行初始化各个子过滤器
            </summary>
            <param name="product"></param>
        </member>
        <member name="P:Geo.PeriodPipeFilterManager.Period">
            <summary>
            数字变换周期，即可以通过加减方式将数据放到管道中来。
            </summary>
        </member>
        <member name="P:Geo.PeriodPipeFilterManager.ReferenceValue">
            <summary>
            参考结果。滤波结果应该与其在半个周期内，同时也在管道内。
            </summary>
        </member>
        <member name="T:Geo.PeriodPipeFilter`1">
            <summary>
            管道滤波器
            </summary>
        </member>
        <member name="T:Geo.PeriodPipeFilter">
            <summary>
            周期性数字管道滤波,将数据统一到指定大小的管道中来。
            数值与给定的参考值差在半周内。
            </summary>
        </member>
        <member name="M:Geo.PeriodPipeFilter.#ctor(System.Double,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="ReferenceValue">参考数值</param>
            <param name="Period">周期</param>
        </member>
        <member name="M:Geo.PeriodPipeFilter.OnCutingPeriodCountChanged(System.Int32)">
            <summary>
            改变了
            </summary>
            <param name="periodCount"></param>
        </member>
        <member name="M:Geo.PeriodPipeFilter.Filter(System.Double)">
            <summary>
            滤波并返回结果。结果与指定值差在半周内。
            注意，如果多次使用，可能回造成趋势性漂移。
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="E:Geo.PeriodPipeFilter.CutingPeriodCountChanged">
            <summary>
            对齐周数改变了
            </summary>
        </member>
        <member name="P:Geo.PeriodPipeFilter.Period">
            <summary>
            数字变换周期，即可以通过加减方式将数据放到管道中来。
            </summary>
        </member>
        <member name="P:Geo.PeriodPipeFilter.SemiPeriod">
            <summary>
            半个周期
            </summary>
        </member>
        <member name="P:Geo.PeriodPipeFilter.ReferenceValue">
            <summary>
            参考结果。滤波结果应该与其在半个周期内，同时也在管道内。
            </summary>
        </member>
        <member name="P:Geo.PeriodPipeFilter.Index">
            <summary>
            滤波次数
            </summary>
        </member>
        <member name="P:Geo.PeriodPipeFilter.LastCutingPeriodCount">
            <summary>
            最后一个被减去的周期数量。
            </summary>
        </member>
        <member name="T:Geo.PlaneEllipse">
            <summary>
            平面椭圆
            </summary>
        </member>
        <member name="M:Geo.PlaneEllipse.#ctor(System.Double,System.Double)">
            <summary>
            平面椭圆
            </summary>
            <param name="a">椭圆长半径</param>
            <param name="e">离心率</param>
        </member>
        <member name="P:Geo.PlaneEllipse.e">
            <summary>
            离心率 Eccentricity
            </summary>
        </member>
        <member name="P:Geo.PlaneEllipse.a">
            <summary> 
            长半轴 SemiMajor
            </summary>
        </member>
        <member name="P:Geo.PlaneEllipse.ee">
            <summary>
            e*e
            </summary>
        </member>
        <member name="P:Geo.PlaneEllipse.b">
            <summary>
            短半轴 SemiMinor
            </summary>
        </member>
        <member name="P:Geo.PlaneEllipse.c">
            <summary>
            焦点长 FocalLength
            </summary>
        </member>
        <member name="P:Geo.PlaneEllipse.Area">
            <summary>
            椭圆面积 Area
            </summary>
        </member>
        <member name="P:Geo.PlaneEllipse.P">
            <summary>
            椭圆的半通径 P
            </summary>
        </member>
        <member name="P:Geo.PlaneEllipse.n">
            <summary>
            平均角速度 n，弧度/秒
            </summary>
        </member>
        <member name="P:Geo.PlaneEllipse.OrbitCycleTime">
            <summary>
            周期，一圈所费时间,单位秒
            </summary>
        </member>
        <member name="P:Geo.PlaneEllipse.MeanAngularVelocity">
            <summary>
            平均角速度。弧度/秒
            </summary>
        </member>
        <member name="P:Geo.PlaneEllipse.SqrtSemiMajor">
            <summary>
            轨道长半径平方根
            </summary>
        </member>
        <member name="P:Geo.PlaneEllipse.SemiChordDiameter">
            <summary>
            椭圆的半通径，米
            </summary>
        </member>
        <member name="P:Geo.PlaneEllipse.FocalLength">
            <summary>
            离心率
            </summary>
        </member>
        <member name="P:Geo.PlaneEllipse.SemiMinor">
            <summary>
            轨道短半径，b
            </summary>
        </member>
        <member name="P:Geo.PlaneEllipse.Eccentricity">
            <summary>
            离心率
            </summary>
        </member>
        <member name="P:Geo.PlaneEllipse.SemiMajor">
            <summary>
            离心率
            </summary>
        </member>
        <member name="T:Geo.WideFiexedLineBuilder">
            <summary>
            宽度固定的文本
            </summary>
        </member>
        <member name="M:Geo.WideFiexedLineBuilder.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="maxWidth"></param>
        </member>
        <member name="M:Geo.WideFiexedLineBuilder.GetWideFixedLines(System.String,System.Int32)">
            <summary>
            截断为宽度固定的文本
            </summary>
            <param name="str"></param>
            <param name="lineMaxWith"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.WideFiexedLineBuilder.MaxWidthCount">
            <summary>
            限宽字数
            </summary>
        </member>
        <member name="T:Geo.SimpleCycleSlipRemover">
            <summary>
            简单的周跳移除器
            </summary>
        </member>
        <member name="M:Geo.SimpleCycleSlipRemover.#ctor(System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="Lambda"></param>
        </member>
        <member name="M:Geo.SimpleCycleSlipRemover.GetVal(System.Double)">
            <summary>
            计算值
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.SimpleCycleSlipRemover.GetNewCycledLambda(System.Double)">
            <summary>
            计算新的偏差值。
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.SimpleCycleSlipRemover.IsCycleSliped(System.Double)">
            <summary>
            是否产生了周跳
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.SimpleCycleSlipRemover.Index">
            <summary>
            数据编号
            </summary>
        </member>
        <member name="P:Geo.SimpleCycleSlipRemover.Lambda">
            <summary>
            波长，若值是频率则为1.
            </summary>
        </member>
        <member name="P:Geo.SimpleCycleSlipRemover.LastVal">
            <summary>
            最后的数值
            </summary>
        </member>
        <member name="P:Geo.SimpleCycleSlipRemover.LastCylceRemovedVal">
            <summary>
            最后一个移除了周跳的数值
            </summary>
        </member>
        <member name="P:Geo.SimpleCycleSlipRemover.CycledLambda">
            <summary>
            已跳的整周数
            </summary>
        </member>
        <member name="T:Geo.Winform.LogListenerForm">
            <summary>
            具有日志监听功能的窗体
            </summary>
        </member>
        <member name="F:Geo.Winform.LogListenerForm.log">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:Geo.Winform.LogListenerForm.#ctor">
            <summary>
            具有日志监听功能的窗体
            </summary>
        </member>
        <member name="M:Geo.Winform.LogListenerForm.LogWriter_MsgProduced(System.String,Geo.IO.LogType,System.Type)">
            <summary>
            实现日志读取
            </summary>
            <param name="msg"></param>
            <param name="LogType"></param>
            <param name="msgProducer"></param>
        </member>
        <member name="M:Geo.Winform.LogListenerForm.ShowInfo(System.String)">
            <summary>
            显示信息
            </summary>
            <param name="info"></param>
        </member>
        <member name="F:Geo.Winform.LogListenerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.LogListenerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.LogListenerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Geo.Winform.LogListenerForm.IsEnableLogShowing">
            <summary>
            是否启用日志显示
            </summary>
        </member>
        <member name="F:Geo.Winform.CommonAdjusterForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.CommonAdjusterForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.CommonAdjusterForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Geo.Winform.ObjectEditForm`1">
            <summary>
            通用对象编辑器
            </summary>
        </member>
        <member name="M:Geo.Winform.ObjectEditForm`1.#ctor">
            <summary>
            通用对象编辑器
            </summary>
        </member>
        <member name="M:Geo.Winform.ObjectEditForm`1.Init">
            <summary>
            初始化，采用
            </summary> 
        </member>
        <member name="M:Geo.Winform.ObjectEditForm`1.GetControl(System.String)">
            <summary>
            通过名称获取控件
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.ObjectEditForm`1.UiToObj">
            <summary>
            从界面输入更新到对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.ObjectEditForm`1.UiToObj(`0)">
            <summary>
            从界面输入更新到对象
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.ObjectEditForm`1.ObjToUi(`0)">
            <summary>
            更新界面
            </summary>
            <param name="obj"></param>
        </member>
        <member name="F:Geo.Winform.ObjectEditForm`1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.ObjectEditForm`1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.ObjectEditForm`1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Geo.Winform.ObjectEditForm`1.ObjType">
            <summary>
            对象类型
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.ArraySelectControl`1">
            <summary>
            将枚举类型封装在分组框内。
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
        </member>
        <member name="T:Geo.Winform.Controls.IEnumSelector`1">
            <summary>
            枚举类型选择器
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.IEnumSelector`1.CurrentdType">
            <summary>
            当前所选
            </summary>
        </member>
        <member name="F:Geo.Winform.Controls.ArraySelectControl`1.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.ArraySelectControl`1.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.ArraySelectControl`1.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ArraySelectControl`1.RadioButtons">
            <summary>
            单选按钮
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ArraySelectControl`1.Text">
            <summary>
            this.groupBox1.Text;
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ArraySelectControl`1.CurrentdType">
            <summary>
            默认选择项
            </summary>
        </member>
        <member name="T:Geo.Winform.ArrayCheckBoxControl">
            <summary>
            枚举生成界面
            </summary>
        </member>
        <member name="M:Geo.Winform.ArrayCheckBoxControl.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.ArrayCheckBoxControl.Init``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            初始化
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Geo.Winform.ArrayCheckBoxControl.BuildBtnAndAddToControl(System.Object)">
            <summary>
            添加一个
            </summary>
            <param name="txt"></param>
        </member>
        <member name="M:Geo.Winform.ArrayCheckBoxControl.GetSelected``1">
            <summary>
            当前类型
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.ArrayCheckBoxControl.Select``1(``0)">
            <summary>
            使其选择上
            </summary>
            <typeparam name="T"></typeparam>
            <param name="currentVal"></param>
        </member>
        <member name="F:Geo.Winform.ArrayCheckBoxControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.ArrayCheckBoxControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.ArrayCheckBoxControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="E:Geo.Winform.ArrayCheckBoxControl.EnumItemSelected">
            <summary>
            已经选择枚举项目。
            </summary>
        </member>
        <member name="P:Geo.Winform.ArrayCheckBoxControl.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Geo.Winform.ArrayCheckBoxControl.CurrentTexts">
            <summary>
            当前选择
            </summary>
        </member>
        <member name="P:Geo.Winform.ArrayCheckBoxControl.CurrentCheckBoxes">
            <summary>
            当前选择
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.NamedArrayControl">
            <summary>
            数组界面
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.NamedArrayControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.NamedArrayControl.GetValue">
            <summary>
            获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.Controls.NamedArrayControl.GetLines">
            <summary>
            获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.Controls.NamedArrayControl.Init(System.String,System.Double[])">
            <summary>
            初始化
            </summary>
            <param name="title"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.Winform.Controls.NamedArrayControl.SetValue(System.Double[])">
            <summary>
            设置值
            </summary>
            <param name="array"></param>
        </member>
        <member name="F:Geo.Winform.Controls.NamedArrayControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.NamedArrayControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.NamedArrayControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.NamedArrayControl.Title">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.NamedTimeControl">
            <summary>
            字符串界面
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.NamedTimeControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.NamedTimeControl.GetValue">
            <summary>
            获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.Controls.NamedTimeControl.Init(System.String,System.DateTime)">
            <summary>
            初始化
            </summary>
            <param name="title"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.Winform.Controls.NamedTimeControl.SetValue(System.DateTime)">
            <summary>
            设置值
            </summary>
            <param name="enabledVal"></param>
        </member>
        <member name="F:Geo.Winform.Controls.NamedTimeControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.NamedTimeControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.NamedTimeControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.NamedTimeControl.Title">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.NamedStringControl">
            <summary>
            字符串界面
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.NamedStringControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.NamedStringControl.GetValue">
            <summary>
            获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.Controls.NamedStringControl.GetLines">
            <summary>
            获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.Controls.NamedStringControl.Init(System.String,System.String,System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="title"></param>
            <param name="currentVal"></param>
            <param name="isMultiLines"></param>
        </member>
        <member name="M:Geo.Winform.Controls.NamedStringControl.SetValue(System.String)">
            <summary>
            设置值
            </summary>
            <param name="enabledVal"></param>
        </member>
        <member name="F:Geo.Winform.Controls.NamedStringControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.NamedStringControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.NamedStringControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.NamedStringControl.Title">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.FloatSpanControl">
            <summary>
            数据范围过滤
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.FloatSpanControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.FloatSpanControl.GetValue">
            <summary>
            获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.Controls.FloatSpanControl.Init(System.String,System.Double,System.Double)">
            <summary>
            初始化
            </summary>
            <param name="title"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.Winform.Controls.FloatSpanControl.SetValue(Geo.NumerialSegment)">
            <summary>
            设置值
            </summary>
            <param name="enabledVal"></param>
        </member>
        <member name="F:Geo.Winform.Controls.FloatSpanControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.FloatSpanControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.FloatSpanControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.FloatSpanControl.Title">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.FloatSpanControl.From">
            <summary>
            最小数值
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.FloatSpanControl.To">
            <summary>
            最大数值
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.EnabledTimePeriodControl">
            <summary>
            启动数据范围过滤否
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledTimePeriodControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledTimePeriodControl.GetEnabledValue">
            <summary>
            获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledTimePeriodControl.SetEnabledValue(Geo.EnabledTimePeriod)">
            <summary>
            设置值
            </summary>
            <param name="enabledVal"></param>
        </member>
        <member name="F:Geo.Winform.Controls.EnabledTimePeriodControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledTimePeriodControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledTimePeriodControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.EnabledTimePeriodControl.Title">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.EnabledTimePeriodControl.From">
            <summary>
            最小数值
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.EnabledTimePeriodControl.To">
            <summary>
            最大数值
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.TimeLoopControl">
            <summary>
            事件遍历控件
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.TimeLoopControl.#ctor">
            <summary>
            初始构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.TimeLoopControl.GetTimeLooper">
            <summary>
            获取时间遍历器
            </summary>
            <returns></returns>
        </member>
        <member name="F:Geo.Winform.Controls.TimeLoopControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.TimeLoopControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.TimeLoopControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.TimeLoopControl.TimePeriodControl">
            <summary>
            事件控件
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.TimeLoopControl.TimeStepControl">
            <summary>
            事件步长控件
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.IEnableNamedValue`1">
            <summary>
            命名的数据
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Geo.Winform.Controls.INamedValue`1">
            <summary>
            命名的数据
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Geo.Winform.Controls.INamedValue`1.GetValue">
            <summary>
            获取
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.Controls.INamedValue`1.SetValue(`0)">
            <summary>
            设置
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="P:Geo.Winform.Controls.INamedValue`1.Title">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.INamedValue`1.Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.INamedFloat">
            <summary>
            浮点数
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.INamedInt">
            <summary>
            整数
            </summary>
        </member>
        <member name="F:Geo.Winform.Controls.LogCommandControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.LogCommandControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.LogCommandControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.NamedFloatControl">
            <summary>
            启用浮点数界面
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.NamedFloatControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.NamedFloatControl.GetValue">
            <summary>
            获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.Controls.NamedFloatControl.Init(System.String,System.Double)">
            <summary>
            初始化
            </summary>
            <param name="title"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.Winform.Controls.NamedFloatControl.SetValue(System.Double)">
            <summary>
            设置值
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="F:Geo.Winform.Controls.NamedFloatControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.NamedFloatControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.NamedFloatControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.NamedFloatControl.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.NamedFloatControl.Title">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.EnabledFloatSpanControl">
            <summary>
            启动数据范围过滤否
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledFloatSpanControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledFloatSpanControl.GetEnabledValue">
            <summary>
            获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledFloatSpanControl.Init(System.String,System.Double,System.Double)">
            <summary>
            初始化
            </summary>
            <param name="title"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledFloatSpanControl.SetEnabledValue(Geo.EnableFloatSpan)">
            <summary>
            设置值
            </summary>
            <param name="enabledVal"></param>
        </member>
        <member name="F:Geo.Winform.Controls.EnabledFloatSpanControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledFloatSpanControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledFloatSpanControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.EnabledFloatSpanControl.Title">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.EnabledFloatSpanControl.From">
            <summary>
            最小数值
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.EnabledFloatSpanControl.To">
            <summary>
            最大数值
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.EnabledFloatControl">
            <summary>
            启用浮点数界面
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledFloatControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledFloatControl.GetEnabledValue">
            <summary>
            获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledFloatControl.Init(System.String,System.Double)">
            <summary>
            初始化
            </summary>
            <param name="title"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledFloatControl.SetEnabledValue(Geo.EnableFloat)">
            <summary>
            设置值
            </summary>
            <param name="enabledVal"></param>
        </member>
        <member name="F:Geo.Winform.Controls.EnabledFloatControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledFloatControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledFloatControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.EnabledFloatControl.Title">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.NamedIntControl">
            <summary>
            启用整数界面
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.NamedIntControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.NamedIntControl.GetValue">
            <summary>
            获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.Controls.NamedIntControl.Init(System.String,System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="title"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.Winform.Controls.NamedIntControl.SetValue(System.Int32)">
            <summary>
            设置值
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="F:Geo.Winform.Controls.NamedIntControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.NamedIntControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.NamedIntControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.NamedIntControl.Title">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.NamedIntControl.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.EnabledIntControl">
            <summary>
            启用整数界面
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledIntControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledIntControl.GetEnabledValue">
            <summary>
            获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledIntControl.Init(System.String,System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="title"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledIntControl.SetEnabledValue(Geo.EnableInteger)">
            <summary>
            设置值
            </summary>
            <param name="enabledVal"></param>
        </member>
        <member name="F:Geo.Winform.Controls.EnabledIntControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledIntControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledIntControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.EnabledIntControl.Title">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.EnabledBoolControl">
            <summary>
            启用布尔值界面
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledBoolControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledBoolControl.GetEnabledValue">
            <summary>
            获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledBoolControl.Init(System.String,System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="title"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledBoolControl.SetEnabledValue(Geo.EnableBool)">
            <summary>
            设置值
            </summary>
            <param name="enabledVal"></param>
        </member>
        <member name="F:Geo.Winform.Controls.EnabledBoolControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledBoolControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledBoolControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.EnabledBoolControl.Title">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.EnabledStringControl">
            <summary>
            启用字符串界面
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledStringControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledStringControl.GetEnabledValue">
            <summary>
            获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledStringControl.Init(System.String,System.Double)">
            <summary>
            初始化
            </summary>
            <param name="title"></param>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledStringControl.SetEnabledValue(Geo.EnableString)">
            <summary>
            设置值
            </summary>
            <param name="enabledVal"></param>
        </member>
        <member name="F:Geo.Winform.Controls.EnabledStringControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledStringControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.EnabledStringControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.EnabledStringControl.Title">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.ParamVectorRenderControl">
            <summary>
            定位结果绘图，查看残差，均方根等。AdjustVectorRenderControl
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.ParamVectorRenderControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.ParamVectorRenderControl.SetTableTextStorage(Geo.TableObjectStorage,System.Boolean)">
            <summary>
            设置参数名称列表
            </summary>
            <param name="TableTextStorage"></param>
        </member>
        <member name="M:Geo.Winform.Controls.ParamVectorRenderControl.SetParamNames(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            设置参数名称
            </summary>
            <param name="isUpdateUi"></param>
            <param name="paramNames"></param>
        </member>
        <member name="M:Geo.Winform.Controls.ParamVectorRenderControl.GetShowingParamsNames">
            <summary>
            显示待显示的参数名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.Controls.ParamVectorRenderControl.DrawTable(Geo.TableObjectStorage)">
            <summary>
            直接绘制图表，不再更新界面元素。
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Geo.Winform.Controls.ParamVectorRenderControl.DrawParamLines">
            <summary>
            绘制估计值 
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.ParamVectorRenderControl.ShowCharForm(Geo.TableObjectStorage,System.Collections.Generic.Dictionary{System.String,System.Windows.Forms.DataVisualization.Charting.Series},System.Double,System.Double)">
            <summary>
            显示图片。
            </summary>
            <param name="table"></param>
            <param name="keyDic"></param>
            <param name="maxVal"></param>
            <param name="minVal"></param>
        </member>
        <member name="M:Geo.Winform.Controls.ParamVectorRenderControl.SetYSpan(System.Double,System.Double,Geo.Winform.Controls.CommonChartForm)">
            <summary>
            设置Y轴数值显示范围
            </summary>
            <param name="maxVal"></param>
            <param name="minVal"></param>
            <param name="form"></param>
        </member>
        <member name="M:Geo.Winform.Controls.ParamVectorRenderControl.SetParamIndexRange(System.Int32,System.Int32)">
            <summary>
            设置显示的参数范围
            </summary>
            <param name="from"></param>
            <param name="count"></param>
        </member>
        <member name="F:Geo.Winform.Controls.ParamVectorRenderControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.ParamVectorRenderControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.ParamVectorRenderControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ParamVectorRenderControl.IsTakeXAsTimeIf">
            <summary>
            若X轴为时间，则设置为时间间隔
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ParamVectorRenderControl.ParamNames">
            <summary>
            待绘参数名称
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ParamVectorRenderControl.TableTextStorage">
            <summary>
            数据表。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ParamVectorRenderControl.StartIndex">
            <summary>
            绘图起始历元编号
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ParamVectorRenderControl.DataCount">
            <summary>
            绘图截止历元编号
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ParamVectorRenderControl.ParamCount">
            <summary>
            绘图参数个数，默认为3个。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ParamVectorRenderControl.StartParamIndex">
            <summary>
            起始参数编号，从0开始
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ParamVectorRenderControl.EndParamIndex">
            <summary>
            结束参数编号
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ParamVectorRenderControl.IndicatedYSpan">
            <summary>
            指定的Y值范围
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ParamVectorRenderControl.CenterVector">
            <summary>
            绘图中心
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.RmsedVectorRenderControl">
            <summary>
            定位结果绘图，查看残差，均方根等。AdjustVectorRenderControl
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.RmsedVectorRenderControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.RmsedVectorRenderControl.SetResult(System.Collections.Generic.List{Geo.Algorithm.RmsedVector})">
            <summary>
            设置平差列表
            </summary>
            <param name="Adjustments"></param>
        </member>
        <member name="M:Geo.Winform.Controls.RmsedVectorRenderControl.SetParamNames(System.Collections.Generic.List{System.String})">
            <summary>
            设置参数名称列表
            </summary>
            <param name="names"></param>
        </member>
        <member name="M:Geo.Winform.Controls.RmsedVectorRenderControl.DrawParamLines">
            <summary>
            绘制估计值
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.RmsedVectorRenderControl.DrawParamRmsLine">
            <summary>
            如果非
            </summary>
            <param name="_results"></param>
        </member>
        <member name="F:Geo.Winform.Controls.RmsedVectorRenderControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.RmsedVectorRenderControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.RmsedVectorRenderControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.RmsedVectorRenderControl.ParamNames">
            <summary>
            待绘参数名称
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.RmsedVectorRenderControl.IsHasIndexParamName">
            <summary>
            首列是否是编号，默认为false，如果true，则忽略编号列。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.RmsedVectorRenderControl.Adjustments">
            <summary>
            计算结果
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.RmsedVectorRenderControl.StartIndex">
            <summary>
            绘图起始历元编号
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.RmsedVectorRenderControl.EndIndex">
            <summary>
            绘图截止历元编号
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.RmsedVectorRenderControl.ParamCount">
            <summary>
            绘图参数个数，默认为3个。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.RmsedVectorRenderControl.StartParamIndex">
            <summary>
            起始参数编号，从0开始
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.RmsedVectorRenderControl.EndParamIndex">
            <summary>
            结束参数编号
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.RmsedVectorRenderControl.CenterVector">
            <summary>
            绘图中心
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.AdjustVectorRenderControl">
            <summary>
            定位结果绘图，查看残差，均方根等。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.AdjustVectorRenderControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.AdjustVectorRenderControl.SetResult(System.Collections.Generic.List{Geo.Algorithm.Adjust.Adjustment})">
            <summary>
            设置平差列表
            </summary>
            <param name="Adjustments"></param>
        </member>
        <member name="M:Geo.Winform.Controls.AdjustVectorRenderControl.SetParamNames(System.Collections.Generic.List{System.String})">
            <summary>
            设置参数名称列表
            </summary>
            <param name="names"></param>
        </member>
        <member name="M:Geo.Winform.Controls.AdjustVectorRenderControl.DrawParamLines">
            <summary>
            绘制估计值
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.AdjustVectorRenderControl.DrawParamRmsLine">
            <summary>
            如果非
            </summary>
            <param name="_results"></param>
        </member>
        <member name="F:Geo.Winform.Controls.AdjustVectorRenderControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.AdjustVectorRenderControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.AdjustVectorRenderControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.AdjustVectorRenderControl.ParamNames">
            <summary>
            待绘参数名称
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.AdjustVectorRenderControl.IsHasIndexParamName">
            <summary>
            首列是否是编号，默认为false，如果true，则忽略编号列。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.AdjustVectorRenderControl.Adjustments">
            <summary>
            计算结果
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.AdjustVectorRenderControl.StartIndex">
            <summary>
            绘图起始历元编号
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.AdjustVectorRenderControl.EndIndex">
            <summary>
            绘图截止历元编号
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.AdjustVectorRenderControl.ParamCount">
            <summary>
            绘图参数个数，默认为3个。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.AdjustVectorRenderControl.StartParamIndex">
            <summary>
            起始参数编号，从0开始
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.AdjustVectorRenderControl.EndParamIndex">
            <summary>
            结束参数编号
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.AdjustVectorRenderControl.CenterVector">
            <summary>
            绘图中心
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.AdjustVectorRenderControl.AdjustVectorType">
            <summary>
            平差类型
            </summary>
        </member>
        <member name="F:Geo.Winform.Controls.AngleTypeControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.AngleTypeControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.AngleTypeControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.AngleTypeControl.AngleUnit">
            <summary>
            角度单位类型
            </summary>
        </member>
        <member name="T:Geo.Winform.EnumCheckBoxControl">
            <summary>
            枚举生成界面
            </summary>
        </member>
        <member name="M:Geo.Winform.EnumCheckBoxControl.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.EnumCheckBoxControl.Init``1">
            <summary>
            初始化
            </summary>
            <typeparam name="TEnum"></typeparam>
        </member>
        <member name="M:Geo.Winform.EnumCheckBoxControl.Add(System.String)">
            <summary>
            添加一个
            </summary>
            <param name="txt"></param>
        </member>
        <member name="M:Geo.Winform.EnumCheckBoxControl.GetSelected``1">
            <summary>
            当前类型
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.EnumCheckBoxControl.Select``1(``0)">
            <summary>
            使其选择上
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.Winform.EnumCheckBoxControl.Select``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            使其选择上
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="currentVal"></param>
        </member>
        <member name="F:Geo.Winform.EnumCheckBoxControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.EnumCheckBoxControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.EnumCheckBoxControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="E:Geo.Winform.EnumCheckBoxControl.EnumItemSelected">
            <summary>
            已经选择枚举项目。
            </summary>
        </member>
        <member name="P:Geo.Winform.EnumCheckBoxControl.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Geo.Winform.EnumCheckBoxControl.SelectedCount">
            <summary>
            当前已选的数量
            </summary>
        </member>
        <member name="P:Geo.Winform.EnumCheckBoxControl.SelectedNames">
            <summary>
            当前选择
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.EnumSelectControl`1">
            <summary>
            将枚举类型封装在分组框内。
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
        </member>
        <member name="F:Geo.Winform.Controls.EnumSelectControl`1.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.EnumSelectControl`1.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.EnumSelectControl`1.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.EnumSelectControl`1.RadioButtons">
            <summary>
            单选按钮
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.EnumSelectControl`1.Text">
            <summary>
            this.groupBox1.Text;
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.EnumSelectControl`1.CurrentdType">
            <summary>
            默认选择项
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.ErrorRejectControl">
            <summary>
            粗差探测界面
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.ErrorRejectControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Geo.Winform.Controls.ErrorRejectControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.ErrorRejectControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.ErrorRejectControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ErrorRejectControl.IsEnabled">
            <summary>
            是否启用粗差探测。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ErrorRejectControl.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ErrorRejectControl.IsRelative">
            <summary>
            是否相对误差
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ErrorRejectControl.MaxLimit">
            <summary>
            最大限差
            </summary>
        </member>
        <member name="T:Geo.IParallelConfig">
            <summary>
            并行计算接口
            </summary>
        </member>
        <member name="P:Geo.IParallelConfig.EnableParallel">
            <summary>
            是否启用并行计算
            </summary>
        </member>
        <member name="P:Geo.IParallelConfig.ParallelOptions">
            <summary>
            并行计算选项
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.AdjustVectorTypeControl">
            <summary>
            平差向量类型选择器
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.AdjustVectorTypeControl.#ctor">
            <summary>
            平差向量类型选择器
            </summary>
        </member>
        <member name="F:Geo.Winform.Controls.RmsedXyzControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.RmsedXyzControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.RmsedXyzControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.RmsedXyzControl.IsEnabled">
            <summary>
            是否启用坐标。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.RmsedXyzControl.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.RmsedXyzControl.RmsedXyz">
            <summary>
            加权坐标
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.RmsedXyzControl.Xyz">
            <summary>
            坐标
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.RmsedXyzControl.Rms">
            <summary>
            均方根
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.AngleUnitTypeControl">
            <summary>
            角度类型选择器
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.GeoGridLoopControl">
            <summary>
            地理格网控件
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.GeoGridLoopControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.GeoGridLoopControl.SetStep(System.Double,System.Double)">
            <summary>
            设置步长，单位分
            </summary>
            <param name="lonStepMin"></param>
            <param name="latStepMin"></param>
        </member>
        <member name="M:Geo.Winform.Controls.GeoGridLoopControl.GetGridLooper">
            <summary>
            获取格网时间
            </summary>
            <returns></returns>
        </member>
        <member name="F:Geo.Winform.Controls.GeoGridLoopControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.GeoGridLoopControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.GeoGridLoopControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.GeoGridLoopControl.LonSpanControl">
            <summary>
            精度跨度
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.GeoGridLoopControl.LatSpanControl">
            <summary>
            纬度跨度
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.GeoGridLoopControl.LonStepControl">
            <summary>
            精度步长控件，单位分
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.GeoGridLoopControl.LatStepControl">
            <summary>
            纬度步长控件，单位分
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.TimePeriodControl.SetTimePerid(Geo.Times.TimePeriod)">
            <summary>
            设置
            </summary>
            <param name="TimePerid"></param>
        </member>
        <member name="F:Geo.Winform.Controls.TimePeriodControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.TimePeriodControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.TimePeriodControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.TimePeriodControl.TimeFrom">
            <summary>
            起始时间
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.TimePeriodControl.TimeTo">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.TimePeriodControl.TimePeriod">
            <summary>
            获取
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.TimePeriodControl.TimeStringFormat">
            <summary>
            时间字符串格式
            </summary>
        </member>
        <member name="T:Geo.Winform.EnumItemSelectedEventHandler">
            <summary>
            枚举项目选择委托
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="T:Geo.Winform.EnumRadioControl">
            <summary>
            枚举生成界面
            </summary>
        </member>
        <member name="M:Geo.Winform.EnumRadioControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.EnumRadioControl.Init``1(System.Boolean)">
            <summary>
            初始化
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="IsCheckOne">初始化时，是否要默认选中[第]一个。</param>
        </member>
        <member name="M:Geo.Winform.EnumRadioControl.Add(System.String)">
            <summary>
            添加一个
            </summary>
            <param name="txt"></param>
        </member>
        <member name="M:Geo.Winform.EnumRadioControl.GetCurrent``1">
            <summary>
            当前类型
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.EnumRadioControl.SetCurrent``1(``0)">
            <summary>
            当前类型
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.EnumRadioControl.Select``1(``0,System.Boolean)">
            <summary>
            使其选择上
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="currentVal"></param>
        </member>
        <member name="M:Geo.Winform.EnumRadioControl.EnableOnly``1(System.Collections.Generic.List{``0})">
            <summary>
            只启用这些。
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="enums"></param>
        </member>
        <member name="M:Geo.Winform.EnumRadioControl.Disable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            禁用指定选项
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="enums"></param>
        </member>
        <member name="F:Geo.Winform.EnumRadioControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.EnumRadioControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.EnumRadioControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="E:Geo.Winform.EnumRadioControl.EnumItemSelected">
            <summary>
            已经选择枚举项目。
            </summary>
        </member>
        <member name="P:Geo.Winform.EnumRadioControl.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Geo.Winform.EnumRadioControl.CurrentText">
            <summary>
            当前选择
            </summary>
        </member>
        <member name="T:Geo.Winform.DrawObjectOptionForm">
            <summary>
            绘图窗口工具
            </summary>
        </member>
        <member name="M:Geo.Winform.DrawObjectOptionForm.#ctor(Geo.TableObjectStorage)">
            <summary>
            构造函数
            </summary>
            <param name="TableObjectStorage"></param>
        </member>
        <member name="F:Geo.Winform.DrawObjectOptionForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.DrawObjectOptionForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.DrawObjectOptionForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Geo.Winform.DrawObjectOptionForm.TableObjectStorage">
            <summary>
            表对象
            </summary>
        </member>
        <member name="T:Geo.Winform.IWithMainForm">
            <summary>
            具有 MainForm 属性。
            </summary>
        </member>
        <member name="P:Geo.Winform.IWithMainForm.MainForm">
            <summary>
            主页面属性
            </summary>
        </member>
        <member name="T:Geo.Winform.IMainForm">
            <summary>
            主窗体接口
            </summary>
        </member>
        <member name="M:Geo.Winform.IMainForm.Activate(System.String)">
            <summary>
            激活到当前显示窗口
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.IMainForm.ForceOpenMidForm(System.String,System.Type)">
            <summary>
            强制重新打开指定窗口
            </summary>
            <param name="title"></param>
            <param name="type"></param>
        </member>
        <member name="M:Geo.Winform.IMainForm.ForceOpenMidForm(System.Windows.Forms.Form)">
            <summary>
            强制重新打开指定窗口
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:Geo.Winform.IMainForm.OpenMidForm(System.String,System.Type)">
            <summary>
            打开窗口，如果已经打开则激活该窗口
            </summary>
            <param name="title"></param>
            <param name="type"></param>
        </member>
        <member name="M:Geo.Winform.IMainForm.OpenMidForm(System.Windows.Forms.Form)">
            <summary>
            打开窗口，如果已经打开则激活该窗口
            </summary>
            <param name="f"></param>
        </member>
        <member name="F:Geo.Winform.RunningStateForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.RunningStateForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.RunningStateForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Geo.Winform.LogListenerControl.LogWriter_MsgProduced(System.String,Geo.IO.LogType,System.Type)">
            <summary>
            实现日志读取
            </summary>
            <param name="msg"></param>
            <param name="LogType"></param>
            <param name="msgProducer"></param>
        </member>
        <member name="M:Geo.Winform.LogListenerControl.ShowInfo(System.String)">
            <summary>
            显示信息
            </summary>
            <param name="info"></param>
        </member>
        <member name="F:Geo.Winform.LogListenerControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.LogListenerControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.LogListenerControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:Geo.Winform.ObjectTableControl">
            <summary>
            表对象查看和操作UI
            </summary>
        </member>
        <member name="M:Geo.Winform.ObjectTableControl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.ObjectTableControl.ShowInfo(System.String)">
            <summary>
            显示信息
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Geo.Winform.ObjectTableControl.DataBind(Geo.TableObjectStorage)">
            <summary>
            数据绑定
            </summary>
            <param name="table"></param>
        </member>
        <member name="F:Geo.Winform.ObjectTableControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.ObjectTableControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.ObjectTableControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.ObjectTableControl.TableObjectStorage">
            <summary>
            当前表
            </summary>
        </member>
        <member name="P:Geo.Winform.ObjectTableControl.DataGridView">
            <summary>
            数据表
            </summary>
        </member>
        <member name="T:Geo.Winform.DataTableViewForm">
            <summary>
            通用表格数据显示窗口。
            </summary>
        </member>
        <member name="M:Geo.Winform.DataTableViewForm.#ctor(Geo.TableObjectStorage,System.Boolean,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="dataSource"></param>
            <param name="isShowToolStrip"></param>
            <param name="isShowNavigator"></param>
        </member>
        <member name="M:Geo.Winform.DataTableViewForm.Init(Geo.TableObjectStorage)">
            <summary>
            初始化
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Geo.Winform.DataTableViewForm.BindDataSource(Geo.TableObjectStorage)">
            <summary>
            绑定数据
            </summary>
            <param name="dataSource"></param>
        </member>
        <member name="M:Geo.Winform.DataTableViewForm.ShowInfo(System.String)">
            <summary>
            显示信息
            </summary>
            <param name="info"></param>
        </member>
        <member name="F:Geo.Winform.DataTableViewForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.DataTableViewForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.DataTableViewForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Geo.Winform.DataTableViewForm.TableObjectStorage">
            <summary>
            当前数据表
            </summary>
        </member>
        <member name="P:Geo.Winform.DataTableViewForm.FilePath">
            <summary>
            当前文件路径
            </summary>
        </member>
        <member name="T:Geo.WinTools.DataSmoothForm">
            <summary>
            残差分析。
            </summary>
        </member>
        <member name="T:Geo.WinTools.DataProcessingForm">
            <summary>
            数据输入，输出。
            </summary>
        </member>
        <member name="M:Geo.WinTools.DataProcessingForm.#ctor">
            <summary>
            数据处理
            </summary>
        </member>
        <member name="M:Geo.WinTools.DataProcessingForm.Run">
            <summary>
            运行
            </summary>
        </member>
        <member name="M:Geo.WinTools.DataProcessingForm.ShowResult(System.String)">
            <summary>
            显示结果，并激活窗口
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Geo.WinTools.DataProcessingForm.ShowInfo(System.String)">
            <summary>
            在输出框显示信息。
            </summary>
            <param name="msg"></param>
        </member>
        <member name="F:Geo.WinTools.DataProcessingForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.WinTools.DataProcessingForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.WinTools.DataProcessingForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Geo.WinTools.DataProcessingForm.Values">
            <summary>
            数据列表
            </summary>
        </member>
        <member name="P:Geo.WinTools.DataProcessingForm.IndexedValues">
            <summary>
            具有检索的数据
            </summary>
        </member>
        <member name="P:Geo.WinTools.DataProcessingForm.HasIndexColumn">
            <summary>
            是否具有列编号
            </summary>
        </member>
        <member name="P:Geo.WinTools.DataProcessingForm.InputLines">
            <summary>
            输入行。
            </summary>
        </member>
        <member name="P:Geo.WinTools.DataProcessingForm.OutputLines">
            <summary>
            输出行。
            </summary>
        </member>
        <member name="P:Geo.WinTools.DataProcessingForm.OutputText">
            <summary>
            文本输出
            </summary>
        </member>
        <member name="M:Geo.WinTools.DataSmoothForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.WinTools.DataSmoothForm.Run">
            <summary>
            运行
            </summary>
        </member>
        <member name="M:Geo.WinTools.DataSmoothForm.DoLevelKalmanFilter(System.Double)">
            <summary>
            水平Kalman滤波
            </summary>
            <param name="currentVal"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.WinTools.DataSmoothForm.MovingAverage">
            <summary>
            滑动平均
            </summary>
        </member>
        <member name="P:Geo.WinTools.DataSmoothForm.NumeralWindowData">
            <summary>
            窗口数据
            </summary>
        </member>
        <member name="T:Geo.WinTools.DataSmoothType">
            <summary>
            数据平滑类型
            </summary>
        </member>
        <member name="F:Geo.WinTools.DataSmoothType.KalmanFilter">
            <summary>
            Kalman滤波
            </summary>
        </member>
        <member name="F:Geo.WinTools.DataSmoothType.MovingAverage">
            <summary>
            滑动平均
            </summary>
        </member>
        <member name="T:Geo.WinTools.PolyfitForm">
            <summary>
            多项式拟合
            </summary>
        </member>
        <member name="M:Geo.WinTools.PolyfitForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Geo.WinTools.PolyfitForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.WinTools.PolyfitForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.WinTools.PolyfitForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Gnsser.Winform.FileRenameForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Gnsser.Winform.FileRenameForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Gnsser.Winform.FileRenameForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Geo.Winform.Tools.LocalToGeoCoordForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Tools.LocalToGeoCoordForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Tools.LocalToGeoCoordForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:Geo.Winform.Demo.Form1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.Demo.Form1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.Demo.Form1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Geo.Winform.Wizards.IWizardPage">
            <summary>
            下一步页面接口
            </summary>
        </member>
        <member name="M:Geo.Winform.Wizards.IWizardPage.LoadPage">
            <summary>
            加载数据
            </summary>
        </member>
        <member name="M:Geo.Winform.Wizards.IWizardPage.Save">
            <summary>
            保存数据
            </summary>
        </member>
        <member name="M:Geo.Winform.Wizards.IWizardPage.Cancel">
            <summary>
            取消
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.IWizardPage.Content">
            <summary>
            用户控件
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.IWizardPage.IsBusy">
            <summary>
            是否正忙
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.IWizardPage.PageValid">
            <summary>
            页面是否有效
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.IWizardPage.ValidationMessage">
            <summary>
            验证信息
            </summary>
        </member>
        <member name="F:Geo.Winform.Demo.Page1.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.Demo.Page1.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.Demo.Page1.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Geo.Winform.Demo.Page2.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.Demo.Page2.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.Demo.Page2.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Geo.Winform.Demo.Page3.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.Demo.Page3.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.Demo.Page3.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Geo.Winform.Wizards.BaseStartWizardForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.Wizards.BaseStartWizardForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.Wizards.BaseStartWizardForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Geo.Winform.Wizards.FileOpenWizardPage">
            <summary>
            单行输入页面控件
            </summary>
        </member>
        <member name="M:Geo.Winform.Wizards.FileOpenWizardPage.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.Wizards.FileOpenWizardPage.Init(System.String,System.String)">
            <summary>
            初始化
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="name"></param>
            <param name="IsCheckOne"></param>
        </member>
        <member name="F:Geo.Winform.Wizards.FileOpenWizardPage.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Wizards.FileOpenWizardPage.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Wizards.FileOpenWizardPage.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.FileOpenWizardPage.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="T:Gnsser.Winform.MultiTableTextOpenVizardForm">
            <summary>
            单文件多表数据打开向导
            </summary>
        </member>
        <member name="F:Geo.Winform.Wizards.WizardForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.Wizards.WizardForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.Wizards.WizardForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.WizardForm.FinalStepText">
            <summary>
             最后一步的文字，一般为完成，执行等。
            </summary>
        </member>
        <member name="T:Gnsser.Winform.TableTextOpenVizardForm">
            <summary>
            文本表数据打开向导
            </summary>
        </member>
        <member name="T:Geo.Winform.Wizards.StringWizardPage">
            <summary>
            单行输入页面控件
            </summary>
        </member>
        <member name="M:Geo.Winform.Wizards.StringWizardPage.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.Wizards.StringWizardPage.SetNotice(System.String)">
            <summary>
             "提示：" + str
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Geo.Winform.Wizards.StringWizardPage.Init(System.String,System.String,System.String,System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="name"></param>
            <typeparam name="currentVal"></typeparam>
            <typeparam name="notice"></typeparam>
            <param name="isMultiPath"></param>
        </member>
        <member name="F:Geo.Winform.Wizards.StringWizardPage.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Wizards.StringWizardPage.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Wizards.StringWizardPage.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.StringWizardPage.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.StringWizardPage.Value">
            <summary>
            单选
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.StringWizardPage.Lines">
            <summary>
            单选
            </summary>
        </member>
        <member name="T:Geo.Winform.Wizards.CheckboxWizardPage">
            <summary>
            多选框页面控件
            </summary>
        </member>
        <member name="M:Geo.Winform.Wizards.CheckboxWizardPage.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.Wizards.CheckboxWizardPage.Init``1(System.String)">
            <summary>
            初始化
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="name"></param>
            <param name="IsCheckOne"></param>
        </member>
        <member name="M:Geo.Winform.Wizards.CheckboxWizardPage.GetSelected``1">
            <summary>
            当前类型
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.Wizards.CheckboxWizardPage.SetCurrent``1(``0)">
            <summary>
            当前类型
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="F:Geo.Winform.Wizards.CheckboxWizardPage.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Wizards.CheckboxWizardPage.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Wizards.CheckboxWizardPage.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.CheckboxWizardPage.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.CheckboxWizardPage.GetEnumCheckBoxControl">
            <summary>
            单选
            </summary>
        </member>
        <member name="T:Geo.Winform.Wizards.ProgressBarWizardPage">
            <summary>
            选择文件页面控件
            </summary>
        </member>
        <member name="M:Geo.Winform.Wizards.ProgressBarWizardPage.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.Wizards.ProgressBarWizardPage.Init(System.String,System.Int32)">
            <summary>
            初始化
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="name"></param>
            <param name="IsCheckOne"></param>
        </member>
        <member name="F:Geo.Winform.Wizards.ProgressBarWizardPage.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Wizards.ProgressBarWizardPage.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Wizards.ProgressBarWizardPage.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.ProgressBarWizardPage.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.ProgressBarWizardPage.ProgressBarComponent">
            <summary>
            单选
            </summary>
        </member>
        <member name="T:Geo.Winform.Wizards.EnumRadioWizardPage">
            <summary>
            单选框页面控件
            </summary>
        </member>
        <member name="M:Geo.Winform.Wizards.EnumRadioWizardPage.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.Wizards.EnumRadioWizardPage.Init``1(System.String,System.Boolean)">
            <summary>
            初始化
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="name"></param>
            <param name="IsCheckOne"></param>
        </member>
        <member name="M:Geo.Winform.Wizards.EnumRadioWizardPage.GetCurrent``1">
            <summary>
            当前类型
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.Wizards.EnumRadioWizardPage.SetCurrent``1(``0,System.Boolean)">
            <summary>
            当前类型
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="F:Geo.Winform.Wizards.EnumRadioWizardPage.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Wizards.EnumRadioWizardPage.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Wizards.EnumRadioWizardPage.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.EnumRadioWizardPage.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.EnumRadioWizardPage.GetRatioControl">
            <summary>
            单选
            </summary>
        </member>
        <member name="F:Geo.Winform.SteperForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.SteperForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.SteperForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Geo.Winform.Wizards.VizardPageControl">
            <summary>
            IWizardPage
            </summary>
        </member>
        <member name="F:Geo.Winform.Wizards.VizardPageControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Wizards.VizardPageControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Wizards.VizardPageControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.VizardPageControl.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="M:Geo.Winform.Wizards.WizardHostForm.LoadNextPage(System.Int32,System.Int32,System.Boolean)">
            <summary>
            加载下一即将显示的页面
            </summary>
            <param name="pageIndex"></param>
            <param name="previousPageIndex"></param>
            <param name="savePreviousPage"></param>
        </member>
        <member name="F:Geo.Winform.Wizards.WizardHostForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.Wizards.WizardHostForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.Wizards.WizardHostForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Geo.Winform.Wizards.WizardPageLocation">
            <summary>
            向导页面位置。
            </summary>
        </member>
        <member name="T:Geo.Winform.Wizards.WizardPageCollection">
            <summary>
            向导页面集合
            </summary>
        </member>
        <member name="M:Geo.Winform.Wizards.WizardPageCollection.MovePageFirst">
            <summary>
            Moves to the prevObj page in the data
            </summary>
            <returns>First page as IWizard</returns>
        </member>
        <member name="M:Geo.Winform.Wizards.WizardPageCollection.MovePageLast">
            <summary>
            Moves to the last page in the data
            </summary>
            <returns>Last page as IWizard</returns>
        </member>
        <member name="M:Geo.Winform.Wizards.WizardPageCollection.MovePageNext">
            <summary>
            Moves to the next page in the data
            </summary>
            <returns>Next page as IWizard</returns>
        </member>
        <member name="M:Geo.Winform.Wizards.WizardPageCollection.MovePagePrevious">
            <summary>
            Moves to the previous page in the data
            </summary>
            <returns>Previous page as IWizard</returns>
        </member>
        <member name="M:Geo.Winform.Wizards.WizardPageCollection.IndexOf(Geo.Winform.Wizards.IWizardPage)">
            <summary>
            Find the page number of the current page
            </summary>
            <param name="wizardPage">The IWiwardPage whose page number to retrieve.</param>
            <returns>Page number for the given IWizardPage</returns>
        </member>
        <member name="P:Geo.Winform.Wizards.WizardPageCollection.WizardPageNames">
            <summary>
            所有页面的名称
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.WizardPageCollection.CurrentPageIndex">
            <summary>
            当前页面编号
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.WizardPageCollection.CurrentPage">
            <summary>
            The current IWizardPage
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.WizardPageCollection.FirstPage">
            <summary>
            The prevObj page in the data
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.WizardPageCollection.LastPage">
            <summary>                  
            The last page in the data
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.WizardPageCollection.PageLocation">
            <summary>
            The location of the current IWizardPage
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.WizardPageCollection.CanMoveNext">
            <summary>
            <para>Determines whether the wizard is able to move to the next page.</para>
            <para>Will return false if Page Location is currently the last page.</para>
            <para>Otherwise, true.</para>
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.WizardPageCollection.CanMovePrevious">
            <summary>
            <para>Determines whether the wizard is able to move to the previous page.</para>
            <para>Will return false if Page Location is currently the prevObj page.</para>
            <para>Otherwise, true.</para>
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.WizardPageCollection.IsBusy">
            <summary>
            是否忙
            </summary>
        </member>
        <member name="T:Geo.Winform.Wizards.WizardPageLocationChangedEventArgs">
            <summary>
            事件参数
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.WizardPageLocationChangedEventArgs.PageLocation">
            <summary>
            The location of the current IWizardPage
            </summary>
        </member>
        <member name="P:Geo.Winform.Wizards.WizardPageLocationChangedEventArgs.PageIndex">
            <summary>
            The page number of the current IWizardPage
            </summary>
        </member>
        <member name="T:Geo.Winform.DisplayPropertyEditForm">
            <summary>
            具有显示
            </summary>
        </member>
        <member name="T:Geo.Winform.IEntityEditForm">
            <summary>
            对象编辑器。
            </summary> 
        </member>
        <member name="M:Geo.Winform.IEntityEditForm.EntityToUi">
            <summary>
            对象到UI
            </summary>
        </member>
        <member name="M:Geo.Winform.IEntityEditForm.UiToEntity">
            <summary>
            UI到对象
            </summary>
        </member>
        <member name="M:Geo.Winform.DisplayPropertyEditForm.#ctor">
            <summary>
            新建
            </summary>
        </member>
        <member name="M:Geo.Winform.DisplayPropertyEditForm.#ctor(System.Object)">
            <summary>
            修改，编辑
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Geo.Winform.DisplayPropertyEditForm.Init(System.Object)">
            <summary>
            对象初始化
            </summary>
            <param name="obj"></param>
        </member>
        <member name="F:Geo.Winform.DisplayPropertyEditForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.DisplayPropertyEditForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.DisplayPropertyEditForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.StringValueChangedEventHandler">
            <summary>
            字符串改变了，适用于路径等。
            </summary>
            <param name="currentVal"></param>
        </member>
        <member name="T:Geo.Winform.Controls.DirectorySelectionControl">
            <summary>
            打开文件控件
            </summary>
        </member>
        <member name="F:Geo.Winform.Controls.DirectorySelectionControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.DirectorySelectionControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.DirectorySelectionControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.DirectorySelectionControl.LabelName">
            <summary>
            文件名称标签名称
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.DirectorySelectionControl.Path">
            <summary>
            文件路径.获取时将进行判断，如果没有则创建目录。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.DirectorySelectionControl.IsMultiPathes">
            <summary>
            是否多选文件
            </summary>
        </member>
        <member name="T:Geo.Winform.IEntityEditForm`1">
            <summary>
            对象编辑器。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Geo.Winform.IEntityEditForm`1.Entity">
            <summary>
            对象
            </summary>
        </member>
        <member name="T:Geo.Winform.DataTableForm">
            <summary>
            通用表格数据显示窗口。
            </summary>
        </member>
        <member name="M:Geo.Winform.DataTableForm.#ctor(System.Object,System.Boolean,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="dataSource"></param>
            <param name="isShowToolStrip"></param>
            <param name="isShowNavigator"></param>
        </member>
        <member name="M:Geo.Winform.DataTableForm.BindDataSource(System.Object)">
            <summary>
            绑定数据
            </summary>
            <param name="dataSource"></param>
        </member>
        <member name="F:Geo.Winform.DataTableForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.DataTableForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.DataTableForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.MultiFileOpenControl">
            <summary>
            打开文件控件
            </summary>
        </member>
        <member name="F:Geo.Winform.Controls.MultiFileOpenControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.MultiFileOpenControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.MultiFileOpenControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.MultiFileOpenControl.OpenFileDialog">
            <summary>
            文件读取对话框
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.MultiFileOpenControl.MultiSelect">
            <summary>
            是否多选文件
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.MultiFileOpenControl.LabelName">
            <summary>
            文件名称标签名称
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.MultiFileOpenControl.FilePaths">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.MultiFileOpenControl.Filter">
            <summary>
            文件过滤器
            </summary>
        </member>
        <member name="F:Geo.Winform.FileOpenForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.FileOpenForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.FileOpenForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Geo.Winform.FileOpenForm.FileOpenControl">
            <summary>
            文件打开控件
            </summary>
        </member>
        <member name="M:Geo.Winform.AddSubProgramForm.browseFilebutton1_Click(System.Object,System.EventArgs)">
            <summary>
            查找要添加的程序
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Geo.Winform.AddSubProgramForm.WriteToXml(System.String,System.String,System.String)">
            <summary>
            写入配置文件
            </summary>
            <param name="name">程序的名称</param>
            <param name="path">程序的路径</param>
            <param name="imgPath">程序图标名称</param>
        </member>
        <member name="F:Geo.Winform.AddSubProgramForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.AddSubProgramForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.AddSubProgramForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:Geo.Winform.ButtonControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.ButtonControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.ButtonControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:Geo.Winform.ShortcutCollectorForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.ShortcutCollectorForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.ShortcutCollectorForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:Geo.Winform.DbBackupForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.DbBackupForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.DbBackupForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:Geo.Winform.SimpleParamedTableForm`1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.SimpleParamedTableForm`1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.SimpleParamedTableForm`1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Geodesy.Winform.Utils.SqlSysUtil">
            <summary>
            数据库连接和操作的实用类。
            </summary>
        </member>
        <member name="M:Geodesy.Winform.Utils.SqlSysUtil.GetDataTable(System.String)">
            <summary>
            get a data table by a sql string.
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Geodesy.Winform.Utils.SqlSysUtil.ExecuteNonQuery(System.String)">
            <summary>
            执行不返回结果的SQL语句。
            </summary>
            <param name="queryString"></param>
        </member>
        <member name="M:Geodesy.Winform.Utils.SqlSysUtil.BeginTransAction(System.Collections.Generic.List{System.String})">
            <summary>
            利用 SQL 事务依次执行SQL语句。
            </summary>
            <param name="sqls">待执行的SQL语句</param>
            <returns>成功则True，否则为False</returns>
        </member>
        <member name="M:Geodesy.Winform.Utils.SqlSysUtil.GetConnString">
            <summary>
            return a ConnectionString object for connecting to a database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geodesy.Winform.Utils.SqlSysUtil.ConstructCnStr(System.String,System.String,System.String,System.String)">
            <summary>
            construct a ConnectionString with parameters.
            </summary>
            <param name="server"></param>
            <param name="db"></param>
            <param name="user"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Service.DocumentFileParser">
            <summary>
            文件解析器。
            1.必须添加 Office，Microsoft.Office.Interop.Word 和 Microsoft.Office.Interop.PowerPoint才能解析PPT和WORD。
            2.PDF采用的是 pdfbox，有四个组件：
            FontBox-0.1.0-dev.dll， IKVM.GNU.Classpath.dll， PDFBox-0.7.3.dll， IKVM.Runtime.dll
            在项目中引用前三个，最后一个IKVM.Runtime.dll，要复制到bin目录中，否则报错。
            </summary>
        </member>
        <member name="M:Geo.Service.DocumentFileParser.ParseWord(System.String)">
            <summary>
            读取表格中的文本。
            对于doc文件中的表格，读出的结果是去除掉了网格线，内容按行读取。
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Service.DocumentFileParser.ParsePpt(System.String)">
            <summary>
            提取PPT中的文字。
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Service.DocumentFileParser.ParsePdf(System.String)">
            <summary>
            提取PDF中的文字。
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Service.DocumentFileParser.ParseTxt(System.String)">
            <summary>
            按照默认编码提取文本文字。
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Service.DocumentFileParser.Parse(System.String)">
            <summary>
            根据路径名称自动判断文件类型，并提取文字。
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Service.PDFReader">
            <summary>
            PDF阅读器，必须在第一时间初始化才能使用，如在Program的Main中
            </summary>
        </member>
        <member name="M:Geo.Service.PDFReader.Init">
            <summary>
            必须先初始化PDF阅读器才能使用之。在任何程序之前。
            </summary>
        </member>
        <member name="M:Geo.Winform.MD5.MD5Encrypt(System.String,System.String)">
            MD5加密
        </member>
        <member name="M:Geo.Winform.MD5.MD5Decrypt(System.String,System.String)">
            MD5解密
        </member>
        <member name="M:Geo.Winform.MD5_2.md5(System.String)">
            <summary>  
            使用当前缺省的字符编码对字符串进行加密。 189 0819 6180 廖
            </summary>
            <param name="str">需要进行md5演算的字符串</param>
            <returns>用小写字母表示的32位16进制数字字符串</returns>
        </member>
        <member name="M:Geo.Winform.MD5_2.md5(System.String,System.Boolean)">
            <summary>
            对字符串进行md5 hash计算
            </summary>
            <param name="str">需要进行md5演算的字符串</param>
            <param name="raw_output">
            false则返回经过格式化的加密字符串(等同于 string md5(string) )
            true则返回原始的md5 hash 长度16 的 byte[] 数组
            </param>
            <returns>
            byte[] 数组或者经过格式化的 string 字符串
            </returns>
        </member>
        <member name="M:Geo.Winform.MD5_2.md5(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            对字符串进行md5 hash计算
            </summary>
            <param name="str">需要进行md5演算的字符串</param>
            <param name="raw_output">
            false则返回经过格式化的加密字符串(等同于 string md5(string) )
            true则返回原始的md5 hash 长度16 的 byte[] 数组
            </param>
            <param name="charEncoder">
            用来指定对输入字符串进行编解码的 Encoding 类型，
            当输入字符串中包含多字节文字（比如中文）的时候
            必须保证进行匹配的 md5 hash 所使用的字符编码相同，
            否则计算出来的 md5 将不匹配。
            </param>
            <returns>
            byte[] 数组或者经过格式化的 string 字符串
            </returns>
        </member>
        <member name="M:Geo.Winform.MD5_2.md5str(System.String)">
            <summary>
            使用当前缺省的字符编码对字符串进行加密
            </summary>
            <param name="str">需要进行md5演算的字符串</param>
            <returns>用小写字母表示的32位16进制数字字符串</returns>
        </member>
        <member name="M:Geo.Winform.MD5_2.md5str(System.String,System.Text.Encoding)">
            <summary>
            对字符串进行md5加密
            </summary>
            <param name="str">需要进行md5演算的字符串</param>
            <param name="charEncoder">
            指定对输入字符串进行编解码的 Encoding 类型
            </param>
            <returns>用小写字母表示的32位16进制数字字符串</returns>
        </member>
        <member name="M:Geo.Winform.MD5_2.md5raw(System.String)">
            <summary>
            使用当前缺省的字符编码对字符串进行加密
            </summary>
            <param name="str">需要进行md5演算的字符串</param>
            <returns>长度16 的 byte[] 数组</returns>
        </member>
        <member name="M:Geo.Winform.MD5_2.md5raw(System.String,System.Text.Encoding)">
            <summary>
            对字符串进行md5加密
            </summary>
            <param name="str">需要进行md5演算的字符串</param>
            <param name="charEncoder">
            指定对输入字符串进行编解码的 Encoding 类型
            </param>
            <returns>长度16 的 byte[] 数组</returns>
        </member>
        <member name="T:Geo.Domain.OperateName">
            <summary>
            操作名称，所有操作都应该手动在此注册,不需要的操作应该注释掉，以免影响其它程序的应用。
            </summary>
        </member>
        <member name="F:Geo.Domain.OperateName.空操作">
            <summary>
            解析错误后返回他
            </summary>
        </member>
        <member name="T:Geo.Winform.OrderUnit">
            <summary>
            排序单元。
            </summary>
        </member>
        <member name="P:Geo.Winform.OrderUnit.Name">
            <summary>
            绑定的属性名称
            </summary>
        </member>
        <member name="P:Geo.Winform.OrderUnit.IsAsc">
            <summary>
            顺序或是逆序
            </summary>
        </member>
        <member name="F:Geo.Winform.SimpleSearchForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.SimpleSearchForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.SimpleSearchForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Geo.Winform.SimpleSearchCondition">
            <summary>
            简单查询条件。
            </summary>
        </member>
        <member name="P:Geo.Winform.SimpleSearchCondition.Word">
            <summary>
            关键字
            </summary>
        </member>
        <member name="P:Geo.Winform.SimpleSearchCondition.IsIncludingOrNot">
            <summary>
            包含匹配，还是包含不匹配
            </summary>
        </member>
        <member name="P:Geo.Winform.SimpleSearchCondition.IsFuzzyMathching">
            <summary>
            是否模糊查询
            </summary>
        </member>
        <member name="T:Geo.Winform.Setting">
            <summary>
            设置。
            </summary>
        </member>
        <member name="F:Geo.Winform.Setting.CurrentDirecotry">
            <summary>
            当前默认打开目录，即打开文件选择框时定位的目录。
            </summary>
        </member>
        <member name="F:Geo.Winform.Setting.SplashPath">
            <summary>
            启动图片路径
            </summary>
        </member>
        <member name="F:Geo.Winform.Setting.LastLoginUserName">
            <summary>
            最后一次的登录用户名称。
            </summary>
        </member>
        <member name="M:Geo.Winform.Setting.GetAppSettingValue(System.String)">
            <summary>
            从 AppConfig 文件获取
            </summary>
            <param name="keyPrev"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.Setting.SetAndSaveAppSettingValue(System.String,System.String)">
            <summary>
            设置，并保存到文件。
            </summary>
            <param name="keyPrev"></param>
            <param name="currentVal"></param>
        </member>
        <member name="F:Geo.Winform.Setting.ConectionStringChanged">
            <summary>
            数据库连接字符串是否已经改变。
            </summary>
        </member>
        <member name="M:Geo.Winform.Setting.GetLoginInfoFromConfigFile">
            <summary>
            从配置文件读取数据库连接设置.从自定义的 databaseSettings 中，非系统字符串中。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.Setting.SaveLoginInfoToConfigFile(Geo.Utils.DbLoginInfo)">
            <summary>
            将登陆信息保存到数据库。
            </summary>
            <param name="loginInfo"></param>
        </member>
        <member name="M:Geo.Winform.Setting.SetFirstRun(System.Boolean)">
            <summary>
            设置系统是否为第一次运行。这样方便维护系统。
            </summary>
            <param name="tOrF"></param>
        </member>
        <member name="M:Geo.Winform.Setting.InitPDFReader">
            <summary>
            必须先初始化PDF阅读器才能使用之。
            </summary>
        </member>
        <member name="P:Geo.Winform.Setting.Title">
            <summary>
            程序名称，存储在配置文件中，更新后需要保存才生效。
            </summary>
        </member>
        <member name="P:Geo.Winform.Setting.IsFirstRun">
            <summary>
            是否第一次运行程序。若是，则展开相关配置。
            </summary>
        </member>
        <member name="P:Geo.Winform.Setting.LoginInfo">
            <summary>
            登录
            </summary>
        </member>
        <member name="P:Geo.Winform.Setting.ConnectionString">
            <summary>
            数据库连接字符串。
            </summary>
        </member>
        <member name="F:Geo.Winform.ChangeSplashForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.ChangeSplashForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.ChangeSplashForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Geo.Winform.DbConnectSettingForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.DbConnectSettingForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.DbConnectSettingForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Geo.Winform.DbConnectSettingForm.IsLoginInfoChanged">
            <summary>
            信息是否改变
            </summary>
        </member>
        <member name="P:Geo.Winform.DbConnectSettingForm.LoginInfo">
            <summary>
            界面信息绑定
            </summary>
        </member>
        <member name="F:Geo.Winform.SysTitleSettingForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.SysTitleSettingForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.SysTitleSettingForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Geo.Winform.Tools.BarCodeGeneratorForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Tools.BarCodeGeneratorForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Tools.BarCodeGeneratorForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:Geo.TreeType">
            <summary>
            顶层树的类型。
            </summary>
        </member>
        <member name="F:Geo.TreeTypeHelper.TopTreeTypes">
            <summary>
            负责存储顶层树类型对应的对象ID标识。与Type相对对应。
            </summary>
        </member>
        <member name="M:Geo.TreeTypeHelper.GetRootNodeId(Geo.TreeType)">
            <summary>
            获取类型的根 ID。
            </summary>
            <param name="TreeType"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.TreeNodeImageKeyManager">
            <summary>
            一个字典，用于维护类型和图像关键字
            </summary>
        </member>
        <member name="M:Geo.TreeNodeImageKeyManager.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.TreeNodeImageKeyManager.Get(Geo.TreeType)">
            <summary>
            获取指定的图像关键字。如果没有预设，则返回 “folder”。
            </summary>
            <param name="keyPrev"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.TreeNodeImageKeyManager.Default">
            <summary>
            默认的字典。
            </summary>
        </member>
        <member name="T:Geo.Winform.ImageSizeType">
            <summary>
            文件类型
            </summary>
        </member>
        <member name="T:Geo.Winform.ImageManager">
            <summary>
            图标管理器。
            </summary>
        </member>
        <member name="M:Geo.Winform.ImageManager.GetFileTypeIcon(System.String,Geo.Winform.ImageSizeType)">
            <summary>
            文件类型图标
            </summary>
            <param name="fileExtension"></param>
            <param name="sizeType"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.ImageManager.GetMenuIcon(System.String,Geo.Winform.ImageSizeType)">
            <summary>
            按钮图标类型
            </summary>
            <param name="menuName"></param>
            <param name="sizeType"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Winform.ImageManager.Instance">
            <summary>
            图标管理器。
            </summary>
        </member>
        <member name="P:Geo.Winform.ImageManager.DirectoryImageListSmall">
            <summary>
             Create two ImageList objects. 
             文件目录小图标
             </summary>
        </member>
        <member name="P:Geo.Winform.ImageManager.DirectoryImageListLarge">
            <summary>
            文件目录大图标
            </summary>
        </member>
        <member name="P:Geo.Winform.ImageManager.FileImageListLarge">
            <summary>
            文件大图标
            </summary>
        </member>
        <member name="P:Geo.Winform.ImageManager.FileImageListSmall">
            <summary>
            文件小图标
            </summary>
        </member>
        <member name="T:Geo.Winform.ObjectSelectingForm`1">
            <summary>
            对象选择窗口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Geo.Winform.ObjectSelectingForm`1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.ObjectSelectingForm`1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.ObjectSelectingForm`1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Geo.Winform.ObjectSelectingForm`1.SelectedObjects">
            <summary>
            已经选择的对象列表
            </summary>
        </member>
        <member name="T:Geo.EntityQueryBuilder">
            <summary>
            实体查询管理器。
            </summary>
        </member>
        <member name="M:Geo.EntityQueryBuilder.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="IsNeedResetParamOrder"></param>
            <param name="IsClearQueryAfterBuild"></param>
        </member>
        <member name="M:Geo.EntityQueryBuilder.AddQuery(Geo.QueryItem)">
            <summary>
            添加
            </summary>
            <param name="Query"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.EntityQueryBuilder.ClearPrevQuery">
            <summary>
            将上一查询设置为null。不影响外在引用。
            </summary>
        </member>
        <member name="M:Geo.EntityQueryBuilder.ClearInitialQuery">
            <summary>
            清空初始查询，将查询设置为null。不影响外在引用。
            </summary>
        </member>
        <member name="M:Geo.EntityQueryBuilder.Build">
            <summary>
            构造查询条件，并设置为上一查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.EntityQueryBuilder.Produce">
            <summary>
            构造查询条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.EntityQueryBuilder.ResetParamOrder(System.String)">
            <summary>
            重新参数排序。如 将 @0 @2 @1 替换为 @0 @1 @2
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.EntityQueryBuilder.ClearQuery">
            <summary>
            清除当前查询条件列表，只保留最初查询（如果有）。
            </summary>
        </member>
        <member name="P:Geo.EntityQueryBuilder.IsNeedResetParamOrder">
            <summary>
            是否由程序组织参数排序。
            从 0 开始往后排。如果为 false，则不设置。
            </summary>
        </member>
        <member name="P:Geo.EntityQueryBuilder.IsSameAsPrevious">
            <summary>
            当前查询是否和上一查询条件相同（只是字面上比较）。
            </summary>
        </member>
        <member name="P:Geo.EntityQueryBuilder.InitialQuery">
            <summary>
            初始限制查询。后继查询在此限制基础上进行。通常用于权限控制。
            </summary>
        </member>
        <member name="P:Geo.EntityQueryBuilder.PrevQuery">
            <summary> 
            上一查询，用以存储上一个（当前生成前的）查询结果，若要继续参与查询，请手动添加到查询列表中。
            </summary>
        </member>
        <member name="P:Geo.EntityQueryBuilder.Queries">
            <summary>
            当前查询
            </summary>
        </member>
        <member name="P:Geo.EntityQueryBuilder.CanQuery">
            <summary>
            指示是否可以查询。
            </summary>
        </member>
        <member name="P:Geo.EntityQueryBuilder.HasQuery">
            <summary>
            是否具有查询，或初始查询是否被清空。
            </summary>
        </member>
        <member name="P:Geo.EntityQueryBuilder.HasInitialQuery">
            <summary>
            是否具有初始查询，或初始查询是否被清空。
            </summary>
        </member>
        <member name="P:Geo.EntityQueryBuilder.HasPrevQuery">
            <summary>
            是否具有上一查询，或上一查询是否被清空。
            </summary>
        </member>
        <member name="P:Geo.EntityQueryBuilder.BuildPreView">
            <summary>
            用于查看最后的生成结果，但是不会设置 PrevQuery 属性。
            </summary>
        </member>
        <member name="T:Geo.QueryItem">
            <summary>
            查询项目s
            </summary>
        </member>
        <member name="M:Geo.QueryItem.#ctor(System.String,System.Object)">
            <summary>
            构造函数。
            </summary>
            <param name="Condition"></param>
            <param name="Params"></param>
        </member>
        <member name="M:Geo.QueryItem.#ctor(System.String,System.Collections.Generic.List{System.Object})">
            <summary>
            构造函数
            </summary>
            <param name="Condition"></param>
            <param name="Params"></param>
        </member>
        <member name="M:Geo.QueryItem.GetCondition(System.Boolean)">
            <summary>
            获取查询条件。
            </summary>
            <param name="conndected"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.QueryItem.Equals(System.Object)">
            <summary>
            只能简单的从字面上判断。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.QueryItem.Condition">
            <summary>
            查询条件字符串，如 Id == @0
            </summary>
        </member>
        <member name="P:Geo.QueryItem.Parameters">
            <summary>
            查询参数
            </summary>
        </member>
        <member name="P:Geo.QueryItem.ParamCount">
            <summary>
            参数数量
            </summary>
        </member>
        <member name="P:Geo.QueryItem.Connection">
            <summary>
            连接词，为 and 或 or。
            </summary>
        </member>
        <member name="P:Geo.QueryItem.ConnectedCondition">
            <summary>
            连接好的字符串。若是多个条件则使用。
            </summary>
        </member>
        <member name="P:Geo.QueryItem.IdSmallerThanZero">
            <summary>
            Id比0小的集合，意思是返回所有结果
            </summary>
        </member>
        <member name="F:Geo.Winform.SimpleTableForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.SimpleTableForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.SimpleTableForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Geo.Winform.BaseSimpleTableManager`1">
            <summary>
            提供一个基础实现。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Geo.Winform.ISimpleTableManager">
            <summary>
            为数据表的显示而创建
            </summary>
        </member>
        <member name="M:Geo.Winform.ISimpleTableManager.GetDataGridViewColumns">
            <summary>
            获取表的列
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.ISimpleTableManager.GetDataGridViewColumns(System.Collections.Generic.List{System.String},System.Boolean,System.String[])">
            <summary>
            获取表的列
            </summary>
            <param name="hiddenAttributes"></param>
            <param name="useDisplayName"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Winform.ISimpleTableManager.ClassType">
            <summary>
            主题对象类型
            </summary>
        </member>
        <member name="P:Geo.Winform.ISimpleTableManager.HiddenAttributes">
            <summary>
            不显示的列名称
            </summary>
        </member>
        <member name="P:Geo.Winform.ISimpleTableManager.TableName">
            <summary>
            数据表名称
            </summary>
        </member>
        <member name="P:Geo.Winform.ISimpleTableManager.UseDisplayName">
            <summary>
            是否使用Display名称
            </summary>
        </member>
        <member name="M:Geo.Winform.BaseSimpleTableManager`1.GetDataGridViewColumns">
            <summary>
            获取列
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.BaseSimpleTableManager`1.GetDataGridViewColumns(System.Collections.Generic.List{System.String},System.Boolean,System.String[])">
            <summary>
            获取列
            </summary>
            <param name="hiddenAttributes"></param>
            <param name="useDisplayName"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Winform.BaseSimpleTableManager`1.ClassType">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="P:Geo.Winform.BaseSimpleTableManager`1.TableName">
            <summary>
            数据表名称
            </summary>
        </member>
        <member name="P:Geo.Winform.BaseSimpleTableManager`1.UseDisplayName">
            <summary>
            是否使用属性的Display属性显示
            </summary>
        </member>
        <member name="P:Geo.Winform.BaseSimpleTableManager`1.HiddenAttributes">
            <summary>
            需要隐藏的属性名称
            </summary>
        </member>
        <member name="F:Geo.Winform.TitledBox.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.TitledBox.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.TitledBox.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.TitledBox.Tilte">
            <summary>
            盒子标题
            </summary>
        </member>
        <member name="F:Geo.Winform.AttributeBox.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.AttributeBox.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.AttributeBox.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.AttributeBox.DataGridView">
            <summary>
            表
            </summary>
        </member>
        <member name="P:Geo.Winform.AttributeBox.BindingSource">
            <summary>
            DataGridView 的数据源{Name，Value}
            </summary>
        </member>
        <member name="F:Geo.Winform.TitledTableBox.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.TitledTableBox.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.TitledTableBox.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.TitledTableBox.DataGridView">
            <summary>
            表
            </summary>
        </member>
        <member name="P:Geo.Winform.TitledTableBox.BindingSource">
            <summary>
            DataGridView 的数据源
            </summary>
        </member>
        <member name="T:Geo.Winform.SqlUtil">
            <summary>
            数据库连接和操作的实用类。
            </summary>
        </member>
        <member name="M:Geo.Winform.SqlUtil.GetDataTable(System.String)">
            <summary>
            get a data table by a sql string.
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.SqlUtil.ExecuteNonQuery(System.String)">
            <summary>
            执行不返回结果的SQL语句。
            </summary>
            <param name="queryString"></param>
        </member>
        <member name="M:Geo.Winform.SqlUtil.BeginTransAction(System.Collections.Generic.List{System.String})">
            <summary>
            利用 SQL 事务依次执行SQL语句。
            </summary>
            <param name="sqls">待执行的SQL语句</param>
            <returns>成功则True，否则为False</returns>
        </member>
        <member name="M:Geo.Winform.SqlUtil.GetConnString">
            <summary>
            return a ConnectionString object for connecting to a database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.SqlUtil.GetConnString(System.String,System.String,System.String,System.String)">
            <summary>
            construct a ConnectionString with parameters.
            </summary>
            <param name="server"></param>
            <param name="db"></param>
            <param name="currentItem"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.Winform.Controls.CommonChartForm">
            <summary>
            折线绘图
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.CommonChartForm.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.CommonChartForm.#ctor(System.Collections.Generic.List{System.Collections.Generic.IEnumerable{System.Double}},System.Collections.Generic.List{System.String})">
            <summary>
            构造函数
            </summary>
            <param name="lists"></param>
            <param name="name"></param>
        </member>
        <member name="M:Geo.Winform.Controls.CommonChartForm.#ctor(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.Double,System.Double}},System.Collections.Generic.List{System.String})">
            <summary>
            构造函数
            </summary>
            <param name="lists"></param>
            <param name="name"></param>
        </member>
        <member name="M:Geo.Winform.Controls.CommonChartForm.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.String)">
            <summary>
            构造函数
            </summary>
            <param name="lists"></param>
            <param name="name"></param>
        </member>
        <member name="M:Geo.Winform.Controls.CommonChartForm.#ctor(System.Windows.Forms.DataVisualization.Charting.Series[])">
            <summary>
            输入序列
            </summary>
            <param name="series"></param>
        </member>
        <member name="M:Geo.Winform.Controls.CommonChartForm.#ctor(System.Collections.Generic.List{System.Windows.Forms.DataVisualization.Charting.DataPoint},System.String)">
            <summary>
            构造函数
            </summary>
            <param name="Points"></param>
            <param name="name"></param>
        </member>
        <member name="M:Geo.Winform.Controls.CommonChartForm.#ctor(System.Windows.Forms.DataVisualization.Charting.DataPoint[],System.String)">
            <summary>
            构造函数
            </summary>
            <param name="Points"></param>
            <param name="name"></param>
        </member>
        <member name="M:Geo.Winform.Controls.CommonChartForm.#ctor(Geo.InstantValueStorage)">
            <summary>
            输入序列
            </summary>
            <param name="InstantValueStorage"></param>
        </member>
        <member name="M:Geo.Winform.Controls.CommonChartForm.#ctor(System.Data.DataTable,System.Windows.Forms.DataVisualization.Charting.SeriesChartType)">
            <summary>
            输入序列
            </summary>
            <param name="table"></param>
            <param name="SeriesChartType"></param>
        </member>
        <member name="M:Geo.Winform.Controls.CommonChartForm.#ctor(Geo.TableObjectStorage,System.Windows.Forms.DataVisualization.Charting.SeriesChartType)">
            <summary>
            输入序列
            </summary>
            <param name="table"></param>
            <param name="SeriesChartType">X轴图形类型</param>
        </member>
        <member name="M:Geo.Winform.Controls.CommonChartForm.Init(System.Windows.Forms.DataVisualization.Charting.Series[])">
            <summary>
            初始化
            </summary>
            <param name="series"></param>
        </member>
        <member name="M:Geo.Winform.Controls.CommonChartForm.MoveAxis(System.Boolean,System.Boolean)">
            <summary>
            坐标轴平移
            </summary>
            <param name="isAxisXOrY"></param>
            <param name="isGreaterOrSmaller"></param>
        </member>
        <member name="M:Geo.Winform.Controls.CommonChartForm.Zoom(System.Boolean,System.Boolean)">
            <summary>
            缩放工具方法
            </summary>
            <param name="isAxisXOrY"></param>
            <param name="inOrOut"></param>
        </member>
        <member name="M:Geo.Winform.Controls.CommonChartForm.CheckZoomable(System.Windows.Forms.DataVisualization.Charting.AxisScaleView)">
            <summary>
            检查是否可以调整。确保可以调整。
            </summary>
            <param name="ScaleView"></param>
        </member>
        <member name="F:Geo.Winform.Controls.CommonChartForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.CommonChartForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.Controls.CommonChartForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.CommonChartForm.Points">
            <summary>
            点
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.CommonChartForm.Chart">
            <summary>
            图，可以设置样式
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.FileOutputControl">
            <summary>
            打开文件控件
            </summary>
        </member>
        <member name="F:Geo.Winform.Controls.FileOutputControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.FileOutputControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.FileOutputControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.FileOutputControl.LabelName">
            <summary>
            文件名称标签名称
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.FileOutputControl.FilePath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.FileOutputControl.Filter">
            <summary>
            文件过滤器
            </summary>
        </member>
        <member name="F:Geo.Winform.Controls.ListItemSelecterForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.ListItemSelecterForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.Controls.ListItemSelecterForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Geo.Winform.Controls.ParallelConfigControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.ParallelConfigControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.ParallelConfigControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ParallelConfigControl.EnableParallel">
            <summary>
            是否启用并行计算。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ParallelConfigControl.MaxDegreeOfParallelism">
            <summary>
            并行度
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.RichTextBoxControl">
            <summary>
            具有右键菜单
            </summary>
        </member>
        <member name="F:Geo.Winform.Controls.RichTextBoxControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.RichTextBoxControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.RichTextBoxControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:Geo.Winform.ComboxOperation">
            <summary>
            用于显示匹配条件的 Combox 列表值。
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.MdiTab">
            <summary>
            Tab 面板。
            用法：
            this.mdiTab1.MdiParent = this;
            this.mdiTab1.OpenMdiChild(form); 
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.MdiTab.OpenMidForm(System.String,System.Type)">
            <summary>
            如果已经有该类型的对象，则打开，并返回null，如果没有，则从默认构造函数创建，并返回该对象。
            </summary>
            <param name="title"></param>
            <param name="formType"></param>
        </member>
        <member name="M:Geo.Winform.Controls.MdiTab.Activate(System.Windows.Forms.Form)">
            <summary>
            将指定的表单激活，如果没有该表单则返回false。
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.Controls.MdiTab.Activate(System.String)">
            <summary>
            将指定名称的表单激活
            </summary>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.Controls.MdiTab.Activate(System.Windows.Forms.ToolStripItem)">
            <summary>
            激活按钮绑定的窗口。窗口获得焦点。
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:Geo.Winform.Controls.Pagger">
            <summary>
            Tab 面板。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.Pagger.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="P:Geo.Winform.Controls.Pagger.PageLimit">
            <summary>
            这两个改变，则重新获取数据。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.Pagger.TotalPageCount">
            <summary>
            所有页数量，由条目总数和页条目限制决定。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.Pagger.CurrentPage">
            <summary>
            改变，则重新获取数据。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.Pagger.AllRowCount">
            <summary>
            所有数量
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.Pagger.BindingSource">
            <summary>
            数据源
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.ProgressBarComponent">
            <summary>
            带进度提示的进度条组件.自动处理线程问题。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.ProgressBarComponent.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.ProgressBarComponent.InitProcess(System.Int64)">
            <summary>
            初始化。只有一次分类的初始化。
            </summary>
            <param name="processCount"></param>
        </member>
        <member name="M:Geo.Winform.Controls.ProgressBarComponent.Init(System.Collections.Generic.List{System.String},System.Int64)">
            <summary>
            具有分类的初始化
            </summary>
            <param name="classifies"></param>
            <param name="firstProcessCount"></param>
        </member>
        <member name="M:Geo.Winform.Controls.ProgressBarComponent.Init(System.Collections.Generic.List{System.String})">
            <summary>
            具有分类的初始化,调用此后，还必须调用InitFirstProcessCount
            </summary>
            <param name="classifies"></param>
        </member>
        <member name="M:Geo.Winform.Controls.ProgressBarComponent.InitFirstProcessCount(System.Int64)">
            <summary>
            初始化第一次进度条的数量
            </summary>
            <param name="firstProcessCount"></param>
        </member>
        <member name="M:Geo.Winform.Controls.ProgressBarComponent.SetProcessCount(System.Int64)">
            <summary>
            初始化设置进度条,并且更新分类进度信息。
            </summary>
            <param name="nextProcessCount"></param>
        </member>
        <member name="M:Geo.Winform.Controls.ProgressBarComponent.PerformClassifyStep(System.Int32)">
            <summary>
            分类进度向前一步，并初始化下一次进度。
            </summary>
            <param name="nextProcessCount"></param>
        </member>
        <member name="M:Geo.Winform.Controls.ProgressBarComponent.PerformProcessStep">
            <summary>
            执行一次。判断是否百进制。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.ProgressBarComponent.SetCurrentPercessValue(System.Int64)">
            <summary>
            直接设值。
            </summary>
            <param name="CurrentPercessValue"></param>
        </member>
        <member name="M:Geo.Winform.Controls.ProgressBarComponent.UpdateProgressBarValue">
            <summary>
            由 CurrentPercessValue 更新 进度条
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.ProgressBarComponent.SetProgressCount(System.Int64)">
             <summary>
            当前分类的总进度数量
             </summary>
        </member>
        <member name="M:Geo.Winform.Controls.ProgressBarComponent.Full">
            <summary>
            填满进度条
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.ProgressBarComponent.ShowClassifyInfo">
            <summary>
            显示当前分类信息
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.ProgressBarComponent.ShowClassifyProcessInfo(System.String)">
            <summary>
            显示分类进度
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Geo.Winform.Controls.ProgressBarComponent.ShowClassifyInfo(System.String)">
            <summary>
            显示分类信息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Geo.Winform.Controls.ProgressBarComponent.ShowInfo(System.String)">
            <summary>
            直接显示信息。
            </summary>
            <param name="txt"></param>
        </member>
        <member name="M:Geo.Winform.Controls.ProgressBarComponent.ShowPersentProcessInfo">
            <summary>
            显示完成的百分比。
            </summary>
        </member>
        <member name="F:Geo.Winform.Controls.ProgressBarComponent.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.ProgressBarComponent.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.ProgressBarComponent.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="E:Geo.Winform.Controls.ProgressBarComponent.ProgressValueChanged">
            <summary>
            执行了一步,直接显示进度条进度值，如果是百分制则是百分值
            </summary>
        </member>
        <member name="E:Geo.Winform.Controls.ProgressBarComponent.ClassifyValueChanged">
            <summary>
            分类执行了一步
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ProgressBarComponent.IsUsePercetageStep">
            <summary>
            是否采用百进制
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ProgressBarComponent.Classifies">
            <summary>
            分类进度列表。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ProgressBarComponent.ClassifyIndex">
            <summary>
            当前分类步骤。从 0  开始，设值将触发 ClassifyValueChanged 事件。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ProgressBarComponent.CurrentClassify">
            <summary>
            当前分类信息
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ProgressBarComponent.ClassifyCount">
            <summary>
            总共分类步骤数量.若为 0 表示当前没有分类。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ProgressBarComponent.MultiFactorPerStep">
            <summary>
            一步换算到进度条一步间隙的乘法因子。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.ProgressBarComponent.CurrentPercessValue">
            <summary>
            当前实际进度值，非进度条的值。
            </summary>
        </member>
        <member name="T:Geo.Winform.EntitySearchOption">
            <summary>
            搜索选项
            </summary>
        </member>
        <member name="P:Geo.Winform.DbSearchItemOption.InvisibleAttributes">
            <summary>
            需要隐藏（不显示）的属性名称
            </summary>
        </member>
        <member name="P:Geo.Winform.DbSearchItemOption.ClassType">
            <summary>
            类类型
            </summary>
        </member>
        <member name="P:Geo.Winform.DbSearchItemOption.PropertiesDic">
            <summary>
            代选对象
            </summary>
        </member>
        <member name="P:Geo.Winform.DbSearchItemOption.UseDisplayName">
            <summary>
            是否使用属性的Display属性值
            </summary>
        </member>
        <member name="P:Geo.Winform.EntitySearchOption.QueryManager">
            <summary>
            查询生成器。
            </summary>
        </member>
        <member name="T:Geo.Winform.PropertyConditionItem">
            <summary>
            代表对象的一个属性。如果是对象查询，则列出对象列表。
            </summary>
        </member>
        <member name="M:Geo.Winform.PropertyConditionItem.Create(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            useDisplayName = true 时，只有设置了DisplayName的才生成。
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Winform.PropertyConditionItem.Name">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="P:Geo.Winform.PropertyConditionItem.DisplayName">
            <summary>
            显示名称
            </summary>
        </member>
        <member name="P:Geo.Winform.PropertyConditionItem.IsFirst">
            <summary>
            是否是第一个条件。第一个条件不用连接词。
            </summary>
        </member>
        <member name="P:Geo.Winform.PropertyConditionItem.BindingSource">
            <summary>
            对象列表专用。
            </summary>
        </member>
        <member name="T:Geo.Winform.Restriction">
            <summary>
            对属性的限制
            </summary>
        </member>
        <member name="T:Geo.Winform.SearchItem">
            <summary>
            具有条件的搜索界面。
            </summary>
        </member>
        <member name="M:Geo.Winform.SearchItem.#ctor(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            构造函数。
            </summary>
            <param name="classType">待搜索类的类型</param>
            <param name="dataSources">数据源</param>
            <param name="useDisplayName">是否使用属性显示的名称</param>
            <param name="invisibleAttributes">需要隐藏的属性列表</param>
        </member>
        <member name="F:Geo.Winform.SearchItem.classType">
            <summary>
            类 类型
            </summary>
        </member>
        <member name="M:Geo.Winform.SearchItem.GetObjectValue(System.Object,System.Type)">
            <summary>
            获取对象值。
            </summary>
            <param name="currentVal"></param>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="F:Geo.Winform.SearchItem.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.SearchItem.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.SearchItem.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.SearchItem.InvisibleAttributes">
            <summary>
            需要隐藏（不显示）的属性名称.
            务必先初始化本属性，再为ClassType赋值。
            </summary>
        </member>
        <member name="P:Geo.Winform.SearchItem.DataSources">
            <summary>
            数据源绑定。
            </summary>
        </member>
        <member name="P:Geo.Winform.SearchItem.IsFirst">
            <summary>
            如果是第一个条件，则不必显示。
            </summary>
        </member>
        <member name="P:Geo.Winform.SearchItem.UseDisplayName">
            <summary>
            是否使用属性的显示名称。
            </summary>
        </member>
        <member name="P:Geo.Winform.SearchItem.ClassType">
            <summary>
            主类类型。由此提取属性，需要在最后初始化
            </summary>
        </member>
        <member name="P:Geo.Winform.SearchItem.Restriction">
            <summary>
            属性限制。
            </summary>
        </member>
        <member name="T:Geo.Winform.OperationType">
            <summary>
            操作类型
            </summary>
        </member>
        <member name="T:Geo.Winform.OperationEventHandler">
            <summary>
            发生了操作
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Geo.Winform.SimpleTableControl">
            <summary>
            简单数据表控件，只负责显示。先调用 Init，再调用 DataBind
            </summary>
        </member>
        <member name="M:Geo.Winform.SimpleTableControl.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.SimpleTableControl.Init``1(System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            初始化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="useDisplayName"></param>
            <param name="HiddenColumns"></param>
        </member>
        <member name="M:Geo.Winform.SimpleTableControl.DataBind(System.Object)">
            <summary>
            绑定数据，同时将显示。
            </summary>
            <param name="dataSource"></param>
        </member>
        <member name="M:Geo.Winform.SimpleTableControl.SetColumns">
            <summary>
            设置数据表列。可在 UseDisplayName 赋值后调用。
            </summary>
        </member>
        <member name="M:Geo.Winform.SimpleTableControl.SetColumnSortModel(System.Windows.Forms.DataGridViewColumnSortMode)">
            <summary>
            设置排序模式
            </summary>
            <param name="torf"></param>
        </member>
        <member name="M:Geo.Winform.SimpleTableControl.OnColumnSortEventHandler(System.String,System.Windows.Forms.SortOrder)">
            <summary>
            排序
            </summary>
            <param name="colName"></param>
            <param name="SortOrder"></param>
        </member>
        <member name="F:Geo.Winform.SimpleTableControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.SimpleTableControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.SimpleTableControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="E:Geo.Winform.SimpleTableControl.ColumnSortEventHandler">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:Geo.Winform.SimpleTableControl.ToolStrip">
            <summary>
            图标快捷方式
            </summary>
        </member>
        <member name="P:Geo.Winform.SimpleTableControl.DataGridView">
            <summary>
             数据表
            </summary>
        </member>
        <member name="P:Geo.Winform.SimpleTableControl.HiddenColumns">
            <summary>
            不在表格中显示的字段。
            </summary>
        </member>
        <member name="P:Geo.Winform.SimpleTableControl.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Geo.Winform.SimpleTableControl.IsShowTitle">
             <summary>
            是否显示标题
             </summary>
        </member>
        <member name="P:Geo.Winform.SimpleTableControl.EnableExport">
            <summary>
            是否启用导出功能
            </summary>
        </member>
        <member name="T:Geo.Winform.Controls.FileOpenControl">
            <summary>
            打开文件控件
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.FileOpenControl.GetFilePath(System.String,System.IO.SearchOption)">
            <summary>
            返回第一个匹配上的。返回路径，如果是文件路径，直接返回，如果是目录，则提取目录中匹配的路径。
            如果没有，返回null。
            </summary>
            <param name="extension"></param>
            <param name="SearchOption"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.Controls.FileOpenControl.GetFilePathes(System.String,System.IO.SearchOption)">
            <summary>
            返回路径，如果是文件路径，直接返回，如果是目录，则提取目录中匹配的路径。
            如果没有，返回null。
            </summary>
            <param name="extension"></param>
            <param name="SearchOption"></param>
            <returns></returns>
        </member>
        <member name="F:Geo.Winform.Controls.FileOpenControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.Controls.FileOpenControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.Controls.FileOpenControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.FileOpenControl.OpenFileDialog">
            <summary>
            文件读取对话框
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.FileOpenControl.IsMultiSelect">
            <summary>
            是否多选文件
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.FileOpenControl.LabelName">
            <summary>
            文件名称标签名称
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.FileOpenControl.FileCount">
            <summary>
            文件数量
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.FileOpenControl.FilePath">
            <summary>
            文件路径,或则所有路径
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.FileOpenControl.FirstPath">
            <summary>
            第一个文件路径
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.FileOpenControl.FilePathes">
            <summary>
            文件路径，批量的。
            </summary>
        </member>
        <member name="P:Geo.Winform.Controls.FileOpenControl.Filter">
            <summary>
            文件过滤器
            </summary>
        </member>
        <member name="T:Geo.WinTools.FileFittingForm">
            <summary>
            文件过滤
            </summary>
        </member>
        <member name="T:Geo.WinTools.FileExecutingForm">
            <summary>
            文件执行器
            </summary>
        </member>
        <member name="M:Geo.WinTools.FileExecutingForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.WinTools.FileExecutingForm.ShowInfo(System.String)">
            <summary>
            显示信息
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Geo.WinTools.FileExecutingForm.GetInputDoubleCol(System.Int32,System.Collections.Generic.List{System.Double[]})">
            <summary>
            返回指定的数据列
            </summary>
            <param name="colIndex">列号</param>
            <param name="table">列号</param>
            <returns></returns>
        </member>
        <member name="M:Geo.WinTools.FileExecutingForm.GetInputDoubleCols">
            <summary>
            以列形式返回
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.WinTools.FileExecutingForm.GetInputDoubleRows">
            <summary>
            读取双精度数组集合。只返回数据部分，可设置是否忽略首行首列。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.WinTools.FileExecutingForm.GetInputDoubles">
            <summary>
            获取行列表，每一行为一个双精度数字。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.WinTools.FileExecutingForm.GetInputLines">
            <summary>
            输入文件的行。原始行，不做任何更改。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.WinTools.FileExecutingForm.AppendToOutFile(System.String)">
            <summary>
            附加到文件
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Geo.WinTools.FileExecutingForm.AppendLineToOutFile(System.String)">
            <summary>
            追加
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Geo.WinTools.FileExecutingForm.TryDeleteOutputFile">
            <summary>
            删除输出文件。
            </summary>
        </member>
        <member name="M:Geo.WinTools.FileExecutingForm.Run(System.String,System.String)">
            <summary>
            运行
            </summary>
            <param name="input"></param>
            <param name="output"></param>
        </member>
        <member name="F:Geo.WinTools.FileExecutingForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.WinTools.FileExecutingForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.WinTools.FileExecutingForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Geo.WinTools.FileExecutingForm.EnableButtom">
            <summary>
            启用按钮
            </summary>
        </member>
        <member name="P:Geo.WinTools.FileExecutingForm.FileOpenControl">
            <summary>
            打开文件控件
            </summary>
        </member>
        <member name="P:Geo.WinTools.FileExecutingForm.FileOutputControl">
            <summary>
            文件输出控件
            </summary>
        </member>
        <member name="P:Geo.WinTools.FileExecutingForm.InputPath">
            <summary>
            输入路径
            </summary>
        </member>
        <member name="P:Geo.WinTools.FileExecutingForm.OutputPath">
            <summary>
            输出路径
            </summary>
        </member>
        <member name="P:Geo.WinTools.FileExecutingForm.IsIgnoreFirstCol">
            <summary>
            是否忽略第一列
            </summary>
        </member>
        <member name="P:Geo.WinTools.FileExecutingForm.IsIgnoreFirstRow">
            <summary>
            是否忽略第一行
            </summary>
        </member>
        <member name="M:Geo.WinTools.FileFittingForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.WinTools.FileFittingForm.Run(System.String,System.String)">
            <summary>
            运行
            </summary>
            <param name="input"></param>
            <param name="output"></param>
        </member>
        <member name="M:Geo.WinTools.FileFittingForm.GetMovingAverage(System.Collections.Generic.List{System.Double},System.Int32)">
            <summary>
            滑动平均
            </summary>
            <param name="doubles">数组</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="T:Geo.WinTools.FileGrossDetectingForm">
            <summary>
            文件粗差探测
            </summary>
        </member>
        <member name="M:Geo.WinTools.FileGrossDetectingForm.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Geo.WinTools.FileGrossDetectingForm.Run(System.String,System.String)">
            <summary>
            运行
            </summary>
            <param name="input"></param>
            <param name="output"></param>
        </member>
        <member name="M:Geo.WinTools.FileGrossDetectingForm.GetMovingAverage(System.Collections.Generic.List{System.Double},System.Int32)">
            <summary>
            滑动平均
            </summary>
            <param name="doubles">数组</param>
            <param name="count">过滤次数</param>
            <returns></returns>
        </member>
        <member name="T:Geo.WinTools.GrossDetectingForm">
            <summary>
            粗差探测窗口
            </summary>
        </member>
        <member name="M:Geo.WinTools.GrossDetectingForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Geo.WinTools.GrossDetectingForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.WinTools.GrossDetectingForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.WinTools.GrossDetectingForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Geo.WinTools.ConfigFileEditForm">
            <summary>
            配置文件编辑器
            </summary>
        </member>
        <member name="M:Geo.WinTools.ConfigFileEditForm.#ctor">
            <summary>
            配置文件编辑器
            </summary>
        </member>
        <member name="M:Geo.WinTools.ConfigFileEditForm.#ctor(System.String)">
            <summary>
            配置文件编辑器
            </summary>
            <param name="configPath"></param>
        </member>
        <member name="F:Geo.WinTools.ConfigFileEditForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.WinTools.ConfigFileEditForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.WinTools.ConfigFileEditForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Geo.WinTools.Images.API">
            <summary>
            封装一些API
            </summary>
        </member>
        <member name="M:Geo.WinTools.Images.API.GetDesktopWindow">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.WinTools.Images.API.SetWindowsHookEx(System.Int32,Geo.WinTools.Images.API.HookProc,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
            <param name="hookid"></param>
            <param name="pfnhook"></param>
            <param name="hinst"></param>
            <param name="threadid"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.WinTools.Images.API.GetCurrentThreadId">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.WinTools.Images.API.UnhookWindowsHookEx(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hhook"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.WinTools.Images.API.HookProc">
            <summary>
            
            </summary>
            <param name="nCode"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="T:Geo.WinTools.Images.API.WindowsHookCodes">
            <summary>
            变量
            </summary>
        </member>
        <member name="F:Geo.WinTools.Images.API.WindowsHookCodes.WH_MSGFILTER">
            <summary>
            1
            </summary>
        </member>
        <member name="F:Geo.WinTools.Images.API.WindowsHookCodes.WH_JOURNALRECORD">
            <summary>
            
            </summary>
        </member>
        <member name="F:Geo.WinTools.Images.API.WindowsHookCodes.WH_JOURNALPLAYBACK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Geo.WinTools.Images.API.WindowsHookCodes.WH_KEYBOARD">
            <summary>
            2
            </summary>
        </member>
        <member name="F:Geo.WinTools.Images.API.WindowsHookCodes.WH_GETMESSAGE">
            <summary>
            3
            </summary>
        </member>
        <member name="F:Geo.WinTools.Images.API.WindowsHookCodes.WH_CALLWNDPROC">
            <summary>
            4
            </summary>
        </member>
        <member name="F:Geo.WinTools.Images.API.WindowsHookCodes.WH_CBT">
            <summary>
            5
            </summary>
        </member>
        <member name="F:Geo.WinTools.Images.API.WindowsHookCodes.WH_SYSMSGFILTER">
            <summary>
            6
            </summary>
        </member>
        <member name="F:Geo.WinTools.Images.API.WindowsHookCodes.WH_MOUSE">
            <summary>
            7
            </summary>
        </member>
        <member name="F:Geo.WinTools.Images.API.WindowsHookCodes.WH_HARDWARE">
            <summary>
            8
            </summary>
        </member>
        <member name="F:Geo.WinTools.Images.API.WindowsHookCodes.WH_DEBUG">
            <summary>
            9
            </summary>
        </member>
        <member name="F:Geo.WinTools.Images.API.WindowsHookCodes.WH_SHELL">
            <summary>
            10
            </summary>
        </member>
        <member name="F:Geo.WinTools.Images.API.WindowsHookCodes.WH_FOREGROUNDIDLE">
            <summary>
            11
            </summary>
        </member>
        <member name="F:Geo.WinTools.Images.API.WindowsHookCodes.WH_CALLWNDPROCRET">
            <summary>
            12
            </summary>
        </member>
        <member name="F:Geo.WinTools.Images.API.WindowsHookCodes.WH_KEYBOARD_LL">
            <summary>
            13
            </summary>
        </member>
        <member name="F:Geo.WinTools.Images.API.WindowsHookCodes.WH_MOUSE_LL">
            <summary>
            14
            </summary>
        </member>
        <member name="T:Geo.WinTools.Images.CopyScreen">
            <summary>
            一个根据矩形截图类
            zgke@Sina.com
            qq:116149
            </summary>
        </member>
        <member name="F:Geo.WinTools.Images.CopyScreen.m_HookMessage">
            <summary>
            钩子
            </summary>
        </member>
        <member name="F:Geo.WinTools.Images.CopyScreen.m_ScreenForm">
            <summary>
            屏幕句柄
            </summary>
        </member>
        <member name="F:Geo.WinTools.Images.CopyScreen.m_Image">
            <summary>
            图形
            </summary>
        </member>
        <member name="M:Geo.WinTools.Images.CopyScreen.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:Geo.WinTools.Images.CopyScreen.m_HookMessage_GetHook(System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            钩子事件
            </summary>
            <param name="p_Code"></param>
            <param name="p_wParam"></param>
            <param name="p_lParam"></param>
            <param name="p_Send"></param>
        </member>
        <member name="M:Geo.WinTools.Images.CopyScreen.GetUprightRectangle(System.Drawing.Rectangle)">
            <summary>
            根据矩形 如果Width是正直接返回 如果使-会转换成正的矩形 保证大小位置不变
            </summary>
            <param name="p_Rectangle">矩形</param>
            <returns>正矩形</returns>
        </member>
        <member name="M:Geo.WinTools.Images.CopyScreen.GerScreenFormRectangle">
            <summary>
            获取图形
            </summary>
        </member>
        <member name="M:Geo.WinTools.Images.CopyScreen.GetScreen">
            <summary>
            获取图形
            </summary>
        </member>
        <member name="P:Geo.WinTools.Images.CopyScreen.ScreenSize">
            <summary>
            屏幕大小
            </summary>
        </member>
        <member name="P:Geo.WinTools.Images.CopyScreen.MousePoint">
            <summary>
            鼠标位置
            </summary>
        </member>
        <member name="P:Geo.WinTools.Images.CopyScreen.ScreenImage">
            <summary>
            私有方法获取屏幕图形(全部图形)
            </summary>
        </member>
        <member name="E:Geo.WinTools.Images.CopyScreen.GetScreenImage">
            <summary>
            获取屏幕截图
            </summary>
        </member>
        <member name="T:Geo.WinTools.Images.CopyScreen.GetImage">
            <summary>
            获取图片
            </summary>
            <param name="p_Image"></param>
        </member>
        <member name="T:Geo.WinTools.Images.HookMessage">
            <summary>
            用钩子获取消息
            zgke@Sina.com
            </summary>
        </member>
        <member name="M:Geo.WinTools.Images.HookMessage.#ctor(Geo.WinTools.Images.API.WindowsHookCodes)">
            <summary>
            设置自己进程的钩子
            </summary>
            <param name="p_HookCodes">钩子类型</param>
        </member>
        <member name="M:Geo.WinTools.Images.HookMessage.#ctor(Geo.WinTools.Images.API.WindowsHookCodes,System.Boolean)">
            <summary>
            设置进程的钩子
            </summary>
            <param name="p_HookCodes">钩子类型</param>
            <param name="p_Zero">全局钩子</param>
        </member>
        <member name="M:Geo.WinTools.Images.HookMessage.UnHookMessage">
            <summary>
            关闭钩子
            </summary>
        </member>
        <member name="E:Geo.WinTools.Images.HookMessage.GetHook">
            <summary>
            钩子
            </summary>
        </member>
        <member name="T:Geo.WinTools.Images.HookMessage.GetHookMessage">
            <summary>
            委托
            </summary>
            <param name="p_Code"></param>
            <param name="p_wParam"></param>
            <param name="p_lParam"></param>
            <param name="p_Send"></param>
        </member>
        <member name="T:Geo.WinTools.DataDilutingForm">
            <summary>
            数据按行提取/稀疏。
            </summary>
        </member>
        <member name="M:Geo.WinTools.DataDilutingForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.WinTools.DataDilutingForm.Run">
            <summary>
            运行
            </summary>
        </member>
        <member name="T:Geo.WinTools.ResidualAnalysisForm">
            <summary>
            残差分析。
            </summary>
        </member>
        <member name="M:Geo.WinTools.ResidualAnalysisForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.WinTools.ResidualAnalysisForm.Run">
            <summary>
            运行
            </summary>
        </member>
        <member name="T:Geo.WinTools.ResidualFilterForm">
            <summary>
            残差分析。
            </summary>
        </member>
        <member name="M:Geo.WinTools.ResidualFilterForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.WinTools.ResidualFilterForm.Run">
            <summary>
            运行
            </summary>
        </member>
        <member name="T:Geo.WinTools.DoubleFormatForm">
            <summary>
            双精度格式化
            </summary>
        </member>
        <member name="M:Geo.WinTools.DoubleFormatForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Geo.WinTools.DoubleFormatForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.WinTools.DoubleFormatForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.WinTools.DoubleFormatForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Geo.WinTools.FileSelectorForm">
            <summary>
            文件选择
            </summary>
        </member>
        <member name="M:Geo.WinTools.FileSelectorForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Geo.WinTools.FileSelectorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.WinTools.FileSelectorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.WinTools.FileSelectorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Geo.WinTools.TextFilterForm">
            <summary>
            文本过滤器
            </summary>
        </member>
        <member name="M:Geo.WinTools.TextFilterForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.WinTools.TextFilterForm.Run(System.String,System.String)">
            <summary>
            运行
            </summary>
            <param name="input"></param>
            <param name="output"></param>
        </member>
        <member name="T:Geo.WinTools.GeoXyzConvertForm">
            <summary>
            坐标转换
            </summary>
        </member>
        <member name="M:Geo.WinTools.GeoXyzConvertForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.WinTools.GeoXyzConvertForm.GetEllipsoid">
            <summary>
            获取参考椭球。
            </summary>
            <returns></returns>
        </member>
        <member name="F:Geo.WinTools.GeoXyzConvertForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.WinTools.GeoXyzConvertForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.WinTools.GeoXyzConvertForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Geo.WinTools.ILmergeForm">
            <summary>
            合并dll
            </summary>
        </member>
        <member name="M:Geo.WinTools.ILmergeForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Geo.WinTools.ILmergeForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.WinTools.ILmergeForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.WinTools.ILmergeForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Geo.WinTools.Net.EmailSenderForm">
            <summary>
            email测试
            </summary>
        </member>
        <member name="M:Geo.WinTools.Net.EmailSenderForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Geo.WinTools.Net.EmailSenderForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.WinTools.Net.EmailSenderForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.WinTools.Net.EmailSenderForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Geo.WinTools.Net.FtpDownloadForm">
            <summary>
            ftp下载器
            </summary>
        </member>
        <member name="M:Geo.WinTools.Net.FtpDownloadForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Geo.WinTools.Net.FtpDownloadForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.WinTools.Net.FtpDownloadForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.WinTools.Net.FtpDownloadForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Geo.WinTools.Net.GetIpForm1">
            <summary>
            获取IP
            </summary>
        </member>
        <member name="M:Geo.WinTools.Net.GetIpForm1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Geo.WinTools.Net.GetIpForm1.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.WinTools.Net.GetIpForm1.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.WinTools.Net.GetIpForm1.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:Geo.WinTools.Net.GetWebPageSourceForm">
            <summary>
            获取网页源代码
            </summary>
        </member>
        <member name="M:Geo.WinTools.Net.GetWebPageSourceForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Geo.WinTools.Net.GetWebPageSourceForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.WinTools.Net.GetWebPageSourceForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.WinTools.Net.GetWebPageSourceForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:Geo.WinTools.Net.ScanIpOpenPortsForm1">
            <summary>
            扫描打开的端口
            </summary>
        </member>
        <member name="M:Geo.WinTools.Net.ScanIpOpenPortsForm1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Geo.WinTools.Net.ScanIpOpenPortsForm1.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.WinTools.Net.ScanIpOpenPortsForm1.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.WinTools.Net.ScanIpOpenPortsForm1.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:Geo.WinTools.TaskListenerForm">
            <summary>
            任务监听
            </summary>
        </member>
        <member name="M:Geo.WinTools.TaskListenerForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.WinTools.TaskListenerForm.ListenClient">
            <summary>
            监听
            </summary>
        </member>
        <member name="F:Geo.WinTools.TaskListenerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.WinTools.TaskListenerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.WinTools.TaskListenerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Geo.WinTools.TaskSenderForm">
            <summary>
            任务发送
            </summary>
        </member>
        <member name="M:Geo.WinTools.TaskSenderForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Geo.WinTools.TaskSenderForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.WinTools.TaskSenderForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.WinTools.TaskSenderForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Geo.WinTools.Images.ScreenImageForm1">
            <summary>
            截图小工具
            </summary>
        </member>
        <member name="M:Geo.WinTools.Images.ScreenImageForm1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Geo.WinTools.Images.ScreenImageForm1.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.WinTools.Images.ScreenImageForm1.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.WinTools.Images.ScreenImageForm1.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:Geo.WinTools.AnsiCodeForm">
            <summary>
            ASII码查看器
            </summary>
        </member>
        <member name="M:Geo.WinTools.AnsiCodeForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Geo.WinTools.AnsiCodeForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.WinTools.AnsiCodeForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.WinTools.AnsiCodeForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Geo.Winform.CheckSameFileForm">
            <summary>
            检查相同文件
            </summary>
        </member>
        <member name="M:Geo.Winform.CheckSameFileForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Geo.Winform.CheckSameFileForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.Winform.CheckSameFileForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.Winform.CheckSameFileForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:Geo.Winform.DirComparison">
            <summary>
            目录比较
            </summary>
        </member>
        <member name="M:Geo.Winform.DirComparison.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="dirA"></param>
            <param name="dirB"></param>
        </member>
        <member name="M:Geo.Winform.DirComparison.CopyDifferInAToB">
            <summary>
            将A中不同复制到B
            </summary>
        </member>
        <member name="M:Geo.Winform.DirComparison.ToString">
            <summary>
            字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.DirComparison.Parse(System.String)">
            <summary>
            过去列表
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.DirComparison.CopyDirectory(System.String,System.String)">
            <summary>
            复制目录
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="P:Geo.Winform.DirComparison.DirA">
            <summary>
            目录A
            </summary>
        </member>
        <member name="P:Geo.Winform.DirComparison.DirB">
            <summary>
            目录B
            </summary>
        </member>
        <member name="P:Geo.Winform.DirComparison.ListA">
            <summary>
            列表A
            </summary>
        </member>
        <member name="P:Geo.Winform.DirComparison.ListB">
            <summary>
            列表B
            </summary>
        </member>
        <member name="P:Geo.Winform.DirComparison.DiffersInA">
            <summary>
            A中不同
            </summary>
        </member>
        <member name="P:Geo.Winform.DirComparison.DiffersInB">
            <summary>
            B中不同
            </summary>
        </member>
        <member name="T:Geo.Winform.DirItem">
            <summary>
            文件夹比较项目。
            </summary>
        </member>
        <member name="M:Geo.Winform.DirItem.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.DirItem.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="absDirectory"></param>
            <param name="fullPath"></param>
        </member>
        <member name="M:Geo.Winform.DirItem.ToString">
            <summary>
            字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.DirItem.GetHashCode">
            <summary>
            哈希
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.DirItem.Equals(System.Object)">
            <summary>
            是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Winform.DirItem.FullPath">
            <summary>
            全路径
            </summary>
        </member>
        <member name="P:Geo.Winform.DirItem.Directory">
            <summary>
            目录
            </summary>
        </member>
        <member name="P:Geo.Winform.DirItem.HalfaPath">
            <summary>
            
            </summary>
        </member>
        <member name="T:Geo.Winform.FileComparison">
            <summary>
            文件比较
            </summary>
        </member>
        <member name="M:Geo.Winform.FileComparison.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="dirA"></param>
            <param name="dirB"></param>
        </member>
        <member name="M:Geo.Winform.FileComparison.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.FileComparison.Parse(System.String)">
            <summary>
            将目录下所有文件读取解析为文档
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.FileComparison.CopyDifferInAToB">
            <summary>
            复制A中不同的到目录B中
            </summary>
        </member>
        <member name="M:Geo.Winform.FileComparison.CopyFile(System.String,System.String)">
            <summary>
            复制
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="P:Geo.Winform.FileComparison.DirA">
            <summary>
            目录A
            </summary>
        </member>
        <member name="P:Geo.Winform.FileComparison.DirB">
            <summary>
            目录B
            </summary>
        </member>
        <member name="P:Geo.Winform.FileComparison.ListA">
            <summary>
            列表A
            </summary>
        </member>
        <member name="P:Geo.Winform.FileComparison.ListB">
            <summary>
            文件集合B
            </summary>
        </member>
        <member name="P:Geo.Winform.FileComparison.DiffersInA">
            <summary>
            A中不同
            </summary>
        </member>
        <member name="P:Geo.Winform.FileComparison.DiffersInB">
            <summary>
            B中不同
            </summary>
        </member>
        <member name="T:Geo.Winform.FileItem">
            <summary>
            文件比较项目。
            </summary>
        </member>
        <member name="M:Geo.Winform.FileItem.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.Winform.FileItem.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="absDirectory"></param>
            <param name="fullPath"></param>
        </member>
        <member name="M:Geo.Winform.FileItem.ToString">
            <summary>
            文本
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.FileItem.GetHashCode">
            <summary>
            哈希
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.FileItem.Equals(System.Object)">
            <summary>
            是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.FileItem.Parse(System.String)">
            <summary>
            获取所有的文件
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:Geo.Winform.FileItem.GetDiffers(System.String,System.String)">
            <summary>
            获取两个文件夹中不同的文件列表
            </summary>
            <param name="dirA"></param>
            <param name="dirB"></param>
            <returns></returns>
        </member>
        <member name="P:Geo.Winform.FileItem.FileName">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:Geo.Winform.Sys.CmdForm">
            <summary>
            CMD运行
            </summary>
        </member>
        <member name="M:Geo.Winform.Sys.CmdForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Geo.Winform.Sys.CmdForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.Winform.Sys.CmdForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.Winform.Sys.CmdForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Geo.WinTools.Sys.PcInfoForm1">
            <summary>
            当前计算机信息
            </summary>
        </member>
        <member name="M:Geo.WinTools.Sys.PcInfoForm1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Geo.WinTools.Sys.PcInfoForm1.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.WinTools.Sys.PcInfoForm1.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.WinTools.Sys.PcInfoForm1.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:Geo.WinTools.Sys.ProcessForm1">
            <summary>
            系统进程查看
            </summary>
        </member>
        <member name="M:Geo.WinTools.Sys.ProcessForm1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Geo.WinTools.Sys.ProcessForm1.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.WinTools.Sys.ProcessForm1.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.WinTools.Sys.ProcessForm1.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:Geo.WinTools.ProcessInfoForm">
            <summary>
            处理窗口
            </summary>
        </member>
        <member name="M:Geo.WinTools.ProcessInfoForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Geo.WinTools.ProcessInfoForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.WinTools.ProcessInfoForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.WinTools.ProcessInfoForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:Geo.WinTools.Sys.RenameFilesForm">
            <summary>
            重命名文件
            </summary>
        </member>
        <member name="M:Geo.WinTools.Sys.RenameFilesForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Geo.WinTools.Sys.RenameFilesForm.GetAllSubDirs(System.String)">
            <summary>
            获取所有子文件。
            </summary>
            <param name="dirPath"></param>
            <returns></returns>
        </member>
        <member name="F:Geo.WinTools.Sys.RenameFilesForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.WinTools.Sys.RenameFilesForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.WinTools.Sys.RenameFilesForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:Geo.WinTools.TimeCaculatorForm">
            <summary>
            时间计算
            </summary>
        </member>
        <member name="M:Geo.WinTools.TimeCaculatorForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Geo.WinTools.TimeCaculatorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Geo.WinTools.TimeCaculatorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Geo.WinTools.TimeCaculatorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Geo.WinTools.Sys.TimeConvertForm1">
            <summary>
            时间转换
            </summary>
        </member>
        <member name="M:Geo.WinTools.Sys.TimeConvertForm1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Geo.WinTools.Sys.TimeConvertForm1.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.WinTools.Sys.TimeConvertForm1.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.WinTools.Sys.TimeConvertForm1.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:Geo.WinTools.Sys.ZipForm">
            <summary>
            ZIP 压缩
            </summary>
        </member>
        <member name="M:Geo.WinTools.Sys.ZipForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Geo.WinTools.Sys.ZipForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Geo.WinTools.Sys.ZipForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Geo.WinTools.Sys.ZipForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:Geo.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Geo.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Geo.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Geo.Properties.Resources.doc">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Geo.Properties.Resources.excel_16x16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Geo.Properties.Resources.firstpage_16x40">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Geo.Properties.Resources.lastpage_16x40">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Geo.Properties.Resources.nextpage_16x40">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Geo.Properties.Resources.prepage_16x40">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
    </members>
</doc>
