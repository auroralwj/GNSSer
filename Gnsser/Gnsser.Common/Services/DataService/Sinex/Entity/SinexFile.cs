//2013.01.25, czs, Created in zz, SinexFile
//2015.12.28, czs, edit, 增加内容判断，避免出错
//2017.06.03, czs, edit in hongqing, 增加坐标检索非空判断，避免抛出异常


using System;
using Gnsser.Times;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using  Geo.Coordinates;
using Geo.Utils;
using Geo.Times; 

namespace Gnsser.Data.Sinex
{
    /// <summary>
    /// The SINEX acronym was suggested by Blewitt et al. (1994) and the prevObj versions,
    /// 0.04, 0.05, 1.00 evolved from the work and contributions of the SINEX Working Group
    /// of the IGS. The IGS Analysis Centres and Associated Analysis Centres use the SINEX
    /// format for their weekly solutions since mid 1995. Although the SINEX format was
    /// developped by the IGS, the ILRS and IVS decided to use it for their pilot projects as
    /// well because SINEX was designed to be modular and general enough to handle GPS as
    /// well as other techniques. To meet all the requirements for SLR and VLBI solutions
    /// some new elements and more detailed specifications were added by the ILRS Analysis
    /// Working Group and by the IVS. During 2002, these extensions were merged with the
    /// previous SINEX version 1.00 to get coeffOfParams unique format definition for all space geodetic
    /// techniques. After an intensive discussion with the IGS Reference Frame Working Group
    /// chaired by R. Ferland, the ILRS Analysis Coordinator R. Noomen and the ILRS Analysis
    /// Working Group, the IVS Analysis Coordinator A. Nothnagel and Z. Altamimi from the
    /// ITRF section of IGN, the version called SINEX 2.00 could be finalized. The latest
    /// changes to version 2.02 are mainly due to an extended list of parameters and the
    /// demands of GALILEO.
    /// 
    /// the SINEX fileB is accessible "column-wise" as well as "line-wise".
    /// 
    /// 2013.01.25 Created.
    /// <summary>
    /// Sinex 文件
    /// </summary>
    public class SinexFile
    {
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public SinexFile() { }
        /// <summary>
        /// 手动创建请用此函数。
        /// </summary>
        /// <param name="name"></param>
        public SinexFile(string name)
        {
            this.Name = name;

            this.Header = new SinexFileHeader()
                 {
                     AgencyCode = "GEO",
                     ConstraintCode = "P",
                     CreationTime = new Time(DateTime.Now),
                     EndTime = new Time(DateTime.Now),
                     FileAgencyCode = "506",
                     NumberOfEstimates = 1,
                     ObservationCode = "P",
                     SolutionContents = new string[] { "XYZ" },
                     StartTime = new Time(DateTime.Now),
                     Version = 1.0
                 };
            this.FileAcknowledgementBlock = new CollectionBlock<FileAcknowledgement>(BlockTitle.INPUT_ACKNOWLEDGEMENTS) { Items = new List<FileAcknowledgement>() { new FileAcknowledgement() { Name = "Product", Val = "Geo" } } };
            this.FileCommentBlock = new CollectionBlock<FileComment>()
            {
                Label = BlockTitle.FILE_COMMENT,
                Items = new List<FileComment>() {
                        new FileComment(){ Comment = " File created by ." + name}}
            };
            this.FileReferBlock = new FileReferBlock()
            {
                Label = BlockTitle.FILE_REFERENCE,
                Contack = "506",
                Description = "This file is generated by Gnsser",
                Hardware = "Geo Platform",
                Software = "Gnsser "
            };
            this.InputFilesBlock = new CollectionBlock<InputFile>()
            {
                Label = BlockTitle.INPUT_FILES,
                Items = new List<InputFile>() {
                        new InputFile(){  
                            CreationAgencyCode="GEO", 
                            CreationTime = Time.Now,
                            FileDescription = "distributed computing",
                            FileName ="Haha, you guess." }}
            };
            this.InputHistoryBlock = SinexFactory.CreateInputHistoryBlock();
            this.SatelliteIdBlock = SinexFactory.CreateSatelliteIdBlock();
            this.SatellitePhaseCenterBlock = SinexFactory.CreateSatellitePhaseCenterBlock();
            this.SiteAntennaBlock = SinexFactory.CreateSiteAntennaBlock();
            this.SiteEccentricityBlock = SinexFactory.CreateSiteEccentricityBlock();
            this.SiteGpsPhaseCenterBlock = SinexFactory.CreateSiteGpsPhaseCenterBlock();
            this.SiteIdBlock = SinexFactory.CreateSiteIdBlock();
            this.SiteReceiverBlock = SinexFactory.CreateSiteReceiverBlock();
            this.SolutionAprioriBlock = SinexFactory.CreateSolutionAprioriBlock();
            this.SolutionEpochBlock = SinexFactory.CreateSolutionEpochBlock();
            this.SolutionEstimateBlock = SinexFactory.CreateSolutionEstimateBlock();
            this.SolutionMatrixAprioriCova = SinexFactory.CreateSolutionMatrixAprioriCova();
            this.SolutionMatrixEstimateCova = SinexFactory.CreateSolutionMatrixEstimateCova();
            this.SolutionNormalEquationVectorBlock = SinexFactory.CreateSolutionNormalEquationVectorBlock();
            this.SolutionStattisticsBlock = SinexFactory.CreateSolutionStattisticsBlock();
        }

        #region 属性
        #region 有用的属性
        /// <summary>
        /// 文件名称
        /// </summary>
        public string Name { get; set; }
        /// <summary>
        /// 参数数量
        /// </summary>
        public int EstimateParamCount { get { return this.SolutionEstimateBlock.Count; } }
        public int AprioriParamCount { get { return this.SolutionAprioriBlock.Count; } }
        /// <summary>
        /// 测站数量
        /// </summary>
        public int SiteCount { get { return this.SiteIdBlock.Count; } }


        #endregion

        /// <summary>
        /// 头部信息。
        /// </summary>
        public SinexFileHeader Header { get; set; }
        /// <summary>
        /// 历史记录 区
        /// </summary>
        public ICollectionBlock<InputHistory> InputHistoryBlock { get; set; }
        /// <summary>
        /// 输入文件 区
        /// </summary>
        public ICollectionBlock<InputFile> InputFilesBlock { get; set; }
        /// <summary>
        /// 文件描述
        /// </summary>
        public ICollectionBlock<FileComment> FileCommentBlock { get; set; }
        /// <summary>
        /// 致谢 信息
        /// </summary>
        public ICollectionBlock<FileAcknowledgement> FileAcknowledgementBlock { get; set; }
        /// <summary>
        /// 参考信息
        /// </summary>
        public FileReferBlock FileReferBlock { get; set; }
        /// <summary>
        /// 卫星信息
        /// </summary>
        public ICollectionBlock<SatelliteId> SatelliteIdBlock { get; set; }
        /// <summary>
        /// 卫星相位中心
        /// </summary>
        public ICollectionBlock<SatellitePhaseCenter> SatellitePhaseCenterBlock { get; set; }
        /// <summary>
        /// 测站基本信息 区
        /// </summary>
        public ICollectionBlock<SiteId> SiteIdBlock { get; set; }
        /// <summary>
        /// 测站接收机 区。
        /// </summary>
        public ICollectionBlock<SiteReceiver> SiteReceiverBlock { get; set; }
        /// <summary>
        /// 测站 天线 区
        /// </summary>
        public ICollectionBlock<SiteAntenna> SiteAntennaBlock { get; set; }
        /// <summary>
        /// 测站GPS相位中心 区
        /// </summary>
        public ICollectionBlock<SiteGpsPhaseCenter> SiteGpsPhaseCenterBlock { get; set; }
        /// <summary>
        /// 测站偏心 区
        /// </summary>
        public ICollectionBlock<SiteEccentricity> SiteEccentricityBlock { get; set; }
        /// <summary>
        /// 统计区
        /// </summary>
        public ICollectionBlock<SolutionStatistic> SolutionStattisticsBlock { get; set; }
        /// <summary>
        /// 历元区
        /// </summary>
        public ICollectionBlock<SolutionEpoch> SolutionEpochBlock { get; set; }
        /// <summary>
        /// 估计值区域
        /// </summary>
        public ICollectionBlock<SolutionValue> SolutionEstimateBlock { get; set; }
        /// <summary>
        /// 先验值区域
        /// </summary>
        public ICollectionBlock<SolutionValue> SolutionAprioriBlock { get; set; }
        /// <summary>
        /// 方差先验值
        /// </summary>
        public SolutionMatrixBlock SolutionMatrixAprioriCova { get; set; }
        /// <summary>
        /// 方差估计值
        /// </summary>
        public SolutionMatrixBlock SolutionMatrixEstimateCova { get; set; }
        /// <summary>
        /// 法方程系数阵
        /// </summary>
        public SolutionMatrixBlock SolutionNormalEquationMatrix { get; set; }
        /// <summary>
        /// 法方程右手边
        /// </summary>
        public ICollectionBlock<SolutionNomalEquationVector> SolutionNormalEquationVectorBlock { get; set; }
        #endregion

        #region 提取for 平差

        /// <summary>
        /// 以顺序数组形式返回测站的编号名称。
        /// </summary>
        /// <returns></returns>
        public List<string> GetSiteCods()
        {
            List<string> list = new List<string>();
            foreach (var item in SiteIdBlock.Items)
            {
                list.Add(item.SiteCode);
            }
            return list;
        }

        /// <summary>
        /// 得到参数的先验矩阵，是一个二维数组表达的一维列向量。
        /// </summary>
        /// <returns></returns>
        public double[][] GetAprioriMatrix()
        {
            double[][] array = new double[SolutionAprioriBlock.Count][];
            for (int i = 0; i < array.Length; i++) array[i] = new double[1];

            for (int i = 0; i < array.Length; i++)
            {
                array[i][0] = SolutionAprioriBlock.Items[0].ParameterValue;
            }
            return array;
        }

        /// <summary>
        /// 得到参数的估值矩阵，是一个二维数组表达的一维列向量。
        /// </summary>
        /// <returns></returns>
        public double[][] GetEstimateMatrix() { return Geo.Utils.MatrixUtil.Create(GetEstimateVector()); }
        /// <summary>
        /// 参数估值向量
        /// </summary>
        /// <returns></returns>
        public double[] GetEstimateVector()
        {
            double[] array = new double[SolutionEstimateBlock.Count];

            for (int i = 0; i < EstimateParamCount; i++)
            {
                array[i] = SolutionEstimateBlock.Items[i].ParameterValue;
            }
            return array;
        }
        /// <summary>
        /// 参数先验值向量
        /// </summary>
        /// <returns></returns>
        public double[] GetAprioriVector()
        {
            double[] array = new double[SolutionAprioriBlock.Count];

            for (int i = 0; i < EstimateParamCount; i++)
            {
                array[i] = SolutionAprioriBlock.Items[i].ParameterValue;
            }
            return array;
        }

        /// <summary>
        /// 得到先验协方差阵。
        /// </summary>
        /// <returns></returns>
        public double[][] GetAprioriCovaMatrix() { return SinexMatrixConvertor.GetMatrix(SolutionMatrixAprioriCova.Items); }

        /// <summary>
        /// 估值协方差阵。
        /// </summary>
        /// <returns></returns>
        public double[][] GetEstimateCovaMatrix() { return SinexMatrixConvertor.GetMatrix(SolutionMatrixEstimateCova.Items); }
        /// <summary>
        /// 法方程系数阵
        /// </summary>
        /// <returns></returns>
        public double[][] GetNormalEquationMatrix() { return SinexMatrixConvertor.GetMatrix(this.SolutionNormalEquationMatrix.Items); }
        /// <summary>
        /// 法方程右手边
        /// </summary>
        /// <returns></returns>
        public double[] GetNormalEquationVector()
        {
            List<double> list = new List<double>();
            foreach (var item in this.SolutionNormalEquationVectorBlock.Items) list.Add(item.ValOfRightHand);
            return list.ToArray();
        }
        #endregion

        #region 读写操作
        /// <summary>
        /// 转换为SINEX格式。
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return SinexBuilder.ToSinex(this);
        } 

        #endregion

        #region 进一步开发利用
        /// <summary>
        /// 是否有法方程右手边。
        /// </summary>
        public bool HasNormalEquationVectorMatrix { get { return this.SolutionNormalEquationVectorBlock != null; } }
        /// <summary>
        /// 是否有法方程系数阵。
        /// </summary>
        public bool HasNormalEquationMatrix { get { return this.SolutionNormalEquationMatrix != null; } }

        /// <summary>
        /// 是否有参数估值协方差阵。
        /// </summary>
        public bool HasEstimateCovaMatrix { get { return this.SolutionMatrixEstimateCova != null; } }
        /// <summary>
        /// 是否有参数先验值协方差阵。
        /// </summary>
        public bool HasAprioriCovaMatrix { get { return this.SolutionMatrixAprioriCova != null; } }

        /// <summary>
        /// 是否只包含坐标先验值和估值
        /// </summary>
        public bool IsOnlyEstimateCoordValue { get { return this.SiteCount * 3 == this.EstimateParamCount; } }
        public bool IsOnlyAprioriCoordValue { get { return this.SiteCount * 3 == this.AprioriParamCount; } }

        /// <summary>
        /// 清理非坐标的值和对应矩阵，对文件进行瘦身。
        /// </summary>
        public void CleanNonCoordSolutionValue()
        {
            if (SolutionEstimateBlock != null && !this.IsOnlyEstimateCoordValue)
                SinexMerger.CleanNonCoordSolutionValue(SolutionEstimateBlock, SolutionMatrixEstimateCova);
            if (SolutionAprioriBlock != null && !this.IsOnlyAprioriCoordValue)
                SinexMerger.CleanNonCoordSolutionValue(SolutionAprioriBlock, SolutionMatrixAprioriCova);
        }

        /// <summary>
        /// 由测站名称提取SiteId， 若无，则返回 null.
        /// </summary>
        /// <param name="sideCode"></param>
        /// <returns></returns>
        public SiteId GetSiteId(string sideCode) { return this.SiteIdBlock.Items.Find(m => m.SiteCode.Equals(sideCode)); }

        /// <summary>
        /// 测站和估值坐标
        /// </summary>
        /// <returns></returns>
        public List<NamedXyz> GetSiteEstimatedCoords()
        {
            List<NamedXyz> results = new List<NamedXyz>();
            var list = GetSinexSites();
            foreach (var item in list)
            { 
                var xyz = new NamedXyz(item.Name, item.EstimateXYZ);

                results.Add(xyz);
            }
            return results;
        }

        /// <summary>
        /// 测站和估值坐标.z注意名称全为大写
        /// </summary>
        /// <returns></returns>
        public Geo.BaseDictionary<string, NamedRmsXyz> GetSiteEstimateRmsdCoords()
        {
           var results = new  Geo.BaseDictionary<string, NamedRmsXyz> ();
            var list = GetSinexSites();
            foreach (var item in list)
            { 
                var xyz = new NamedRmsXyz(item.Name.ToUpper().Trim(), new RmsedXYZ(  item.EstimateXYZ, item.EstimateXyzStdDev));
                results[item.Name] = xyz; 
            }
            return results;
        }
        /// <summary>
        /// 便于使用的测站信息。
        /// </summary>
        /// <returns></returns>
        public List<SinexSiteDetail> GetSinexSites()
        {
            List<SinexSiteDetail> list = new List<SinexSiteDetail>();

            foreach (var item in SiteIdBlock.Items)
            {
                SinexSiteDetail site = new SinexSiteDetail()
                {
                    Name = item.SiteCode,
                    ApproxGeoCoord = item.GeoCoord
                };
                list.Add(site);
            }

            foreach (var item in list)
            {
                if (SiteEccentricityBlock != null)
                {
                    SiteEccentricity siteEccentricity = SiteEccentricityBlock.Items.Find(m => m.SiteCode == item.Name);
                    if (siteEccentricity != null) item.Eccentricity = siteEccentricity.Une;
                }
                if (SolutionEpochBlock != null)
                {
                    SolutionEpoch epoch = SolutionEpochBlock.Items.Find(m => m.SiteCode.ToLower() == item.Name.ToLower());
                    if (epoch != null)
                    {
                        item.DateStart = epoch.DateStart;
                        item.DateEnd = epoch.DateEnd;
                    }
                }

                if (SolutionEstimateBlock != null && SolutionEstimateBlock.Count != 0)
                {
                    SolutionValue esX = SolutionEstimateBlock.Items.Find(
                    m => m.SiteCode == item.Name && m.ParameterType == ParameterType.STAX);
                    SolutionValue esY = SolutionEstimateBlock.Items.Find(
                    m => m.SiteCode == item.Name && m.ParameterType == ParameterType.STAY);
                    SolutionValue esZ = SolutionEstimateBlock.Items.Find(
                    m => m.SiteCode == item.Name && m.ParameterType == ParameterType.STAZ);

                    if (esX != null && esY != null && esZ != null)
                    {
                        item.EstimateXYZ = new XYZ(esX.ParameterValue, esY.ParameterValue, esZ.ParameterValue);
                        item.EstimateXyzStdDev = new XYZ(esX.StdDev, esY.StdDev, esZ.StdDev);
                        item.EstimateGeoCoord = CoordTransformer.XyzToGeoCoord(item.EstimateXYZ);
                    }
                }

                if (SolutionAprioriBlock != null && SolutionAprioriBlock.Count != 0)
                {
                    SolutionValue apX = SolutionAprioriBlock.Items.Find(
                    m => m.SiteCode == item.Name && m.ParameterType == ParameterType.STAX);
                    SolutionValue apY = SolutionAprioriBlock.Items.Find(
                    m => m.SiteCode == item.Name && m.ParameterType == ParameterType.STAY);
                    SolutionValue apZ = SolutionAprioriBlock.Items.Find(
                    m => m.SiteCode == item.Name && m.ParameterType == ParameterType.STAZ);
                    if (apX != null && apY != null && apZ != null)
                    {
                        item.AprioriXYZ = new XYZ(apX.ParameterValue, apY.ParameterValue, apZ.ParameterValue);
                        item.AprioriXyzStdDev = new XYZ(apX.StdDev, apY.StdDev, apZ.StdDev);
                        item.AprioriGeoCoord = CoordTransformer.XyzToGeoCoord(item.EstimateXYZ);
                    }
                }
                if (SiteReceiverBlock != null)
                {
                    SiteReceiver receiver = SiteReceiverBlock.Items.Find(m => m.SiteCode == item.Name);
                    if (receiver != null) item.Receiver = receiver.ReceiverType;
                }
                if (SiteAntennaBlock != null)
                {
                    SiteAntenna antenna = SiteAntennaBlock.Items.Find(m => m.SiteCode == item.Name);
                    if (antenna != null) item.Antenna = antenna.AntennaType;
                }
            }

            return list;
        }

        /// <summary>
        /// 获取统计信息
        /// </summary>
        /// <returns>文件统计信息</returns>
        public SinexStatistic GetStatistic()
        {
            SinexStatistic sta = new SinexStatistic();
            if (SolutionStattisticsBlock == null) return sta;
            foreach (var item in SolutionStattisticsBlock.Items)
            {
                if (item.Name.Contains(StatisticLabel.CODE_MEASUREMENTS_SIGMA)) sta.CodeMeasurementsSigma = item.Val;
                if (item.Name.Contains(StatisticLabel.NUMBER_OF_DEGREES_OF_FREEDOM)) sta.NumberOfDegreesOfFreedom = item.Val;
                if (item.Name.Contains(StatisticLabel.NUMBER_OF_OBSERVATIONS)) sta.NumberOfObservations = item.Val;
                if (item.Name.Contains(StatisticLabel.NUMBER_OF_UNKNOWNS)) sta.NumberOfUnknown = item.Val;
                if (item.Name.Contains(StatisticLabel.PHASE_MEASUREMENTS_SIGMA)) sta.PhaseMeasurementsSigma = item.Val;
                if (item.Name.Contains(StatisticLabel.SAMPLING_INTERVAL_SECONDS)) sta.SamplingIntervalSeconds = item.Val;
                if (item.Name.Contains(StatisticLabel.SQUARE_SUM_OF_RESIDUALS_VTPV)) sta.SquareSumOfResidualsVTPV = item.Val;
                if (item.Name.Contains(StatisticLabel.VARIANCE_FACTOR)) sta.VarianceOfUnitWeight = item.Val;
                if (item.Name.Contains(StatisticLabel.WEIGHTED_SQUARE_SUM_OF_O_C)) sta.WeightedSqureSumOfOMinusC = item.Val;

            }
            return sta;
        }
        /// <summary>
        /// 指定的测站在本测站集合中的参数编号顺序。
        /// </summary>
        /// <param name="sideCodes"></param>
        /// <returns></returns>
        public List<int> GetParamIndexes(List<string> sideCodes)
        {
            return GetParamIndexes(GetSiteCodeIndexes(sideCodes));
        }
        /// <summary>
        /// 获取不包含指定测站的测站参数索引
        /// </summary>
        /// <param name="sideCodes"></param>
        /// <returns></returns>
        public List<int> GetParamIndexesExcept(List<string> sideCodes)
        {
            return GetParamIndexes(GetSiteCodeIndexesExcept(sideCodes));
        }
        /// <summary>
        /// 指定的测站在本测站集合中的编号顺序。
        /// </summary>
        /// <param name="sideCodes"></param>
        /// <returns></returns>
        public List<int> GetSiteCodeIndexes(List<string> sideCodes)
        {
            List<int> indexes = new List<int>();
            List<string> codes = this.GetSiteCods();

            for (int i = 0; i < codes.Count; i++)
            {
                if(sideCodes.Contains(codes[i])) indexes.Add(i);
            }
            return indexes;
        }
        /// <summary>
        /// 获取不包含指定测站的测站索引。
        /// </summary>
        /// <param name="sideCodes"></param>
        /// <returns></returns>
        public List<int> GetSiteCodeIndexesExcept(List<string> sideCodes)
        {
            List<int> indexes = new List<int>();
            List<string> codes = this.GetSiteCods();

            for (int i = 0; i < codes.Count; i++)
            {
                if(!sideCodes.Contains(codes[i])) indexes.Add(i);
            }
            return indexes;
        }
        /// <summary>
        /// 将测站编号转换为参数编号列表。
        /// </summary>
        /// <param name="sideCodeIndexes"></param>
        /// <returns></returns>
        public static List<int> GetParamIndexes(List<int> sideCodeIndexes )
        {
            List<int> list = new List<int>();

            foreach (var item in sideCodeIndexes)
            {
                int i = item * 3;
                list.AddRange(new int[]{i++, i++,i++});                 
            }
            return list;
        }

        #region 实用静态方法

        /// <summary>
        /// 提取两个文件所有的测站编号，如果相同则只返回第一个。
        /// 提取顺序为，以 第一个参数 fileA 的编号为基准，fileB 的依次顺序添加。如果 fileA 中已经有的，则略过。
        /// 注：顺序做索引用，不可改变。
        /// </summary>
        /// <param name="fileA"></param>
        /// <param name="fileB"></param>
        /// <returns></returns>
        public static List<string> GetDistinctSiteCodes(SinexFile fileA, SinexFile fileB)
        {
            List<string> namesA = fileA.GetSiteCods();
            List<string> namesB = fileB.GetSiteCods();

            foreach (var item in namesB)
            {
                if (!namesA.Contains(item)) namesA.Add(item);
            }

            return namesA;
        }
        /// <summary>
        /// 提取两个文件都具有的测站名称。
        /// </summary>
        /// <param name="fileA"></param>
        /// <param name="fileB"></param>
        /// <returns></returns>
        public static List<string> GetSameSiteCodes(SinexFile fileA, SinexFile fileB)
        {
            List<string> namesA = fileA.GetSiteCods();
            List<string> namesB = fileB.GetSiteCods();
            return namesA.FindAll(m => namesB.Contains(m));
        }
        /// <summary>
        /// 提取具有的测站名称
        /// </summary>
        /// <param name="fileA">SinexFile</param>
        /// <param name="namesB">测站名称</param>
        /// <returns></returns>
        public static List<string> GetSameSiteCodes(SinexFile fileA, List<string> namesB) { return fileA.GetSiteCods().FindAll(m => namesB.Contains(m)); }
        #endregion
        #endregion

    }
}
