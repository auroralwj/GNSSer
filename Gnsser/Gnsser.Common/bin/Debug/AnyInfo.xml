<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AnyInfo</name>
    </assembly>
    <members>
        <member name="T:AnyInfo.Data.Amalgamation.AmalgamateLayer">
            <summary>
            Amalgamating layers.
            
            </summary>
        </member>
        <member name="M:AnyInfo.Data.Amalgamation.AmalgamateLayer.Amalgamate(AnyInfo.Layer,AnyInfo.Layer,AnyInfo.Features.SimpleFeatureType,System.String)">
            <summary>
            合并到新元数据。
            </summary>
            <param name="layerA"></param>
            <param name="layerB"></param>
            <param name="newFeatureType"></param>
            <param name="newLayerName"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Amalgamation.AmalgamateLayer.Amalgamate(System.Collections.Generic.List{AnyInfo.Layer})">
            <summary>
            合并图层。将Feature简单叠加。
            </summary>
            <param name="layers"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Amalgamation.AmalgamateLayer.Amalgamate(AnyInfo.Layer,AnyInfo.Layer)">
            <summary>
            This is the prevObj attenpt to amalgamate two layers to one which is simply add its feature data together.
            </summary>
            <param name="layerA"></param>
            <param name="layerB"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Amalgamation.AmalgamateLayer.Amalgamate(AnyInfo.Layer,AnyInfo.Layer,System.String)">
            <summary>
            将密度高的线条层与按照密度低的线条层的同名路段做加权平均。以提高精度。
            </summary>
            <param name="layerA">LayerA 是密度高的线条层</param>
            <param name="layerB">LayerB 是密度低的线条层</param>
            <param name="newLayerName"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Amalgamation.AmalgamateRouteLayer.Amalgamate(System.Collections.Generic.List{AnyInfo.Layer})">
            <summary>
            返回路径最短的路径图层。
            </summary>
            <param name="layers"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Amalgamation.AmalgamateRouteLayer.Amalgamate(AnyInfo.Layer,AnyInfo.Layer)">
            <summary>
            This is the prevObj attenpt to amalgamate two layers to one which is simply add its feature data together.
            </summary>
            <param name="layerA"></param>
            <param name="layerB"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.DataBases.DbLayerHelper.GetRoadLayerFromDb">
            <summary>
            数据库道路图层。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.DataBases.DbLayerHelper.GetPointLayerFromDb">
            <summary>
            数据库点图层。
            </summary>
            <returns></returns>
        </member>
        <member name="F:AnyInfo.Data.DataBases.DbPointForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.Data.DataBases.DbPointForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.Data.DataBases.DbPointForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:AnyInfo.Data.DataStore">
            <summary>
            The information contained  in the file header.(name , bounds ,description) that discrible the entire contents.
            DataStore is the Geotools API for darta sourse access. it is used to access both file and service infomation.
            Wide range of data sourdes are supported from simple shapefile through to databse and web feature services.
            </summary>
        </member>
        <member name="M:AnyInfo.Data.Generalization.Emerge.EmergeCloseCoordPointsToOne(AnyInfo.Layer,System.Double)">
            <summary>
            删除同坐标点，返回删除数量。
            </summary>
            <param name="layer"></param>
            <param name="maxError_deg"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Generalization.Emerge.EmergeClosePointsOfStartAndEnd(AnyInfo.Layer,System.Double)">
            <summary>
            合并一个Features中两个离两个端点较近的点。
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:AnyInfo.Data.Generalization.Emerge.InsertCenterPointsToLine(AnyInfo.Layer)">
            <summary>
            加密线路。每个节点段加入一个节点。
            </summary>
            <param name="layer"></param>
        </member>
        <member name="T:AnyInfo.Data.Generalization.SplitLineLayer">
            <summary>
            将线从相交处截断。
            </summary>
        </member>
        <member name="T:AnyInfo.Data.Gjb.Entity.LayerType">
            <summary>
             地图要素层标识
            </summary>
        </member>
        <member name="T:AnyInfo.Data.Gjb.Entity.FileType">
            <summary>
            1.3文件种类标识：
            GY—元数据
            SX—属性
            ZB—坐标（含注记坐标）
            ZJ—注记
            DOC—图历簿(无层标识)
            CSB—潮信表(无层标识)
            </summary>
        </member>
        <member name="T:AnyInfo.Data.Gjb.Entity.FileName">
            <summary>
            文件名
            1/25 W
            </summary>
        </member>
        <member name="T:AnyInfo.Data.Gmls.KmlGenerator">
            <summary>
            The KML generator is to create kml files.
            </summary>
        </member>
        <member name="M:AnyInfo.Data.Gmls.KmlGenerator.AddScheama(System.String)">
            <summary>
            Add one schema address to the file.
            If the address already exists, it would't add agian.
            </summary>
            <param name="scheamaAddress"></param>
        </member>
        <member name="T:AnyInfo.Data.Gmls.GmlGenerator">
            <summary>
            The Gml generator is to create gml files.
            </summary>
        </member>
        <member name="M:AnyInfo.Data.Gmls.GmlGenerator.AddScheama(System.String)">
            <summary>
            Add one schema address to the file.
            If the address already exists, it would't add agian.
            </summary>
            <param name="scheamaAddress"></param>
        </member>
        <member name="T:AnyInfo.Data.Gmls.GmlReader">
            <summary>
            The Gml generator is to create gml files.
            </summary>
        </member>
        <member name="M:AnyInfo.Data.Gmls.GmlReader.Read">
             <summary>
            读取。
             </summary>
             <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Gmls.GmlReader.JumpTo(System.Xml.XmlReader,System.String)">
            <summary>
            读取器跳到。
            </summary>
            <param name="reader"></param>
            <param name="to"></param>
        </member>
        <member name="M:AnyInfo.Data.Gmls.GmlReader.GetGeoName(System.String)">
            <summary>
            提取第一个Geo名称。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Gmls.GmlReader.GetSimpleFeatureType(System.String,System.String)">
            <summary>
            读取属性
            生成 SimpleFeatureType
            </summary>
            <param name="geoName"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Gmls.GmlReader.AddGeoAndStyleType(System.String,AnyInfo.Features.SimpleFeatureTypeBuilder)">
            <summary>
            根据类型添加。
            </summary>
            <param name="geoName"></param>
            <param name="tBuilder"></param>
        </member>
        <member name="T:AnyInfo.Data.LayerReader">
            <summary>
            图层绘制
            </summary>
        </member>
        <member name="M:AnyInfo.Data.LayerReader.ReadMidMif(System.String)">
            <summary>
            读取 MapInfo 的 MidMif 格式的图层。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.LayerReader.ReadLayers(System.String)">
            <summary>
            根据文件类型自动判断。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.MapInfo.MidMifGenerator.SaveTo(System.String)">
            <summary>
            Mid / Mif
            </summary>
            <param name="mifPath"></param>
        </member>
        <member name="T:AnyInfo.Data.MapInfo.MidMifReader">
            <summary>
            MapInfo MID/MIF 格式读取器。
            </summary>
        </member>
        <member name="M:AnyInfo.Data.MapInfo.MidMifReader.#ctor(System.String)">
            <summary>
            构造函数，输入Mif的路径即可，自动提取MID路径。
            </summary>
            <param name="mifPath"></param>
        </member>
        <member name="M:AnyInfo.Data.MapInfo.MidMifReader.SkipHeader(System.IO.StreamReader)">
            <summary>
            忽略头部，
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.MapInfo.MidMifReader.HasHeader(System.String)">
            <summary>
            判断是否有头文件。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.MapInfo.MidMifReader.CreateFeatureTypeByHeader">
            <summary>
            读取头部，并创建 SimpleFeatureType。如果没有头部信息，
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.MapInfo.MidMifReader.CreateFeatureTypeByGeoName(System.String)">
            <summary>
            利用Mif 提供的 Geo类型创建一个只有Id的SimpleFeatureType
            </summary>
            <param name="geoName"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.MapInfo.MidMifReader.GetType(System.String)">
             <summary>
             将midmif的type名称转换为C#变量类型。
             
            列名称和类型
            char(WIDTH)
               integer (which is 4 bytes)
               smallint (which is 2 bytes, so it can only store numbers between
                 -32767 and +32767)
               decimal (WIDTH, decimals)
               float
               date
               logical 
             </summary>
             <param name="midmifTypeName"></param>
             <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.MapInfo.MidMifReader.Read(System.String)">
            <summary>
            读取Mid/Mif格式涂层的静态方法。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Data.Njb.Entity.AnnotationFile">
            <summary>
            注记文件。
            </summary>
        </member>
        <member name="T:AnyInfo.Data.Njb.Entity.AttributeTitle">
            <summary>
            属性的名称
            </summary>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.AttributeTitle.GetAnnotationTitles">
            <summary>
            注记
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.AttributeTitle.GetControlPointTitles">
            <summary>
            测量控制点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.AttributeTitle.GetSocialTitles">
            <summary>
            工农业社会文化设施
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.AttributeTitle.GetCitisanTitles">
            <summary>
            居民地及附属设施
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.AttributeTitle.GetGroundTransportTitles">
            <summary>
            陆地交通
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.AttributeTitle.GetTubeTitles">
            <summary>
            管线
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.AttributeTitle.GetWaterLandTitles">
            <summary>
            水域/陆地
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.AttributeTitle.GetSeaBottomTitles">
            <summary>
            海底地貌及底质
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.AttributeTitle.GetReefObstacleTitles">
            <summary>
            礁石、沉船、障碍物
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.AttributeTitle.GetWaterTitles">
             <summary>
            水文
             </summary>
             <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.AttributeTitle.GetLandCoverTitles">
             <summary>
            陆地地貌及土质
             </summary>
             <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.AttributeTitle.GetBoundaryTitles">
             <summary>
            境界与政区
             </summary>
             <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.AttributeTitle.GetPlantTitles">
             <summary>
            植被
             </summary>
             <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.AttributeTitle.GetGeomagnetismTitles">
             <summary>
            地磁要素
             </summary>
             <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.AttributeTitle.GetSeaRouteTitles">
             <summary>
            助航设备及航道
             </summary>
             <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.AttributeTitle.GetSeaBoundaryTitles">
            <summary>
            海上区域界线
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.AttributeTitle.GetAirTitles">
            <summary>
             航空要素
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.AttributeTitle.GetMinitoryTitles">
            <summary>
             军事区域
            </summary>
            <returns></returns>
        </member>
        <member name="P:AnyInfo.Data.Njb.Entity.DescribeFile.IsAdjusted">
            <summary>
            是否修测
            </summary>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.DescribeFile.ReadLine(System.IO.StreamReader,System.String@)">
            <summary>
            false if null.
            </summary>
            <param name="r"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Data.Njb.Entity.FileHeader">
            <summary>
            文件头
            </summary>
        </member>
        <member name="T:AnyInfo.Data.Njb.Entity.NjbLayerType">
            <summary>
             地图要素层标识
            </summary>
        </member>
        <member name="T:AnyInfo.Data.Njb.Entity.FileType">
            <summary>
                MS—描述
                SX—属性
                ZB—坐标（含注记坐标）
                TP—拓扑
                GX—关系
                DM—注记
            </summary>
        </member>
        <member name="T:AnyInfo.Data.Njb.Entity.FileName">
            <summary>
            矢量地图以区域为单位进行数据的组织和存贮。每个区域由若干数据文件组成，每个文件有一个名称，由12个字符组成。格式为：
            XXXXXXXXX           ．        X                XX 
            区域编号              地图要素层标识   文件种类标识
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.Entity.FileName.FullPath">
            <summary>
            全路径，如果指定了。
            </summary>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.FileName.GetMetaFilePath">
            <summary>
            得到元数据文件路径。
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Data.Njb.Entity.GeoType">
            <summary>
            几何类型点、线、面。
            </summary>
        </member>
        <member name="T:AnyInfo.Data.Njb.Entity.PointRecord">
            <summary>
             1   6816.00  17796.00       0.0       0.0
            </summary>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.PointRecord.GetPoint">
            <summary>
            定位点转换为 AnyInfo 点。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.LineStringRecord.GetLineString">
            <summary>
            AnyInfo LineString
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.PolygonRecord.GetMultiPolygon">
            <summary>
            AnyInfo Polygon
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.PolygonRecord.Parse(System.String)">
            <summary>
                       2    10532.00     9935.00           1
                       15
                       0.00        0.00     3600.00        0.00     7199.00        0.00    10799.00        0.00    14400.00        0.00    18000.00        0.00
                       21600.00        0.00    21600.00    14400.00    18000.00    14400.00    14400.00    14400.00    10800.00    14400.00     7200.00    14400.00
                       3600.00    14400.00        0.00    14400.00        0.00        0.00   
                       一次解析一个面。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Data.Njb.Entity.GeoFile">
            <summary>
            几何数据文件,ZB文件。
            </summary>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.GeoFile.GetPoints">
            <summary>
            获取 AnyInfo 点集合。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.GeoFile.GetLineStrings">
            <summary>
            获取 AnyInfo 线集合。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.GeoFile.GetMultiPolygons">
            <summary>
            获取 AnyInfo 面集合。
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Data.Njb.Entity.TriUnit">
            <summary>
            三元组合
            </summary>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.TriUnit.Parse(System.String)">
            <summary>
                     2          产品生产日期                        20040506
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Data.Njb.Entity.MetaDataFile">
             <summary>
            元数据文件是一个三元组合。编号，名称和值。
             </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.Entity.MetaDataFile.CoordUnit">
            <summary>
            坐标单位
            </summary> 
        </member>
        <member name="P:AnyInfo.Data.Njb.Entity.MetaDataFile.Dimention">
            <summary>
            坐标维数 
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.Entity.MetaDataFile.CoordCoefficient">
            <summary>
            坐标放大系数
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.Entity.MetaDataFile.CoordOffset">
            <summary>
            坐标偏移量
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.Entity.MetaDataFile.MapName">
            <summary>
            图名
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.Entity.MetaDataFile.MapNumber">
            <summary>
            图号
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.Entity.MetaDataFile.ContourInterval">
            <summary>
            图幅等高距
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.Entity.MetaDataFile.Scale">
            <summary>
            地图比例尺分母
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.Entity.MetaDataFile.LonRange">
            <summary>
            图廓角点经度范围 1160000-1161500
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.Entity.MetaDataFile.LatRange">
            <summary>
            图廓角点纬度范围 395000-400000
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.Entity.MetaDataFile.GaussProjectionNumber">
            <summary>
            高斯投影带号
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.Entity.MetaDataFile.MapProjection">
            <summary>
            地图投影
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.Entity.MetaDataFile.SemiMajorAxis">
            <summary>
            椭球长半径
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.Entity.MetaDataFile.FlatRatio">
            <summary>
            椭球扁率
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.Entity.MetaDataFile.CenterLongitude">
            <summary>
            中央经线
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.Entity.MetaDataFile.Datum">
            <summary>
            大地基准  
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.Entity.MetaDataFile.ZoneWidth">
            <summary>
             分带方式 
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.Entity.MetaDataFile.RelOriginX">
            <summary>
             相对原点横坐标 
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.Entity.MetaDataFile.RelOriginY">
            <summary>
             相对原点纵坐标 
            </summary>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.MetaDataFile.GetGlobalCoord(Geo.Coordinates.XYZ)">
            <summary>
            得到大地坐标，经纬度。
            </summary>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="P:AnyInfo.Data.Njb.Entity.MetaDataFile.IsTransBj54ToWGS84">
            <summary>
            是否转换到 WGS 84 坐标，会耗费一定时间。默认为真。
            </summary>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.NjbUtil.SkipToGeoHeadLine(System.IO.StreamReader,System.String@,AnyInfo.Data.Njb.Entity.GeoType)">
            <summary>
            跳转到几何记录的开始。
            </summary>
            <param name="r"></param>
            <param name="line"></param>
            <param name="geoType"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.NjbUtil.ReadLine(System.IO.StreamReader,System.String@)">
            <summary>
            false if null.
            </summary>
            <param name="r"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.Entity.NjbUtil.AdjustToGlobalCoord(AnyInfo.Data.Njb.Entity.GeoFile@,AnyInfo.Data.Njb.Entity.MetaDataFile)">
            <summary>
            坐标调整到全球大地坐标
            </summary>
            <param name="geoFile"></param>
            <param name="metaDataFile"></param>
        </member>
        <member name="T:AnyInfo.Data.Njb.Entity.RowCells">
            <summary>
            属性行记录。
            </summary>
        </member>
        <member name="T:AnyInfo.Data.Njb.Entity.SxFile">
            <summary>
            属性文件。
            </summary>
        </member>
        <member name="T:AnyInfo.Data.Njb.MapSheet">
            <summary>
            AnyInfo JB 索引项目
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.MapSheet.DirPath">
            <summary>
            基础文件夹
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.MapSheet.Envelope">
            <summary>
            作用范围
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.MapSheet.Scale">
            <summary>
            比例尺
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.MapSheet.MaxZoom">
            <summary>
            最大显示级数
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.MapSheet.MinZoom">
            <summary>
            最小显示级数
            </summary>
        </member>
        <member name="T:AnyInfo.Data.Njb.NewJbLayer">
            <summary>
            一个新军标图层，通常由点线面三个普通图层组成。
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.NewJbLayer.DescribeFile">
            <summary>
            描述性文件
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.NewJbLayer.LayerType">
            <summary>
            图层类型
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.NewJbLayer.MetaDataFile">
            <summary>
            元数据描述性文件（多个图层【Map】可共享）
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.NewJbLayer.GeoFile">
            <summary>
            几何文件
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.NewJbLayer.SxFile">
            <summary>
            属性文件
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.NewJbLayer.AnnotationFile">
            <summary>
            注记文件（只有注记类型的才有）
            </summary>
        </member>
        <member name="T:AnyInfo.Data.Njb.NewJbLayerAdapter">
            <summary>
            AnyInfo Layer and Njb Layer 适配器
            </summary>
        </member>
        <member name="M:AnyInfo.Data.Njb.NewJbLayerAdapter.GetAnyInfoLayers(AnyInfo.Data.Njb.NewJbLayer)">
            <summary>
            一个new jb 图层，对应 3 个AnyInfo 图层。
            </summary>
            <param name="njbLayer"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.NewJbLayerAdapter.CreateLayer(System.String,AnyInfo.Features.SimpleFeatureType,System.Collections.Generic.Dictionary{System.String,AnyInfo.Features.SimpleFeature},Geo.Coordinates.IEnvelope)">
            <summary>
            创建 AnyInfo Layer。
            </summary>
            <param name="layerName"></param>
            <param name="featureType"></param>
            <param name="featureDic"></param>
            <param name="envelope"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.NewJbLayerAdapter.BuildFeatureType(AnyInfo.Geometries.GeometryType,AnyInfo.Data.Njb.Entity.NjbLayerType,System.Int32)">
            <summary>
            Create Feature type.
            </summary>
            <param name="layerType"></param>
            <param name="njbLayerType"></param>
            <param name="cellCount"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Data.Njb.NewJbMapReader">
            <summary>
            读取器。
            </summary>
        </member>
        <member name="M:AnyInfo.Data.Njb.NewJbMapReader.#ctor(System.String)">
            <summary>
            初始化之后读取元数据描述文件。
            </summary>
            <param name="baseDir"></param>
        </member>
        <member name="P:AnyInfo.Data.Njb.NewJbMapReader.IsReadGeoOnly">
            <summary>
            只读取几何文件，默认不读。
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.NewJbMapReader.IsReadAllLayers">
            <summary>
            是否读取所有的图层，默认为真。
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.NewJbMapReader.IsTransBj54ToWGS84">
            <summary>
            是否转换到WGS84坐标系，默认为真。
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.NewJbMapReader.VisibleLayerDic">
            <summary>
            图层是否可见列表。默认都为可见。
            </summary>
        </member>
        <member name="P:AnyInfo.Data.Njb.NewJbMapReader.MapName">
            <summary>
            地图名称
            </summary>
        </member>
        <member name="M:AnyInfo.Data.Njb.NewJbMapReader.ReadNjbLayers">
            <summary>
            读取JB图层，并转换为 AnyInfo 图层。
            </summary> 
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.NewJbMapReader.ReadGeoFiles">
            <summary>
            读取所有几何文件，只读取几何文件可以加快显示速度，
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.NewJbMapReader.ReadGeoFile(System.String)">
            <summary>
            读取指定的几何文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Njb.NewJbMapReader.ReadLayer(AnyInfo.Data.Njb.Entity.FileName,AnyInfo.Data.Njb.Entity.MetaDataFile,System.Boolean)">
            <summary>
            读取单个图层
            </summary>
            <param name="describeFileName">当前图层的描述性文件</param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Data.Njb.NewJbStyleSetter">
            <summary>
            设置
            </summary>
        </member>
        <member name="M:AnyInfo.Data.Njb.NewJbStyleSetter.GetLayerVisable(AnyInfo.Geometries.GeometryType,AnyInfo.Data.Njb.Entity.NjbLayerType)">
            <summary>
            设置图层显示规则，避免显示过多而卡死
            </summary>
            <param name="geoType"></param>
            <param name="layerType"></param>
        </member>
        <member name="M:AnyInfo.Data.ShapeFileDataStore.#ctor(System.String)">
            <summary>
            指定资源路径。
            默认以 SimpleIndexing建立空间索引。
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:AnyInfo.Data.ShapeFileDataStore.#ctor(System.String,AnyInfo.Indexings.IIndexing{AnyInfo.Indexings.FeatureItem})">
            <summary>
            指定资源路径，并指定选用的空间索引。
            </summary>
            <param name="filePath"></param>
            <param name="indexing"></param>
        </member>
        <member name="P:AnyInfo.Data.ShapeFlie.Entity.ShapFileRecord.ContentLength">
            <summary>
            16bit为单位
            </summary>
        </member>
        <member name="M:AnyInfo.Data.ShapeFlie.Entity.ShapeFileHeader.readHeader(System.String)">
            <summary>
            Reads and parses the header of the .shp index file
            </summary>
            <remarks>
            From ESRI ShapeFile Technical Description document
            
            http://www.esri.com/library/whitepapers/pdfs/shapefile.pdf
            
            Byte
            Position    Field           Value       Type    Order
            -----------------------------------------------------
            Byte 0      File Code       9994        Integer Big
            Byte 4      Unused          0           Integer Big
            Byte 8      Unused          0           Integer Big
            Byte 12     Unused          0           Integer Big
            Byte 16     Unused          0           Integer Big
            Byte 20     Unused          0           Integer Big
            Byte 24     File Length     File Length Integer Big
            Byte 28     Version         1000        Integer Little
            Byte 32     Shape Type      Shape Type  Integer Little
            Byte 36     Bounding Box    Xmin        Double  Little
            Byte 44     Bounding Box    Ymin        Double  Little
            Byte 52     Bounding Box    Xmax        Double  Little
            Byte 60     Bounding Box    Ymax        Double  Little
            Byte 68*    Bounding Box    Zmin        Double  Little
            Byte 76*    Bounding Box    Zmax        Double  Little
            Byte 84*    Bounding Box    Mmin        Double  Little
            Byte 92*    Bounding Box    Mmax        Double  Little
            
            * Unused, with value 0.0, if not Measured or Z type
            
            The "Integer" type corresponds to the CLS Int32 type, and "Double" to CLS Double (IEEE 754).
            </remarks>
        </member>
        <member name="T:AnyInfo.Data.ShapeFlie.ShapeFileException">
            <summary>
            自定义一个Exception类。
            </summary>
        </member>
        <member name="T:AnyInfo.Data.ShapeFlie.ShapeFileReader">
            <summary>
            读取ShapeFile文件。没有经过严格测试，尚不能保证读取的正确性。
            By CZS V 0.1 2010.05.14
            </summary>
        </member>
        <member name="M:AnyInfo.Data.ShapeFlie.ShapeFileReader.readIndexRecords(System.String)">
            <summary>
            读取索引文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Data.Wkt.WktReader">
            <summary>
            WKT 文档解析器。
            适用于二维坐标。
            </summary>
        </member>
        <member name="M:AnyInfo.Data.Wkt.WktReader.ParsePoint(System.String)">
            <summary>
            解析点， POINT (20 10)
            </summary>
            <param name="ptstr">待解析字符串</param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Wkt.WktReader.ParseLineString(System.String)">
            <summary>
            解析线 LINESTRING (0 0, 1 2, 3 4)
            </summary>
            <param name="inputStr">待解析字符串</param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Wkt.WktReader.ParsePolygon(System.String)">
            <summary>
            解析面 Polygon ((0 0, 1 2, 3 4),(1 0, 2 2, 7 4))
            </summary>
            <param name="inputStr">待解析字符串</param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Wkt.WktReader.ParseMultiPoint(System.String)">
            <summary>
            多点，点集合 MULTIPOINT(3.5 5.6, 4.8 10.5)
            </summary>
            <param name="inputStr">待解析字符串</param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Wkt.WktReader.ParseMultiLineString(System.String)">
            <summary>
            解析线集合 MULTILINESTRING((3 4,10 50,20 25),(-5 -8,-10 -8,-15 -4))
            </summary>
            <param name="inputStr">待解析字符串</param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Wkt.WktReader.ParseMultiPolygon(System.String)">
            <summary>
            解析面集合 MULTIPOLYGON(((1 1,5 1,5 5,1 5,1 1),(2 2,2 3,3 3,3 2,2 2)),((6 3,9 2,9 4,6 3)))
            </summary>
            <param name="inputStr">待解析字符串</param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Wkt.WktReader.ParseLineStrings(System.String)">
            <summary>
            将 WKT 数据区文本，如 (1 1,5 1,5 5,1 5,1 1),(2 2,2 3,3 3,3 2,2 2) 解析为 LineString 列表。
            </summary>
            <param name="wktData"> WKT 数据区文本</param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Wkt.WktReader.RemoveOuterBraket(System.String)">
            <summary>
            获取WKT的坐标区域的文本。如“LINESTRING (0 0, 1 2, 3 4)”，返回“0 0, 1 2, 3 4”。
            即去掉了“LINESTRING ()”，前面的文字和最外层括号
            </summary>
            <param name="wktString">待解析字符串</param>
            <returns>若没有括号，直接返回空。</returns>
        </member>
        <member name="M:AnyInfo.Data.Wkt.WktReader.ParseLineStringCoords(System.String)">
             <summary>
            解析一个WTK形式的坐标字符串为 LineString ，如：“2 2,2 3,3 3,3 2,2 2”。
             </summary>
             <param name="str">待解析字符串</param>
             <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Wkt.WktReader.ParseCoords(System.String)">
            <summary>
            解析一个WTK形式的坐标字符串，如：“2 2,2 3,3 3,3 2,2 2”。
            </summary>
            <param name="str">待解析字符串</param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Wkt.WktReader.ParseCoord(System.String)">
            <summary>
            解析一个WTK形式的坐标字符串，“20 25”
            </summary>
            <param name="cstr">待解析字符串</param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Wkt.WktReader.SplitByBlankSpace(System.String)">
            <summary>
            以空格分开
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Wkt.WktReader.GetBraketCoordsStr(System.String)">
            <summary>
            获取第一个括号内的内容。
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Wkt.WktReader.GetBraketCoordsStrs(System.String)">
            <summary>
            获取最里层括号内的内容，不含括号，返回数组。每个子括号返回一个字符串，与嵌套无关。如：
            ((1 1,5 1,5 5,1 5,1 1),(2 2,2 3,3 3,3 2,2 2)),((6 3,9 2,9 4,6 3))
            返回字符串数组（仅数字部分）{{1 1,5 1,5 5,1 5,1 1},{2 2,2 3,3 3,3 2,2 2},{6 3,9 2,9 4,6 3}}
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Wkt.WktReader.GetDoubleBraketCoordsStrs(System.String)">
            <summary>
            提取双小括号内的内容,含双括号。
            ((1 1,5 1,5 5,1 5,1 1),(2 2,2 3,3 3,3 2,2 2)),((6 3,9 2,9 4,6 3))
            返回字符串数组：{{((1 1,5 1,5 5,1 5,1 1),(2 2,2 3,3 3,3 2,2 2))},{((6 3,9 2,9 4,6 3))}}
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Data.Google.GoogleMapLayer">
            <summary>
            Draw Google Map
            </summary>
        </member>
        <member name="M:AnyInfo.Data.Google.GoogleMapLayer.DrawTile(AnyInfo.Map,System.Drawing.Graphics)">
            <summary>
            Draw Google Map
            </summary>
            <param name="map"></param>
            <param name="gc"></param>
        </member>
        <member name="M:AnyInfo.Data.Google.GoogleMapLayer.GetImageAttributes">
            <summary>
            图片属性，用于透明设置。
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Data.Google.Tile">
            <summary>
            地图瓦片。
            </summary>
        </member>
        <member name="M:AnyInfo.Data.Google.Tile.GetTileImage">
            <summary>
            Get the map tile image.
            If the image exist in the local absDirectory, return it directly; 
            if not downloads it form the google maps site, and generate one tile image for reutning.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Data.Google.Tile.DownloadFromGoogle">
            <summary>
            下载，包括重新下载不完整的数据。
            </summary>
        </member>
        <member name="T:AnyInfo.Features.Feature">
            <summary>
            Feature 天生具有三个属性：Geometry，Stylt和Id。
            其中 Id 为AnyInfo内部标识与Attribute中的Id不想关。
            此处规定这三个属性不再存在于Attribute中，以免引起胡乱。
            2012.08.22
            </summary>
        </member>
        <member name="M:AnyInfo.Features.Feature.ChangeFeatureType(AnyInfo.Features.SimpleFeatureType)">
            <summary>
            Change the feature type and set the attributes.
            </summary>
            <param name="newFeatureType"></param>
        </member>
        <member name="P:AnyInfo.Features.Feature.Visited">
            <summary>
            一个标识
            </summary>
        </member>
        <member name="P:AnyInfo.Features.Feature.Attributes">
            <summary>
            属性列表,本系统中默认包含ID和Name属性
            </summary>
        </member>
        <member name="T:AnyInfo.Features.FeatureCollection`2">
            <summary>
            元素集合。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="F"></typeparam>
        </member>
        <member name="M:AnyInfo.Features.FeatureCollection`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AnyInfo.Features.FeatureCollection`2.#ctor(`0)">
            <summary>
            构造函数
            </summary>
            <param name="schema"></param>
        </member>
        <member name="M:AnyInfo.Features.FeatureCollection`2.#ctor(`0,System.Collections.Generic.Dictionary{System.String,`1})">
            <summary>
            构造函数
            </summary>
            <param name="schema"></param>
            <param name="featureDic"></param>
        </member>
        <member name="M:AnyInfo.Features.FeatureCollection`2.#ctor(`0,System.Collections.Generic.List{`1})">
            <summary>
            集合
            </summary>
            <param name="schema"></param>
            <param name="featureList"></param>
        </member>
        <member name="M:AnyInfo.Features.FeatureCollection`2.ChangeFeatureType(`0)">
            <summary>
            Set new FeatureType, set the feature property fitting to the scheam.
            this can just noly change the geometry.
            </summary>
            <param name="newFeatureType"></param>
        </member>
        <member name="M:AnyInfo.Features.FeatureCollection`2.GetCoordCount">
            <summary>
            获取集合中包含的坐标数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Features.FeatureCollection`2.AddRange(AnyInfo.Features.FeatureCollection{`0,`1})">
            <summary>
            合并两个FeaturesCollection
            </summary>
            <param name="featureCollection"></param>
        </member>
        <member name="M:AnyInfo.Features.FeatureCollection`2.Add(`1)">
            <summary>
            添加到集合中，推荐用法。只能采用这种方法添加！
            </summary>
            <param name="f"></param>
        </member>
        <member name="P:AnyInfo.Features.FeatureCollection`2.FeatureList">
            <summary>
            列表形式返回。
            </summary>
        </member>
        <member name="M:AnyInfo.Features.FeatureCollection`2.FindFeaturesByAttributeName(System.String)">
            <summary>
            通过一个名词，便利属性和名称进行查找。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Features.FeatureCollection`2.GetFeatures(AnyInfo.Geometries.Point,System.Double)">
            <summary>
            包含或与该点相交的Feature集合。
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Features.FeatureCollection`2.GetFeatures(System.Collections.Generic.List{AnyInfo.Indexings.FeatureItem})">
            <summary>
            提取适合指定检索的Feature。
            </summary>
            <param name="filtedIndexing"></param>
            <returns></returns>
        </member>
        <member name="P:AnyInfo.Features.FeatureCollection`2.Schema">
            <summary>
            FeattureType
            </summary>
        </member>
        <member name="P:AnyInfo.Features.FeatureCollection`2.Item(System.String)">
            <summary>
            通过Id快速索引。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Features.FeatureCollection`2.GetDataTable">
            <summary>
            获取用于显示 Featue 属性的 DataTable。
            此处把 Id 也显示出，而Geometry 和 Style 则不。
            2013.04.17.09.06：如果是点图层，也显示出其 X Y Z 坐标值，供数据交换。
            </summary>
        </member>
        <member name="M:AnyInfo.Features.FeatureCollection`2.GetEnumerator">
            <summary>
            用于遍历
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Features.FeatureCollection`2.Remove(System.String)">
            <summary>
            通过Id删除。
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:AnyInfo.Features.FeatureCollection`2.Remove(System.Int32)">
            <summary>
            通过顺序号删除。
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AnyInfo.Features.FeatureCollection`2.Clear">
            <summary>
            移除所有元素
            </summary>
        </member>
        <member name="M:AnyInfo.Features.FeatureCollection`2.ContainsId(System.String)">
            <summary>
            是否包含指定Id元素
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Features.FeatureSource`2">
            <summary>
            元素数据源与 FeatureCollection 的最大区别在于，其具有空间索引。
            the information contained in the file itself(lots of little features).
            Feature source is very similar to the geotools featureCollection  the different is in memory and  external source, read only and changable.
            </summary>
        </member>
        <member name="M:AnyInfo.Features.FeatureSource`2.#ctor">
            <summary>
            提供一个实例化方法，但我们并不建议你这么做。
            你需要设置FeatureCollection， Bounds，还要建立空间索引Indexing。
            </summary>
        </member>
        <member name="M:AnyInfo.Features.FeatureSource`2.#ctor(AnyInfo.Features.FeatureCollection{`0,`1})">
            <summary>
            自动提取 Envelope bounds 和建立索引。
            </summary>
            <param name="featureCollection"></param>
        </member>
        <member name="M:AnyInfo.Features.FeatureSource`2.#ctor(AnyInfo.Features.FeatureCollection{`0,`1},Geo.Coordinates.IEnvelope)">
            <summary>
            空间元素数据源。
            </summary>
            <param name="featureCollection"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:AnyInfo.Features.FeatureSource`2.#ctor(AnyInfo.Features.FeatureCollection{`0,`1},Geo.Coordinates.Envelope,AnyInfo.Indexings.IIndexing{AnyInfo.Indexings.FeatureItem})">
            <summary>
            空间元素数据源。
            </summary>
            <param name="featureCollection"></param>
            <param name="bounds"></param>
            <param name="indexing"></param>
        </member>
        <member name="M:AnyInfo.Features.FeatureSource`2.SetBounds(AnyInfo.Features.FeatureCollection{`0,`1})">
            <summary>
            自动提取边界
            </summary>
            <param name="featureCollection"></param>
        </member>
        <member name="M:AnyInfo.Features.FeatureSource`2.SelectNearstFeature(Geo.Coordinates.XY)">
            <summary>
             选择距离当前点最近的一个 SimpleFeature。
            </summary>
            <param name="xy"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Features.FeatureSource`2.SelectNearstFeature(Geo.Coordinates.Envelope)">
            <summary>
            选择
            </summary>
            <param name="en"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Features.FeatureSource`2.SelectNearstFeature(Geo.Coordinates.LonLat,System.Double)">
            <summary>
            选择
            </summary>
            <param name="xy"></param>
            <param name="minDegreeError"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Features.FeatureSource`2.SelectNearstFeature(Geo.Coordinates.XY,System.Double)">
            <summary>
            选择距离当前点最近的一个 SimpleFeature。
            </summary>
            <param name="xy"></param>
            <param name="minDegreeError"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Features.FeatureSource`2.SelectNearstFeature(Geo.Coordinates.Envelope,System.Double)">
            <summary>
            选择
            </summary>
            <param name="en"></param>
            <param name="minDegreeError"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Features.FeatureSource`2.SelectNearstFeature(Geo.Coordinates.Envelope,System.Double,System.Double)">
            <summary>
            选择
            </summary>
            <param name="en"></param>
            <param name="minWDegreeError"></param>
            <param name="minHDegreeError"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Features.FeatureSource`2.GetFeatures(Geo.Coordinates.IEnvelope)">
            <summary>
            获取过滤后的元素。
            </summary>
            <param name="viewPort"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Features.FeatureSource`2.BuildIndexing">
            <summary>
            建立索引，必须要有Bound和featureCollection
            </summary>
        </member>
        <member name="M:AnyInfo.Features.FeatureSource`2.RenameFeatureIdWithNumer">
            <summary>
            按照数字顺序重命名 Feature Id.
            </summary>
        </member>
        <member name="T:AnyInfo.Features.FeatureType">
            <summary>
            对 Feature 进行定义或约束。
            </summary>
        </member>
        <member name="M:AnyInfo.Features.FeatureType.GetFeatureNameIndex">
            <summary>
            failed if -1
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Features.FeatureType.GetFeatureIdIndex">
            <summary>
            failed if -1
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Features.SimpleFeatureBuilder.AddAttribute(System.Object)">
            <summary>
            添加属性。自动判断几何属性与样式属性，注意该两种属性只能添加一次，否则，后添加的会取代前面添加的。
            其它属性认为是显示属性。
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:AnyInfo.Features.SimpleFeatureBuilder.AddAttribute(System.String,System.Object)">
            <summary>
            对应的名称和值。如果有 ID 和 Name 将自动设置。
            </summary>
            <param name="attributeName"></param>
            <param name="obj"></param>
        </member>
        <member name="M:AnyInfo.Features.SimpleFeatureBuilder.QuickBuild(AnyInfo.Features.SimpleFeatureType,AnyInfo.Geometries.Geometry,AnyInfo.Styles.Style,System.String,System.String)">
            <summary>
            用于新建图层，先搞定几何对象。
            </summary>
            <param name="geom"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Features.SimpleFeatureTypeBuilder.AddAttributeType(System.String,System.Type)">
            <summary>
            添加 Feature 属性。注意，空间属性与样式属性只能添加一次。其他属性请依次添加。
            </summary>
            <param name="title"></param>
            <param name="type"></param>
        </member>
        <member name="M:AnyInfo.Features.SimpleFeatureTypeBuilder.SetTypeName(System.String)">
            <summary>
            set type name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:AnyInfo.Features.SimpleFeatureTypeFactory.GetNewFeatureType(AnyInfo.Geometries.GeometryType)">
            <summary>
            根据制定类型，创建新的FeatureType，只支持 Point，LineString和Polygon三种。
            </summary>
            <param name="geoType"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Features.SimpleFeatureTypeFactory.GetNewFeatureType(System.Type,System.Type)">
            <summary>
            创建一个新的最简单的FeatureType。或者这个函数需要搬家。
            </summary>
            <param name="geomType"></param>
            <param name="styleType"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Features.Types.TitledTypeUnit">
            <summary>
            具有title和类型的对象。
            </summary>
        </member>
        <member name="P:AnyInfo.Geometries.Geometry.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:AnyInfo.Geometries.Geometry.Visited">
            <summary>
            一个标识
            </summary>
        </member>
        <member name="P:AnyInfo.Geometries.IGeometry.Name">
            <summary>
            为了试验方便，每个添加一个名称。
            2013.03.26.11.30
            </summary>
        </member>
        <member name="P:AnyInfo.Geometries.IGeometry.GeometryType">
            <summary>
            快速判断类型。
            </summary>
        </member>
        <member name="M:AnyInfo.Geometries.IGeometry.GetCoordinates">
            <summary>
            用于快速对坐标进行计算。
            </summary>
        </member>
        <member name="M:AnyInfo.Geometries.IGeometry.GetCoordCount">
            <summary>
            获取坐标数量。
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Geometries.LineString">
            <summary>
            线对象
            </summary>
        </member>
        <member name="M:AnyInfo.Geometries.LineString.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:AnyInfo.Geometries.LineString.#ctor(Geo.Coordinates.IEnvelope)">
            <summary>
            以盒子初始化
            </summary>
            <param name="box"></param>
        </member>
        <member name="M:AnyInfo.Geometries.LineString.#ctor(System.Collections.Generic.List{Geo.Coordinates.XYZ},System.String)">
            <summary>
            自动提取最小Box，最为通用，但是会影响执行效率。
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:AnyInfo.Geometries.LineString.Amalgamation(AnyInfo.Geometries.LineString)">
            <summary>
            线条合并。
            与另一条线条做加权平均，返回合并后的线条。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Geometries.LineString.Insert(Geo.Coordinates.XYZ)">
            <summary>
            插入一个点。点在队列中相邻两点间。
            如果在线段外则连接上。
            </summary>
            <param name="coord"></param>
        </member>
        <member name="M:AnyInfo.Geometries.LineString.IsInBuffer(AnyInfo.Geometries.LineString,System.Double)">
            <summary>
            计算两个 LineString 是否在指定的阈值内平行，或任意最大距离是否超过该阈值。
            </summary>
            <param name="other"></param>
            <returns></returns>       
        </member>
        <member name="M:AnyInfo.Geometries.LineString.GetNearstCoord(Geo.Coordinates.XYZ)">
            <summary>
            获取输入坐标在此线条上的垂点。
            </summary>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Geometries.LineString.ToWtk">
            <summary>
            "LINESTRING (113.63282 34.731411999999999,113.62808800000001 34.731341)";
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Geometries.LineString.GetLength">
            <summary>
            长度。单位度。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Geometries.LineString.GetApproxLength_Meter">
            <summary>
            大致长度，直线最准。单位米。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Geometries.LineString.Split(AnyInfo.Geometries.LineString)">
            <summary>
            返回带下表的截断坐标。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Geometries.LineString.Split(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            如果传入的线段与此LineString相交则打断，返回打断的结果(2个LS)，如果不相交则返回空List。
            </summary>
            <param name="coordA"></param>
            <param name="coordB"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Geometries.LineString.GetSplitCoord(Geo.Coordinates.XYZ,Geo.Coordinates.XYZ)">
            <summary>
            返回其相交点。Tag 是后一个下标，也就是它应该插入的位置。
            </summary>
            <param name="coordA"></param>
            <param name="coordB"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Geometries.LineString.Integrate(AnyInfo.Geometries.LineString)">
            <summary>
            简单融合两条线。直接返回节点多的线段。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Geometries.LineString.IsSameLine(AnyInfo.Geometries.LineString,System.Double)">
            <summary>
            比较两条线的点是否在指定的阈值内。
            </summary>
            <param name="other"></param>
            <param name="limenDeg"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Geometries.LineString.Transform(Geo.Coordinates.ICoordTransformer)">
            <summary>
            坐标转换
            </summary>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="P:AnyInfo.Geometries.LineString.GeometryType">
            <summary>
            几何对象类型。
            </summary>
        </member>
        <member name="M:AnyInfo.Geometries.LineString.GetLineSegments">
            <summary>
            返回所有线段。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Geometries.LineString.GetLinesInBox(Geo.Coordinates.IEnvelope)">
            <summary>
            在框内的线段部分,可能分割为多条线段,主要用于绘制。
            </summary>
            <param name="box">将显示的盒子</param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Geometries.MultiLineString.Transform(Geo.Coordinates.ICoordTransformer)">
            <summary>
            坐标转换
            </summary>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Geometries.MultiPoint.Transform(Geo.Coordinates.ICoordTransformer)">
            <summary>
            坐标转换
            </summary>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Geometries.MultiPolygon.Transform(Geo.Coordinates.ICoordTransformer)">
            <summary>
            坐标转换
            </summary>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Geometries.Point">
            <summary>
            点
            </summary>
        </member>
        <member name="M:AnyInfo.Geometries.Point.#ctor">
            <summary>
            默认构造函数。
            </summary>
        </member>
        <member name="M:AnyInfo.Geometries.Point.#ctor(Geo.Coordinates.GeoCoord,System.String,System.String)">
            <summary>
            创建一个实例。
            </summary>
            <param name="coord"></param>
            <param name="id"></param>
            <param name="name"></param>
        </member>
        <member name="M:AnyInfo.Geometries.Point.Amalgamation(AnyInfo.Geometries.Point)">
            <summary>
            点的融合。加权平均。
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:AnyInfo.Geometries.Point.DistanceSimple(AnyInfo.Geometries.Point)">
            <summary>
            返回X,Y最大的绝对值。
            </summary>
            <param name="pt1"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Geometries.Point.Distance(AnyInfo.Geometries.Point,AnyInfo.Geometries.Point)">
            <summary>
            与线段的距离。
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Geometries.Point.Transform(Geo.Coordinates.ICoordTransformer)">
            <summary>
            坐标转换
            </summary>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Geometries.Point.GetPoints(System.Collections.Generic.List{Geo.Coordinates.XYZ})">
            <summary>
            从中解析
            </summary>
            <param name="xyzs"></param>
            <returns></returns>
        </member>
        <member name="P:AnyInfo.Geometries.Polygon.Count">
            <summary>
            LineStrng Count
            </summary>
        </member>
        <member name="M:AnyInfo.Geometries.Polygon.Contains(Geo.Coordinates.XYZ)">
            <summary>
            多边形内是否包含此点。
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Geometries.Polygon.IsOdd(System.Int32)">
            <summary>
            判读是否为奇数
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Geometries.Polygon.Transform(Geo.Coordinates.ICoordTransformer)">
            <summary>
            坐标转换
            </summary>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Geometries.Triangle">
            <summary>
            三角形
            </summary>
        </member>
        <member name="T:AnyInfo.Graphs.Build.DirectedEdgesToGraphBuilder">
            <summary>
            图的建立。有两种建立模式，其一为以 Edge 开始建立，其二为以Node建立。
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Build.DirectedEdgesToGraphBuilder.EmergeNodesWithEdges(System.Collections.Generic.List{AnyInfo.Graphs.Structure.IDirectedEdge})">
             <summary>
            Emerge the nodes of edges.
             </summary>
        </member>
        <member name="T:AnyInfo.Graphs.Build.DirectedGraphGenerator">
            <summary>
            由路网图层产生图。
            路网是一段一段的路径LineString，它们具有ID。
            而LineString的坐标，刚开始时时没有ID的。因此给他们设定一个相同的ID。
            
            节点Point的ID不同，而图节点Node的ID必须唯一。怎么解决呢？
            
            
            The Graph generator that generate a graph from a line layer.
            The layer must meet the following conditions:
            1. completely line features;
            2. no isolate lines.
            
            The difference of the GraphGenerator and GraphBuilder is that GraphGenerator is on a higher hiberarchy that directly deel with layers, 
            while GraphBuilder deal with line feature.
            </summary> 
        </member>
        <member name="F:AnyInfo.Graphs.Build.DirectedGraphGenerator.mergedCoordPointDic">
            <summary>
            用户存储坐标。Key为所有的坐标，Key对应的value 为与其在指定限差内的的坐标。
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Build.DirectedGraphGenerator.Add(AnyInfo.Features.SimpleFeature)">
            <summary>
            Add line feature.
            </summary>
            <param name="lineFeature"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Build.DirectedGraphGenerator.Add(AnyInfo.Geometries.LineString)">
            <summary>
            添加一个 LineString，添加两个节点。
            利用已经建立的节点对应字典，判断这条边是否与其他边共点。
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Build.DirectedGraphGenerator.MergeCoords(AnyInfo.Layer)">
            <summary>
            将所有的LineString 的 起始点 Coordinate 比较，建立一个映射字典。
            </summary>
            <param name="roadsLayer"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Build.DirectedGraphGenerator.MergeOneCoord(Geo.Coordinates.XYZ)">
            <summary>
            建立节点映射表。
            检查是否距离在指定的限差内，如果是则合并到Key中，Value为与其大致相等的第一次出现的选定的唯一的坐标；如果不合任何一个接近，则自建一个Key和Value，等待别人来。
            检查一个坐标，如果与某一坐标接近，则合并，否则另立门户。    
            </summary>
            <param name="coord"></param>
        </member>
        <member name="T:AnyInfo.Graphs.Build.DirectedGraphLayerHelper">
            <summary>
            帮助
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Build.DirectedGraphLayerHelper.GetIdDictionary(System.Collections.Generic.Dictionary{System.Int32,AnyInfo.Geometries.Point},System.Double)">
            <summary>
            得到ID对应表。
            </summary>
            <param name="pointsDic"></param>
            <param name="maxThreshold_deg"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Build.DirectedGraphLayerHelper.GetAllPoints(AnyInfo.Layer)">
            <summary>
            将所有的LineString 的 Coordinate转换为 Point 端点，收集到 List 中。Point 赋予了新ID。
            </summary>
            <param name="roadsLayer"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Build.DirectedGraphLayerHelper.AddLineString2Points(System.Collections.Generic.Dictionary{System.String,AnyInfo.Geometries.Point},AnyInfo.Geometries.LineString)">
            <summary>
            将 LineString 两个端点的坐标变成Point。
            </summary>
            <param name="pointsDic"></param>
            <param name="ls"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Build.DirectedGraphLayerHelper.GetGraphNodesPointLayer(AnyInfo.Graphs.Structure.Graph,AnyInfo.Layer)">
            <summary>
            Graph to point layer,这是路径的起始点和目标点数据源。
            </summary>
            <param name="graph"></param>
            <param name="pathLayer"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Build.DirectedGraphLayerHelper.GetGraphFeatureCollection(AnyInfo.Graphs.Structure.DirectedGraph,AnyInfo.Layer)">
            <summary>
            Graph to LineString feature data
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Build.DirectedGraphLayerHelper.GraphToLayer(AnyInfo.Graphs.Structure.DirectedGraph,AnyInfo.Layer)">
            <summary>
            graph to layer
            </summary>
            <param name="graph"></param>
            <param name="pathLayer"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Build.DirectedGraphLayerHelper.GetRouteLayer(AnyInfo.Graphs.Pathes.DirectedPath,AnyInfo.Layer,System.Int32)">
            <summary>
            Path to layer
            </summary>
            <param name="path"></param>
            <param name="pathLayer"></param>
            <param name="pathNo"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Build.DirectedGraphLayerHelper.AdjustEdgeLineString(AnyInfo.Graphs.Structure.IDirectedEdge,AnyInfo.Geometries.LineString@)">
            <summary>
            if the start or end point is not the same as its node, then add or insert the node point to the point list of LineString.
            </summary>
            <param name="e"></param>
            <param name="lineString"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Build.DirectedGraphLayerHelper.GetRouteFeatureCollection(AnyInfo.Graphs.Pathes.DirectedPath,AnyInfo.Layer)">
            <summary>
            route path to feature data
            </summary>
            <param name="path"></param>
            <param name="pathLayer"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Build.DirectedGraphLayerHelper.ObjectedGraphToPointsFeatureCollection(AnyInfo.Graphs.Structure.Graph)">
            <summary>
            Generate point feature data form a graph.
            the point is node position.
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Graphs.Build.EdgesToGraphBuilder">
            <summary>
            图的建立。有两种建立模式，其一为以 Edge 开始建立，其二为以Node建立。
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Build.EdgesToGraphBuilder.#ctor">
            <summary>
            默认构造函数
            </summary>      
        </member>
        <member name="M:AnyInfo.Graphs.Build.EdgesToGraphBuilder.#ctor(AnyInfo.Graphs.Structure.IEdge[])">
            <summary>
            构造函数
            </summary>
            <param name="edges"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Build.EdgesToGraphBuilder.Build">
            <summary>
            构建
            </summary>
            <returns></returns>
        </member>
        <member name="P:AnyInfo.Graphs.Build.EdgesToGraphBuilder.Edges">
            <summary>
            边
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Build.EdgesToGraphBuilder.SetNodesWithEdges(System.Collections.Generic.List{AnyInfo.Graphs.Structure.IEdge})">
            <summary>
            将图中的边和顶点收集到图的集合中。将多余的点去掉。本部分应该属于由空间点创建图的内容。
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Build.EdgesToGraphBuilder.AddEdge(AnyInfo.Graphs.Structure.Edge)">
            <summary>
            添加一条边
            </summary>
            <param name="edge"></param>
        </member>
        <member name="T:AnyInfo.Graphs.Build.GraphGenerator">
            <summary>
            比 builder 高一个层次。
            </summary>
        </member>
        <member name="T:AnyInfo.Graphs.Build.LineGraphGenerator">
            <summary>
            由路网图层产生图。
            路网是一段一段的路径LineString，它们具有ID。
            而LineString的坐标，刚开始时时没有ID的。因此给他们设定一个相同的ID。
            
            节点Point的ID不同，而图节点Node的ID必须唯一。怎么解决呢？
            
            
            The Graph generator that generate a graph from a line layer.
            The layer must meet the following conditions:
            1. completely line features;
            2. no isolate lines.
            
            The difference of the GraphGenerator and GraphBuilder is that GraphGenerator is on a higher hiberarchy that directly deel with layers, 
            while GraphBuilder deal with line feature.
            </summary> 
        </member>
        <member name="F:AnyInfo.Graphs.Build.LineGraphGenerator.mergedCoordPointDic">
            <summary>
            用户存储坐标。Key为所有的坐标，Key对应的value 为与其在指定限差内的的坐标。
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Build.LineGraphGenerator.Add(AnyInfo.Features.SimpleFeature)">
            <summary>
            Add line feature.
            </summary>
            <param name="lineFeature"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Build.LineGraphGenerator.Add(AnyInfo.Geometries.LineString)">
            <summary>
            添加一个 LineString，添加两个节点。需要判断这条边是否与其他边共点。
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Build.LineGraphGenerator.MergeCoords(AnyInfo.Layer)">
            <summary>
            将所有的LineString 的 Coordinate 比较，建立一个映射字典。
            </summary>
            <param name="roadsLayer"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Build.LineGraphGenerator.MergeOneCoord(Geo.Coordinates.XYZ)">
            <summary>
            检查一个坐标，如果与某一坐标接近，则合并，否则另立门户。
            </summary>
            <param name="coord"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Build.LineGraphGenerator.GetLayerGraph(AnyInfo.Layer,System.Double)">
            <summary>
            路网图层转换为图。
            静态方法，方便调用。
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Graphs.Build.NodesToGraphBuilder">
            <summary>
            图的建立,以Node建立。
            </summary>
        </member>
        <member name="F:AnyInfo.Graphs.Build.NodesToGraphBuilder.idDic">
            <summary>
            多个Point点合并为一个Point后，建立一个合并Id字典，适用于由地图Point获取Graph Node，其中Key为合并后的ID，value为合并前的多个Id。
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Build.NodesToGraphBuilder.SyncNodes">
            <summary>
            将图中的边和顶点收集到图的集合中。将多余的点去掉。本部分应该属于由空间点创建图的内容。
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Build.NodesToGraphBuilder.AddNode(AnyInfo.Graphs.Structure.Node)">
            <summary>
            添加节点。
            只添加节点和该节点上的边，而不添加边的另一端节点。
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Build.BuildTopoFilesForm.BuildAndSaveTopoFiles(AnyInfo.Layer,System.String,System.String,System.String)">
            <summary>
            建立拓扑文件的同时需要建立一个节点图层和一个路网图层，这两个图层分别和连通图相对应。
            Buid topology files for Path finding witch tree files will be created, 
            one of witch is for topologic graph,
            one of witch is a points layer according to the graph nodes,
            the last one is a mifPath layer according to the graph edges.
            </summary>
            <param name="pathLayer"></param>
            <param name="saveDir"></param>
            <param name="topoDir"></param>
            <param name="newLayerName"></param>
        </member>
        <member name="F:AnyInfo.Graphs.Build.BuildTopoFilesForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Build.BuildTopoFilesForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.Graphs.Build.BuildTopoFilesForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:AnyInfo.Graphs.Build.EditPathInfoForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Build.EditPathInfoForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.Graphs.Build.EditPathInfoForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:AnyInfo.Graphs.Build.EditPathInfoForm1.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Build.EditPathInfoForm1.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.Graphs.Build.EditPathInfoForm1.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.DynamicInfos.PointInfoLayer.GenColoredRoadLayers(AnyInfo.Layer,System.Collections.Generic.List{AnyInfo.Graphs.DynamicInfos.PointInfo},System.Double)">
            <summary>
            按照速度分级，提取不同颜色的图层。
            </summary>
            <param name="pathLayer"></param>
            <param name="pointInfos"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.DynamicInfos.PointInfoLayer.GenGreenPathLayer(AnyInfo.Layer,System.Collections.Generic.List{AnyInfo.Graphs.DynamicInfos.PointInfo},System.Double)">
            <summary>
            交通通畅的图层
            </summary>
            <param name="pointInfos"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.DynamicInfos.PointInfoLayer.GenRedPathLayer(AnyInfo.Layer,System.Collections.Generic.List{AnyInfo.Graphs.DynamicInfos.PointInfo},System.Double)">
            <summary>
            交通拥挤的图层
            </summary>
            <param name="pathLayer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.DynamicInfos.PointInfoLayer.GenPointsLayer(System.Collections.Generic.List{AnyInfo.Graphs.DynamicInfos.PointInfo})">
            <summary>
            浮动车的位置图层
            </summary>
            <param name="pointInfos"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Graphs.DynamicInfos.CarSpeedRank">
            <summary>
            通畅度
            </summary>
        </member>
        <member name="F:AnyInfo.Graphs.DynamicInfos.ImportDynamicInfoForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.DynamicInfos.ImportDynamicInfoForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.Graphs.DynamicInfos.ImportDynamicInfoForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:AnyInfo.Graphs.Delaunay">
            <summary>
            Delaunay 三角函数生成器。
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Delaunay.#ctor(System.Collections.Generic.List{AnyInfo.Geometries.Point})">
            <summary>
            以XYZ列表初始化。
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Delaunay.GetGraph">
            <summary>
            获取图。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Delaunay.GetLineStrings">
            <summary>
            获取线对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Delaunay.GetTriangles">
            <summary>
            获取三角形。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Delaunay.GetTriEdges">
            <summary>
            获取三角形的边对象。
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Graphs.Triangle">
            <summary>
            三角形。
            </summary>
        </member>
        <member name="T:AnyInfo.Graphs.TriPoint">
            <summary>
            三角点。
            </summary>
        </member>
        <member name="T:AnyInfo.Graphs.TriEdge">
            <summary>
            三角边。
            </summary>
        </member>
        <member name="T:AnyInfo.Graphs.GraphLayerFactory">
            <summary>
            图层工厂
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.GraphLayerFactory.CreateMinCostPanTreeLayer(AnyInfo.Layer,System.Boolean)">
            <summary>
            由点图层，创建最小生成树图层。
            </summary>
            <param name="ptLayer"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.GraphLayerFactory.GetLineStrings(AnyInfo.Graphs.Structure.TreeNode)">
            <summary>
            将树转换成可以绘制的线。
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.GraphLayerFactory.GetIdDictionary(System.Collections.Generic.Dictionary{System.String,AnyInfo.Geometries.Point},System.Double)">
            <summary>
            得到ID对应表。
            </summary>
            <param name="pointsDic"></param>
            <param name="maxThreshold_deg"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.GraphLayerFactory.GetAllPoints(AnyInfo.Layer)">
            <summary>
            将所有的LineString 的 Coordinate转换为 Point 端点，收集到 List 中。Point 赋予了新ID。
            </summary>
            <param name="roadsLayer"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.GraphLayerFactory.AddLineString2Points(System.Collections.Generic.Dictionary{System.String,AnyInfo.Geometries.Point},AnyInfo.Geometries.LineString)">
            <summary>
            将 LineString 两个端点的坐标变成Point。
            </summary>
            <param name="pointsDic"></param>
            <param name="ls"></param>
        </member>
        <member name="M:AnyInfo.Graphs.GraphLayerFactory.GetGraphNodesPointLayer(AnyInfo.Graphs.Structure.Graph,AnyInfo.Layer)">
            <summary>
            Graph to point layer,这是路径的起始点和目标点数据源。
            </summary>
            <param name="graph"></param>
            <param name="pathLayer"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.GraphLayerFactory.GetGraphFeatureCollection(AnyInfo.Graphs.Structure.Graph,AnyInfo.Layer)">
            <summary>
            Graph to LineString feature data
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.GraphLayerFactory.GraphToLayer(AnyInfo.Graphs.Structure.Graph,AnyInfo.Layer)">
            <summary>
            graph to layer
            </summary>
            <param name="graph"></param>
            <param name="pathLayer"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.GraphLayerFactory.GetRouteLayer(AnyInfo.Graphs.Pathes.Path,AnyInfo.Layer,System.Int32)">
            <summary>
            Path to layer
            </summary>
            <param name="path"></param>
            <param name="pathLayer"></param>
            <param name="pathNo"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.GraphLayerFactory.AdjustEdgeLineString(AnyInfo.Graphs.Structure.Edge,AnyInfo.Geometries.LineString@)">
            <summary>
            if the start or end point is not the same as its node, then add or insert the node point to the point list of LineString.
            </summary>
            <param name="e"></param>
            <param name="lineString"></param>
        </member>
        <member name="M:AnyInfo.Graphs.GraphLayerFactory.GetRouteFeatureCollection(AnyInfo.Graphs.Pathes.Path,AnyInfo.Layer)">
            <summary>
            route path to feature data
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.GraphLayerFactory.ObjectedGraphToPointsFeatureCollection(AnyInfo.Graphs.Structure.Graph)">
            <summary>
            Generate point feature data form a graph.
            the point is node position.
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.GraphLayerFactory.CreateDelaunayTriangleLineLayer(System.Collections.Generic.List{AnyInfo.Geometries.Point})">
            <summary>
            Delaunay 三角网。
            </summary>
            <param name="lonlats"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.GraphLayerFactory.CreateDelaunayTriangleLineLayer(AnyInfo.Layer)">
            <summary>
            由点图层生成三角网。
            </summary>
            <param name="ptLayer"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Graphs.MinCostTreeType">
            <summary>
            算法类型
            </summary>
        </member>
        <member name="F:AnyInfo.Graphs.MinCostTreeType.Kruskal">
            <summary>
            克鲁斯卡尔算法
            </summary>
        </member>
        <member name="F:AnyInfo.Graphs.MinCostTreeType.Prim">
            <summary>
            普利姆算法
            </summary>
        </member>
        <member name="T:AnyInfo.Graphs.MinCostSpanTreeBuilder">
            <summary>
              计算最小生成树。
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.MinCostSpanTreeBuilder.#ctor(AnyInfo.Graphs.Structure.Graph,AnyInfo.Graphs.ISimpleEdgeWeighter,AnyInfo.Graphs.MinCostTreeType)">
            <summary>
            初始化。
            </summary>
            <param name="graph">图，必须有点，边可忽略（由赋权对象决定）。</param>
            <param name="edgeWeighter"></param>
            <param name="minCostTreeType"></param>
        </member>
        <member name="P:AnyInfo.Graphs.MinCostSpanTreeBuilder.EdgeWeighter">
            <summary>
            边赋权
            </summary>
        </member>
        <member name="P:AnyInfo.Graphs.MinCostSpanTreeBuilder.MinCostTreeType">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:AnyInfo.Graphs.MinCostSpanTreeBuilder.Graph">
            <summary>
            图
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.MinCostSpanTreeBuilder.Build">
            <summary>
            构造
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.MinCostSpanTreeBuilder.GetMinCostSpanTree_Kruskal">
            <summary>
            最小生成树。
            克鲁斯卡尔算法
            方法:将图中边按其权值由小到大的次序顺序选取,
            若选边后不形成回路,则保留作为一条边,
            若形成回路则除去.依次选够(n-1)条边,即得最小生成树.(n为顶点数)
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.MinCostSpanTreeBuilder.GetMinCostSpanTree_Prim">
            <summary>
            普利姆算法。算法复杂度为O(n^2),与边无关，适用于稠密边的图。
            每次在图中找一条代价最小的边。
            这个实现方法有些费时间。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.MinCostSpanTreeBuilder.FindRemainNearstNode(AnyInfo.Graphs.Structure.INode,System.Collections.Generic.List{AnyInfo.Graphs.Structure.INode})">
            <summary>
            查找剩余的离本节点最近的点。
            </summary>
            <param name="start"></param>
            <param name="findedNodes"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.MinCostSpanTreeBuilder.GetNearstRoad">
            <summary>
             图的遍历，任意选择一个点，每次找一条离改点最近的点，
             如此类推，符合人类只看眼前利益的逻辑，展现的是不做规划的人生，有多个沟壑与劫难，其实大多数人的人生轨迹都是这样的。
             算法描述：  
             找个节点开始，遍历图中每个节点，找出离自己最近的节点，并记录，再以此节点开始继续查找，以此类推，最后找完。
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Graphs.Pathes.DijkstraShortestPathFinder">
            <summary>
            迪杰斯特拉最短路径算法的实现。
            Dijkstra shortes path method.
            先让起始点为节点。
            @version 2010.10.12
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DijkstraShortestPathFinder.#ctor(AnyInfo.Graphs.Structure.Graph,System.String,AnyInfo.Graphs.IEdgeWeighter)">
            <summary>
            Dijkstra shortest path finder.
            </summary> 
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DijkstraShortestPathFinder.NotVisitdedCount">
            <summary>
            统计有多少个孤立点。
            正常情况下，应该等于节点总数，但是图可能有孤立点，此时不等。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DijkstraShortestPathFinder.GetPath(System.String)">
            <summary>
            返回路径
            </summary>
            <param name="destId"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DijkstraShortestPathFinder.IdsToNodes(System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DijkstraShortestPathFinder.GetCenterNodes(System.String)">
            <summary>
            得到源点到节点中间的节点。
            </summary>
            <param name="destId"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DijkstraShortestPathFinder.Calculate(AnyInfo.Graphs.Structure.INode)">
            <summary>
            Calculate.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DijkstraShortestPathFinder.Calculate">
            <summary>
            计算源点到所有点的最优路径。
            应该包括2个步骤：
            1、查找；2、更新、3、再查找更新
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DijkstraShortestPathFinder.Update(System.Double,AnyInfo.Graphs.Structure.INode)">
            <summary>
            更新当前最短路径及距离
            </summary>
            <param name="min"></param>
            <param name="now"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DijkstraShortestPathFinder.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DijkstraShortestPathFinder.GetWeight(AnyInfo.Graphs.Structure.INode)">
            <summary>
            源点到该点权值。
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DijkstraShortestPathFinder.GetWeight(AnyInfo.Graphs.Structure.INode,AnyInfo.Graphs.Structure.INode)">
            <summary>
            直接获取两个节点的权。可能为无穷大。
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Graphs.Pathes.DirectedAStarShortestPathFinder">
            <summary>
            A * 最短路径算法的实现。
            只要估值函数满足相容性条件（不高于到终点的距离），且有最优路径，那么A*算法总能找到最优路径。
            并且对于任何给定的启发函数都是效率最优的,即查找的节点数量也是最少的。
            A*的缺点是，随着图的变大，A*的内存消耗成指数级增长，直到消耗完所有内存。
            因此使用本法要控制图的大小。注：其它的改进方法有 存储限制的启发式搜索等。
            参见 ： 【美】Stuart Russell，Peter Norvig著， 姜哲，金奕江，张敏等译.《人工智能—一种现代方法（第二版）》.北京：人民邮电出版社，2010， P78-83
            2011-06-23 。
            </summary>
        </member>
        <member name="P:AnyInfo.Graphs.Pathes.DirectedAStarShortestPathFinder.SourceNodeId">
            <summary>
            出发点 ID
            </summary>
        </member>
        <member name="P:AnyInfo.Graphs.Pathes.DirectedAStarShortestPathFinder.TargetNodeId">
            <summary>
            目标点 ID
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedAStarShortestPathFinder.#ctor(AnyInfo.Graphs.Structure.DirectedGraph,System.String,AnyInfo.Graphs.IEdgeWeighter)">
            <summary>
            Dijkstra shortest path finder.
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedAStarShortestPathFinder.NotVisitdedCount">
            <summary>
            统计有多少个孤立点。
            正常情况下，应该等于节点总数，但是图可能有孤立点，此时不等。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedAStarShortestPathFinder.GetPath(System.String)">
            <summary>
            返回路径
            </summary>
            <param name="destId"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedAStarShortestPathFinder.GetCenterNodes(System.String)">
            <summary>
            得到源点到节点中间的节点。
            </summary>
            <param name="destId"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedAStarShortestPathFinder.Calculate">
            <summary>
            计算源点到所有点的最优路径。
            应该包括2个步骤：
            1、查找；2、更新、3、再查找更新
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedAStarShortestPathFinder.FindAndUpdate(System.Collections.Generic.List{AnyInfo.Graphs.Structure.IDirectedNode})">
            <summary>
            查找最短路径。
            采用以源点为中心，向外扩张的方法。
            每扩张一次，找到一条最短路径。一共需要 n-1 次。
            </summary>
            <param name="nexts"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedAStarShortestPathFinder.Update(AnyInfo.Graphs.Structure.IDirectedNode)">
            <summary>
            更新以当前节点（已经找到最短）为跳板的节点距离
            </summary> 
            <param name="now">该节点</param>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedAStarShortestPathFinder.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedAStarShortestPathFinder.GetWeight(AnyInfo.Graphs.Structure.IDirectedNode,AnyInfo.Graphs.Structure.IDirectedNode)">
            <summary>
            直接获取两个节点的权。可能为无穷大。
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Graphs.Pathes.DirectedDijkstraShortestPathFinder">
            <summary>
            迪杰斯特拉最短路径算法的实现。
            Dijkstra shortes path method.
            先让起始点为节点。
            @version beginning 2010.10.12
            2011-06-23 优化 效率提高 60 倍。原算法参照《数据结构》严蔚敏P189，新算法利用了面向对象特性，逐次向外扩张的方法。
            </summary>
        </member>
        <member name="P:AnyInfo.Graphs.Pathes.DirectedDijkstraShortestPathFinder.SourceNodeId">
            <summary>
            出发点 ID
            </summary>
        </member>
        <member name="P:AnyInfo.Graphs.Pathes.DirectedDijkstraShortestPathFinder.TargetNodeId">
            <summary>
            目标点 ID
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedDijkstraShortestPathFinder.#ctor(AnyInfo.Graphs.Structure.DirectedGraph,System.String,AnyInfo.Graphs.IEdgeWeighter)">
            <summary>
            Dijkstra shortest path finder.
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedDijkstraShortestPathFinder.NotVisitdedCount">
            <summary>
            统计有多少个孤立点。
            正常情况下，应该等于节点总数，但是图可能有孤立点，此时不等。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedDijkstraShortestPathFinder.GetPath(System.String)">
            <summary>
            返回路径
            </summary>
            <param name="destId"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedDijkstraShortestPathFinder.IdsToNodes(System.Collections.Generic.List{System.String})">
            <summary>
            destId
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedDijkstraShortestPathFinder.GetCenterNodes(System.String)">
            <summary>
            得到源点到节点中间的节点。
            </summary>
            <param name="destId"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedDijkstraShortestPathFinder.Calculate">
            <summary>
            计算源点到所有点的最优路径。
            应该包括2个步骤：
            1、查找；2、更新、3、再查找更新
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedDijkstraShortestPathFinder.FindAndUpdate(System.Collections.Generic.List{AnyInfo.Graphs.Structure.IDirectedNode})">
            <summary>
            查找最短路径。
            采用以源点为中心，向外扩张的方法。
            每扩张一次，找到一条最短路径。一共需要 n-1 次。
            </summary>
            <param name="nexts"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedDijkstraShortestPathFinder.Update(System.Double,AnyInfo.Graphs.Structure.IDirectedNode)">
            <summary>
            更新以当前节点（已经找到最短）为跳板的节点距离
            </summary>
            <param name="min">该节点与出发点的最短距离</param>
            <param name="now">该节点</param>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedDijkstraShortestPathFinder.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedDijkstraShortestPathFinder.GetWeight(AnyInfo.Graphs.Structure.IDirectedNode,AnyInfo.Graphs.Structure.IDirectedNode)">
            <summary>
            直接获取两个节点的权。可能为无穷大。
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Graphs.Pathes.DirectedDijkstraShortestPathFinderClasic">
            <summary>
            迪杰斯特拉最短路径算法的实现。
            Dijkstra shortes path method.
            先让起始点为节点。
            @version beginning 2010.10.12 参照《数据结构》严蔚敏P189
            </summary>
        </member>
        <member name="P:AnyInfo.Graphs.Pathes.DirectedDijkstraShortestPathFinderClasic.SourceNodeId">
            <summary>
            出发点 ID
            </summary>
        </member>
        <member name="P:AnyInfo.Graphs.Pathes.DirectedDijkstraShortestPathFinderClasic.TargetNodeId">
            <summary>
            目标点 ID
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedDijkstraShortestPathFinderClasic.#ctor(AnyInfo.Graphs.Structure.DirectedGraph,System.String,AnyInfo.Graphs.IEdgeWeighter)">
            <summary>
            Dijkstra shortest path finder.
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedDijkstraShortestPathFinderClasic.NotVisitdedCount">
            <summary>
            统计有多少个孤立点。
            正常情况下，应该等于节点总数，但是图可能有孤立点，此时不等。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedDijkstraShortestPathFinderClasic.GetPath(System.String)">
            <summary>
            返回路径
            </summary>
            <param name="destId"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedDijkstraShortestPathFinderClasic.GetCenterNodes(System.String)">
            <summary>
            得到源点到节点中间的节点。
            </summary>
            <param name="destId"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedDijkstraShortestPathFinderClasic.Calculate">
            <summary>
            计算源点到所有点的最优路径。
            应该包括2个步骤：
            1、查找；2、更新、3、再查找更新
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedDijkstraShortestPathFinderClasic.Update(System.Double,AnyInfo.Graphs.Structure.IDirectedNode)">
            <summary>
            更新以当前节点（已经找到最短）为跳板的节点距离
            </summary>
            <param name="min">该节点与出发点的最短距离</param>
            <param name="now">该节点</param>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedDijkstraShortestPathFinderClasic.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedDijkstraShortestPathFinderClasic.GetWeight(AnyInfo.Graphs.Structure.IDirectedNode,AnyInfo.Graphs.Structure.IDirectedNode)">
            <summary>
            直接获取两个节点的权。可能为无穷大。
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedEdgeWeighter.GetWeight(AnyInfo.Graphs.Structure.IEdge)">
            <summary>
            权越小，走该路的可能性越大。
            </summary>
            <param name="e1"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.DirectedEdgeWeighter.GetApproxMinWeight(AnyInfo.Graphs.Structure.INode,AnyInfo.Graphs.Structure.INode)">
            <summary>
            获取两点的直线距离。
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Graphs.Pathes.PathFinder">
            <summary>
            A adpter class for Find the shortest mifPath.
            The main function of this class is to bind one roads layer, nodes layer and the graph that 
            change the coordinate into node id, then call the dijkstra mifPath finder to find one,
            at last change the mifPath nodes into a mifPath layer and add it to the map for showing.
            This class do not answer for building topology files, but only to find and show the shortest mifPath.
            
            One mifPath layer one Pathfinder.
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.PathFinder.BuildGraph">
            <summary>
            重新读入拓扑文件，并设置图Graph。
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.PathFinder.SetSourse(System.Drawing.Point)">
            <summary>
            Set the sourse node for mifPath finding.
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.PathFinder.SetDest(System.Drawing.Point)">
            <summary>
            Set the dest node for mifPath finding.
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Pathes.PathFinder.ClearPaths">
            <summary>
            Clear pathes on the map.
            </summary>
        </member>
        <member name="T:AnyInfo.Graphs.IEdgeWeighter">
            <summary>
            边 的权值提供者。
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.IEdgeWeighter.GetWeight(AnyInfo.Graphs.Structure.INode,AnyInfo.Graphs.Structure.INode,AnyInfo.Graphs.Structure.INode)">
            <summary>
            具有转向控制的。
            </summary>
            <param name="preSart"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.IEdgeWeighter.GetApproxMinWeight(AnyInfo.Graphs.Structure.INode,AnyInfo.Graphs.Structure.INode)">
            <summary>
            快速获取权值。如，若是道路节点，则直接计算其欧式距离。
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Graphs.ISimpleEdgeWeighter">
            <summary>
            简易边赋权
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.ISimpleEdgeWeighter.GetWeight(AnyInfo.Graphs.Structure.INode,AnyInfo.Graphs.Structure.INode)">
            <summary>
            获取权
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.ISimpleEdgeWeighter.GetWeight(AnyInfo.Graphs.Structure.IEdge)">
            <summary>
            获取权
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Graphs.AbstractSimpleEdgeWeighter">
            <summary>
            一个抽象实现
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.AbstractSimpleEdgeWeighter.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.AbstractSimpleEdgeWeighter.GetWeight(AnyInfo.Graphs.Structure.INode,AnyInfo.Graphs.Structure.INode)">
            <summary>
            获取权
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.AbstractSimpleEdgeWeighter.GetWeight(AnyInfo.Graphs.Structure.IEdge)">
            <summary>
            获取权
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedEdge.Reverse">
            Removes the edge from the out list of the in node and from the in list of
            the out node. Nodes are switched and then the edge is added to the in list
            of the new out node, and to the out list of the new in node.
            
            @see Edge#reverse()
            
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedEdge.Contains(AnyInfo.Graphs.Structure.Node)">
            <summary>
            是单独边否，是与其他边没有连通。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedEdge.GetReverseId">
            <summary>
            Return the reversed Id.
            </summary>
            <returns></returns>
        </member>
        <!-- 对于成员“T:AnyInfo.Graphs.Structure.DirectedGraph”忽略有格式错误的 XML 注释 -->
        <member name="M:AnyInfo.Graphs.Structure.DirectedGraph.#ctor(System.Collections.Generic.List{AnyInfo.Graphs.Structure.IDirectedNode},System.Collections.Generic.List{AnyInfo.Graphs.Structure.IDirectedEdge})">
            <summary>
            认为传经来的参数是检验过的。
            </summary>
            <param name="nodes"></param>
            <param name="edges"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedGraph.GetCrossingCount(System.Int32)">
            <summary>
            返回nodeDegree交叉口（或度，包括入度和出度）的总数量。
            </summary>
            <param name="nodeDegree"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedGraph.AddEdge(AnyInfo.Graphs.Structure.IDirectedEdge)">
            <summary>
            Add an edge,and merge its nodes.??????????????
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:AnyInfo.Graphs.Structure.DirectedGraph.IsIdGraph">
            <summary>
            指示是否只是通过ID与外界联系。
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedGraph.ContainsEdge(System.String)">
            <summary>
            构造
            </summary>
            <param name="edgeId"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedGraph.ContainsNode(System.String)">
            <summary>
            包含
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedGraph.GetNodeById(System.String)">
            <summary>
            节点
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedGraph.GetEdgeById(System.String)">
            <summary>
            边
            </summary>
            <param name="edgeId"></param>
            <returns></returns>
        </member>
        <member name="P:AnyInfo.Graphs.Structure.DirectedGraph.IsNodesVisited">
            <summary>
            是否已访问
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedGraph.SetNodesVisited(System.Boolean)">
            <summary>
            设置
            </summary>
            <param name="trueFalse"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedGraph.GetIsolatedNodesCount">
            <summary>
            统计有多少个孤立点。
            正常情况下，应该等于节点总数，但是图可能有孤立点，此时不等。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedGraph.GetIsolatedNodes">
            <summary>
            孤立点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedGraph.GetVisitedNodesCount">
            <summary>
            数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedGraph.TraversingDepthFirst(AnyInfo.Graphs.Structure.IDirectedNode)">
            <summary>
            Traversing Graph. Depth start.
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedGraph.RemoveNode(AnyInfo.Graphs.Structure.IDirectedNode)">
            <summary>
            Remove one node form the graph and its edges.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedGraph.RemoveEdge(AnyInfo.Graphs.Structure.IDirectedEdge)">
            <summary>
            Remove one edge and its nodes if they has only this edge.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedGraph.OptimizeForPathFinding">
            <summary>
            优化为路径规划。
            Removed isolated nodes and edges.
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedGraph.SaveToXml(System.String)">
            <summary>
            将连通图保存到XML文件
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedNode.#ctor">
            Constructs a new BasicDirectedNode.
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedNode.Add(AnyInfo.Graphs.Structure.IEdge)">
             Unsupported operation. Directed nodes classify edges as <B>in</B> and 
             <B>out</B>. addIn(Edge) and addOut(Edge) should be used instead of this
             method.
            
             @throws UnsupportedOperationException
              
             @see DirectedNode#addIn(DirectedEdge)
             @see DirectedNode#addOut(DirectedEdge)
             
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedNode.AddIn(AnyInfo.Graphs.Structure.IDirectedEdge)">
             Adds an edge to the <B>in</B> adjacency colName of the node which is an 
             underlying List implementation. No checking is done on the edge 
             (duplication, looping...), it is simply added to the colName. It is also
             assumed that the edge being added has the node as its out node.
            
             @see DirectedNode#addIn(DirectedEdge)  
             @see DirectedEdge#getOutNode()
            
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedNode.AddOut(AnyInfo.Graphs.Structure.IDirectedEdge)">
             Adds an edge to the <B>ou</B> adjacency colName of the node which is an 
             underlying List implementation. No checking is done on the edge 
             (duplication, looping...), it is simply added to the colName. It is also
             assumed that the edge being added has the node as its in node.
            
             @see DirectedNode#addOut(DirectedEdge)  
             @see DirectedEdge#getInNode()
            
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedNode.Remove(AnyInfo.Graphs.Structure.IEdge)">
            Removes the edge from both the in and out adjacency lists.
            
            @see Node#remove(Edge)
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedNode.GetEdge(AnyInfo.Graphs.Structure.INode)">
            First searches for an in edge with an out node == this, and in 
            node == other. If none is found an edge with out node == other, and in 
            node == this is searched for.
            
            @see Node#remove(Edge)
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedNode.GetInEdge(AnyInfo.Graphs.Structure.IDirectedNode)">
            @see DirectedNode#getInEdge(DirectedNode)
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedNode.GetOutEdge(AnyInfo.Graphs.Structure.IDirectedNode)">
            @see DirectedNode#getOutEdge(DirectedNode)
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedNode.GetEdges">
            Returns the combination of both the in and out adjacecy lists.
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedNode.GetEdges(AnyInfo.Graphs.Structure.IDirectedNode)">
            A combination of the results of getInEdges(Node) and getOutEdges(Node).
            
            @see Node#getEdges(Node)
            @see DirectedNode#getInEdges(DirectedNode)
            @see DirectedNode#getOutEdges(DirectedNode)
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedNode.GetInEdges(AnyInfo.Graphs.Structure.IDirectedNode)">
            @see DirectedNode#getInEdges(DirectedNode)
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedNode.GetOutEdges(AnyInfo.Graphs.Structure.IDirectedNode)">
            @see DirectedNode#getOutEdges(DirectedNode)
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedNode.GetDegree">
            Returns sum of sizes of in and out adjacency lists.
            
            @see Node#getDegree()
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedNode.GetInDegree">
            @see DirectedNode#getInDegree()
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedNode.GetOutDegree">
            @see DirectedNode#getOutDegree()
        </member>
        <member name="P:AnyInfo.Graphs.Structure.DirectedNode.MaxNodePointError_Degree">
            <summary>
            Get or set the max node distance error.
            if the distance of two nodes is within the MaxNodePointError_Degree, 
            the two nodes will regard as one node.
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedNode.GetOtherDirectedNodes">
            <summary>
            常常警告为无线循环。但一般都是调用这个函数的算法引起的。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.DirectedNode.Equals(System.Object)">
            <summary>
            To judge the two node if they are equal.
            if the distance of the two nodes is less than the max erro distance, they are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Graphs.Structure.Edge">
            <summary>
            无相边。两个点的顺序没有区别。默认为相等。
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Edge.#ctor(AnyInfo.Graphs.Structure.INode,AnyInfo.Graphs.Structure.INode)">
            <summary>
            构造函数
            </summary>
            <param name="nodeA"></param>
            <param name="nodeB"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Edge.#ctor(System.String,AnyInfo.Graphs.Structure.INode,AnyInfo.Graphs.Structure.INode)">
            <summary>
            构造函数
            </summary>
            <param name="id"></param>
            <param name="nodeA"></param>
            <param name="nodeB"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Edge.IsSingleEdge">
            <summary>
            是单独边否，是与其他边没有连通。
            </summary>
            <returns></returns>
        </member>
        <member name="P:AnyInfo.Graphs.Structure.Edge.NodeA">
            <summary>
            节点A
            </summary>
        </member>
        <member name="P:AnyInfo.Graphs.Structure.Edge.NodeB">
            <summary>
            节点B
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Edge.Reverse">
            <summary>
            反转节点
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Edge.GetOtherNode(AnyInfo.Graphs.Structure.INode)">
            <summary>
            提取另一个节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Edge.ContainsNode(AnyInfo.Graphs.Structure.INode)">
            <summary>
            是否包含另一个
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Edge.Contains(AnyInfo.Graphs.Structure.INode)">
            <summary>
            包含否
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Edge.Equals(System.Object)">
            <summary>
            判断是否相等。点没有方向比较。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Edge.GetHashCode">
            <summary>
            哈希数
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Edge.ToString">
            <summary>
            字符串
            </summary>
            <returns></returns>
        </member>
        <!-- 对于成员“T:AnyInfo.Graphs.Structure.Graph”忽略有格式错误的 XML 注释 -->
        <member name="M:AnyInfo.Graphs.Structure.Graph.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Graph.#ctor(System.Collections.Generic.List{AnyInfo.Graphs.Structure.INode},System.Collections.Generic.List{AnyInfo.Graphs.Structure.IEdge})">
            <summary>
            认为传经来的参数是检验过的。
            </summary>
            <param name="nodes"></param>
            <param name="edges"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Graph.#ctor(System.Collections.Generic.List{AnyInfo.Graphs.Structure.INode})">
            <summary>
            只有点的图。没有边。
            </summary>
            <param name="nodes1"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Graph.#ctor(System.Collections.Generic.IEnumerable{AnyInfo.Graphs.Structure.IEdge})">
            <summary>
            以边初始化
            </summary>
            <param name="edges"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Graph.#ctor(AnyInfo.Graphs.Structure.Tree)">
            <summary>
            以树初始化
            </summary>
            <param name="Tree"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Graph.SetAllVisited(System.Boolean)">
            <summary>
            所有边的访问情况。
            </summary>
            <param name="isVisited"></param>
        </member>
        <member name="P:AnyInfo.Graphs.Structure.Graph.IsIdGraph">
            <summary>
            指示是否只是通过ID与外界联系。
            </summary>
        </member>
        <member name="P:AnyInfo.Graphs.Structure.Graph.Edges">
            <summary>
            所有边
            </summary>
        </member>
        <member name="P:AnyInfo.Graphs.Structure.Graph.Nodes">
            <summary>
            所有节点
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Graph.GetAllTriConnectedPath(System.String,System.String)">
            <summary>
            获取所有三角连通路径
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Graph.GetAllTriConnectedPath(AnyInfo.Graphs.Structure.INode,AnyInfo.Graphs.Structure.INode)">
            <summary>
            获取所有路径
            </summary>
            <param name="fromNode"></param>
            <param name="toNode"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Graph.GetAllTriConnectedPath(System.Collections.Generic.List{AnyInfo.Graphs.Pathes.Path},AnyInfo.Graphs.Structure.INode,AnyInfo.Graphs.Structure.INode)">
            <summary>
            获取所有路径，第一和第二节点导弹的路径。
            </summary>
            <param name="result">结果</param>
            <param name="walkedPath">当前查找路径，找到后，添加到结果中</param>
            <param name="currentNode"></param>
            <param name="toNode">目标节点</param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Graph.GetAllConnectedPath(System.String,System.String)">
            <summary>
            获取所有连通路径
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Graph.GetAllConnectedPath(AnyInfo.Graphs.Structure.INode,AnyInfo.Graphs.Structure.INode)">
            <summary>
            获取所有路径
            </summary>
            <param name="fromNode"></param>
            <param name="toNode"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Graph.GetAllConnectedPath(System.Collections.Generic.List{AnyInfo.Graphs.Pathes.Path},AnyInfo.Graphs.Pathes.Path,AnyInfo.Graphs.Structure.INode,AnyInfo.Graphs.Structure.INode)">
            <summary>
            获取所有路径
            </summary>
            <param name="result">结果</param>
            <param name="walkedPath">当前查找路径，找到后，添加到结果中</param>
            <param name="currentNode"></param>
            <param name="toNode">目标节点</param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Graph.ContainsEdge(System.String)">
            <summary>
            是否包含边
            </summary>
            <param name="edgeId"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Graph.ContainsNode(System.String)">
            <summary>
            是否包含节点
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Graph.GetNodeById(System.String)">
            <summary>
            提取节点
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Graph.GetEdgeById(System.String)">
            <summary>
            提取边
            </summary>
            <param name="edgeId"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Graph.GetIsolatedNodesCount">
            <summary>
            统计有多少个孤立点。
            正常情况下，应该等于节点总数，但是图可能有孤立点，此时不等。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Graph.TraversingDepthFirst(AnyInfo.Graphs.Structure.INode)">
            <summary>
            Traversing Graph. Depth start.
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Graph.RemoveNode(AnyInfo.Graphs.Structure.INode)">
            <summary>
            Remove one node form the graph and its edges.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Graph.RemoveEdge(AnyInfo.Graphs.Structure.IEdge)">
            <summary>
            Remove one edge and its nodes if they has only this edge.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Graph.OptimizeForPathFinding">
            <summary>
            优化为路径规划。
            Removed isolated nodes and edges.
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Graph.SaveToXml(System.String)">
            <summary>
            将连通图保存到XML文件
            </summary>
            <param name="path"></param>
        </member>
        <member name="P:AnyInfo.Graphs.Structure.Graphable.Visited">
            <summary>
            标记是否被访问过。
            </summary>
        </member>
        <member name="P:AnyInfo.Graphs.Structure.Graphable.Distance">
            <summary>
            权。
            </summary>
        </member>
        <member name="P:AnyInfo.Graphs.Structure.Graphable.ReverseWeight">
            <summary>
            反向权。
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.IEdge.GetOtherNode(AnyInfo.Graphs.Structure.INode)">
            <summary>
            获取另一个点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Graphs.Structure.INode">
            <summary>
            节点
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.INode.GetOtherNodes">
            <summary>
            获取与此节点连同的其它节点
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Graphs.Structure.Node">
            <summary>
            节点
            </summary>
        </member>
        <member name="P:AnyInfo.Graphs.Structure.Node.MaxNodePointError_Degree">
            <summary>
            Get or set the max node distance error.
            if the distance of two nodes is within the MaxNodePointError_Degree, 
            the two nodes will regard as one node.
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Node.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Node.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Node.ToString">
            <summary>
            字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Node.GetEdges">
            Returns the edge adjacency colName of the node.
            
            @return A colName containing all edges that are adjacent to the node.
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Node.GetOtherNodes">
            <summary>
            常常警告为无线循环。但一般都是调用这个函数的算法引起的。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Node.GetDegree">
            Returns the degree of the node. The degree of a node is defined as the 
            number of edges that are adjacent to the node.
            
            @return int Degree of node.
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Node.Equals(System.Object)">
            <summary>
            To judge the two node if they are equal.
            if the distance of the two nodes is less than the max erro distance, they are equal.
            
            只比较 ID 。2010.11.10
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Node.GetHashCode">
            <summary>
            哈希数
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Graphs.Structure.Tree">
            <summary>
            树
            </summary>
        </member>
        <member name="P:AnyInfo.Graphs.Structure.Tree.RootNode">
            <summary>
            树根节点
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.Tree.GetEdges">
            <summary>
            获取所有边
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Graphs.Structure.TreeNode">
            <summary>
            树节点。
            </summary>
        </member>
        <member name="M:AnyInfo.Graphs.Structure.TreeNode.AddChild(AnyInfo.Graphs.Structure.TreeNode)">
            <summary>
            添加一个孩子，并认父。
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="T:AnyInfo.Indexings.FeatureItem">
            <summary>
            用于在空间索引中标记Feature。
            </summary>
        </member>
        <member name="M:AnyInfo.Indexings.FeatureItem.Equals(System.Object)">
            <summary>
            判断是否相等。本 Item 为值相等类型。
            数据读入第一次会循环使用本方法，因此效率很重要。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Indexings.Grid.GridIndexing`1">
            <summary>
            网格索引是将地图分为多个网格，然后建立索引的方法。
            网格索引的缺点是当被索引的图元对象是线，或者多边形的时候，存在索引的冗余，并且冗余可能相当大。
            网格大小怎么划分？
            网格建立几次？ 1 次。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AnyInfo.Indexings.Grid.GridIndexing`1.#ctor(Geo.Coordinates.IEnvelope)">
            <summary>
            构造函数。
            </summary>
            <param name="extent">待划分的区域</param>
        </member>
        <member name="M:AnyInfo.Indexings.Grid.GridIndexing`1.Add(`0)">
            <summary>
            将 BoxItem 存储到网网格中，可能有冗余数据，这是网格索引的缺陷。
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:AnyInfo.Indexings.Linear.LinearIndexing`1">
            <summary> 
            简单的线性遍历检索方法。
            将所有元素的Box存入列表，提取与屏幕Box相交的Box。
            Version: 1.0
            Auther: CZS 2010.05.17
            </summary>
        </member>
        <member name="M:AnyInfo.Indexings.Linear.LinearIndexing`1.Add(`0)">
            <summary>
            此处只是简单的相加，把所有子元素的Box都放进集合容器。
            </summary>
            <param name="unit"></param>
        </member>
        <member name="M:AnyInfo.Indexings.Linear.LinearIndexing`1.Filter(Geo.Coordinates.IEnvelope)">
            <summary>
            查询提取。返回与指定Box相交Box的集合。
            </summary>
            <param name="viewPort">指定Box</param>
            <returns>与指定Box相交元素的集合</returns>
        </member>
        <member name="T:AnyInfo.Indexings.QuadTrees.QuadTreeIndexing`1">
            <summary>
            A Quadtree is a structure designed to partition space so
            that it's faster to find out what is inside or outside a given 
            area. See http://en.wikipedia.org/wiki/Quadtree
            This QuadTree contains items that have an area (AnyInfo.Geom.Envelope)
            it will store a reference to the key in the quad 
            that is just big enough to hold it. Each quad has a bucket that 
            contain multiple items.
            </summary>
        </member>
        <member name="F:AnyInfo.Indexings.QuadTrees.QuadTreeIndexing`1.m_root">
            <summary>
            The root QuadTreeNode
            </summary>
        </member>
        <member name="F:AnyInfo.Indexings.QuadTrees.QuadTreeIndexing`1._boundingBox">
            <summary>
            The bounds of this QuadTree
            </summary>
        </member>
        <member name="M:AnyInfo.Indexings.QuadTrees.QuadTreeIndexing`1.#ctor(Geo.Coordinates.IEnvelope)">
            <summary>
            
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="P:AnyInfo.Indexings.QuadTrees.QuadTreeIndexing`1.Count">
            <summary>
            Get the count of items in the QuadTree
            </summary>
        </member>
        <member name="M:AnyInfo.Indexings.QuadTrees.QuadTreeIndexing`1.Add(`0)">
            <summary>
            Insert the feature into the QuadTree
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:AnyInfo.Indexings.QuadTrees.QuadTreeIndexing`1.Filter(Geo.Coordinates.IEnvelope)">
            <summary>
            Query the QuadTree, returning the items that are in the given area
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Indexings.QuadTrees.QuadTreeNode`1">
            <summary>
            The QuadTreeNode
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AnyInfo.Indexings.QuadTrees.QuadTreeNode`1.#ctor(Geo.Coordinates.IEnvelope)">
            <summary>
            Construct a quadtree node with the given bounds 
            </summary>
            <param name="area"></param>
        </member>
        <member name="F:AnyInfo.Indexings.QuadTrees.QuadTreeNode`1._bounds">
            <summary>
            The area of this node
            </summary>
        </member>
        <member name="F:AnyInfo.Indexings.QuadTrees.QuadTreeNode`1._contents">
            <summary>
            The contents of this node.
            Note that the contents have no limit: this is not the standard way to impement a QuadTree
            </summary>
        </member>
        <member name="F:AnyInfo.Indexings.QuadTrees.QuadTreeNode`1._nodes">
            <summary>
            The child nodes of the QuadTree
            </summary>
        </member>
        <member name="P:AnyInfo.Indexings.QuadTrees.QuadTreeNode`1.IsEmpty">
            <summary>
            Is the node empty
            </summary>
        </member>
        <member name="P:AnyInfo.Indexings.QuadTrees.QuadTreeNode`1.Bounds">
            <summary>
            Area of the quadtree node
            </summary>
        </member>
        <member name="P:AnyInfo.Indexings.QuadTrees.QuadTreeNode`1.Count">
            <summary>
            Total number of nodes in the this node and all SubNodes
            </summary>
        </member>
        <member name="P:AnyInfo.Indexings.QuadTrees.QuadTreeNode`1.SubTreeContents">
            <summary>
            Return the contents of this node and all subnodes in the true below this one.
            </summary>
        </member>
        <member name="P:AnyInfo.Indexings.QuadTrees.QuadTreeNode`1.Contents">
            <summary>
            内容
            </summary>
        </member>
        <!-- 对于成员“M:AnyInfo.Indexings.QuadTrees.QuadTreeNode`1.Query(Geo.Coordinates.IEnvelope)”忽略有格式错误的 XML 注释 -->
        <member name="M:AnyInfo.Indexings.QuadTrees.QuadTreeNode`1.Insert(`0)">
            <summary>
            Insert an key to this node
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:AnyInfo.Indexings.QuadTrees.QuadTreeNode`1.CreateSubNodes">
            <summary>
            Internal method to create the subnodes (partitions space)
            </summary>
        </member>
        <member name="T:AnyInfo.Indexings.Quad.QuadNode`1">
            <summary>
            属于改进的四叉树索引，即每个节点存储没有冗余。
            为目前主流大型空间数据库引擎如ArcSDE，Oracle Spatial等所采用。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AnyInfo.Indexings.Quad.QuadNode`1.#ctor(Geo.Coordinates.IEnvelope)">
            <summary>
            构造函数.需要一个Box初始化。
            </summary>
            <param name="box"></param>
        </member>
        <member name="M:AnyInfo.Indexings.Quad.QuadNode`1.Add(`0)">
            <summary>
            添加到树中。
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:AnyInfo.Indexings.Quad.QuadNode`1.Query(Geo.Coordinates.IEnvelope)">
            <summary>
            获取 Box 与 QueryArea 相交的元素集合。
            只是对 Box 进行了判断。没有考虑 Geometry 的形状。
            </summary>
            <param name="queryArea"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Indexings.Quad.QuadNode`1.GetSubTreeContents">
            <summary>
            迭代得到当前node的元素及其下所有元素。
            </summary>
            <returns></returns>
        </member>
        <member name="P:AnyInfo.Indexings.Quad.QuadNode`1.AllContentCount">
            <summary>
            元素总数量，包含子节点的所有元素数。
            </summary>
        </member>
        <member name="P:AnyInfo.Indexings.Quad.QuadNode`1.HasAnyContent">
            <summary>
            当前节点及其子节点是否包含有内容元素。
            </summary>
        </member>
        <member name="P:AnyInfo.Indexings.Quad.QuadNode`1.ContentCount">
            <summary>
            当前节点内容元素的数量。不含字节点。
            </summary>
        </member>
        <member name="P:AnyInfo.Indexings.Quad.QuadNode`1.Contents">
            <summary>
            当前节点包含的元素内容，不包含字节点的。
            </summary>
        </member>
        <member name="P:AnyInfo.Indexings.Quad.QuadNode`1.Depth">
            <summary>
            深度
            </summary>
        </member>
        <member name="M:AnyInfo.IMap.GetApproxGroundResolution_DegPerPiex">
            <summary>
            获取大致的地面分辨率,单位 度/像素
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Render.FeatureRender">
            <summary>
            元素绘制
            </summary>
        </member>
        <member name="M:AnyInfo.Render.FeatureRender.Draw(AnyInfo.Features.SimpleFeature)">
            <summary>
            绘制元素。
            </summary>
            <param name="feature">待绘制元素</param>
        </member>
        <member name="M:AnyInfo.Render.FeatureRender.DrawSelectedFeature(AnyInfo.Features.SimpleFeature,AnyInfo.Map,System.Drawing.Graphics)">
            <summary>
            绘制被选中的 Feature，为了醒目， 颜色为红色，并且要大一圈。
            </summary>
            <param name="feature">待绘制的元素</param>
            <param name="map">地图</param>
            <param name="g">绘图画面</param>
        </member>
        <member name="T:AnyInfo.Render.ImageMapRender">
            <summary>
            图像绘画。介于 PictureBox 和 Map 之间，即在界面层与数据层之间。
            </summary>
        </member>
        <member name="M:AnyInfo.Render.ImageMapRender.ZoomIn">
            <summary>
            中心动画冲击效果。
            </summary>
        </member>
        <member name="M:AnyInfo.Render.ImageMapRender.ZoomImageAtMouseLocation(System.Drawing.Point,System.Double)">
            <summary>
            放大或缩小图像，n>1则是放大，小于1是缩小。
            </summary>
            <param name="location"></param>
            <param name="n"></param> 
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Render.ImageMapRender.ExpandImage(System.Drawing.Point,System.Double,System.Drawing.Image)">
            <summary>
            在鼠标位置放缩地图。
            </summary>
            <param name="location"></param>
            <param name="n">=new/old</param>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Render.ImageMapRender.RoomInCenrerImage(System.Double)">
            <summary>
            Room in the image , the fixed position is its center.
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:AnyInfo.Render.ImageMapRender.DrawActiveMouseLine(System.Drawing.Image,Geo.Coordinates.LonLat,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            实时绘制鼠标与当前点的连线。
            包括移除上以鼠标点连线和绘制当前点的连线。要求实施刷新，操作的视觉效果才流畅。
            </summary>
            <param name="cleanMapImage">没有绘制</param>
            <param name="lastLonLat">连线的起始点，不可用屏幕坐标，因其会不稳定会改变</param>
            <param name="lastPt">上一连线点</param>
            <param name="thisPt">当前连线点</param>
        </member>
        <member name="M:AnyInfo.Render.ImageMapRender.DrawPolygon(AnyInfo.Geometries.Polygon)">
            <summary>
            绘制多边形
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Render.ImageMapRender.DrawAndGetSelectedFeatureInfo(System.Collections.Generic.List{AnyInfo.Features.SimpleFeature})">
            <summary>
            将所选的元素区别标识出来。一般为红色。
            </summary>
            <param name="fcList"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Render.ImageMapRender.GetSelectedFeatureInfo(System.Drawing.Point)">
            <summary>
             将所选的元素区别标识出来。一般为红色。
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Render.LabelRender">
            <summary>
            绘制文字标记。
            </summary>
        </member>
        <member name="M:AnyInfo.Render.LabelRender.#ctor(AnyInfo.Map,System.Drawing.Graphics)">
            <summary>
            构造
            </summary>
            <param name="map"></param>
            <param name="g"></param>
        </member>
        <member name="M:AnyInfo.Render.LabelRender.#ctor(AnyInfo.Map,System.Drawing.Graphics,AnyInfo.Styles.PointStyle)">
            <summary>
            构造
            </summary>
            <param name="map"></param>
            <param name="g"></param>
            <param name="style"></param>
        </member>
        <member name="M:AnyInfo.Render.LabelRender.Draw(AnyInfo.Geometries.Point,AnyInfo.Styles.LabelStyle)">
            <summary>
             画标签,标签 Feature 是个点 Feature 并且具有 LabelStyle 属性。
            </summary>
            <param name="pt"></param>
            <param name="labelStyle"></param>
        </member>
        <member name="P:AnyInfo.Render.LayerRender.labelPos">
            <summary>
            标签位置，主要功能为记录字体位置是否重复。
            </summary>
        </member>
        <member name="M:AnyInfo.Render.LayerRender.Draw(AnyInfo.Layer)">
            <summary>
            画图层，这个图层必须在某个Map内。
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:AnyInfo.Render.LayerRender.DrawLayer(AnyInfo.Layer,System.Drawing.Graphics,AnyInfo.Render.MapRender)">
            <summary>
             图层渲染
            </summary>
            <param name="layer"></param>
            <param name="g"></param>
        </member>
        <member name="M:AnyInfo.Render.DrawingLabelManager.GetAwailablePosition(Geo.Coordinates.XY,AnyInfo.Styles.LabelStyle)">
            <summary>
            寻找一个空白的写字的地方
            </summary>
            <param name="pos"></param>
            <param name="labelStyle"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Render.DrawingLabelManager.IsIntersect(Geo.Coordinates.Envelope)">
            <summary>
            是否和已有的字体冲突
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Render.DrawingLabelManager.GetEnvelope(Geo.Coordinates.XY,AnyInfo.Styles.LabelStyle)">
            <summary>
            计算字体的外框
            </summary>
            <param name="pos"></param>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Render.DrawingLabelManager.GetBiasInDegree">
            <summary>
            一个字体所占的度数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Render.LineStringRender.ShiftToBound(System.Double,System.Double,System.Double)">
            <summary>
            让数据不超过边界
            </summary>
            <param name="val">数据值</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Render.MapRender">
            <summary>
            地图渲染工具类
            </summary>
        </member>
        <member name="M:AnyInfo.Render.MapRender.#ctor">
            <summary>
            地图渲染
            </summary>
        </member>
        <member name="M:AnyInfo.Render.MapRender.#ctor(System.Drawing.Graphics,AnyInfo.Map)">
            <summary>
            地图渲染
            </summary>
            <param name="g"></param>
            <param name="map"></param>
        </member>
        <member name="M:AnyInfo.Render.MapRender.SetRenderParams(System.Drawing.Graphics,AnyInfo.Map)">
            <summary>
            地图渲染
            </summary>
            <param name="g"></param>
            <param name="map"></param>
        </member>
        <member name="M:AnyInfo.Render.MapRender.SetRenderParams(System.Drawing.Graphics,AnyInfo.Map,Geo.Coordinates.IEnvelope)">
            <summary>
            地图渲染
            </summary>
            <param name="gc"></param>
            <param name="map"></param>
            <param name="viewPort"></param>
        </member>
        <member name="M:AnyInfo.Render.MapRender.DrawMap">
            <summary>
            地图渲染
            </summary>
        </member>
        <member name="M:AnyInfo.Render.MapRender.DrawScaleBar">
            <summary>
            画比例尺
            </summary>
        </member>
        <member name="M:AnyInfo.Render.MapRender.DrawNorthArrow">
            <summary>
            画指北针
            </summary>
        </member>
        <member name="M:AnyInfo.Render.MapRender.DrawPositionedImages">
            <summary>
            在指定位置画图片。
            </summary>
        </member>
        <member name="M:AnyInfo.Render.MapRender.DrawTempPositionedImages">
            <summary>
            画临时位置图片。
            </summary>
        </member>
        <member name="M:AnyInfo.Render.MapRender.DrawEnvelops">
            <summary>
            在屏幕上画矩形,指示图层区域。
            </summary>
        </member>
        <member name="T:AnyInfo.Render.PointRender">
            <summary>
            绘制点。
            此类还大有发展前途。2010.11.09
            2013.03.09.19.16，506机房。 做了部分修改，将以前的静态函数，以及Pen等参数，该成了直接由style控制。但是点的显示还是较为单一。以后有时间再改吧。
            </summary>
        </member>
        <member name="F:AnyInfo.Render.PointRender.pen">
            <summary>
            笔
            </summary>
        </member>
        <member name="F:AnyInfo.Render.PointRender.map">
            <summary>
            地图
            </summary>
        </member>
        <member name="F:AnyInfo.Render.PointRender.g">
            <summary>
            gc
            </summary>
        </member>
        <member name="F:AnyInfo.Render.PointRender.style">
            <summary>
            样式
            </summary>
        </member>
        <member name="M:AnyInfo.Render.PointRender.#ctor(AnyInfo.Map,System.Drawing.Graphics)">
            <summary>
            绘制
            </summary>
            <param name="map"></param>
            <param name="g"></param>
        </member>
        <member name="M:AnyInfo.Render.PointRender.#ctor(AnyInfo.Map,System.Drawing.Graphics,AnyInfo.Styles.PointStyle)">
            <summary>
            绘制
            </summary>
            <param name="map"></param>
            <param name="g"></param>
            <param name="style"></param>
        </member>
        <member name="M:AnyInfo.Render.PointRender.SetStyle(AnyInfo.Styles.IStyle)">
            <summary>
            样式
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:AnyInfo.Render.PointRender.Draw(AnyInfo.Geometries.IGeometry)">
            <summary>
            绘制
            </summary>
            <param name="geo"></param>
        </member>
        <member name="M:AnyInfo.Render.PointRender.Draw(AnyInfo.Geometries.Geometry,AnyInfo.Styles.Style)">
            <summary>
            绘制
            </summary>
            <param name="geo"></param>
            <param name="style"></param>
        </member>
        <member name="M:AnyInfo.Render.PointRender.Draw(AnyInfo.Geometries.Point,AnyInfo.Styles.PointStyle)">
            <summary>
            绘制
            </summary>
            <param name="pt"></param>
            <param name="style"></param>
        </member>
        <member name="M:AnyInfo.Render.PointRender.Draw(AnyInfo.Geometries.Point)">
            <summary>
            绘制
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:AnyInfo.Render.PointRender.DrawTrueTypeSimbolTest(AnyInfo.IMap,System.Drawing.Graphics)">
            <summary>
            绘制
            </summary>
            <param name="map"></param>
            <param name="gc"></param>
        </member>
        <member name="M:AnyInfo.Render.PointRender.DrawTrueTypeSimbol(AnyInfo.Geometries.Point,AnyInfo.Styles.TrueTypeStyle,AnyInfo.IMap,System.Drawing.Graphics)">
            <summary>
            画字体标志
            </summary>
            <param name="pt"></param>
            <param name="labelStyle"></param>
            <param name="map"></param>
            <param name="gc"></param>
        </member>
        <member name="M:AnyInfo.Render.PointRender.DrawSimbol(AnyInfo.Geometries.Point,AnyInfo.Styles.ImageStyle,AnyInfo.IMap,System.Drawing.Graphics)">
            <summary>
            画符号
            </summary>
            <param name="simbolStyle"></param>
            <param name="pt"></param>
            <param name="map"></param>
            <param name="gc"></param>
        </member>
        <member name="T:AnyInfo.Render.PositionedImage">
            <summary>
            带坐标的图片。用于在地图上显示图片。
            </summary>
        </member>
        <member name="T:AnyInfo.NameChangedHandler">
            <summary>
            名称改变委托
            </summary>
            <param name="newName"></param>
        </member>
        <member name="T:AnyInfo.LayerType">
            <summary>
            图层类型
            </summary>
        </member>
        <member name="F:AnyInfo.LayerType.Unkown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:AnyInfo.LayerType.Label">
            <summary>
            标签
            </summary>
        </member>
        <member name="F:AnyInfo.LayerType.Point">
            <summary>
            点
            </summary>
        </member>
        <member name="F:AnyInfo.LayerType.Line">
            <summary>
            线
            </summary>
        </member>
        <member name="F:AnyInfo.LayerType.Area">
            <summary>
            面
            </summary>
        </member>
        <member name="T:AnyInfo.Layer">
            <summary>
            图层对象
            </summary>
        </member>
        <member name="F:AnyInfo.Layer.MaxZoomRank">
            <summary>
            30级分辨率可以显示到毫米
            </summary>
        </member>
        <member name="E:AnyInfo.Layer.NameChanged">
            <summary>
            名称改变了
            </summary>
        </member>
        <member name="M:AnyInfo.Layer.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:AnyInfo.Layer.#ctor(System.String,AnyInfo.Features.FeatureSource{AnyInfo.Features.SimpleFeatureType,AnyInfo.Features.SimpleFeature})">
            <summary>
            构造图层
            </summary>
            <param name="name"></param>
            <param name="featureSource"></param>
        </member>
        <member name="M:AnyInfo.Layer.#ctor(System.String,AnyInfo.Features.FeatureCollection{AnyInfo.Features.SimpleFeatureType,AnyInfo.Features.SimpleFeature})">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
            <param name="fc"></param>
        </member>
        <member name="M:AnyInfo.Layer.#ctor(System.String,AnyInfo.Features.FeatureCollection{AnyInfo.Features.SimpleFeatureType,AnyInfo.Features.SimpleFeature},Geo.Coordinates.IEnvelope)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
            <param name="fc"></param>
            <param name="extent"></param>
        </member>
        <member name="M:AnyInfo.Layer.Clone">
            <summary>
            克隆之，简单克隆
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Layer.Expands(AnyInfo.Layer)">
            <summary>
            两个图层扩展，合并。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:AnyInfo.Layer.LayerType">
            <summary>
            慎重使用，好像从来没用过哦，以后可能会被取消，请使用GeometryType代替。图层类型
            </summary>
        </member>
        <member name="P:AnyInfo.Layer.IsShowFeatureName">
            <summary>
            是否画出元素的名称
            </summary>
        </member>
        <member name="P:AnyInfo.Layer.IsDrawFeatureId">
            <summary>
            是否显示元素ID。主要用于调试。
            </summary>
        </member>
        <member name="P:AnyInfo.Layer.Map">
            <summary>
            地图
            </summary>
        </member>
        <member name="P:AnyInfo.Layer.UseLayerStyle">
            <summary>
            是否使用统一的格式（从图层层面）。
            </summary>
        </member>
        <member name="P:AnyInfo.Layer.PathLayerRank">
            <summary>
            路网图层的等级。等级越小地图区域越大，路网越简略。
            </summary>
        </member>
        <member name="P:AnyInfo.Layer.GeometryType">
            <summary>
            Point, Line, or Polygon。通过图层中的Features进行判断的。
            </summary>
        </member>
        <member name="P:AnyInfo.Layer.IsPathLayer">
            <summary>
            Is this layer can do path finding.
            </summary>
        </member>
        <member name="P:AnyInfo.Layer.FeatureStyle">
            <summary>
            统一样式
            </summary>  
        </member>
        <member name="P:AnyInfo.Layer.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:AnyInfo.Layer.FeatureSource">
            <summary>
            数据源
            </summary>
        </member>
        <member name="P:AnyInfo.Layer.MinZoom">
            <summary>
            The minimum zoom that the layer can be showing.
            </summary>
        </member>
        <member name="P:AnyInfo.Layer.MaxZoom">
            <summary>
            The maxmum zoom that the layer can be showing.
            </summary>
        </member>
        <member name="M:AnyInfo.Layer.ToString">
            <summary>
            字符显示
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Layer.Dispose">
            <summary>
            释放内存
            </summary>
        </member>
        <member name="M:AnyInfo.Layer.Transform(Geo.Coordinates.ICoordTransformer)">
            <summary>
            参数转换。如果其中任何一个Feature转换失败，都返回 false .
            </summary>
            <param name="trans"></param>
            <returns>if succeed, return true, else false. </returns>
        </member>
        <member name="M:AnyInfo.Layer.RemoveFeatures(AnyInfo.Features.FeatureCollection{AnyInfo.Features.SimpleFeatureType,AnyInfo.Features.SimpleFeature})">
            <summary>
            移除 Features 并重建索引。
            </summary>
            <param name="fc1"></param>
        </member>
        <member name="P:AnyInfo.Layer.LabelStyle">
            <summary>
            元素文字样式。
            </summary>
        </member>
        <member name="T:AnyInfo.LayerFactory">
            <summary>
            用于快速构建 Layer。
            </summary>
        </member>
        <member name="M:AnyInfo.LayerFactory.CreateRadarCenterLayerApprox(Geo.Coordinates.GeoCoord,System.Double)">
            <summary>
            雷达辐射图
            </summary>
            <param name="radarCoord">雷达坐标</param>
            <param name="radius">公里</param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.LayerFactory.CreateLineLayer(AnyInfo.Geometries.Polygon,System.Drawing.Size,System.Int32)">
            <summary>
            在多边形类建立。
            </summary>
            <param name="polygon"></param>
            <param name="aboutSize"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.LayerFactory.CreateLineLayer(Geo.Coordinates.IEnvelope,System.Drawing.Size,System.Int32)">
            <summary>
            依照选定的地图区域和当前屏幕大小，生成在指定Zoom下供下载地图的路网窗格。
            </summary>
            <param name="envelope"></param>
            <param name="aboutSize"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.LayerFactory.CreateCrossingRoadLayer(Geo.Coordinates.IEnvelope,Geo.Coordinates.LonLat,System.Int32)">
            <summary>
            在指定的区域内，生成多层十字道路网。用于路径规划。
            其中高层道路网提取自底层道路网。此处对半提取。
            </summary>
            <param name="envelope"></param>
            <param name="minLonLat"></param>
            <param name="rank"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.LayerFactory.SelectHalfLineString(System.Collections.Generic.List{AnyInfo.Geometries.LineString})">
            <summary>
            选择其中一半的路网。
            </summary>
            <param name="detailLineString"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.LayerFactory.CreateCrossingRoadLayer(Geo.Coordinates.IEnvelope,Geo.Coordinates.LonLat)">
            <summary>
            在指定的区域内，生成十字道路网。用于路径规划。
            </summary>
            <param name="envelope"></param>
            <param name="minLonLat"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.LayerFactory.CreatePointLayer(System.Collections.Generic.List{Geo.Coordinates.LonLat})">
            <summary>
            创建点图层
            </summary>
            <param name="lonlats"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.LayerFactory.CreatePointLayer(System.Collections.Generic.List{Geo.Coordinates.LonLat},System.String)">
            <summary>
            创建点图层
            </summary>
            <param name="lonlats"></param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.LayerFactory.CreatePointLayer(AnyInfo.Geometries.Point)">
            <summary>
            创建具有名称的点图层。
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.LayerFactory.CreatePointLayer(System.Collections.Generic.List{AnyInfo.Geometries.Point})">
            <summary>
            创建具有名称的点图层。
            </summary>
            <param name="namedPoints"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.LayerFactory.CreatePointLayer(System.Collections.Generic.List{AnyInfo.Geometries.Point},System.String)">
            <summary>
            创建点图层
            </summary>
            <param name="lonlats"></param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.LayerFactory.CreateLabelLayer(System.Collections.Generic.List{Geo.Coordinates.LonLat},System.Collections.Generic.List{System.String})">
            <summary>
            创建标签图层
            </summary>
            <param name="lonlats"></param>
            <param name="labels"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.LayerFactory.CreateLabelLayer(System.Collections.Generic.List{Geo.Coordinates.LonLat},System.Collections.Generic.List{System.String},System.String)">
            <summary>
            创建标签图层
            </summary>
            <param name="lonlats"></param>
            <param name="labels"></param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.LayerFactory.CreateLabelLayer(System.Collections.Generic.List{AnyInfo.Geometries.Point},System.Collections.Generic.List{System.String},System.String)">
            <summary>
            创建标签图层。
            </summary>
            <param name="lonlats"></param>
            <param name="labels"></param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.LayerFactory.CreateLineStringLayer(System.Collections.Generic.List{AnyInfo.Geometries.LineString},System.String,System.Int32)">
            <summary>
            创建线图层
            </summary>
            <param name="lines"></param>
            <param name="title"></param>
            <param name="lineWidth"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.LayerFactory.CreateLineStringLayer(System.Collections.Generic.List{AnyInfo.Geometries.LineString},System.String,System.Drawing.Color,System.Int32)">
            <summary>
            创建线图层
            </summary>
            <param name="lines"></param>
            <param name="title"></param>
            <param name="color"></param>
            <param name="lineWidth"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.LayerFactory.CreateLayer(AnyInfo.Features.SimpleFeature,AnyInfo.Features.SimpleFeatureType,System.String)">
            <summary>
            用一个 feature 创建一个图层。
            </summary>
            <param name="layerName"></param>
            <param name="featureType"></param>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.LayerFactory.CreateLayer(System.Collections.Generic.List{AnyInfo.Features.SimpleFeature},System.String)">
            <summary>
            用 Feature 列表创建图层。
            </summary>
            <param name="LastSelectedFeatures"></param>
            <param name="layerName"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Maps.MapNumber.GetBox">
            <summary>
            Get the Envelop.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AnyInfo.Maps.MapNumber.Zoom">
            <summary>
            缩放比例，以比例尺对应。
            </summary>
        </member>
        <member name="P:AnyInfo.Maps.MapNumber.Col">
            <summary>
            子列编号。
            </summary>
        </member>
        <member name="P:AnyInfo.Maps.MapNumber.Row">
            <summary>
            子行编号。
            </summary>
        </member>
        <member name="P:AnyInfo.Maps.MapNumber.LonNumber">
            <summary>
            百万图幅精度数字编号。起始于-180度为1.
            </summary>
        </member>
        <member name="P:AnyInfo.Maps.MapNumber.LatNumber">
            <summary>
            百万图幅纬度数字编号。起始于赤道 1 。
            </summary>
        </member>
        <member name="P:AnyInfo.Maps.MapNumber.ScaleChar">
            <summary>
            比例尺字母编号。
            </summary>
        </member>
        <member name="P:AnyInfo.Maps.MapNumber.LonLat">
            <summary>
            LonLat int the box,if it is caclulated, it will be the left bottom Coordinate.
            </summary>
        </member>
        <!-- 对于成员“M:AnyInfo.Maps.MapNumber.GetMapNumber(Geo.Coordinates.LonLat,System.Int32)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:AnyInfo.Maps.MapNumber.GetMapNumber(System.Double,System.Double,System.Char)”忽略有格式错误的 XML 注释 -->
        <member name="M:AnyInfo.Maps.MapNumber.GetLonlat(System.String)">
            <summary>
            计算该图幅西南图廓点的经、纬度:
            </summary>
            <param name="mapNumber"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Maps.MapNumber.GetLonLat(System.Int32,System.Int32,System.Int32,System.Int32,System.Char)">
            <summary>
            计算该图幅西南图廓点的经、纬度:
            </summary>
            <param name="latNumber"></param>
            <param name="lonNumber"></param>
            <param name="row"></param>
            <param name="col"></param>
            <param name="scaleChar"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Maps.ScaleUnit.GetScaleUnit(System.Char)">
            <summary>
            由字母获取字符串。
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Maps.ScaleUnit.GetLatCharFromZoom(System.Int32)">
            <summary>
            若两级没有文件夹，则自动跳到最近的有的一级。
            </summary>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Maps.SplitLayer">
            <summary>
            Splite layer into block.
            </summary>
        </member>
        <member name="T:AnyInfo.Maps.BlockNumberedMap">
            <summary>
            已经分级分块好的地图。
            </summary>
        </member>
        <member name="M:AnyInfo.Maps.BlockNumberedMap.SetCurrentBlockedLayers(AnyInfo.Map)">
            <summary>
            Get show the bocked layers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Maps.BlockNumberedMap.GetLayerPathes(Geo.Coordinates.IEnvelope,System.Int32)">
            <summary>
            Find the layer pathes to be added according the view port of the screen.
            </summary>
            <param name="viewPort"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="F:AnyInfo.Maps.BlockNumberForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.Maps.BlockNumberForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.Maps.BlockNumberForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:AnyInfo.Maps.RouteNavFlash">
            <summary>
            用于模拟导航过程中的数据传输。
            </summary>
        </member>
        <member name="M:AnyInfo.Maps.RouteNavFlash.IntelligentCarRun(System.Int32)">
            <summary>
            智能缓存下的导航数据传输。
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:AnyInfo.Maps.RouteNavFlash.MapCenterRun(System.Int32)">
            <summary>
            地图中心导航
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:AnyInfo.Maps.RouteNavFlash.BuildUpRoute">
            <summary>
            建立路径
            </summary>
        </member>
        <member name="M:AnyInfo.Maps.JbBlockMap.GetOldSameMapSheets(System.Collections.Generic.List{AnyInfo.Data.Njb.MapSheet},System.Collections.Generic.List{AnyInfo.Data.Njb.MapSheet})">
            <summary>
            获取老图幅中相同的图幅。
            </summary>
            <param name="old"></param>
            <param name="new1"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Maps.JbBlockMap.GetDifferMapSheets(System.Collections.Generic.List{AnyInfo.Data.Njb.MapSheet},System.Collections.Generic.List{AnyInfo.Data.Njb.MapSheet})">
            <summary>
            获取新的图幅
            </summary>
            <param name="old"></param>
            <param name="new1"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Common.Log">
            <summary>
            日志。用于跟踪程序错误。
            </summary>
        </member>
        <member name="F:AnyInfo.Common.Log.isDebug">
            <summary>
            是否调试
            </summary>
        </member>
        <member name="M:AnyInfo.Common.Log.DebugLog(System.String)">
            <summary>
            开发调试模式。
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:AnyInfo.Common.Setting">
            <summary>
            基础的设置
            </summary>
        </member>
        <member name="F:AnyInfo.Common.Setting.IsDebug">
            <summary>
            指示是否是调试状态。
            </summary>
        </member>
        <member name="F:AnyInfo.ServiceCenter.Form1.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.ServiceCenter.Form1.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.ServiceCenter.Form1.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="M:AnyInfo.ServiceCenter.ICatalog.register(AnyInfo.ServiceCenter.IRoadnetInfo)">
            <summary>
            注册道路网信息
            </summary>
            <param name="roadnetInfo"></param>
        </member>
        <member name="M:AnyInfo.ServiceCenter.ICatalog.findNetsCovering(AnyInfo.Geometries.Point,AnyInfo.Geometries.Point)">
            <summary>
            查找同时覆盖两个点的道路网（集合）
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.ServiceCenter.ICatalog.findSubNetsCovering(AnyInfo.ServiceCenter.IRoadnetInfo,AnyInfo.Features.SimpleFeature,AnyInfo.Geometries.Point)">
            <summary>
            在当前道路网的子网中查找同时覆盖一点和一道路要素的道路网（集合）
            </summary>
            <param name="net"></param>
            <param name="point"></param>
            <param name="roadElement"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.ServiceCenter.ICatalog.findSubNetsCovering(AnyInfo.ServiceCenter.IRoadnetInfo,AnyInfo.Geometries.Point,AnyInfo.Geometries.Point)">
            <summary>
            在当前道路网的子网中查找同时覆盖一点和一道路要素的道路网（集合）
            </summary>
            <param name="net"></param>
            <param name="point"></param>
            <param name="roadNode"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.ServiceCenter.SelectedRoadnetNode2">
            <summary>
            路网选择
            </summary>
        </member>
        <member name="P:AnyInfo.ServiceCenter.SelectedRoadnetNode2.RoadnetInfo">
            <summary>
            信息
            </summary>
        </member>
        <member name="P:AnyInfo.ServiceCenter.SelectedRoadnetNode2.MatchedRoadElement">
            <summary>
            信息
            </summary>
        </member>
        <member name="P:AnyInfo.ServiceCenter.SelectedRoadnetNode2.NearestRoadElement">
            <summary>
            最近
            </summary>
        </member>
        <member name="P:AnyInfo.ServiceCenter.SelectedRoadnetNode2.ParentNode">
            <summary>
            父节点
            </summary>
        </member>
        <member name="M:AnyInfo.ServiceCenter.SelectedRoadnetNode2.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:AnyInfo.ServiceCenter.SelectedRoadnetNode2.#ctor(AnyInfo.ServiceCenter.IRoadnetInfo,AnyInfo.Geometries.Point,AnyInfo.Geometries.Point,AnyInfo.ServiceCenter.SelectedRoadnetNode2)">
            <summary>
            构造
            </summary>
            <param name="roadnetInfo"></param>
            <param name="matchedRoadElement"></param>
            <param name="nearestRoadElement"></param>
            <param name="parentNode"></param>
        </member>
        <member name="F:AnyInfo.WinUI.ArributeTable.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.ArributeTable.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.ArributeTable.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:AnyInfo.WinUI.LayerCoordConverterForm">
            <summary>
            图层坐标实时转换。
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.LayerCoordConverterForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.LayerCoordConverterForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.LayerCoordConverterForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:AnyInfo.WinUI.CreateLayer.DefineAttributeForm">
            <summary>
            定义元素属性
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.CreateLayer.DefineAttributeForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:AnyInfo.WinUI.CreateLayer.DefineAttributeForm.LayerName">
            <summary>
            图层名称
            </summary>
        </member>
        <member name="P:AnyInfo.WinUI.CreateLayer.DefineAttributeForm.LayerType">
            <summary>
            几何类型
            </summary>
        </member>
        <member name="P:AnyInfo.WinUI.CreateLayer.DefineAttributeForm.FeatureType">
            <summary>
            元素类型
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.CreateLayer.DefineAttributeForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.CreateLayer.DefineAttributeForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.CreateLayer.DefineAttributeForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:AnyInfo.WinUI.CreateLayer.EditFeatureTypeForm">
            <summary>
            编辑元素类型
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.CreateLayer.EditFeatureTypeForm.#ctor(AnyInfo.Layer)">
            <summary>
            构造函数
            </summary>
            <param name="layer"></param>
        </member>
        <member name="P:AnyInfo.WinUI.CreateLayer.EditFeatureTypeForm.LayerName">
            <summary>
            图层名称
            </summary>
        </member>
        <member name="P:AnyInfo.WinUI.CreateLayer.EditFeatureTypeForm.LayerType">
            <summary>
            几何对象名称
            </summary>
        </member>
        <member name="P:AnyInfo.WinUI.CreateLayer.EditFeatureTypeForm.FeatureType">
            <summary>
            元素类型名称
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.CreateLayer.EditFeatureTypeForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.CreateLayer.EditFeatureTypeForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.CreateLayer.EditFeatureTypeForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:AnyInfo.WinUI.EditFeaturePropertyForm">
            <summary>
            编辑元素
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.EditFeaturePropertyForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.EditFeaturePropertyForm.#ctor(AnyInfo.Features.SimpleFeature)">
            <summary>
            构造函数
            </summary>
            <param name="feature"></param>
        </member>
        <member name="F:AnyInfo.WinUI.EditFeaturePropertyForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.EditFeaturePropertyForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.EditFeaturePropertyForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:AnyInfo.WinUI.EnableMapZoomSplashForm1">
            <summary>
            动画
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.EnableMapZoomSplashForm1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.EnableMapZoomSplashForm1.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.EnableMapZoomSplashForm1.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.EnableMapZoomSplashForm1.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.GoogleDetailTileSettingForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.GoogleDetailTileSettingForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.GoogleDetailTileSettingForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.GoogleTileSettingForm1.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.GoogleTileSettingForm1.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.GoogleTileSettingForm1.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.Graph.EdgeEditUserControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.Graph.EdgeEditUserControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.Graph.EdgeEditUserControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.NodeSelectForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.NodeSelectForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.NodeSelectForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.PathFindingSettingForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.PathFindingSettingForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.PathFindingSettingForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:AnyInfo.WinUI.PathLayerAttributeSettingForm">
            <summary>
            设置，只是提供参数，不参与计算。
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.PathLayerAttributeSettingForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.PathLayerAttributeSettingForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.PathLayerAttributeSettingForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.SetMaxNodePointErrorForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.SetMaxNodePointErrorForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.SetMaxNodePointErrorForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.SettingGraphPathesForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.SettingGraphPathesForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.SettingGraphPathesForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:AnyInfo.WinUI.IMapMouseClickExtender">
            <summary>
            扩展接口。鼠标在地图上点击
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.IMapMouseClickExtender.Run(AnyInfo.Map,System.Drawing.Point)">
            <summary>
            运行
            </summary>
            <param name="map"></param>
            <param name="location"></param>
        </member>
        <member name="F:AnyInfo.WinUI.InPutCoordForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.InPutCoordForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.InPutCoordForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:AnyInfo.WinUI.InputCoordsForm">
            <summary>
            坐标输入器
            </summary>
        </member>
        <member name="P:AnyInfo.WinUI.InputCoordsForm.Points">
            <summary>
            具有名称的点,大地坐标。
            </summary>
        </member>
        <member name="P:AnyInfo.WinUI.InputCoordsForm.IsIgnoreFirstCol">
            <summary>
            是否忽略第一列
            </summary>
        </member>
        <member name="P:AnyInfo.WinUI.InputCoordsForm.IsIgnoreFirstRow">
            <summary>
            是否忽略第一行
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.InputCoordsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.InputCoordsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AnyInfo.WinUI.InputCoordsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.LayerContolForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.LayerContolForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.LayerContolForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.LayerGenForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.LayerGenForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.LayerGenForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.MapPanelHelper.GetMouseCursor(AnyInfo.WinUI.MapTool)">
            <summary>
            根据选择的图标，设置鼠标类型。
            </summary>
            <param name="mapTool"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.WinUI.MapPanel">
            <summary>
            地图显现的载体。
            处理一些地图的基本操作，如放缩、漫游、路径规划等。
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.MapPanel.canPan">
            bool IsStartPoint = true;
        </member>
        <member name="P:AnyInfo.WinUI.MapPanel.CurrentLonLat">
            <summary>
            当前鼠标位置的经纬度。
            </summary>
        </member>
        <member name="P:AnyInfo.WinUI.MapPanel.LastSelectedFeatures">
            <summary>
            当前最后一次选中的元素。
            </summary>
        </member>
        <member name="P:AnyInfo.WinUI.MapPanel.MapMouseClickExtender">
            <summary>
            扩展事件
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.MapPanel.#ctor">
            <summary>
            Default constructor for IDE.
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.MapPanel.#ctor(AnyInfo.Map)">
            <summary>
            The most common way to construct me.
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:AnyInfo.WinUI.MapPanel.ClearPathes">
            <summary>
            清除路径
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.MapPanel.SetStartLocation(System.Drawing.Point)">
            <summary>
            设置起始点。
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:AnyInfo.WinUI.MapPanel.SetDestLocation(System.Drawing.Point)">
            <summary>
            设置目标点
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:AnyInfo.WinUI.MapPanel.Refresh">
            <summary>
            刷新，地图重绘。为节约资源不要轻易刷新，宁可手动刷新。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.MapPanel.EditFeatureProperty(System.Windows.Forms.MouseEventArgs)">
            <summary>
            修改元素的属性。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AnyInfo.WinUI.MapPanel.EditPathInfo(System.Windows.Forms.MouseEventArgs)">
            <summary>
            编辑路径信息，如单向限行。
            </summary>
            <param name="me"></param>
        </member>
        <member name="M:AnyInfo.WinUI.MapPanel.ShowSelectedFeatureInfo(System.Windows.Forms.MouseEventArgs)">
            <summary>
            信息窗口 //选择服务。
            </summary>
            <param name="me"></param>
        </member>
        <member name="M:AnyInfo.WinUI.MapPanel.MouseClickTest(System.Windows.Forms.MouseEventArgs)">
            <summary>
            鼠标点击测试。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AnyInfo.WinUI.MapPanel.RemoveSelectedFeatures">
            <summary>
            删除上次所选区域的Feature。删除后刷新。
            </summary>
        </member>
        <member name="T:AnyInfo.WinUI.MapTool">
            <summary>
            地图工具
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.MapTool.None">
            <summary>
            无
            </summary>
        </member>
        <member name="T:AnyInfo.WinUI.MapToolControl">
            <summary>
            Map too; control.
            Only to set the map panel's  map tool.
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.MapToolControl.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.MapToolControl.#ctor(AnyInfo.WinUI.MapPanel)">
            <summary>
            构造函数
            </summary>
            <param name="mapPanel"></param>
        </member>
        <member name="P:AnyInfo.WinUI.MapToolControl.ToolStrip">
            <summary>
            图标菜单
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.MapToolControl.SetMapTool(AnyInfo.WinUI.MapTool)">
            <summary>
            设置工具
            </summary>
            <param name="mapTool"></param>
        </member>
        <member name="P:AnyInfo.WinUI.MapToolControl.MapPanel">
            <summary>
            图层面板
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.MapToolControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.MapToolControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.MapToolControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:AnyInfo.WinUI.PathFindingManager">
            <summary>
            协调用户事件与路径的计算。
            主要做以下工作：
            1、设置起始点和目的点；
            2、协调各个PathFinder工作。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.PathFindingManager.#ctor(AnyInfo.Map)">
            <summary>
            构造函数
            </summary>
            <param name="map"></param>
        </member>
        <member name="P:AnyInfo.WinUI.PathFindingManager.Map">
            <summary>
            地图
            </summary>
        </member>
        <member name="P:AnyInfo.WinUI.PathFindingManager.IntegratingRouteService">
            <summary>
            集成查找
            </summary>
        </member>
        <member name="P:AnyInfo.WinUI.PathFindingManager.CanFinding">
            <summary>
            是否能够寻路。如果有PathFinder，则可以。
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.PathFindingManager._pathFinders">
            <summary>
            此处的PathFinder由外部添加进来。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.PathFindingManager.SetStart(System.Drawing.Point)">
            <summary>
            起始点
            </summary>
            <param name="sourseMouseLocation"></param>
        </member>
        <member name="M:AnyInfo.WinUI.PathFindingManager.SetStart(Geo.Coordinates.LonLat)">
            <summary>
            设置起始点。
            </summary>
            <param name="startLonlat"></param>
        </member>
        <member name="M:AnyInfo.WinUI.PathFindingManager.IsPathFindersInSameRank">
            <summary>
            是否所有的PathFinder在同一级。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.WinUI.PathFindingManager.SetDest(System.Drawing.Point)">
            <summary>
            设置目标点。
            </summary>
            <param name="destMouseLocation"></param>
        </member>
        <member name="M:AnyInfo.WinUI.PathFindingManager.SetDest(Geo.Coordinates.LonLat)">
            <summary>
            设置目标
            </summary>
            <param name="destLonLat"></param>
        </member>
        <member name="M:AnyInfo.WinUI.PathFindingManager.ComparerPathFinder(AnyInfo.IPathFinder,AnyInfo.IPathFinder)">
            <summary>
            Sort the PathFinders by rank asc.
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.PathFindingManager.ClearPaths">
            <summary>
            Clear pathes on the map.
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.PathFindingManager.GetPathFinders">
            <summary>
            外部程序通过这个函数，加入PathFinder。
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.WinUI.RoadGeneratorForm">
            <summary>
            多级路网自动生成器
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.RoadGeneratorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.RoadGeneratorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AnyInfo.WinUI.RoadGeneratorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.OpenUrlLayerForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.OpenUrlLayerForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.OpenUrlLayerForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:AnyInfo.WinUI.OpenZipFileForm">
            <summary>
            ZIp 压缩相关 
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.OpenZipFileForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.OpenZipFileForm.AddSubDirs(System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            Get layer files.
            </summary>
            <param name="destDir"></param>
            <param name="paths"></param>
        </member>
        <member name="F:AnyInfo.WinUI.OpenZipFileForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.OpenZipFileForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.OpenZipFileForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.SelectShortestAlgorithmForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.SelectShortestAlgorithmForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AnyInfo.WinUI.SelectShortestAlgorithmForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.SetLayerZoomScopeForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.SetLayerZoomScopeForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.SetLayerZoomScopeForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.SetPlaceForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.SetPlaceForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AnyInfo.WinUI.SetPlaceForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:AnyInfo.WinUI.StyleSettingForm.LabelStyle">
            <summary>
            字体样式。
            </summary>
        </member>
        <member name="P:AnyInfo.WinUI.StyleSettingForm.FeatureStyle">
            <summary>
            元素类型。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.StyleSettingForm.#ctor(AnyInfo.Layer)">
            <summary>
            构造函数
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:AnyInfo.WinUI.StyleSettingForm.#ctor(AnyInfo.Styles.IStyle)">
            <summary>
            构造函数
            </summary>
            <param name="style"></param>
        </member>
        <member name="F:AnyInfo.WinUI.StyleSettingForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.StyleSettingForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.StyleSettingForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:AnyInfo.WinUI.TileMapRegion">
            <summary>
            Googel Tile Map 存在不同地方的地图，分布式。
            </summary>
        </member>
        <member name="P:AnyInfo.WinUI.TileMapRegion.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:AnyInfo.WinUI.TileMapRegion.Region">
            <summary>
            范围
            </summary>
        </member>
        <member name="P:AnyInfo.WinUI.TileMapRegion.RankTo">
            <summary>
            结束等级
            </summary>
        </member>
        <member name="P:AnyInfo.WinUI.TileMapRegion.RankFrom">
            <summary>
            起始等级
            </summary>
        </member>
        <member name="P:AnyInfo.WinUI.TileMapRegion.SatPath">
            <summary>
            卫星路径
            </summary>
        </member>
        <member name="P:AnyInfo.WinUI.TileMapRegion.MapPath">
            <summary>
            地图路径
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.TileMapRegion.Equals(System.Object)">
             <summary>
            等于否
             </summary>
             <param name="obj"></param>
             <returns></returns>
        </member>
        <member name="M:AnyInfo.WinUI.TileMapRegion.GetHashCode">
            <summary>
            哈希数
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.WinUI.TileMapRegion.ToXml">
            <summary>
            序列化为XML
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.WinUI.TileMapRegion.ParseXml(System.Xml.XmlNode)">
            <summary>
            解析XML
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.WinUI.TileMapRegion.ParseXml(System.String)">
            <summary>
            解析XML
            </summary>
            <param name="xmlString"></param>
            <returns></returns>
        </member>
        <member name="F:AnyInfo.WinUI.TileMapRegionEditForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.TileMapRegionEditForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AnyInfo.WinUI.TileMapRegionEditForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.MapDownloaderForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.MapDownloaderForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AnyInfo.WinUI.MapDownloaderForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:AnyInfo.WinUI.PolygonTileMapDownloader">
            <summary>
            下载多边形区域内的地图瓦片
            </summary>
        </member>
        <member name="T:AnyInfo.WinUI.Amalgamation.AmalgamateTwoLayerForm">
            <summary>
            合并两个图层。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.Amalgamation.AmalgamateTwoLayerForm.#ctor(AnyInfo.Layer,AnyInfo.Layer)">
            <summary>
            构造函数
            </summary>
            <param name="layer1"></param>
            <param name="layer2"></param>
        </member>
        <member name="P:AnyInfo.WinUI.Amalgamation.AmalgamateTwoLayerForm.LayerName">
            <summary>
            图层名称
            </summary>
        </member>
        <member name="P:AnyInfo.WinUI.Amalgamation.AmalgamateTwoLayerForm.LayerType">
            <summary>
            图层类型
            </summary>
        </member>
        <member name="P:AnyInfo.WinUI.Amalgamation.AmalgamateTwoLayerForm.FeatureType">
            <summary>
            元素类型
            </summary>
        </member>
        <member name="P:AnyInfo.WinUI.Amalgamation.AmalgamateTwoLayerForm.NewLayer">
            <summary>
            新生成的图层
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.Amalgamation.AmalgamateTwoLayerForm.AmalgamateAndGenFeatureType">
            <summary>
            不仅是新建一个FeatureType，而且要将两个待合并图层的FeatureType的对应项目修改为新建的Title。
            </summary>
            <returns></returns>
        </member>
        <member name="F:AnyInfo.WinUI.Amalgamation.AmalgamateTwoLayerForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.Amalgamation.AmalgamateTwoLayerForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.Amalgamation.AmalgamateTwoLayerForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.Settings.DatabaseConnectSettingForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.Settings.DatabaseConnectSettingForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.Settings.DatabaseConnectSettingForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:AnyInfo.WinUI.Settings.NavSetForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.Settings.NavSetForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.WinUI.Settings.NavSetForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:AnyInfo.WinUI.TreeMenu">
            <summary>
            树形菜单。
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.TreeMenu.#ctor(System.Windows.Forms.TreeView)">
            <summary>
            构造函数，以树形控件初始化
            </summary>
            <param name="treeView"></param>
        </member>
        <member name="M:AnyInfo.WinUI.TreeMenu.#ctor(System.Collections.Generic.List{AnyInfo.Map},System.Windows.Forms.TreeView)">
            <summary>
            构造函数
            </summary>
            <param name="maps"></param>
            <param name="treeView"></param>
        </member>
        <member name="M:AnyInfo.WinUI.TreeMenu.AddMap(AnyInfo.Map)">
            <summary>
            添加一个地图
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:AnyInfo.WinUI.TreeMenu.IsMapNode(System.Windows.Forms.TreeNode)">
            <summary>
            判断是否是地图节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.WinUI.TreeMenu.RemoveMap(System.String)">
            <summary>
            移除指定名称的地图
            </summary>
            <param name="mapName"></param>
        </member>
        <member name="M:AnyInfo.WinUI.TreeMenu.RemoveLayer(System.String,System.String)">
            <summary>
            移除指定名称的地图图层
            </summary>
            <param name="mapName"></param>
            <param name="layerName"></param>
        </member>
        <member name="M:AnyInfo.WinUI.TreeMenu.GetMapName(System.Windows.Forms.TreeNode)">
            <summary>
            获取地图名称
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.WinUI.TreeMenu.GetSelectedMap">
            <summary>
            获取选中的地图
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.WinUI.TreeMenu.GetCheckedLayers">
            <summary>
            返回当前地图多选框选中的图层。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.WinUI.TreeMenu.GetSelectedLayer">
            <summary>
            获取选中的图层
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.WinUI.TreeMenu.GetLayerNode(System.String,System.String)">
            <summary>
            获取指定地图和图层的树节点
            </summary>
            <param name="mapName"></param>
            <param name="layerName"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.WinUI.TreeMenu.GetMapNode(System.String)">
            <summary>
            由地图名字获取地图节点
            </summary>
            <param name="mapName"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.WinUI.TreeMenu.GetMap(System.String)">
            <summary>
            由地图名字获取地图，若无，则返回 null
            </summary>
            <param name="mapName"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.WinUI.TreeMenu.MapsToTreeMenus">
            <summary>
            由地图和图层初始化 TreeView 导航控件
            </summary>
        </member>
        <member name="M:AnyInfo.WinUI.TreeMenu.TreeMenuToMaps">
            <summary>
            由导航树更地图和图层。
            用于删除了节点后，更新地图及图层，设置图层可见性等。
            </summary> 
        </member>
        <member name="T:AnyInfo.Map">
            <summary>
            地图，由多个图层组成。用于显示空间数据，是数据与人的交互界面。
            中心坐标，比例尺和屏幕显示尺寸是地图正确显示的三要素。
            </summary>
        </member>
        <member name="M:AnyInfo.Map.ContainsLayer(AnyInfo.Layer)">
            <summary>
            是否包含指定图层。
            </summary>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Map.AddLayer(AnyInfo.Layer)">
            <summary>
            添加图层，如果有同名的则不添加。
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:AnyInfo.Map.AddLayers(System.String[])">
            <summary>
            添加图层到地图。参数为路径。
            </summary>
            <param name="pathes"></param>
        </member>
        <member name="M:AnyInfo.Map.ContainsLayer(System.String)">
            <summary>
            是否包含指定名称的图层。
            </summary>
            <param name="layerName"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Map.GetLayer(System.String)">
            <summary>
            通过名称获取图层对象。
            </summary>
            <param name="layerName"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Map.RemoveLayersExcept(System.Collections.Generic.List{System.String})">
            <summary>
            Remove the layers not contained, that is to say only to remain the specified layers.
            </summary>
            <param name="layerNames"></param>
        </member>
        <member name="M:AnyInfo.Map.RemoveLayers(System.Collections.Generic.List{AnyInfo.Layer})">
            <summary>
            删除地图列表。
            </summary>
            <param name="layers"></param>
        </member>
        <member name="M:AnyInfo.Map.RemoveAllLayers">
            <summary>
            删除所有地图。
            </summary>
        </member>
        <member name="M:AnyInfo.Map.RemoveLayer(AnyInfo.Layer)">
            <summary>
            移除图层
            </summary>
            <param name="layer">图层</param>
        </member>
        <member name="M:AnyInfo.Map.RemoveLayer(System.String)">
            <summary>
            通过名称移除图层
            </summary>
            <param name="layerName"></param>
        </member>
        <member name="M:AnyInfo.Map.GetMapImage">
            <summary>
            获取地图图片。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Map.GetMapImage(Geo.Coordinates.IEnvelope)">
            <summary>
            获取地图图片
            </summary>
            <param name="viewPort"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Map.GetLayerByName(System.String)">
            <summary>
            通过名称获取地图
            </summary>
            <param name="layerName"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Map.GetLonLat(System.Drawing.Point)">
            <summary>
            屏幕坐标转为大地坐标。
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Map.GetScreenPoint(Geo.Coordinates.LonLat)">
            <summary>
            大地坐标转换为屏幕坐标
            </summary>
            <param name="lonLat"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Map.GetDrawingPoint(Geo.Coordinates.LonLat)">
            <summary>
            大地坐标转换为屏幕坐标(图像坐标)
            </summary>
            <param name="lonLat"></param>
            <returns></returns>
        </member>
        <member name="P:AnyInfo.Map.ViewPort">
            <summary>
            地图视口。
            </summary>
        </member>
        <member name="P:AnyInfo.Map.ApproxGroundResolution">
            <summary>
            全面改成 米/像素,即一像素代表多少米。
            墨卡托投影的地图随纬度的变化而变化。此处去视口中心的维度。
            </summary>
        </member>
        <member name="P:AnyInfo.Map.Zoom">
            <summary>
            设置地图缩放级别，只要设置值就引发 ZoomChanged 事件。 
            </summary>
        </member>
        <member name="M:AnyInfo.Map.GetApproxGroundResolution_DegPerPiex">
            <summary>
            获取大致的地面分辨率,单位 度/像素。赤道方向。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Map.GetGroundResolution(System.Double)">
            <summary>
            获取地面分辨率.米/像素
            </summary>
            <param name="latitude"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Map.GetGroundResolution(System.Double,System.Int32)">
            <summary>
            地面分辨率。单位(米/像素)，即一像素代表多少米。墨卡托投影的地图随纬度的变化而变化。
            分辨率：分辨物理量细节的能力。
            </summary>
            <param name="latitude">维度，墨卡托维度长度不一致。</param>
            <param name="zoom">地图缩放级别。 同 ZOOM</param>
            <returns>地面分辨率</returns>
        </member>
        <member name="M:AnyInfo.Map.GetRoomFromGroundResolution(System.Double,System.Double)">
            <summary>
            从地面分辨率获取等级
            </summary>
            <param name="latitude"></param>
            <param name="groundResolution"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Map.SetProperMaxZoom(System.Double,System.Double)">
            <summary>
            根据地图宽度和分辨率设置合适的地图放缩等级。
            </summary>
            <param name="mapWidthDu"></param>
            <param name="screenWidthPixe"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Map.MoveDown">
            <summary>
            View port move down
            </summary>
        </member>
        <member name="P:AnyInfo.Map.UseBlockLayers">
            <summary>
            是否使用预配置图层块。
            </summary>
        </member>
        <member name="P:AnyInfo.Map.CenterLonLat">
            <summary>
            中心坐标
            </summary>
        </member>
        <member name="F:AnyInfo.Map.MaxZoomRank">
            <summary>
            0-23，共24级,如果设置到25级则会溢出报错，原因暂时不明。2014.08.30 已解决
            </summary>
        </member>
        <member name="M:AnyInfo.Map.GetZooms">
            <summary>
            缩放
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Map.GetZoomObjects">
            <summary>
            缩放
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Map.GetSelectingBufferInDegree">
            <summary>
            以度表示的选择缓冲。
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Map.RemoveFeatures(System.Drawing.Point)">
            <summary>
            删除选中的Feature。
            删除后还需要重建索引。
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:AnyInfo.Map.RemoveFeatures(Geo.Coordinates.Envelope)">
            <summary>
             删除选中的Feature。
            删除后还需要重建索引。
            </summary>
            <param name="scopeEnve"></param>
        </member>
        <member name="M:AnyInfo.Map.GetSelectedFeatures(System.Drawing.Point)">
            <summary>
            鼠标点选中的所有Feature。
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Map.GetSelectedFeatures(Geo.Coordinates.Envelope)">
            <summary>
            地图中选择的区域。
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="P:AnyInfo.Map.HasLayer">
            <summary>
            是否有图层
            </summary>
        </member>
        <member name="M:AnyInfo.Map.RenameLayer(System.String,System.String)">
            <summary>
            图层重命名
            </summary>
            <param name="oldName"></param>
            <param name="newName"></param>
        </member>
        <member name="T:AnyInfo.Patterns.Visitors.IVisitor">
            <summary>
            访问者设计模式接口
            </summary>
        </member>
        <member name="T:AnyInfo.Service.PoiService">
            <summary>
            兴趣点
            </summary>
        </member>
        <member name="M:AnyInfo.Service.PoiService.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:AnyInfo.Service.PoiService.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="poiFilePath"></param>
        </member>
        <member name="M:AnyInfo.Service.PoiService.GetPois(Geo.Coordinates.LonLat,System.Double)">
            <summary>
            Get the specified POIs in a scope.
            </summary>
            <param name="myLocation"></param>
            <param name="scopeMeter">meter</param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Service.PoiService.GetPois(Geo.Coordinates.LonLat,System.Double,System.String)">
            <summary>
            Find the POIs in scope which matches the keyword.
            keyword including POI types like bank, bus stop etc.
            </summary>
            <param name="myLocation"></param>
            <param name="scopeMeter"></param>
            <param name="keyword"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Service.PoiService.WhereIam(Geo.Coordinates.LonLat)">
            <summary>
            Find the nearst place to let me kown where I am.
            The location usualy is sent by mobile phones which equiped a GPS chip.
            </summary>
            <param name="lonlat"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Service.PoiService.FindPlaceByName(System.String)">
            <summary>
            Find a place by keywords.
            </summary>
            <param name="keyWords"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Service.ToponymLayerAdapter">
            <summary>
            POI layer adapter
            </summary>
        </member>
        <member name="M:AnyInfo.Service.ToponymLayerAdapter.ExportToponynFileFromNamedPointLayer(AnyInfo.Layer)">
            <summary>
            export the poi data into  a xml file.
            </summary>
            <param name="namedPointLayer"></param>
        </member>
        <member name="M:AnyInfo.Service.ToponymLayerAdapter.BuidPoiLayer(System.Collections.Generic.List{AnyInfo.Service.ToponymEntity})">
            <summary>
            Build a layer that contains POI
            </summary>
            <param name="pointInfos"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Styles.LabelStyle">
            <summary>
            标签样式
            </summary>
        </member>
        <member name="M:AnyInfo.Styles.LabelStyle.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:AnyInfo.Styles.LabelStyle.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="label"></param>
        </member>
        <member name="M:AnyInfo.Styles.LabelStyle.#ctor(System.Drawing.Color,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="color"></param>
            <param name="aboutSize"></param>
        </member>
        <member name="P:AnyInfo.Styles.LabelStyle.Label">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:AnyInfo.Styles.LabelStyle.FontFamily">
            <summary>
            字体
            </summary>
        </member>
        <member name="P:AnyInfo.Styles.PointStyle.Diameter">
            <summary>
            点的半径。
            </summary>
        </member>
        <member name="T:AnyInfo.Styles.PolygonStyle">
            <summary>
            多边形样式
            </summary>
        </member>
        <member name="P:AnyInfo.Styles.PolygonStyle.BorderWidth">
            <summary>
            宽度
            </summary>
        </member>
        <member name="P:AnyInfo.Styles.PolygonStyle.BorderColor">
            <summary>
            边界颜色
            </summary>
        </member>
        <member name="P:AnyInfo.Styles.PolygonStyle.FillColor">
            <summary>
            填充颜色
            </summary>
        </member>
        <member name="M:AnyInfo.Styles.PolygonStyle.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:AnyInfo.Styles.PolygonStyle.#ctor(System.Drawing.Color)">
            <summary>
            构造
            </summary>
            <param name="fillColor"></param>
        </member>
        <member name="M:AnyInfo.Styles.PolygonStyle.#ctor(System.Drawing.Color,System.Int32,System.Drawing.Color)">
            <summary>
            构造        /// </summary>
            <param name="fillColor"></param>
            <param name="borderWidth"></param>
            <param name="borderColor"></param>
        </member>
        <member name="M:AnyInfo.Styles.PolygonStyle.GetDefault">
            <summary>
            默认
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Styles.Style">
            <summary>
            样式
            </summary>
        </member>
        <member name="M:AnyInfo.Styles.Style.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="P:AnyInfo.Styles.Style.Color">
            <summary>
            颜色
            </summary>
        </member>
        <member name="M:AnyInfo.Styles.Style.DeepCone">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Styles.StyleFactory">
            <summary>
            样式工厂
            </summary>
        </member>
        <member name="M:AnyInfo.Styles.StyleFactory.GetDefaultFeatureStyle(AnyInfo.Geometries.GeometryType)">
            <summary>
            默认样式
            </summary>
            <param name="geometryType"></param>
            <returns></returns>
        </member>
        <member name="T:AnyInfo.Styles.SymbolImage">
            <summary>
            标记图像。
            </summary>
        </member>
        <member name="M:AnyInfo.Styles.SymbolImage.DefaultImage">
            <summary>
            默认图
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Styles.SymbolImage.Cross(System.Drawing.Color,System.Int32,System.Int32,System.Int32)">
            <summary>
            加号 “+”
            </summary>
        </member>
        <member name="M:AnyInfo.Styles.SymbolImage.DiagCross(System.Drawing.Color,System.Int32,System.Int32,System.Int32)">
            <summary>
            斜十字 “X”
            </summary>
        </member>
        <member name="M:AnyInfo.Styles.SymbolImage.Circle(System.Drawing.Color,System.Int32,System.Int32,System.Int32)">
            <summary>
            空心圆圈“o”
            </summary>
        </member>
        <member name="M:AnyInfo.Styles.SymbolImage.FilledCircle(System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            实心圆圈“.”
            </summary>
        </member>
        <member name="M:AnyInfo.Styles.SymbolImage.Square(System.Drawing.Color,System.Int32,System.Int32,System.Int32)">
            <summary>
            空心矩形“口”
            </summary>
        </member>
        <member name="M:AnyInfo.Styles.SymbolImage.FilledSquare(System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            实心矩形
            </summary>
        </member>
        <member name="M:AnyInfo.Styles.SymbolImage.Triangle(System.Drawing.Color,System.Int32,System.Int32,System.Int32)">
            <summary>
            空心三角形 
            </summary>
        </member>
        <member name="M:AnyInfo.Styles.SymbolImage.FilledTriangle(System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            实心三角形
            </summary>
        </member>
        <member name="M:AnyInfo.Styles.SymbolImage.Star(System.Drawing.Color,System.Int32,System.Int32,System.Int32)">
            <summary>
            空心五角星
            </summary>
        </member>
        <member name="M:AnyInfo.Styles.SymbolImage.FilledStar(System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            实心五角星
            </summary>
        </member>
        <member name="M:AnyInfo.Styles.SymbolImage.VerticalBar(System.Drawing.Color,System.Int32,System.Int32,System.Double)">
            <summary>
            竖线
            </summary>
        </member>
        <member name="T:AnyInfo.Styles.TrueTypeStyle">
            <summary>
            维基百科，自由的百科全书 http://zh.wikipedia.org/zh-cn/TrueType
            TrueType是由美国苹果公司和微软公司共同开发的一种电脑轮廓字体类型标准。
            这种类型字体文件的扩展名是.ttf，类型代码是tfil。
            在80年代末，苹果公司为了对抗Adobe公司的Type 1PostScript字体，
            设计开发了TrueType，之后微软加入了开发，后来视窗系统的字体格式基本上都统一成TrueType，
            而在苹果的麦金塔系统中却成了PostScript和TrueType对立的局面。
            TrueType后来也被Linux等系统使用，成为标准字体。
            TrueType的主要强项在于它能给开发者提供关于字体显示、不同字体大小的像素级显示等的高级控制。
            微软还开发了一个叫“智能字体”的技术，在1994年称为TrueType Open，然后在与Adobe Type 1 技术合并后改名为 OpenType。
            在新开发的OpenType类型字体中，可以选择PostScript还是TrueType作为记述方式
            
            
            自己造的字体符号。
            </summary>
        </member>
        <member name="P:AnyInfo.Styles.TrueTypeStyle.HollowPentagon">
            <summary>
            空心五角星
            </summary>
        </member>
        <member name="P:AnyInfo.Styles.TrueTypeStyle.SolidPentagon">
            <summary>
            实心五角星
            </summary>
        </member>
        <member name="P:AnyInfo.Styles.TrueTypeStyle.SolidTriangle">
            <summary>
            实心三角形
            </summary>
        </member>
        <member name="P:AnyInfo.Styles.TrueTypeStyle.HollowTriangle">
            <summary>
            空心三角形
            </summary>
        </member>
        <member name="P:AnyInfo.Styles.TrueTypeStyle.AntiSolidTriangle">
            <summary>
            倒立实心三角形
            </summary>
        </member>
        <member name="P:AnyInfo.Styles.TrueTypeStyle.HollowCircle">
            <summary>
            空心圆
            </summary>
        </member>
        <member name="P:AnyInfo.Styles.TrueTypeStyle.SolidCircle">
            <summary>
            实心圆
            </summary>
        </member>
        <member name="P:AnyInfo.Styles.TrueTypeStyle.SolidSquare">
            <summary>
            实心正方形
            </summary>
        </member>
        <member name="P:AnyInfo.Styles.TrueTypeStyle.DoubleCircle">
            <summary>
            双圈圆
            </summary>
        </member>
        <member name="T:AnyInfo.Winform.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.add_16x16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.addlayer_wiz">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.AnyInfoSplash">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.arrow">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.comment1__add__16x16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.comment1__edit__16x16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.comment1__edit__16x161">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.comment2__add__16x16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.delete_16x16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.delete_edit">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.delete_feature_mode">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.flag3_16x16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.hand_16x16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.icon16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.ID_FILE_OPEN">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.ID_SOAPDEBUGGER_BREAKONNEXTREQUEST">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.ID_SOAPDEBUGGER_BREAKONNEXTRESPONSE">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.information_16x16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.layergroup_16x16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.lcgroup">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.lclayerpoint">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.measurement1_16x16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.new_freehand_mode">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.new_line_mode">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.new_point_mode">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.new_polygon_mode">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.opentype_1_">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.Pin">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.PinCoord">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.polygon">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.remove_vertext_mode">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.right_16x16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.selection_mode">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.table__edit__16x16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.table__edit__16x161">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.table_borders_16x16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.trim_feature_mode">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.web__add__16x16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.zoom_in_16x16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:AnyInfo.Winform.Properties.Resources.zoom_out_16x16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="T:AnyInfo.Winform.IShowLayer">
            <summary>
            具有显示图层的事件。
            </summary>
        </member>
        <member name="F:AnyInfo.Winform.LayerUI.CoordScaleAdjustForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:AnyInfo.Winform.LayerUI.CoordScaleAdjustForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AnyInfo.Winform.LayerUI.CoordScaleAdjustForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:AnyInfo.Winform.LayerUI.EllipsoidTransformForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:AnyInfo.Winform.LayerUI.EllipsoidTransformForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AnyInfo.Winform.LayerUI.EllipsoidTransformForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:AnyInfo.Winform.InputSecondsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:AnyInfo.Winform.InputSecondsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AnyInfo.Winform.InputSecondsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:AnyInfo.Winform.Settings.JbSettingForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:AnyInfo.Winform.Settings.JbSettingForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AnyInfo.Winform.Settings.JbSettingForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:AnyInfo.Extends.BuildPointsForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.Extends.BuildPointsForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.Extends.BuildPointsForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:AnyInfo.Extends.MyMapMouseClickExtender">
            <summary>
            扩展鼠标点击事件。
            </summary>
        </member>
        <member name="F:AnyInfo.Extends.SettingExtendingXmlForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.Extends.SettingExtendingXmlForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.Extends.SettingExtendingXmlForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:AnyInfo.Global">
            <summary>
            singleton classi store in  memory that is the differen
             
            </summary>
        </member>
        <member name="P:AnyInfo.Global.IsUnitedPathFining">
            <summary>
            是否是联合路径规划
            </summary>
        </member>
        <member name="P:AnyInfo.Global.NewLayerFeatureType">
            <summary>
            新建图层时用的。
            </summary>
        </member>
        <member name="T:AnyInfo.MapForm">
            <summary>
            Window form for one map to display and interact with users.
            </summary>
        </member>
        <member name="M:AnyInfo.MapForm.#ctor">
            <summary>
            地图窗口
            </summary>
        </member>
        <member name="M:AnyInfo.MapForm.LoadTopoFiles(AnyInfo.Layer,System.String)">
            <summary>
            强制重新生成拓扑。
            </summary>
            <param name="pathLayer"></param>
            <param name="topoPath"></param>
        </member>
        <member name="M:AnyInfo.MapForm.LoadTopoFiles(AnyInfo.Layer)">
            <summary>
            弹出对话框选择并载入指定图层的拓扑文件。
            </summary>
            <param name="pathLayer"></param>
        </member>
        <member name="M:AnyInfo.MapForm.GetPathFinder(System.String)">
            <summary>
            路径规划类
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.MapForm.SetStartLocation(Geo.Coordinates.LonLat)">
            <summary>
            设置路径规划出发点
            </summary>
            <param name="lonLat"></param>
        </member>
        <member name="M:AnyInfo.MapForm.SetDestLocation(Geo.Coordinates.LonLat)">
            <summary>
            设置路径规划目标点。
            </summary>
            <param name="lonLat"></param>
        </member>
        <member name="F:AnyInfo.MapForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.MapForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.MapForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:AnyInfo.SingleMapForm">
            <summary>
            Window form for one map to display and interact with users.
            </summary>
        </member>
        <member name="M:AnyInfo.SingleMapForm.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AnyInfo.SingleMapForm.#ctor(AnyInfo.Map)">
            <summary>
            构造函数
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:AnyInfo.SingleMapForm.SetMap(AnyInfo.Map)">
            <summary>
            设置地图
            </summary>
            <param name="map"></param>
        </member>
        <member name="P:AnyInfo.SingleMapForm.MapPanel1">
            <summary>
            绘图板
            </summary>
        </member>
        <member name="P:AnyInfo.SingleMapForm.Map">
            <summary>
            地图
            </summary>
        </member>
        <member name="M:AnyInfo.SingleMapForm.MapsToTreeMenus">
            <summary>
            地图树形菜单暂时
            </summary>
        </member>
        <member name="M:AnyInfo.SingleMapForm.AddAndShowLayer(AnyInfo.Layer)">
            <summary>
            添加并显示图层
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:AnyInfo.SingleMapForm.AddAndShowLayer(System.Collections.Generic.List{AnyInfo.Layer})">
            <summary>
            添加并显示图层
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:AnyInfo.SingleMapForm.Refresh">
            <summary>
            为节约资源不要轻易刷新，宁可手动刷新。
            </summary>
        </member>
        <member name="M:AnyInfo.SingleMapForm.LoadTopoFiles(AnyInfo.Layer,System.String)">
            <summary>
            强制重新生成拓扑。
            </summary>
            <param name="pathLayer"></param>
            <param name="topoPath"></param>
        </member>
        <member name="M:AnyInfo.SingleMapForm.LoadTopoFiles(AnyInfo.Layer)">
            <summary>
            加载拓扑
            </summary>
            <param name="pathLayer"></param>
        </member>
        <member name="M:AnyInfo.SingleMapForm.GetPathFinders">
            <summary>
            路径寻找
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.SingleMapForm.GetPathFinder(System.String)">
            <summary>
            路径规划类
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="F:AnyInfo.SingleMapForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.SingleMapForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.SingleMapForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:AnyInfo.Setting">
            <summary>
            设置
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.LastDirecory">
            <summary>
            上次目录
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.TempDirectory">
            <summary>
            临时目录
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.PlaceCoords">
            <summary>
            快速转到位置
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.TileMapRegions">
            <summary>
            瓦片区域
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.JbBasicDir">
            <summary>
            军标基础路径
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.JbEnabled">
            <summary>
            启用军标
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.UseJbGlobalMaps">
            <summary>
            使用全局军标地图
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.MapSheets">
            <summary>
            地图
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.MaxNodePointError">
            <summary>
            最小误差
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.PathLayerRankIsUpFirst">
            <summary>
            路径图层
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.HideGraphEdgesLayer">
            <summary>
            隐藏路径图层
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.HideGraphNodesLayer">
            <summary>
            隐藏节点图层
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.GraphPath">
            <summary>
            图层路径
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.EdgesLayerPath">
            <summary>
            图层路径
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.NodesLayerPath">
            <summary>
            点图层路径
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.ExtendingXmlPath">
            <summary>
            路径
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.ExtendingParamName">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.ExtendingShowTime">
            <summary>
            时间
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.UseGlobalMaps">
            <summary>
            全局
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.RootMapDirectory">
            <summary>
            根目录
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.LayerSuffixes">
            <summary>
            尾椎
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.DatabaseServer">
            <summary>
            数据库
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.DatabaseName">
            <summary>
            数据库
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.DatabaseLoginName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.DatabasePassword">
            <summary>
            密码
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.NavBgMapType">
            <summary>
            类型
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.NavInterval">
            <summary>
            单位毫秒
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.NavUseUserWindow">
            <summary>
            窗口
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.NavClientSize">
            <summary>
            导航窗口
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.SETTING_FILE_PATH">
            <summary>
            设置文件路径
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.JbSettingPath">
            <summary>
            军标设置路径
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.NorthArrow">
            <summary>
            指北针
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.InfoCur">
            <summary>
            信息鼠标
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.HandCur">
            <summary>
            手型鼠标
            </summary>
        </member>
        <member name="F:AnyInfo.Setting.PinCur">
            <summary>
            订书机
            </summary>
        </member>
        <member name="M:AnyInfo.Setting.TryClearTempDir">
            <summary>
            Try to clear the temp absDirectory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.Setting.CheckShowTileDir">
            <summary>
            检查地图文件夹设置是否正确。
            </summary>
        </member>
        <member name="M:AnyInfo.Setting.CheckRealTimeDownload">
            <summary>
            设置实时下载网络数据。
            </summary>
        </member>
        <member name="M:AnyInfo.Setting.ReadConfigFromXml(System.String)">
            <summary>
            读取配置文件
            </summary>
            <param name="settingPath"></param>
        </member>
        <member name="M:AnyInfo.Setting.TryReadConfigFromXml">
            <summary>
            从指定的路径中读取系统配置。
            </summary>
        </member>
        <member name="M:AnyInfo.Setting.TryWriteConfigToXml">
            <summary>
            将更改过的系统配置写到配置文件中。
            </summary>
        </member>
        <member name="F:AnyInfo.Tools.Maps.CacuMapNumberForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.Tools.Maps.CacuMapNumberForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.Tools.Maps.CacuMapNumberForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:AnyInfo.Tools.Maps.SplitLayerForm">
            <summary>
            打断图层
            </summary>
        </member>
        <member name="M:AnyInfo.Tools.Maps.SplitLayerForm.#ctor(AnyInfo.Layer)">
            <summary>
            构造函数
            </summary>
            <param name="layer"></param>
        </member>
        <member name="F:AnyInfo.Tools.Maps.SplitLayerForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.Tools.Maps.SplitLayerForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.Tools.Maps.SplitLayerForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:AnyInfo.Tools.Caculators.NetPathFluxCaculatorForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.Tools.Caculators.NetPathFluxCaculatorForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.Tools.Caculators.NetPathFluxCaculatorForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:AnyInfo.Tools.Caculators.TileDownCaculatorForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.Tools.Caculators.TileDownCaculatorForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.Tools.Caculators.TileDownCaculatorForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:AnyInfo.Tools.CoordConvert.DegRadConvertForm">
            <summary>
            角度转换
            </summary>
        </member>
        <member name="F:AnyInfo.Tools.CoordConvert.DegRadConvertForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.Tools.CoordConvert.DegRadConvertForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.Tools.CoordConvert.DegRadConvertForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:AnyInfo.Tools.CoordConvert.MapInfoMifConvertForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.Tools.CoordConvert.MapInfoMifConvertForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.Tools.CoordConvert.MapInfoMifConvertForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:AnyInfo.Tools.MercatorCoordForm1.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.Tools.MercatorCoordForm1.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.Tools.MercatorCoordForm1.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:AnyInfo.Tools.Images.GoogleMapSaveSaForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.Tools.Images.GoogleMapSaveSaForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.Tools.Images.GoogleMapSaveSaForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:AnyInfo.Tools.OptionForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.Tools.OptionForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.Tools.OptionForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:AnyInfo.MainForm">
            <summary>
            The entrance class of AnyInfo.
            </summary>
        </member>
        <member name="M:AnyInfo.MainForm.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:AnyInfo.MainForm.btn_openUrl_Click(System.Object,System.EventArgs)">
            <summary>
            Open　Url　layer, First connects, downloads and stores it into a temp absDirectory, then open it.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:AnyInfo.MainForm._lastInputPath">
            <summary>
            存储最后一次读入文件的地址
            </summary>
        </member>
        <member name="M:AnyInfo.MainForm.buttonItem_setGraphFilePathes_Click(System.Object,System.EventArgs)">
            <summary>
            设置路径规划文件路径。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AnyInfo.MainForm.Delete">
            <summary>
            Delete layer or map which determined by the node selected.
            </summary>
        </member>
        <member name="M:AnyInfo.MainForm.ShowInfoInTaskBar(System.String)">
            <summary>
            在状态栏显示信息。
            </summary>
            <param name="message"></param>
        </member>
        <member name="F:AnyInfo.MainForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:AnyInfo.MainForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:AnyInfo.MainForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:AnyInfo.NewLayerBuilder">
            <summary>
            新图层创建
            </summary>
        </member>
        <member name="M:AnyInfo.NewLayerBuilder.AddNewPolygonLayer(System.Collections.Generic.List{Geo.Coordinates.LonLat},AnyInfo.WinUI.MapPanel,System.String)">
            <summary>
            将新的用户新建的多面形状保存到自己的图层。
            </summary>
            <param name="lonlates"></param>
            <param name="mapPanel"></param>
            <param name="layerName"></param>
        </member>
        <member name="M:AnyInfo.NewLayerBuilder.CreatePolygonLayer(System.Collections.Generic.List{Geo.Coordinates.XYZ},System.String)">
            <summary>
            通过国标建立面状图层
            </summary>
            <param name="points"></param>
            <param name="layerName"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.NewLayerBuilder.AddPolygonToLayer(System.Collections.Generic.List{Geo.Coordinates.XYZ},AnyInfo.Layer)">
            <summary>
            添加面形状到图层
            </summary>
            <param name="points"></param>
            <param name="layer"></param>
        </member>
        <member name="M:AnyInfo.NewLayerBuilder.CreatePolygonFeature(System.Collections.Generic.List{Geo.Coordinates.LonLat},AnyInfo.Features.SimpleFeatureType)">
            <summary>
            获取多面体元素
            </summary>
            <param name="lonlates"></param>
            <param name="featureType"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.NewLayerBuilder.CreatePolygonFeature(System.Collections.Generic.List{Geo.Coordinates.XYZ},AnyInfo.Features.SimpleFeatureType)">
            <summary>
            获取多面体元素
            </summary>
            <param name="points"></param>
            <param name="featureType"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.NewLayerBuilder.SaveNewLineStringToLayer(System.Collections.Generic.List{Geo.Coordinates.LonLat},AnyInfo.WinUI.MapPanel,System.String)">
            <summary>
            将新的用户路径保存到自己的图层
            </summary>
            <param name="TempPoints"></param>
            <param name="mapPanel"></param>
            <param name="layerName"></param>
        </member>
        <member name="M:AnyInfo.NewLayerBuilder.AddLineToLayer(System.Collections.Generic.List{Geo.Coordinates.XYZ},AnyInfo.Layer)">
            <summary>
            添加到线图层
            </summary>
            <param name="points"></param>
            <param name="layer"></param>
        </member>
        <member name="M:AnyInfo.NewLayerBuilder.CreateUserRoadLayer(System.Collections.Generic.List{Geo.Coordinates.XYZ},System.String)">
            <summary>
            创建用户道路图层
            </summary>
            <param name="points"></param>
            <param name="layerName"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.NewLayerBuilder.CreateLineStringFeature(System.Collections.Generic.List{Geo.Coordinates.XYZ},AnyInfo.Features.SimpleFeatureType)">
            <summary>
            获取线图层元素
            </summary>
            <param name="points"></param>
            <param name="featureType"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.NewLayerBuilder.AddNewPointLayer(Geo.Coordinates.LonLat,AnyInfo.WinUI.MapPanel,System.String,System.Boolean)">
            <summary>
            保存新点到图层
            </summary>
            <param name="lonLat"></param>
            <param name="mapPanel"></param>
            <param name="pointLayerName"></param>
            <param name="refresh"></param>
        </member>
        <member name="M:AnyInfo.NewLayerBuilder.CreatePointLayer(Geo.Coordinates.LonLat,System.String)">
            <summary>
            创建点图层
            </summary>
            <param name="lonLat"></param>
            <param name="pointLayerName"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.NewLayerBuilder.CreatePointFeature(Geo.Coordinates.LonLat,AnyInfo.Features.SimpleFeatureType)">
            <summary>
            创建点元素
            </summary>
            <param name="lonLat"></param>
            <param name="featureType"></param>
            <returns></returns>
        </member>
        <member name="M:AnyInfo.NewLayerBuilder.AddFeatureToLayer(AnyInfo.Features.SimpleFeature,AnyInfo.Layer)">
            <summary>
            增加新元素到图层
            </summary>
            <param name="feature"></param>
            <param name="layer"></param>
        </member>
        <member name="M:AnyInfo.Program.Main">
            <summary>
            应用程序的主入口点。
            </summary>
        </member>
        <member name="M:AnyInfo.Tests.TempLayerTest.CreateLineLayer">
            <summary>
            Create a line layer.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
